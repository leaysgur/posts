{
  "title": "WebRTCで帯域を指定する方法2つ",
  "html": "<p>またも、まったく目新しいトピックではないです。</p><p>個人でメンテしてるWebRTCのモジュールに機能を追加するときに思い出したしせっかくなのでメモ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>方法は2つ</h3>\n    \n<ul>\n<li>SDPによる`b=AS`/`b=TIAS`の指定</li>\n<li>`RTCRtpSender`の`getParameters()` + `setParameters()`</li>\n</ul><p>短いWebRTCの歴史の中でも、前者は割と昔から使えて、後者は割と新しいめの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を使うとできる。</p><p>TPOにあわせて選べばよくて、どちらかだけ使え！というものではないです。</p>\n\n</div>\n<div class=\"section\">\n    <h3>SDPによる指定</h3>\n    <p>いわゆるSDP mungingといって、SDPを手動で書き換える必要がある。</p><p>普通にブラウザやらが提供する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を触ってるだけならそんな機会は不要なはずですが、こればっかりは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が用意されてないのでやるしかない。</p>\n\n    <blockquote>\n        <p><a href=\"https://tools.ietf.org/html/rfc3556\">RFC 3556 - Session Description Protocol (SDP) Bandwidth Modifiers for RTP Control Protocol (RTCP) Bandwidth</a><br />\n<a href=\"https://tools.ietf.org/html/rfc3890\">RFC 3890 - A Transport Independent Bandwidth Modifier for the Session Description Protocol (SDP)</a></p>\n\n    </blockquote>\n<p>書き足したくなるであろう属性は主に2つ。</p>\n\n<ul>\n<li>`b=AS:1000`</li>\n<li>`b=TIAS:1000`</li>\n</ul><p>`AS`は、トランスポート全体の帯域で、単位は`kbps`。<br />\n`AS`は`Application Specific Maximum`の略らしい。（Mどこいったんや）</p><p>`TIAS`は、メディアだけの帯域で、単位は`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/bps\">bps</a>`。<br />\n`TI`は`Transport Independent`の略で、`TIAS`のほうが`AS`より上位互換って感じ。</p><p>なんで2つもあるかというと、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>では`AS`しか指定できず、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>では`TIAS`しか効かないなどの都合があるから。<br />\nただJSEP的にも、`AS`しかなかったらよしなに計算して`TIAS`と解釈しましょうねみたいな記述もあったりして、我々はブラウザさまの意のままに・・・。</p><p>SDP的には、`b=`では他にも`RS`やら`RR`やらでRTCPの帯域を指定できるらしい。</p><p>ちなみに対象となるのはオファーを出した当人 = 自身が受け取るもののみ。<br />\nつまり、この帯域に絞って送ってくれ！っていうためのもの。</p><p>自分も帯域を絞って送信したい場合は、アンサーでも同じようにSDPを修正してもらう必要がある。</p><p>これは淡い記憶による蛇足ですが、この属性はメディアレベルに書けるやつであるものの、実際はトランスポート単位の指定になってた気がしてて、基本的にBUNDLE（ポート多重化）される昨今だと、特定の映像だけ帯域を抑えたいみたいなことができなかった気がする。</p><p>なのでざっくり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/P2P\">P2P</a>間で流れる帯域をまとめて指定したいならともかく、それ以外のケースでは少し使いにくい・・。</p><p>まぁそんなとき（ってかだいたいそんなときなんやけど）に使えるのが次に紹介する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>。</p>\n\n</div>\n<div class=\"section\">\n    <h3>RTCRtpSenderで指定</h3>\n    <p>送信してるメディアについての話。</p><p>既に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CD%A5%B4%A5%B7%A5%A8%A1%BC%A5%B7%A5%E7%A5%F3\">ネゴシエーション</a>が済んでてメディアが送信できてる場合、そこには`RTCRtpSender`がいるはず。<br />\n映像なら`video`の、音声なら`audio`の`RTCRtpSender`がいるはず。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>sender<span class=\"synIdentifier\">]</span> = pc.getSenders();\n<span class=\"synComment\">// or</span>\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[{</span> sender <span class=\"synIdentifier\">}]</span> = pc.getTransceivers();\n</pre><p>で、これに生えてる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>から、どんな具合にメディアを送ってるのかが取れる。<br />\nこのパラメータを修正して、セットすることで帯域の指定ができる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> params = sender.getParameters();\nparams.encodings<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>.maxBitrate = 1 * 1000; <span class=\"synComment\">// bps</span>\n\nawait sender.setParameters(params);\n</pre><p>これで、特定の映像だけ調整できるし、SDPは変更しないので再<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CD%A5%B4%A5%B7%A5%A8%A1%BC%A5%B7%A5%E7%A5%F3\">ネゴシエーション</a>も不要！万事解決！</p><p>というわけで、ほとんどの需要に応えるにはこっちを使えばおっけー。</p>\n\n<div class=\"section\">\n    <h4>おまけ: 1</h4>\n    <p>今回もあります落とし穴。<br />\n1つは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>の仕様として<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B6%A5%AF%A5%B7%A5%E7%A5%F3\">トランザクション</a>的なものを意識しないといけない点。</p><p>端的に書くとコレがダメ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> params = sender.getParameters();\nparams.encodings<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>.maxBitrate = 1 * 1000; <span class=\"synComment\">// bps</span>\n\n<span class=\"synComment\">// 何かの拍子にgetしちゃうと</span>\nsender.getParameters();\n\n<span class=\"synComment\">// この最初のparamsの賞味期限が切れて怒られる</span>\nawait sender.setParameters(params);\n</pre><p>なので`getParameters()`と`setParameters()`は必ず連続的に呼ぶ必要がある。</p>\n\n</div>\n<div class=\"section\">\n    <h4>おまけ: 2</h4>\n    <p>ブラウザによって`getParameters()`で返ってくる値が違う（ことがある）。<br />\nことがあるっていうのは、このパラメータを指定するチャンスは、最初にメディアを送信するときにもできるから。</p><p>端的に書くと、単に`addTransceiver(track)`しただけのとき、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>は空のオブジェクトを返してくる。</p><p>なので、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// params = {};</span>\nparams.encodings<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>.maxBitrate = 1 * 1000; <span class=\"synComment\">// encodingsはundefinedなのでSyntaxエラー</span>\n</pre><p>っていうことにつまづかないようにコードを書く必要がある。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> params = sender.getParameters();\n<span class=\"synStatement\">if</span> (!params.encodings)\n  params.encodings = <span class=\"synIdentifier\">[{}]</span>;\n\nparams.encodings<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>.maxBitrate = 1 * 1000;\nawait sender.setParameters(params);\n</pre><p>みたいに。</p>\n\n</div>\n<div class=\"section\">\n    <h4>おまけ: 3</h4>\n    <p>そういうことなら、こんなコードで統一すれば全ブラウザいけるのでは？って思ったそこのあなた向け。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> params = sender.getParameters();\nparams.encodings = <span class=\"synIdentifier\">[{</span> maxBitrate: 1 * 1000 <span class=\"synIdentifier\">}]</span>;\nawait sender.setParameters(params);\n</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>はそれを許しません！</p><p>というのも、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>の`getParameters()`は多分に情報の詰まったオブジェクトを返すので、このコードだと既存のオブジェクトに入ってたはずの、ReadOnlyなプロパティを消して`setParameters()`することになってしまって怒られる。</p><p>なので、</p>\n\n<ul>\n<li>既存のプロパティは尊重して</li>\n<li>プロパティがなかったときだけ新規作成する</li>\n</ul><p>おまけ:2のコードにしないと、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%ED%A5%B9%A5%D6%A5%E9%A5%A6%A5%B6\">クロスブラウザ</a>で動作しないです。</p>\n\n</div>\n</div>"
}
