{
  "title": "0からはじめるFlow Part.2",
  "html": "<p>前回のPart.1では導入編ということで環境を整えるところまで。<br />\n今回からは各ファイルに実際に型をつけていくところを。</p><p>そしてその過程でハマったものについて・・・。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>最初に結論</h3>\n    <p>Flowの導入を迷ってるそこのあなた！</p><p>それははじめたてのプロジェクトですか？そうでないなら要注意。<br />\n既存のプロジェクトに導入する場合、</p>\n\n<ul>\n<li>元コードを型安全なFlowに怒られないコードに修正していくのがそもそも大変だったり</li>\n<li>Classプロパティに型をつけると突然Babelの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>が失敗するようになったり（Part.1を参照</li>\n<li>大した処理がない、更新頻度が低い、...etcなど、型の恩恵が薄くただ徒労感を感じたり</li>\n<li>そもそも困っても世間に情報があまり見当たらなくてつらかったり</li>\n</ul><p>なんしかまぁ色々と起こるので、それなりに大変です。</p><p>俺は結局最初のモチベーションであったウデマエ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AB%A5%A4%A5%D6\">アーカイブ</a>への導入は挫折。<br />\nでもやりかけで終わりたくなかったので、気合でスーパーイカメーカーに導入しました。</p><p>ただ新規のプロジェクトならすべからく恩恵に預かれると思うので、オススメです。<br />\nさてさて、以下はそんな過程で培った知見たちです。</p>\n\n</div>\n<div class=\"section\">\n    <h3>まず最初にドキュメントを</h3>\n    <p>そもそも型と無縁な暮らしを送ってきたJSerが、ドキュメントも読まずに何ができるんだという話です。</p><p>ついつい手を動かしたくなるけども、ぐっとこらえて少なくとも公式のドキュメントは全部読む。<br />\n手戻りしたくないならなおさら読む。</p>\n\n    <blockquote>\n        <p><a href=\"https://flowtype.org/docs/quick-reference.html\">Flow | Quick Reference</a></p>\n\n    </blockquote>\n<p>このLANGUAGE REFERENCEは一通り目を通すべし。<br />\n型をつけるための記述方法にどんなバリエーションがあるかを最初に知っておく。</p><br />\n<p>次はココ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/facebook/flow/tree/master/lib\">flow/lib at master &middot; facebook/flow &middot; GitHub</a></p>\n\n    </blockquote>\n<p>Flowが用意してくれてる型定義の一覧。<br />\nブラウザネイティブのメソッド呼んだときとか、Polyfillに型を当てる時とかに有用。</p><p>自分で定義しなくても、React関連のライブラリは一部ココで既に定義されてたりするんやなーってのを見ておく。</p><br />\n<p>最後のコレは知ってなくてもなんとかなる。</p>\n\n    <blockquote>\n        <p><a href=\"http://sitr.us/2015/05/31/advanced-features-in-flow.html#existential-types\">Advanced features in Flow - sitr.us</a><br />\n<a href=\"https://github.com/facebook/flow/blob/master/src/typing/type_annotation.ml#L147-L328\">flow/type_annotation.ml at master &middot; facebook/flow &middot; GitHub</a></p>\n\n    </blockquote>\n<p>Flowにはなんと、ドキュメントにのってない機能がある！（後でちょっとだけ紹介するけど</p><p>最初のがそれについて書かれた記事（しかし1年前）で、コードでそれが定義されてるらしき部分。<br />\nこの記事にも載ってないやつとか定義されてたりするけど、これ使いこなしてる人はいるんやろうか・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>型の定義について</h3>\n    \n<div class=\"section\">\n    <h4>require|importしてるライブラリに型をつける</h4>\n    <p>`npm`で入れたコード自体は最初に`[ignore]`してFlowのターゲットから外した。<br />\nけど、それを使うタイミングはまた別の話で、使うものは適当に型を付ける必要がある。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>declare module <span class=\"synConstant\">'module-name'</span> <span class=\"synIdentifier\">{</span>\n  declare <span class=\"synIdentifier\">var</span> exports: any;\n<span class=\"synIdentifier\">}</span>\n</pre><p>もちろんきっちり型指定してもいいけど、エラー回避するだけなら最低限はコレで良い。</p>\n\n</div>\n<div class=\"section\">\n    <h4>型のimport</h4>\n    <p>`.flowconfig`の`[libs]`で指定したファイルで定義した型であれば、別にどこのソースからでも使える。<br />\nどっかのサンプルでいちいち全部`require|import`してるのを見た気がするけど、そんなことしなくてよろしい。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ネイティブの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>の返り値がわからんとき</h4>\n    <p>たとえば`localStorage.getItem()`とか。</p><p>最初に紹介したリンクの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>のやつを見て、localStorageなら、 <a href=\"https://github.com/facebook/flow/blob/master/lib/dom.js\">https://github.com/facebook/flow/blob/master/lib/dom.js</a> に書いてあるようにする。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// あればstring、ないならnullなので ? がいる</span>\n<span class=\"synStatement\">const</span> foo: ?string = localStorage.getItem(<span class=\"synConstant\">'foo'</span>);\n</pre><p>そのほかPolyfillのライブラリ系はだいたい探せば書いてある。<br />\n`Object$Assign`とか。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> canvas: HTMLCanvasElement = <span class=\"synStatement\">document</span>.createElement(<span class=\"synConstant\">'canvas'</span>);\n<span class=\"synStatement\">const</span> ctx: ?CanvasRenderingContext2D = canvas.getContext(<span class=\"synConstant\">'2d'</span>); <span class=\"synComment\">// ? が重要</span>\n<span class=\"synStatement\">if</span> (ctx) <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canvas\">canvas</a>のにだいぶハマった。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Destructuring</h4>\n    <p>便利なあいつに型を付けたいとき。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> A = <span class=\"synIdentifier\">{</span> a: <span class=\"synConstant\">'1'</span>, b: 2, c: <span class=\"synConstant\">true</span> <span class=\"synIdentifier\">}</span>;\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> a, b, c <span class=\"synIdentifier\">}</span>: <span class=\"synIdentifier\">{</span> a: string, b: number, c: <span class=\"synStatement\">boolean</span> <span class=\"synIdentifier\">}</span> = A;\n\n<span class=\"synComment\">// コレはダメ</span>\n<span class=\"synComment\">// const { a: string, b: number, c: boolean } = A;</span>\n</pre><p>って具合に後ろに型をつける。<br />\n公式のDestructuringのページに書いてないからねコレ！</p><p>ついでに、普通のオブジェクトに型をつけるときは、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> A: <span class=\"synIdentifier\">{</span>\n  a: string, b: number, c: <span class=\"synStatement\">boolean</span>,\n<span class=\"synIdentifier\">}</span> = <span class=\"synIdentifier\">{</span> a: <span class=\"synConstant\">'1'</span>, b: 2, c: <span class=\"synConstant\">true</span> <span class=\"synIdentifier\">}</span>;\n</pre><p>とまあ型と値がさっきと逆になるので注意。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Type<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9\">エイリアス</a></h4>\n    <p>FluxのActionとか、似たようなデータの塊を共通の型にまとめたい時に使える。<br />\n`class`に対する`interface`みたいな。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>type Suit =\n  | <span class=\"synConstant\">&quot;Diamonds&quot;</span>\n  | <span class=\"synConstant\">&quot;Clubs&quot;</span>\n  | <span class=\"synConstant\">&quot;Hearts&quot;</span>\n  | <span class=\"synConstant\">&quot;Spades&quot;</span>;\n\ntype Rank =\n  | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10\n  | <span class=\"synConstant\">&quot;Jack&quot;</span>\n  | <span class=\"synConstant\">&quot;Queen&quot;</span>\n  | <span class=\"synConstant\">&quot;King&quot;</span>\n  | <span class=\"synConstant\">&quot;Ace&quot;</span>;\n\ntype Card = <span class=\"synIdentifier\">{</span>\n  suit: Suit,\n  rank: Rank,\n<span class=\"synIdentifier\">}</span>\n</pre><p>こうしておくと、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> c1: Card = <span class=\"synIdentifier\">{</span> suit: <span class=\"synConstant\">'Spades'</span>, rank: <span class=\"synConstant\">'Ace'</span> <span class=\"synIdentifier\">}</span>; <span class=\"synComment\">// ok</span>\n<span class=\"synStatement\">const</span> c2: Card = <span class=\"synIdentifier\">{</span> suit: <span class=\"synConstant\">'Spades'</span> <span class=\"synIdentifier\">}</span>; <span class=\"synComment\">// ng</span>\n</pre><p>これはよく使う機能なはず。</p>\n\n</div>\n<div class=\"section\">\n    <h4>$Shape<T> とかいうドキュメントには載ってない機能</h4>\n    <p>もうちょい厳密にオブジェクトのプロパティを縛りたい場合に使う・・？</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> c1: Card = <span class=\"synIdentifier\">{</span> suit: <span class=\"synConstant\">'Spades'</span>, rank: 2, other: 1 <span class=\"synIdentifier\">}</span>; <span class=\"synComment\">// ok</span>\n<span class=\"synStatement\">const</span> c2: $Shape&lt;Card&gt; = <span class=\"synIdentifier\">{</span> suit: <span class=\"synConstant\">'Spades'</span>, rank: 2, other: 1 <span class=\"synIdentifier\">}</span>; <span class=\"synComment\">// ng</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h4>`$Keys`とかいうのもある</h4>\n    <p>おなじくドキュメントには載ってないけどこう書ける。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> TYPES = <span class=\"synIdentifier\">{</span>\n  <span class=\"synConstant\">&quot;Diamonds&quot;</span>: <span class=\"synConstant\">&quot;Diamonds&quot;</span>,\n  <span class=\"synConstant\">&quot;Clubs&quot;</span>:    <span class=\"synConstant\">&quot;Clubs&quot;</span>,\n  <span class=\"synConstant\">&quot;Hearts&quot;</span>:   <span class=\"synConstant\">&quot;Hearts&quot;</span>,\n  <span class=\"synConstant\">&quot;Spades&quot;</span>:   <span class=\"synConstant\">&quot;Spades&quot;</span>\n<span class=\"synIdentifier\">}</span>;\n\ntype Types = $Keys&lt;<span class=\"synStatement\">typeof</span> TYPES&gt;;\n</pre><p>としておいて</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> type1: Types = <span class=\"synConstant\">'Diamonds'</span>; <span class=\"synComment\">// ok</span>\n<span class=\"synStatement\">const</span> type2: Types = <span class=\"synConstant\">'Fooo'</span>;     <span class=\"synComment\">// ng</span>\n</pre><p>型定義って・・・普通にjsと組合せられるんか！！！</p><p>てことはこれ、ファイルまたいで書けたら割といいのでは？？？って思いますよねー。<br />\nそこについては後述。<br />\n<br />\n</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Flowに怒られる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a></h3>\n    \n<div class=\"section\">\n    <h4>オブジェクトに数値キーはダメ</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 元コード</span>\n<span class=\"synStatement\">const</span> CONST = <span class=\"synIdentifier\">{</span>\n  1: <span class=\"synConstant\">'foo'</span>,\n  2: <span class=\"synConstant\">'bar'</span>,\n<span class=\"synIdentifier\">}</span>;\n\n<span class=\"synComment\">// なおした</span>\n<span class=\"synStatement\">const</span> CONST = <span class=\"synIdentifier\">{</span>\n  <span class=\"synConstant\">'1'</span>: <span class=\"synConstant\">'foo'</span>,\n  <span class=\"synConstant\">'2'</span>: <span class=\"synConstant\">'bar'</span>,\n<span class=\"synIdentifier\">}</span>;\n</pre><p>ダメったらダメ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ビット<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>でキャストするのダメ</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 元コード</span>\n<span class=\"synIdentifier\">function</span> foo(val) <span class=\"synIdentifier\">{</span>\n  val = val|0;\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// 型付けた（ら怒られた）</span>\n<span class=\"synIdentifier\">function</span> foo(_val: string) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> val: number = _val|0;\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// なおした</span>\n<span class=\"synIdentifier\">function</span> foo(_val: string) <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">let</span> val: number = parseInt(_val, 10);\n  val = isNaN(val) ? 0 : val;\n<span class=\"synIdentifier\">}</span>\n</pre><p><s>うへーめんどくせぇー</s>横着すんなってことですかね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Dynamic Type Tests</h4>\n    <p>こういう時に使う。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// ev.targetはEventTargetでもあるけど、`value`があるのはそのターゲットであるHTMLInputElement</span>\nonChangeInput(ev: Event) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> action: SetTextAction = <span class=\"synIdentifier\">{</span>\n    target: <span class=\"synIdentifier\">this</span>.props.partsName,\n    text:   ev.target.value <span class=\"synComment\">// ココでエラー</span>\n  <span class=\"synIdentifier\">}</span>;\n  <span class=\"synIdentifier\">this</span>.dispatch(<span class=\"synConstant\">'set:text'</span>, action);\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// よって、Dynamic Type Testsして回避する</span>\nonChangeInput(ev: Event) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">if</span> (ev.target <span class=\"synStatement\">instanceof</span> HTMLInputElement) <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> action: SetTextAction = <span class=\"synIdentifier\">{</span>\n      target: <span class=\"synIdentifier\">this</span>.props.partsName,\n      text:   ev.target.value\n    <span class=\"synIdentifier\">}</span>;\n    <span class=\"synIdentifier\">this</span>.dispatch(<span class=\"synConstant\">'set:text'</span>, action);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>面倒くさいって思ってはいけない・・これが型をつけるということ・・。<br />\n<br />\n</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>React関連</h3>\n    \n<div class=\"section\">\n    <h4>React<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a></h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> Foo <span class=\"synStatement\">extends</span> React.Component <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// stateも同じように</span>\n  props: <span class=\"synIdentifier\">{</span>\n    p1: string,\n  <span class=\"synIdentifier\">}</span>;\n  <span class=\"synComment\">// staticならstaticってつける</span>\n  onClickFoo: () =&gt; void;\n  \n\n  <span class=\"synComment\">// 以下は今まで通り</span>\n  onClickFoo(ev: Event) =&gt; <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// ...</span>\n  <span class=\"synIdentifier\">}</span>\n  \n  render() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> p1, <span class=\"synIdentifier\">}</span> = <span class=\"synIdentifier\">this</span>.props;\n    <span class=\"synStatement\">return</span> (\n      &lt;button onClick=<span class=\"synIdentifier\">{this</span>.onClickFoo<span class=\"synIdentifier\">}</span>&gt;<span class=\"synIdentifier\">{</span>p1<span class=\"synIdentifier\">}</span>!&lt;/button&gt;\n    );\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h4>Functional<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a></h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> Foo: <span class=\"synType\">Function</span> = (<span class=\"synIdentifier\">{</span>\n  props,\n<span class=\"synIdentifier\">}</span>: <span class=\"synIdentifier\">{</span>\n  props: string;\n<span class=\"synIdentifier\">}</span>): ?React$Element =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">if</span> (props === <span class=\"synConstant\">'noop'</span>) <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> <span class=\"synStatement\">null</span>;\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synStatement\">return</span> (\n    &lt;div&gt;Flow <span class=\"synStatement\">with</span> <span class=\"synIdentifier\">{</span>props<span class=\"synIdentifier\">}</span>&lt;/div&gt;\n  );\n<span class=\"synIdentifier\">}</span>\n</pre><p>なんかごちゃごちゃしてきたなー・・・。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>わからないこと</h3>\n    \n<div class=\"section\">\n    <h4>そもそも型に不慣れ</h4>\n    <p>効率的な・より厳密な型の付け方がわからない。<br />\nあのドキュメントに載ってない機能の使いドコロとか。<br />\nそもそも全ての宣言に型をつける必要はあるのかとか。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9\">ジェネリクス</a>なんていつ使ったら良いんだ感がすごい。</p><p>まぁ必要に応じて学べば良いとは思うものの、何で勉強するもの？他の型のある言語から来た人はサラッといけるんかね？</p>\n\n</div>\n<div class=\"section\">\n    <h4>型をどこに書くか</h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%CE%A5%C6%A1%BC%A5%B7%A5%E7%A5%F3\">アノテーション</a>はコードの中に書くしかないと思う。<br />\nただ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9\">エイリアス</a>とかまでコード側に書く・・？別のところにまとめたいよね・・？</p><p>どっちがメジャーなの・・？</p>\n\n</div>\n<div class=\"section\">\n    <h4>CONSTを型側で参照する</h4>\n    <p>定数は定数で、コード側にあってしかるべきって思うはず。<br />\n`[libs]`で指定した型定義のファイルでは`import`とか使えないし、どうにかならんかと画策したところ。</p>\n\n<ul>\n<li>`[libs]`で定数を`export`してるモジュールを指定しちゃう</li>\n<li>すると、`[libs]`配下でもその変数が見えるようになる</li>\n<li>ただし、本体コード側で指定したモジュールの存在が消され、Flowとしてはエラーになる</li>\n<li>でもBabel的には<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>できるので、コードは動く</li>\n</ul><p>といった気持ち悪い状態でよければなんとかできそう。<br />\n気持ち悪い。</p>\n\n    <blockquote>\n        <p>定数をエクスポートしてるファイルで、一緒に型もエクスポートすれば、違う場所から型インポートができるようになるって話を聞いた。<br />\nやるならこっちのが良いですな！</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>es6-promiseの型</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>declare module <span class=\"synConstant\">'es6-promise'</span> <span class=\"synIdentifier\">{</span>\n  decalre <span class=\"synStatement\">class</span> Promise <span class=\"synStatement\">extends</span> Promise <span class=\"synIdentifier\">{}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>こうじゃない・・？</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>inconsistent use of library definitions module.\n*** Recursion limit exceeded ***</pre><p>とか言われる。</p>\n\n</div>\n<div class=\"section\">\n    <h4>extends React.Componentしたクラスで</h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>間のpropsをチェックしたい場合。<br />\nというか、チェックしたい場合しかないと思うけど・・。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// P.js</span>\n<span class=\"synStatement\">const</span> P = module.exports = (<span class=\"synIdentifier\">{</span> p1 <span class=\"synIdentifier\">}</span>: <span class=\"synIdentifier\">{</span> p1: string <span class=\"synIdentifier\">}</span>) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> (\n    &lt;div&gt;<span class=\"synIdentifier\">{</span>p1<span class=\"synIdentifier\">}</span> is string!&lt;/div&gt;\n  );\n<span class=\"synIdentifier\">}</span>;\n\n<span class=\"synComment\">// App.js</span>\n<span class=\"synStatement\">const</span> P = require(<span class=\"synConstant\">'./p.jsx'</span>);\n<span class=\"synStatement\">const</span> A = () =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> (\n    &lt;P p1=<span class=\"synIdentifier\">{</span>123<span class=\"synIdentifier\">}</span> <span class=\"synConstant\">/&gt; /* p1 はstring!! */</span>\n  );\n<span class=\"synIdentifier\">}</span>;\n</pre><p>この便利なやつですが、</p>\n\n<ul>\n<li>普通にReact.Componentを使ってるものには効く</li>\n<li>ただスーパーイカメーカーでは一部で`mizchi/flumpt`を使ってる\n<ul>\n<li>なので、いくつかの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>が`React.Component`ではなく、`flumpt.Component`</li>\n</ul></li>\n<li>すると↑のチェックが効かない</li>\n</ul><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>declare module <span class=\"synConstant\">'flumpt'</span> <span class=\"synIdentifier\">{</span>\n  declare <span class=\"synStatement\">class</span> Component <span class=\"synStatement\">extends</span> React$Component <span class=\"synIdentifier\">{</span>\n    dispatch: (eventName: string, ...args: any<span class=\"synIdentifier\">[]</span>) =&gt; <span class=\"synStatement\">boolean</span>;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>こういう型にしてもダメだったのでお手上げ中。<br />\nその他のチェックは効いてるっぽいんやけども。</p>\n\n</div>\n<div class=\"section\">\n    <h4>クラスにつける型</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> Foo <span class=\"synStatement\">extends</span> React.Component <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// コレいる？</span>\n  onClickCancel: () =&gt; void;\n\n  constructor() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">super</span>();\n    <span class=\"synIdentifier\">this</span>.onClickCancel = <span class=\"synIdentifier\">this</span>.onClickCancel.bind(<span class=\"synIdentifier\">this</span>);\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synComment\">// ココで型つけてるやん！</span>\n  onClickCancel(ev: Event): void <span class=\"synIdentifier\">{</span>\n    ev.preventDefault();\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>ちなみに、`constructor()`でやってる`bind()`の処理をやらない場合は、怒られないです。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>紆余曲折あったものの、Flow良いと思います！<br />\nやはり型があることの恩恵を一部でも体感できたのがデカい。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%BF%BF%E4%CF%C0\">型推論</a>がすごい</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/typo\">typo</a>とかもすぐわかるし <- 重要</li>\n<li>型の知識がつくとDOMの仕様書とかも読みやすくなる</li>\n<li>変数名から型を匂わせる記載が消えてすっきり</li>\n<li>コード読む方もわかりやすくなるはず</li>\n</ul><p>少なくともいつまでたっても<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>が遅いTypeScriptに行くよりは、Flowの方がいいかなーと個人的には。</p><p>にしても全然情報無いのはなんで・・？<br />\n誰も使ってないのか、使ってるけど内緒にしてるのか、はたまた・・。</p>\n\n</div>"
}
