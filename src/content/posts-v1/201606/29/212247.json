{
  "title": "Node学園 21時限目 -ES Modules Meetup- に行ってきたメモ #tng21",
  "html": "<p>そしてLTで発表もしてきました。<br />\n発表資料はコレです。</p>\n\n    <blockquote>\n        <p><a href=\"http://leader22.github.io/slides/node_gakuen-21/\">0&#x304B;&#x3089;&#x306F;&#x3058;&#x3081;&#x308B;Flow</a></p>\n\n    </blockquote>\n<p>この記事の末尾に、発表後の補足も少し加えてます。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>今日こそわかる ES Modules by @teppeis</h3>\n    \n    <blockquote>\n        <p><a href=\"http://www.slideshare.net/teppeis/you-dont-know-es-modules\">You don&#39;t know ES Modules</a></p>\n\n    </blockquote>\n<p>あなたはまだ本当のES Modulesを知らない・・・！</p>\n\n<div class=\"section\">\n    <h4>歴史のおさらい</h4>\n    \n<ul>\n<li>Moduleパターン</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AMD\">AMD</a>（`define` -> `require`）</li>\n<li>CommonJS（Node.jsでおなじみ同期）</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>これらの問題</h4>\n    \n<ul>\n<li>動的である\n<ul>\n<li>何に依存してるか実行されるまでわからない</li>\n<li>Browserify, Webpackではそもそも動的にロードできない</li>\n</ul></li>\n<li>標準ではない\n<ul>\n<li>特定の3rdパーティに依存することになる</li>\n<li>ライブラリ作る度にそれ用の対応が・・</li>\n</ul></li>\n<li>拡張できない</li>\n<li>循環参照</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>そこでES Modules</h4>\n    \n<ul>\n<li>`export( default)` -> `import`</li>\n<li>パース時に依存解決してくれる</li>\n<li>なんたって<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Web%C9%B8%BD%E0\">Web標準</a></li>\n<li>モジュールとして定義すれば、`use strict`強制</li>\n<li>`default`をつけないで、変数をそのまま`export`もできる\n<ul>\n<li>けどその場合、なんて名前で`import`すればいいかわからない</li>\n<li>1ファイル1モジュールからやるのオススメ</li>\n</ul></li>\n<li><a href=\"https://github.com/rollup/rollup\">GitHub - rollup/rollup: Next-generation ES6 module bundler</a></li>\n<li>Edgeは静的にパースして先にメモリ割当とかやってくれる</li>\n<li>ESでは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>だけを規定\n<ul>\n<li>読み込み方法とかパスは規定しない</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ScriptとModule</h4>\n    \n<ul>\n<li>ES6的には、パースターゲットとして2種類ある</li>\n<li>実行側が指定する</li>\n<li>Module\n<ul>\n<li>`use strict`強制</li>\n<li>変数はモジュール内でローカルに</li>\n<li>TopLevel`this`が`undefined`</li>\n<li>`await`も<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CD%BD%CC%F3%B8%EC\">予約語</a>に</li>\n<li>HTMLコメントが書けなくなる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ECMAScript\">ECMAScript</a>で決めてないこと</h4>\n    \n<ul>\n<li>Moduleの指定方法</li>\n<li>パス解決\n<ul>\n<li>絶対URL、`/`、`./`、`../`からの相対URL以外はSyntaxError</li>\n<li>`import 'lodash'`はダメで、`import './lodash.js'`まで必要</li>\n<li>今やれてるのはNode.jsの文化的なアレ、やりたいならフックで</li>\n</ul></li>\n<li>Loader <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></li>\n<li>このへん決めてるのは <a href=\"https://github.com/whatwg/loader\">GitHub - whatwg/loader: Loader Standard</a></li>\n<li>ブラウザでの挙動は <a href=\"https://github.com/whatwg/html\">GitHub - whatwg/html: HTML Standard</a>\n<ul>\n<li>`＜script type=\"module\"＞`</li>\n<li>非対応ブラウザではただのデータブロックになる</li>\n<li>`＜script /＞`ごとのスコープになる</li>\n<li>`defer`属性がついたのと同じになる</li>\n<li>`async`属性はオプショナル</li>\n<li>`crossorigin`属性がないと、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Cookie\">Cookie</a>が乗らない</li>\n</ul></li>\n<li>CDNのような外部オリジンの`import`には、CORSヘッダが必須</li>\n<li>`new Worker('worker.js', { type: 'module' })`すると、中で`importScript()`できなくなる</li>\n<li>モジュールはrealm（≒ frame）単位でメモ化される\n<ul>\n<li>よって同一モジュールへのリクエストは1度のみ</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>いつ決まるのか</h4>\n    \n<ul>\n<li>ブラウザへの実装状況はまだまだ・・</li>\n<li>論点はいろいろある</li>\n<li>ES Modulesの検出方法\n<ul>\n<li>ブラウザは`type=\"module\"`</li>\n<li>Node.jsでどうしよう</li>\n<li>`use module`とか`.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mjs\">mjs</a>`にしようとか`package.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>`に書くとか</li>\n<li>なんしかめっちゃ揉めてる</li>\n</ul></li>\n<li>パス解決</li>\n<li>CommonJSとの互換性</li>\n</ul><p>7月のTC39のミーティングで一波乱あるらしい・・・！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ECMAScript\">ECMAScript</a> as a Living Standard by @azu</h3>\n    \n    <blockquote>\n        <p><a href=\"http://azu.github.io/slide/2016/node-es/ecmascript.html\">ECMAScript as a Living Standard</a></p>\n\n    </blockquote>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ECMAScript\">ECMAScript</a>はただの大きなプロジェクトと思って良い\n<ul>\n<li>Nodeと違ってフォーマルｗ</li>\n</ul></li>\n<li>ES2015から1年ごとのリリースサイクルになった\n<ul>\n<li>このベースを作ったのがまず功績</li>\n</ul></li>\n<li><a href=\"https://github.com/asciidwango/js-primer\">GitHub - asciidwango/js-primer: JavaScript&#x306E;&#x5165;&#x9580;&#x66F8;</a> を書いてる</li>\n<li>ES 2016\n<ul>\n<li>`Generator`が`new`できなくなった</li>\n<li>`Array.includes`が入った</li>\n<li>などなど</li>\n</ul></li>\n<li>仕様が変わるときのコミットには、以下の目印が\n<ul>\n<li>Normalative</li>\n<li>Layerling</li>\n<li>Editorial</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>TC39</h4>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ECMAScript\">ECMAScript</a>を策定する企業の集まり</li>\n<li>挙動が変わるものは、Consensusが必要になる</li>\n<li>既存のWebで使われてるものは難しい\n<ul>\n<li><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/usage/\">API usage on the web platform - Microsoft Edge Development</a></li>\n</ul></li>\n<li>maximally minimalという考え方で落とし所を探ったり</li>\n<li>Stage: 実装段階\n<ul>\n<li>`0`から`4`</li>\n<li>`4`になったら次の`ES20**`に入る</li>\n<li>最近だと`async/await`がStage3にいる</li>\n</ul></li>\n<li>開発者がこのプロセスに参加できる\n<ul>\n<li>ブラウザのフラグON/OFFとか</li>\n<li>Babelで試すとか</li>\n</ul></li>\n<li>開発者のフィードバック重要\n<ul>\n<li>Issueを立てたり</li>\n<li>ES Discussに投げたり</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ECMAScript\">ECMAScript</a>は大きな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>プロジェクト</h4>\n    \n<ul>\n<li>P/RやIssueでやり取りされる</li>\n<li>ミーティング内容も公開されてる</li>\n<li>コミットを追えばわかる！</li>\n</ul><p><br />\n🍕がきたのでメモはここで途切れている...</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>発表の補足など</h3>\n    \n<div class=\"section\">\n    <h4>最初のアンケート</h4>\n    <p>ざっと覚えてる限りだと来場者約100人で、</p>\n\n<ul>\n<li>Flowの名前知ってる人: 6割くらい</li>\n<li>触ったことある人: 1割ちょいくらい</li>\n<li>がっつり触ってる人: 3人</li>\n</ul><p>でしたｗ</p>\n\n</div>\n<div class=\"section\">\n    <h4>`passPerPreset`</h4>\n    <p>@t_wada 神に教えていただきました。</p><p>`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>、プリセットの処理順を指定できる機能`というのはざっくりしすぎで、正しくは、</p>\n\n<ul>\n<li>そもそも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>、プリセットの処理順は、元から`.babelrc`に書いた順になってる</li>\n<li>高速化のため、BabelのASTのトラバーサルは基本的には1度になった</li>\n<li>なのでASTで末端を削る系の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>と処理する系の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>がいると、衝突する恐れがある</li>\n<li>そこでこの`passPerPreset`が指定されると、その指定の単位で複数回トラバースするようになる</li>\n<li>そうすると衝突事故を回避できる！がその分パフォーマンスは犠牲になる</li>\n</ul><p>だそうです。<br />\nなので、処理順というより処理の段取りの指定ができる機能という解釈が正しいのかな？<br />\nありがとうございます！</p>\n\n</div>\n<div class=\"section\">\n    <h4>Decoratorに対応してないのはそもそも</h4>\n    <p>まだStage1で、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>じゃないから・・という話を @yosuke_furukawa 会長に聞いた。</p><p>ただFlowには実は`esproposal.decorators`ってオプションがあって、クラスプロパティへのDecoratorだけは見てくれるんですよね・・。<br />\nクラス自体とメソッドへのDecoratorは、非対応！って言われる。</p>\n\n</div>\n</div>"
}
