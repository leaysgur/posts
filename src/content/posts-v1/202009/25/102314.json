{
  "title": "静的サイトジェネレータ、もといMPA向けbetter webpackとしてのNext.js",
  "html": "<p>（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>不要論者のはしくれとして）今までこれっぽっちも気にしてなかった、あのNext.jsです。<br />\nここでいう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>は、クライアントのリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トに応じて<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>してレスポンスを返すこと。</p><p>ただ最近仕事で使ったり、副業でも使ってたりする機会があって、一部認識を改めたところがあるのでそれをメモっておく。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>静的サイトジェネレータとしてのNext.js</h3>\n    <p>それは、「元来のサーバー<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>用<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2\">ミドルウェア</a>としてではなく、SSGを目的としたプリ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>用ツール」として見れば、実は結構よいのでは？というもの。<br />\nコマンドでいうところの`next build && next export`だけを使う前提。</p>\n\n<ul>\n<li>プリ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>で最適化した静的なサイトにしたい</li>\n<li>けど、それぞれのページにはJSを使った処理がある</li>\n</ul><p>前者だけの場合は、だいたい`11ty`みたいないわゆる静的サイトジェネレータが検討されるけど、各ページで動かす<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>については何もしてくれないのがほとんど。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%EC\">プログレ</a>ッシブ・エンハンスメントだ〜みたいな割り切りもあるかもしれんけど、リアルワールドではそういうわけにもいかず・・。</p><p>かといって、各ページごとに`webpack`などのバンドラを使って自力でやるためには、</p>\n\n<ul>\n<li>`webpack.config.js`の設定をがんばって書く</li>\n<li>各ページとの接点は、DOMに`id`振ったりする必要がある</li>\n<li>`hydrate`しないと・・</li>\n</ul><p>などなど、面倒よな〜っていうところで、まさかのNext.jsに白羽の矢が立つというわけです。</p><p>`next/link`とか`next/router`を使わなければ、Reactをテンプレートエンジンにした静的サイトジェネレータとして使えるやん！という。<br />\n（もちろん使いたければ使ってもいいけど。）</p><p>各ページごとのJSチャンクの最適化もしてくれるし、静的サイトジェネレータというか、better webpackっていう見方としてもアリなのかも？とふと思った。</p>\n\n</div>\n<div class=\"section\">\n    <h3>不満なところ</h3>\n    \n<div class=\"section\">\n    <h4>静的サイトジェネレータではない</h4>\n    <p>まぁそういうものではないので仕方ないけども。</p><p>開発時には自動<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>とかのために`next`コマンドを使うことになるけど、このときはサーバー<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>でコードが実行される。<br />\nつまり、開発時と本番時で、同じ体験にならないという。</p><p>基本的にIsomorphicなコードにしろよ感が至るところで感じられるけど、用途的にそれらが制約でしかないのがちょっと面倒。</p><p>あと相変わらずHMRはうまく動かないことが多いし、そのくせdisableにするオプションがないのも不満である！</p>\n\n</div>\n<div class=\"section\">\n    <h4>Preactのための設定が必要</h4>\n    <p>`preact/compat`を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9\">エイリアス</a>する必要があって、`next.config.js`がちょい太る。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/vercel/next.js/tree/canary/examples/using-preact\">https://github.com/vercel/next.js/tree/canary/examples/using-preact</a></p>\n\n    </blockquote>\n<p>ちなみに、TypeScriptも併用する場合は、型がハマらなくて困ることがある。<br />\n具体的には`next/link`を使うためには、それ用の型を補正しないとダメ。</p>\n\n    <blockquote>\n        <p><a href=\"https://gist.github.com/leader22/bcb8fbd7918ec2d293135695c0cf883f\">Use nextjs Link component w/ Preact + TypeScript &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>exportコマンドまだ安定してない説</h4>\n    <p>まず、`export`コマンドの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>出力が変だったので、PR出してなおした。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/vercel/next.js/pull/17106\">Fix export-cli progress label default value by leader22 &middot; Pull Request #17106 &middot; vercel/next.js &middot; GitHub</a></p>\n\n    </blockquote>\n<p>あと、これは気のせいかもしれないけど、いちおうメモっておく。</p><p>`export`するときは、その出力<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リを毎回消したほうが良い。<br />\nさもないと、以前のキャッシュが残ってるみたいな挙動になることがあった気がするので・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ちょいちょい融通がきかない</h4>\n    \n    <blockquote>\n        <p>Duplicate meta tags when using Head both in custom document and page · Issue #9794 · vercel/next.js - <a href=\"https://github.com/vercel/next.js/issues/9794\">https://github.com/vercel/next.js/issues/9794</a></p>\n\n    </blockquote>\n<p><br />\nこういうのとか。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>他の選択肢はないのか</h3>\n    \n<ul>\n<li>Reactが使える</li>\n<li>複数ページをプリ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>できる</li>\n</ul><p>という条件だけで見ると、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gatsby\">Gatsby</a>とかReactStaticとかも候補にはあがる。</p><p>ただ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gatsby\">Gatsby</a>から漂うCRA感が個人的には好きになれなくて、あれには近寄ってはならぬというささやきが聞こえる・・。<br />\n（いやまあこういうのはどうせ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>次第なんやが）</p><p>個人的なお気持ちは、この人のブログに書いてあることと同じような認識。</p>\n\n    <blockquote>\n        <p><a href=\"https://jaredpalmer.com/gatsby-vs-nextjs\">Gatsby vs. Next.js</a></p>\n\n    </blockquote>\n<p>ReactStaticには期待してたけど、実際に素振りしてみるとなんか思ったとおりにいかず。</p>\n\n<ul>\n<li>独自のお作法（というか制約）がすごい多い + 納得感がない</li>\n<li>なんたらテンプレートを使うことがうっすら前提にあり、自分で必要なものだけ、をやるのが大変</li>\n</ul><p>SvelteのRoutifyとかと同じ感じかと思ってたのに、ちょっと裏切られた気分。</p><p>というわけで、Next.jsを使いたくて選んだというわけではなくて、他にないからという理由だったりする・・。</p>\n\n</div>"
}
