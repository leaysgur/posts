{
  "title": "シェルをbashからzshにかえた",
  "html": "<p>特にこれといって決め手があったわけでもないけど、試したかったので。<br />\nちょっとしたメモを書き残すけど、そもそも何が違うん？って思う人向けにさらっと違いを。</p>\n\n<ul>\n<li>プロンプトの右端にも表示領域がある</li>\n<li>コマンドの補完は、実際に入力までしてくれる</li>\n<li>gitのcompletionでやるブランチの表示は、ファイルを用意しなくても表示できる</li>\n<li>コマンドのオプションとかまで候補表示＋補完してくれる</li>\n</ul><p>今のところ気付いたのはコレくらいかな？<br />\nまぁ十分便利な上、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/bash\">bash</a>の上位互換ならどっちを選ぶかは自明ですが・・。</p><p></p>\n\n<div class=\"section\">\n    <h3>初期シェルの変え方</h3>\n    <p>まずは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/zsh\">zsh</a>がそもそも使えるか確認</p>\n<pre class=\"code\" data-unlink>which zsh</pre><p>どこにあるかがわかったらー、</p>\n<pre class=\"code\" data-unlink>chsh -s __path__</pre><p>__path__ は、最初に調べた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/zsh\">zsh</a>の場所。</p>\n\n</div>\n<div class=\"section\">\n    <h3>zshrc</h3>\n    <p>もちろんコレの設定がなきゃはじまらない！<br />\nあちこち検索してとりあえず使えそうなのを切り貼りした結果がコレ。</p><p>ぜんぜん知らないことの方が多いと思いますが、個人的には満足。</p>\n<pre class=\"code\" data-unlink># 基本設定\n# ----------------------------\n# 言語設定\nexport LANG=ja_JP.UTF-8\n\n# エディタはvim\nexport EDITOR=vim\n\n# PCRE 互換の正規表現を使う\nsetopt re_match_pcre\n\n# ビープ音を消す\nsetopt nolistbeep\n\n# 日本語ファイル名を表示可能にする\nsetopt print_eight_bit\n\n# &#39;#&#39; 以降をコメントとして扱う\nsetopt interactive_comments\n\n# もしかして機能\nsetopt correct\n\n# Ctrl + a とかやりたい\nbindkey -e\n\n# Ctrl + r で履歴さかのぼり\nbindkey &#34;^R&#34; history-incremental-search-backward\n\n# 補完機能\n# ----------------------------\n# 補完機能をON\nautoload -U compinit; compinit\n\n# Shift-Tabで補完候補を逆順する(&#34;\\e[Z&#34;でも動作する)\nbindkey &#34;^[[Z&#34; reverse-menu-complete\n\n# 補完候補を省スペースに\nsetopt list_packed\n\n# ../ の後は今いるディレクトリを補完しない\nzstyle &#39;:completion:*&#39; ignore-parents parent pwd ..\n\n# 補完候補が複数あるときに自動的に一覧表示する\nsetopt auto_menu\n\n# 高機能なワイルドカード展開を使用する\nsetopt extended_glob\n\n# ディレクトリ名だけでcdする\nsetopt auto_cd\n\n# cdの履歴を記録\nsetopt auto_pushd\n\n# 重複したディレクトリを追加しない\nsetopt pushd_ignore_dups\n\n# タイポを訂正\nsetopt correct\n\n# 履歴関連\n# ----------------------------\nHISTFILE=~/.zsh_history\nHISTSIZE=10000\nSAVEHIST=10000\n\n# 重複する履歴は無視\nsetopt hist_ignore_dups\n\n# 履歴を共有\nsetopt share_history\n\n# スペースから始まるコマンド行はヒストリに残さない\nsetopt hist_ignore_space\n\n # ヒストリに保存するときに余分なスペースを削除する\nsetopt hist_reduce_blanks\n\n\n# 色の設定\n# ----------------------------\n# 色の定義\nDEFAULT=$&#34;%{\\e[0;0m%}&#34;\nRESET=&#34;%{${reset_color}%}&#34;\nGREEN=&#34;%{${fg[green]}%}&#34;\nBLUE=&#34;%{${fg[blue]}%}&#34;\nRED=&#34;%{${fg[red]}%}&#34;\nCYAN=&#34;%{${fg[cyan]}%}&#34;\nYELLOW=&#34;%{${fg[yellow]}%}&#34;\nMAGENTA=&#34;%{${fg[magenta]}%}&#34;\nWHITE=&#34;%{${fg[white]}%}&#34;\n\nautoload -Uz colors; colors\nexport LSCOLORS=Exfxcxdxbxegedabagacad\n\n# 補完時の色の設定\nexport LS_COLORS=&#39;di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30&#39;\n\n# ZLS_COLORS？\nexport ZLS_COLORS=$LS_COLORS\n\n# lsコマンド時、自動で色がつく\nexport CLICOLOR=true\n\n# 補完候補に色を付ける\nzstyle &#39;:completion:*:default&#39; list-colors ${(s.:.)LS_COLORS}\n\n# プロンプトの設定\n# ----------------------------\n# Gitの情報とか\nautoload -Uz add-zsh-hook\nautoload -Uz vcs_info\n\nzstyle &#39;:vcs_info:*&#39; enable git svn hg bzr\nzstyle &#39;:vcs_info:*&#39; formats &#39;[%s: %b]&#39;\nzstyle &#39;:vcs_info:*&#39; actionformats &#39;[%s: %b|%a]&#39;\nzstyle &#39;:vcs_info:(svn|bzr):*&#39; branchformat &#39;%b:r%r&#39;\nzstyle &#39;:vcs_info:bzr:*&#39; use-simple true\n\nautoload -Uz is-at-least\nif is-at-least 4.3.10; then\n  zstyle &#39;:vcs_info:git:*&#39; check-for-changes true\n  zstyle &#39;:vcs_info:git:*&#39; stagedstr &#34;+&#34;\n  zstyle &#39;:vcs_info:git:*&#39; unstagedstr &#34;-&#34;\n  zstyle &#39;:vcs_info:git:*&#39; formats &#39;[%s: %b] %c%u&#39;\n  zstyle &#39;:vcs_info:git:*&#39; actionformats &#39;[%s: %b|%a] %c%u&#39;\nfi\n\nfunction _update_vcs_info_msg() {\n  psvar=()\n  LANG=en_US.UTF-8 vcs_info\n  [[ -n &#34;$vcs_info_msg_0_&#34; ]] &amp;&amp; psvar[1]=&#34;$vcs_info_msg_0_&#34;\n}\nadd-zsh-hook precmd _update_vcs_info_msg\n\n# コマンドを実行するときに右プロンプトを消す\nsetopt transient_rprompt\n\n# コマンドラインでも # 以降をコメントと見なす\nsetopt interactive_comments\n\n# プロンプトが表示されるたびにプロンプト文字列を評価、置換する\nsetopt prompt_subst\n\nPROMPT=&#34;[%n] %{${fg[yellow]}%}%~%{${reset_color}%}\n%{$fg[blue]%}$%{${reset_color}%} &#34;\n\n# プロンプト指定(コマンドの続き)\nPROMPT2=&#39;[%n]&gt; &#39;\n\n# もしかして時のプロンプト指定\nSPROMPT=&#34;%{$fg[red]%}%{$suggest%}もしかして %B%r%b %{$fg[red]%}? [y,n,a,e]:${reset_color} &#34;\n\nRPROMPT=&#34;%1(v|%F{green}%1v%f|)&#34;</pre><p>ながい！<br />\n本当は、こういうのdotfilesとかって<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>作ってGitで管理したい。</p>\n\n</div>"
}
