{
  "title": "OSCON 2014: How Instagram.com Works; Pete Huntの要点まとめ",
  "html": "<p>なんか最近こんな記事ばっかですが、まぁええよね！ｗ</p><p>今回はこちら。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=VkTCL6Nqm6Y\" target=\"_blank\" title=\"OSCON 2014: How Instagram.com Works; Pete Hunt - YouTube\">OSCON 2014: How Instagram.com Works; Pete Hunt - YouTube</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Instagram\">Instagram</a>がどうやって作られてるか、です。<br />\nPete Huntさんは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Instagram\">Instagram</a>のエンジニアやってて、いま噂のReact.jsにも携わってるお方。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>How <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Instagram\">Instagram</a>.com Works</h3>\n    \n<div class=\"section\">\n    <h4>Webでやる理由</h4>\n    <p>このアプリ全盛期にあえてWebでサービスを提供しているその理由は、</p>\n\n<ul>\n<li>パフォーマンスがいいからではなく、</li>\n<li>ぐぐらびりてぃのためでもなく、</li>\n<li>アプリでもモバイルでもPCでも、ユーザーの利用環境を問わず提供できるから</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>どうつくるか</h4>\n    <p>Webページをユーザーに届ける方法はいくつかって、</p>\n\n<ul>\n<li>従来型のサーバーサイドで全部<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>して返す</li>\n<li>ページ内をいくつかのパーツ(Pageletって呼んでた)に区切って、それぞれ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>したページを返す</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>叩いてページ組み立てる(いわゆるSinglePageApp)</li>\n</ul><p>この中でいわゆるUXが一番良いのは3番目。<br />\nなので、SinglePageAppで作ってる。</p>\n\n</div>\n<div class=\"section\">\n    <h4>どう届けるか</h4>\n    <p>全ファイルを1ファイルにするのはもはや悪手。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Instagram\">Instagram</a>では9.5MB(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gzip\">gzip</a>で2.5MB)にもなるので、モバイルだとやはり酷。</p><p>SinglePageAppのPageとは、EntryPointのことであって、サービス全体のことではない。</p><p>そのEntryPointごとにファイルを分けるのが良い。<br />\nライブラリなど、共通のファイルは共通のファイルとして固めておく。</p>\n\n</div>\n<div class=\"section\">\n    <h4>モジュール化</h4>\n    <p>ベタで依存関係を考慮しつつ書いていくのはつらいので、なんかしらModuleシステム使おう。<br />\n意識すべきは「モジュール化」とその「依存関係」。</p><p>CommonJSライクなのがわかりやすくて良いし、<br />\nそういうシステムがあれば、依存関係を気にしないで済む。</p><p>そして、モジュールは必要な時に非同期で取得。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Css\">Css</a>であっても非同期にrequire()する。<br />\n.coffeeも.tsも。</p><p>最終的に「ファイル」を読み込ませて利用するという考え方ではなく、<br />\n必要な「モジュール」を依存関係に沿って随時ロードするって考え方でやってる。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Instagram\">Instagram</a>ではwebpack使ってる。</p>\n\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Css\">Css</a></h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>だけでSinglePageAppは作れなくて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Css\">Css</a>もちゃんとする必要ある。</p>\n\n<ul>\n<li>タグ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>とか汎用的なクラス名はダメ</li>\n<li>読み込み順で上書きされるような<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>もダメ</li>\n</ul><p>こういうのが蔓延すると、あとでメンテしようとしてもこのクラス使われてんの・・？状態になる。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Instagram\">Instagram</a>流のルールとしては、</p>\n\n<ul>\n<li>igUserProfileAvatorみたくカッチリ命名</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>とはいえカスケードしない！1<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>！</li>\n<li>1要素には3クラスついてたら、その3クラスはそれぞれ別の内容</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>みんなwebpack使おう</h4>\n    <p>browserifyもrequirejsも、巨大なファイルを提供するだけ。<br />\ngrunt/gulpも、テストとか動かすには良いけど、そもそもファイルでしかコードを提供できない。</p><p>今ある中では、webpackが色々賢くて良い。<br />\nRequirejsからwebpackに置き換えたら、ロードパフォーマンス2倍になった。</p><p>Howtoつくったよ！</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/petehunt/webpack-howto\" target=\"_blank\" title=\"petehunt/webpack-howto\">petehunt/webpack-howto</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>もやってるよ！</p>\n\n    <blockquote>\n        <p><a href=\"https://twitter.com/floydophone\" target=\"_blank\" title=\"Pete Hunt(floydophone)さん | Twitter\">Pete Hunt(floydophone)さん | Twitter</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>感想</h3>\n    <p>似たような仕事してるので、すっと入ってくる内容で興味深かったです。<br />\nとりあえず最初にSinglePageApp is SUCKって言う感覚はすごくよくわかりますｗ</p><p>webpackもReactも最近話はよく聞くけど、実際使ってるプロジェクトが身の回りにない(と思ってる)ので、<br />\nそういう意味で既に実用化してる + 経験談を語れるってのは、やはりすげーな海外・・。</p><p>そして相当先行されてるんやなーと思うと、悔しい感があります。</p>\n\n</div>"
}
