{
  "title": "OpenAIのEmbeddingsで全文検索",
  "html": "\n    <blockquote>\n        <p><a href=\"https://platform.openai.com/docs/guides/embeddings\">https://platform.openai.com/docs/guides/embeddings</a></p>\n\n    </blockquote>\n<p>Embeddingsとは、テキストの類似性や関連性を、画一的なベクトルで表現することらしい。</p><p>それによってテキストの種類を分類したり、検索したり、いわゆるレコメンドに使えたりする。</p><p>今回は、このブログ記事をベクトル化して、それに対する<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%C1%B4%CA%B8%B8%A1%BA%F7\">全文検索</a>を簡単にできる範囲でやってみた。</p><p>このドキュメントの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>でいうところの、Text search using embeddingsってやつ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"Step1-ブログ記事のエクスポート\">Step1. ブログ記事のエクスポート</h3>\n    <p><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%ED%A5%B0\">はてなブログ</a>には記事のエクスポート機能があって、懐かしの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Movable%20type\">Movable type</a>フォーマットで吐き出せるようになってる。</p><p>が、結局それは使わなかった。</p>\n\n<ul>\n<li>吐き出された記事データが、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%B5%AD%CB%A1\">はてな記法</a>や<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Markdown\">Markdown</a>ではなく、変換後のHTMLだった</li>\n<li>そもそもちゃんとしたものを作るよいうよりか試したかっただけ</li>\n</ul><p>という理由から、管理画面から愚直にコピペしてきて、`記事-{entryId}.md`みたいに保存した。</p><p>（そんなに詳しくはないけど、こういう<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC\">機械学習</a>用途に使う元データのフォーマットってたぶんすごい大事なはずで、HTMLのカッコとかただのノイズでしかないし、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>ン数とかにも響いてきそうやなって思った。）</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Step2-記事本文のベクトル化\">Step2. 記事本文のベクトル化</h3>\n    <p>Embeddings用のOpenAI <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>使う。</p>\n\n    <blockquote>\n        <p><a href=\"https://platform.openai.com/docs/guides/embeddings/embeddings\">https://platform.openai.com/docs/guides/embeddings/embeddings</a></p>\n\n    </blockquote>\n<p>コードで書くとこんな感じで、`data`がブログ記事の本文。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">/** @type {(API_KEY: string, data: string) =&gt; Promise&lt;number[] | Error&gt;} */</span>\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> fetchEmbeddingsVector <span class=\"synStatement\">=</span> <span class=\"synStatement\">async</span> <span class=\"synStatement\">(</span>API_KEY<span class=\"synStatement\">,</span> data<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">const</span> res <span class=\"synStatement\">=</span> <span class=\"synStatement\">await</span> <span class=\"synSpecial\">fetch</span><span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;https://api.openai.com/v1/embeddings&quot;</span><span class=\"synStatement\">,</span> <span class=\"synIdentifier\">{</span>\n    method: <span class=\"synConstant\">&quot;POST&quot;</span><span class=\"synStatement\">,</span>\n    headers: <span class=\"synIdentifier\">{</span>\n      <span class=\"synConstant\">&quot;Content-Type&quot;</span>: <span class=\"synConstant\">&quot;application/json&quot;</span><span class=\"synStatement\">,</span>\n      Authorization: <span class=\"synConstant\">`Bearer </span><span class=\"synSpecial\">${</span>API_KEY<span class=\"synSpecial\">}</span><span class=\"synConstant\">`</span><span class=\"synStatement\">,</span>\n    <span class=\"synIdentifier\">}</span><span class=\"synStatement\">,</span>\n    body: <span class=\"synSpecial\">JSON</span>.stringify<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n      input: data<span class=\"synStatement\">,</span>\n      model: <span class=\"synConstant\">&quot;text-embedding-ada-002&quot;</span><span class=\"synStatement\">,</span>\n    <span class=\"synIdentifier\">}</span><span class=\"synStatement\">),</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n  <span class=\"synType\">const</span> json <span class=\"synStatement\">=</span> <span class=\"synStatement\">await</span> res.json<span class=\"synStatement\">();</span>\n\n  <span class=\"synStatement\">if</span> <span class=\"synStatement\">(</span><span class=\"synConstant\">!</span>res.ok<span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synSpecial\">console</span>.error<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;ERR: OpenAI API request failed&quot;</span><span class=\"synStatement\">);</span>\n    <span class=\"synSpecial\">console</span>.error<span class=\"synStatement\">(</span>res.<span class=\"synStatement\">status,</span> json.error<span class=\"synStatement\">);</span>\n    <span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> <span class=\"synSpecial\">Error</span><span class=\"synStatement\">(</span>json.error.message<span class=\"synStatement\">);</span>\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synType\">const</span> vector <span class=\"synStatement\">=</span> json.data.at<span class=\"synStatement\">(</span><span class=\"synConstant\">0</span><span class=\"synStatement\">)</span>.embedding<span class=\"synStatement\">;</span>\n  <span class=\"synStatement\">if</span> <span class=\"synStatement\">(</span>vector.length <span class=\"synStatement\">===</span> <span class=\"synConstant\">0</span><span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synSpecial\">console</span>.error<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;ERR: OpenAI API returned an empty vector&quot;</span><span class=\"synStatement\">);</span>\n    <span class=\"synSpecial\">console</span>.error<span class=\"synStatement\">(</span><span class=\"synSpecial\">JSON</span>.stringify<span class=\"synStatement\">(</span>json<span class=\"synStatement\">,</span> <span class=\"synType\">null</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">2</span><span class=\"synStatement\">));</span>\n    <span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> <span class=\"synSpecial\">Error</span><span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;Empty vector&quot;</span><span class=\"synStatement\">);</span>\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synStatement\">return</span> vector<span class=\"synStatement\">;</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n</pre><p>無料アカウントの場合のレート制限は、</p>\n\n<ul>\n<li>3 <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/RPM\">RPM</a></li>\n<li>150,000 <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/TPM\">TPM</a> x 200(ada) = 30,000,000 <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/TPM\">TPM</a></li>\n</ul><p>という2軸だそうな。</p>\n\n    <blockquote>\n        <p><a href=\"https://platform.openai.com/docs/guides/rate-limits/what-are-the-rate-limits-for-our-api\">https://platform.openai.com/docs/guides/rate-limits/what-are-the-rate-limits-for-our-api</a></p>\n\n    </blockquote>\n<p>愚直に並列実行すると即レートに引っかかるので、ちゃんとやるときはリトライとか20秒待ちとか考慮する。</p><p>こうして得られたベクトルも、`ベクトル-{entryId}.<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/json\">json</a>`みたいに保存しておく。</p><p>このベクトル、なんと次元数が1536もあって、最初にレスポンス見たときはひゃ〜ってなった。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Step3-UIを作って質問を受け付ける\">Step3. UIを作って質問を受け付ける</h3>\n    <p>今回はとにかく試せればよかったので、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CLI\">CLI</a>から`process.argv`で雑に取得した。</p><p>書くことなし。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Step4-質問をベクトル化して記事のベクトルと比較\">Step4. 質問をベクトル化して、記事のベクトルと比較</h3>\n    <p>先の記事本文をベクトル化したのと同様に、まずは質問文もベクトルに変換する。</p><p>こうすることで、ベクトル同士を比較することができるようになり、もっともそれらしいことが書いてある記事を見つけられると。</p><p>で、ベクトル同士を比較して、似たようなベクトルかどうか？を判定するには、`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/cosine\">cosine</a>_similarity`（コサイン類似度）なるものを計算するのが一般的らしい。</p>\n\n    <blockquote>\n        <p>2つのベクトルの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%C6%E2%C0%D1\">内積</a>（＝向きと大きさを持つベクトル同士の掛け算）を、2つのベクトルの大きさ（＝L2ノルム）で割ることで計算される。<br />\n<a href=\"https://atmarkit.itmedia.co.jp/ait/articles/2112/08/news020.html\">https://atmarkit.itmedia.co.jp/ait/articles/2112/08/news020.html</a></p>\n\n    </blockquote>\n<p>なんのこっちゃだがコードにするとこう。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">/** @type {(x: number[], y: number[]) =&gt; number} */</span>\n<span class=\"synType\">const</span> dot <span class=\"synStatement\">=</span> <span class=\"synStatement\">(</span>x<span class=\"synStatement\">,</span> y<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">let</span> sum <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span><span class=\"synStatement\">;</span>\n  <span class=\"synStatement\">for</span> <span class=\"synStatement\">(</span><span class=\"synType\">let</span> i <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span><span class=\"synStatement\">;</span> i <span class=\"synStatement\">&lt;</span> x.length<span class=\"synStatement\">;</span> i<span class=\"synStatement\">++)</span> sum <span class=\"synStatement\">+=</span> x<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span> * y<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span><span class=\"synStatement\">;</span>\n\n  <span class=\"synStatement\">return</span> sum<span class=\"synStatement\">;</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n\n<span class=\"synComment\">/** @type {(arr: number[]) =&gt; number} */</span>\n<span class=\"synType\">const</span> l2norm <span class=\"synStatement\">=</span> <span class=\"synStatement\">(</span>arr<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">let</span> s <span class=\"synStatement\">=</span> <span class=\"synConstant\">1</span><span class=\"synStatement\">;</span>\n  <span class=\"synType\">let</span> t <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span><span class=\"synStatement\">;</span>\n  <span class=\"synStatement\">for</span> <span class=\"synStatement\">(</span><span class=\"synType\">let</span> i <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span><span class=\"synStatement\">;</span> i <span class=\"synStatement\">&lt;</span> arr.length<span class=\"synStatement\">;</span> i<span class=\"synStatement\">++)</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synType\">const</span> val <span class=\"synStatement\">=</span> arr<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span><span class=\"synStatement\">;</span>\n    <span class=\"synType\">const</span> abs <span class=\"synStatement\">=</span> val <span class=\"synStatement\">&lt;</span> <span class=\"synConstant\">0</span> ? -val : val<span class=\"synStatement\">;</span>\n    <span class=\"synStatement\">if</span> <span class=\"synStatement\">(</span>abs <span class=\"synStatement\">&gt;</span> <span class=\"synConstant\">0</span><span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">if</span> <span class=\"synStatement\">(</span>abs <span class=\"synStatement\">&gt;</span> t<span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n        <span class=\"synType\">const</span> r <span class=\"synStatement\">=</span> t / val<span class=\"synStatement\">;</span>\n        s <span class=\"synStatement\">=</span> <span class=\"synConstant\">1</span> + s * r * r<span class=\"synStatement\">;</span>\n        t <span class=\"synStatement\">=</span> abs<span class=\"synStatement\">;</span>\n      <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">else</span> <span class=\"synIdentifier\">{</span>\n        <span class=\"synType\">const</span> r <span class=\"synStatement\">=</span> val / t<span class=\"synStatement\">;</span>\n        s <span class=\"synStatement\">=</span> s + r * r<span class=\"synStatement\">;</span>\n      <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synStatement\">return</span> t * <span class=\"synSpecial\">Math</span>.sqrt<span class=\"synStatement\">(</span>s<span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n\n<span class=\"synComment\">/** @type {(a: number[], b: number[]) =&gt; number} */</span>\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> cosineSimilarity <span class=\"synStatement\">=</span> <span class=\"synStatement\">(</span>a<span class=\"synStatement\">,</span> b<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> dot<span class=\"synStatement\">(</span>a<span class=\"synStatement\">,</span> b<span class=\"synStatement\">)</span> / <span class=\"synStatement\">(</span>l2norm<span class=\"synStatement\">(</span>a<span class=\"synStatement\">)</span> * l2norm<span class=\"synStatement\">(</span>b<span class=\"synStatement\">));</span>\n</pre><p>まあこれで準備は整ったので、</p>\n\n<ul>\n<li>質問文をEmbeddingsの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>でベクトルにし</li>\n<li>保存しておいた記事のベクトルたちとコサイン類似度を比較していき</li>\n<li>一定以上の値かつ、大きい値が出た順に選ぶ\n<ul>\n<li>手元でやってた感じだと、少なくとも`0.8`以上ないと信用できないなって感じ</li>\n</ul></li>\n</ul><p>という流れ。</p><p>適当なキーワードで検索してみると、確かにそれらしい記事がヒットする！</p><p>今回は記事数が大したことないので総当りで処理してみたけど、記事数が増えるとどう考えてもスケールしないので、それ用のソリューションが必要になる。</p><p>軽く調べてみると、ベクトルを型として扱える専用のデータベースもあるらしい。</p>\n\n<ul>\n<li><a href=\"https://redis.io/docs/stack/search/reference/vectors/\">https://redis.io/docs/stack/search/reference/vectors/</a>\n<ul>\n<li>Redisってそんなこともできるのね・・・</li>\n</ul></li>\n<li><a href=\"https://docs.pinecone.io/docs/overview\">https://docs.pinecone.io/docs/overview</a></li>\n<li><a href=\"https://github.com/currentslab/awesome-vector-search\">https://github.com/currentslab/awesome-vector-search</a></li>\n</ul><p>知らないことばかりである。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"というわけで\">というわけで</h3>\n    <p>Embeddingsによる<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%C1%B4%CA%B8%B8%A1%BA%F7\">全文検索</a>をやってみた。</p><p>とはいえここまでの内容であれば、下準備やDBなど仕組みを用意するコストを考えたときに、単なるキーワード検索でよくないか？ってなったのも正直なところで、そこはまあ一長一短で物は使いよう・・・という感じらしい。</p><p><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%C1%B4%CA%B8%B8%A1%BA%F7\">全文検索</a>といえばAlgoliaとかどうやってるのか調べてみたら、いろいろおもしろいことが書いてあった。</p>\n\n<ul>\n<li><a href=\"https://www.algolia.com/blog/ai/a-simple-guide-to-ai-search/\">https://www.algolia.com/blog/ai/a-simple-guide-to-ai-search/</a></li>\n<li><a href=\"https://www.algolia.com/blog/ai/what-is-vector-search/\">https://www.algolia.com/blog/ai/what-is-vector-search/</a></li>\n</ul><p>あとは、ChatGPTにもそういう特定のソースをつなげる<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>があったはずで、これでも同じようなことができるんかな？</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/openai/chatgpt-retrieval-plugin\">https://github.com/openai/chatgpt-retrieval-plugin</a></p>\n\n    </blockquote>\n\n</div>"
}
