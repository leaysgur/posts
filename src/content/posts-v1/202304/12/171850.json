{
  "title": "OpenAI APIで思い出す、Server-Sent Events",
  "html": "<p>Server-Sent Events・・・お前・・・生きていたのか・・・！</p><p>っていう気持ちになったので、ちょっとだけまとめておく。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"OpenAI-API\">OpenAI <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a></h3>\n    <p>話題のChatGPTは<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>が公開されていて、それぞれの言語のライブラリだったり<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/REST%20API\">REST API</a>だったりから利用できる。</p><p>それを使ってチャットを実装する場合に、本家<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/GUI\">GUI</a>みたく、レスポンスを一気にまとめてではなくちょっとずつ返ってくるようにしたいとする。<br />\nそこで、あの挙動はどうやって実現するのか？ってなった人も多いはず。</p><p>あのレスポンスをちょっとずつ、ストリーミングで返してもらう挙動を実現するためには、`stream: true`というオプションを指定する。</p><p>これは<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/REST%20API\">REST API</a>を<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>から利用する場合の指定。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synType\">const</span> res <span class=\"synStatement\">=</span> <span class=\"synStatement\">await</span> <span class=\"synSpecial\">fetch</span><span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;https://api.openai.com/v1/chat/completions&quot;</span><span class=\"synStatement\">,</span> <span class=\"synIdentifier\">{</span>\n  headers: <span class=\"synIdentifier\">{</span>\n    <span class=\"synConstant\">&quot;Content-Type&quot;</span>: <span class=\"synConstant\">&quot;application/json&quot;</span><span class=\"synStatement\">,</span>\n    Authorization: <span class=\"synConstant\">`Bearer </span><span class=\"synSpecial\">${</span>API_KEY_HERE<span class=\"synSpecial\">}</span><span class=\"synConstant\">`</span><span class=\"synStatement\">,</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">,</span>\n  method: <span class=\"synConstant\">&quot;POST&quot;</span><span class=\"synStatement\">,</span>\n  body: <span class=\"synSpecial\">JSON</span>.stringify<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n    messages: <span class=\"synIdentifier\">[{</span> role: <span class=\"synConstant\">&quot;user&quot;</span><span class=\"synStatement\">,</span> content: <span class=\"synConstant\">&quot;はろー&quot;</span> <span class=\"synIdentifier\">}]</span><span class=\"synStatement\">,</span>\n    model: <span class=\"synConstant\">&quot;gpt-3.5-turbo&quot;</span><span class=\"synStatement\">,</span>\n    stream: <span class=\"synConstant\">true</span><span class=\"synStatement\">,</span> <span class=\"synComment\">// 👈</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">),</span>\n  signal: ac.signal<span class=\"synStatement\">,</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n</pre><p>ライブラリを使うにしても、同様の指定があるはず。</p>\n\n    <blockquote>\n        <p><a href=\"https://platform.openai.com/docs/api-reference/chat/create#chat/create-stream\">https://platform.openai.com/docs/api-reference/chat/create#chat/create-stream</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Server-Sent-Events\">Server-Sent Events</h3>\n    <p>で、この指定をすると使われるようになるのが、Server-Sent Eventsというもの。</p>\n\n    <blockquote>\n        <p><a href=\"https://html.spec.whatwg.org/multipage/server-sent-events.html\">HTML Standard</a></p>\n\n    </blockquote>\n<p>具体的には、レスポンスヘッダに`Content-Type: text/event-stream`がつくようになって、レスポンスボディが次のようなフォーマットになる。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>data: {&#34;id&#34;:&#34;chatcmpl-74OwM9uEZ2aMRnI3YCFauaIuGZ4BP&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1681283538,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;role&#34;:&#34;assistant&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}\n\ndata: {&#34;id&#34;:&#34;chatcmpl-74OwM9uEZ2aMRnI3YCFauaIuGZ4BP&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1681283538,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;...&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}\n\ndata: {&#34;id&#34;:&#34;chatcmpl-74OwM9uEZ2aMRnI3YCFauaIuGZ4BP&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1681283538,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{},&#34;index&#34;:0,&#34;finish_reason&#34;:&#34;stop&#34;}]}\n\ndata: [DONE]</pre><p>というように、`data: {<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/JSON\">JSON</a>_OR_DONE_MARKER}`という感じのストリームになる。</p>\n\n<ul>\n<li>DevToolsで見えるHTTPのコネクションは1つ</li>\n<li>その中で、この空行で区切られたそれぞれが、よしななタイミングでレスポンスされてくる\n<ul>\n<li>これはSSEの仕様</li>\n</ul></li>\n<li>最後に`[DONE]`とだけ書かれたものが届く\n<ul>\n<li>これはOpenAI <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>の便宜上のもの</li>\n</ul></li>\n</ul><p>というわけで、これをUIに反映してやればよい。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"DOMに表示する\">DOMに表示する</h3>\n    <p>細かいところは置いといて、雑にやるとこんな感じに。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synType\">const</span> res <span class=\"synStatement\">=</span> <span class=\"synStatement\">await</span> <span class=\"synSpecial\">fetch</span><span class=\"synStatement\">(</span><span class=\"synComment\">/* さっきのやつ */</span><span class=\"synStatement\">);</span>\n\n<span class=\"synType\">const</span> decoder <span class=\"synStatement\">=</span> <span class=\"synStatement\">new</span> TextDecoder<span class=\"synStatement\">();</span>\n<span class=\"synType\">const</span> reader <span class=\"synStatement\">=</span> res.body.getReader<span class=\"synStatement\">();</span>\n\n<span class=\"synStatement\">while</span> <span class=\"synStatement\">(</span><span class=\"synConstant\">true</span><span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">const</span> <span class=\"synIdentifier\">{</span> done<span class=\"synStatement\">,</span> value <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">await</span> reader.read<span class=\"synStatement\">();</span>\n\n  <span class=\"synType\">const</span> events <span class=\"synStatement\">=</span> decoder\n    .decode<span class=\"synStatement\">(</span>value<span class=\"synStatement\">)</span>\n    <span class=\"synComment\">// 複数の`data: `行がまとまって落ちてくることもある</span>\n    .split<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;\\n\\n&quot;</span><span class=\"synStatement\">)</span>\n    .map<span class=\"synStatement\">((</span>line<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n      <span class=\"synSpecial\">try</span> <span class=\"synIdentifier\">{</span>\n        <span class=\"synStatement\">return</span> <span class=\"synSpecial\">JSON</span>.parse<span class=\"synStatement\">(</span>line.split<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;data: &quot;</span><span class=\"synStatement\">)</span><span class=\"synIdentifier\">[</span><span class=\"synConstant\">1</span><span class=\"synIdentifier\">]</span><span class=\"synStatement\">);</span>\n      <span class=\"synIdentifier\">}</span> <span class=\"synSpecial\">catch</span> <span class=\"synIdentifier\">{</span>\n        <span class=\"synStatement\">return</span> <span class=\"synType\">null</span><span class=\"synStatement\">;</span>\n      <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">}</span><span class=\"synStatement\">)</span>\n    .filter<span class=\"synStatement\">(</span><span class=\"synSpecial\">Boolean</span><span class=\"synStatement\">);</span>\n\n  <span class=\"synStatement\">for</span> <span class=\"synStatement\">(</span><span class=\"synType\">const</span> json <span class=\"synStatement\">of</span> events<span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synType\">const</span> content <span class=\"synStatement\">=</span> json.choices<span class=\"synIdentifier\">[</span><span class=\"synConstant\">0</span><span class=\"synIdentifier\">]</span>.delta?.content ?? <span class=\"synConstant\">&quot;&quot;</span><span class=\"synStatement\">;</span>\n\n    <span class=\"synComment\">// ここで徐々にrenderすればよい</span>\n    <span class=\"synComment\">// まとめたものが欲しいなら変数にでも入れておく</span>\n    content<span class=\"synStatement\">;</span>\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synComment\">// `[DONE]`行か見て判断してもいいけど</span>\n  <span class=\"synStatement\">if</span> <span class=\"synStatement\">(</span>done<span class=\"synStatement\">)</span> <span class=\"synStatement\">break;</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>これだけ。</p>\n\n<div class=\"section\">\n    <h4 id=\"EventSourceというAPI\">`EventSource`という<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a></h4>\n    <p>SSEには`EventSource`という専用の<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>があって、これを使えば↑みたいなコードがシュッと書けるよっていう触れ込みになってる。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synType\">const</span> es <span class=\"synStatement\">=</span> <span class=\"synStatement\">new</span> EventSource<span class=\"synStatement\">(</span>url<span class=\"synStatement\">,</span> <span class=\"synIdentifier\">{</span> withCredentials: <span class=\"synConstant\">true</span> <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\nes.onmessage <span class=\"synStatement\">=</span> <span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span> data <span class=\"synIdentifier\">}</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synSpecial\">console</span>.log<span class=\"synStatement\">(</span>data<span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\nes.onerror <span class=\"synStatement\">=</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> es.close<span class=\"synStatement\">();</span>\n</pre><p>ただ、URLと`withCredentials`しかサーバー側に情報を伝える術がなかったり、勝手に再接続してくれたり（余計なお世話）、惜しい<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>くんって印象やったけど、2023年になっても変わってなかった。</p><p>`POST`の<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>を自分でプロキシして、あえて`GET`で返すように書けば使えるとは思うけど、そこまでして`EventSource`使いたいか？って言われると・・。</p>\n\n</div>\n</div>"
}
