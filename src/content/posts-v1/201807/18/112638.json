{
  "title": "WebComponentsへの気持ち",
  "html": "<p>この記事では、</p>\n\n<ul>\n<li>ReactやVueではなくWebComponentsだけを使いたい気持ちを胸に、とある社内プロジェクトをやってみての学び</li>\n<li>巷にあふれるWebComponentsに対する見方への違和感</li>\n</ul><p>についてメモっておきます。</p><p>ただ「WebComponents」の語がもつ意味をきっちり定義してるわけではないので、そのへんは雰囲気で察してください。<br />\nそのせいで勘違いされがちな概念なんかも、知らんけど。</p><p>まずは巷にあふれる意見に対する気持ちから。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>(React|Vue|Xxx)はもう古い、これからはWebComponentsだ！</h3>\n    <p>勝手なイメージですが、こういう認識の人いるよね・・？</p><p>個人的には、「いや、WebComponentsはそういう技術じゃない」と思った・思ってます。<br />\n以下、ReactもVueもAngularも「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A6%A5%A7%A5%D6%A5%A2%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3\">ウェブアプリケーション</a>を作るための技術」であるが、WebComponentsはそうじゃないという主張が続きます。</p><p>これはどっちかを選ぶようなもものでもない。<br />\nそもそもReactのドキュメントにも、共存する概念であるって書いてある。</p>\n\n    <blockquote>\n        <p><a href=\"https://reactjs.org/docs/web-components.html\">Web Components - React</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>なんで？いい感じに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>作れるんでしょ？</h3>\n    <p>Yes, しかしNo。</p><p>その「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>」が、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A6%A5%A7%A5%D6%A5%A2%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3\">ウェブアプリケーション</a>を構成する要素という意味ならNo。<br />\nあくまでHTMLの一要素としてWebを構成する部品という意味ならYes。</p><p>これは実際にコード書いてみるとすぐわかる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> Btn = (<span class=\"synIdentifier\">{</span> onClick, children <span class=\"synIdentifier\">}</span>) =&gt; (\n  &lt;button\n    type=<span class=\"synConstant\">&quot;button&quot;</span>\n    onClick=<span class=\"synIdentifier\">{</span>ev =&gt; onClick(ev)<span class=\"synIdentifier\">}</span>\n  &gt;<span class=\"synIdentifier\">{</span>children<span class=\"synIdentifier\">}</span>&lt;/button&gt;\n);\n</pre><p>このさもありなReactの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>らしきものを、WebComponentsで書き直そうとしてみる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> Btn <span class=\"synStatement\">extends</span> HTMLElement <span class=\"synIdentifier\">{</span>\n  connectedCallback() <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>.attachShadow(<span class=\"synIdentifier\">{</span> mode: <span class=\"synConstant\">'open'</span> <span class=\"synIdentifier\">}</span>);\n    <span class=\"synIdentifier\">this</span>._render();\n  <span class=\"synIdentifier\">}</span>\n\n  _render() <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>.shadowRoot.innerHTML = `\n      &lt;button type=<span class=\"synConstant\">&quot;button&quot;</span>&gt;\n        &lt;slot&gt;&lt;/slot&gt;\n      &lt;/button&gt;\n    `;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// どこかで</span>\ncustomElements.define(<span class=\"synConstant\">'my-button'</span>, Btn);\n</pre><p>・・と、途中で手が止まるはず。</p><p>WebComponentsとして、あくまでHTMLの一要素として定義した以上、`onClick`みたいなものは渡せない。<br />\n渡せるのはHTMLの属性値（つまりは文字列のみ）になる。</p><p>じゃあどうやってイベントを捕捉するのかというと、こうなる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// またどこかで</span>\n<span class=\"synStatement\">const</span> btn = <span class=\"synStatement\">document</span>.querySelector(<span class=\"synConstant\">'my-button'</span>);\n<span class=\"synComment\">// からの</span>\nbtn.addEventListener(<span class=\"synConstant\">'click'</span>, ev =&gt; onClick(ev), <span class=\"synConstant\">false</span>);\n</pre><p>カスタムイベント発行でもなんでもいいけど、基本的にこの懐かしい`addEventListener()`を使わないといけないってのがポイント。<br />\nProps的なものを渡したくても、全て文字列になってしまうってのがポイント。</p><p>というわけで、この時点でアプリケーションを構成する「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>」としては、まったく使い物にならないことがわかるはず。<br />\n2018年にもなって、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a> w/ Backbone的なコードに帰れるなら話は別やが、俺には無理です。</p><p>なので、WebComponents\"だけ\"で、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A6%A5%A7%A5%D6%A5%A2%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3\">ウェブアプリケーション</a>を作るなんてことを、そもそも考えてはいけない。</p>\n\n</div>\n<div class=\"section\">\n    <h3>じゃあWebComponentsの存在意義って？</h3>\n    <p>個人的には、「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A6%A5%A7%A5%D6%A5%A2%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3\">ウェブアプリケーション</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>やら構成要素と切り離された、色味のない汎用的な部品を作るための技術」かと。</p><p>もちろん属性は渡せるけど、そこで大きく挙動を変えたりはしない謙虚な部品。<br />\nそんな部品を、</p>\n\n<ul>\n<li>いろんな場所で再利用する前提</li>\n<li>何にも依存せず</li>\n</ul><p>作りたい場合には、選ばれる技術なのかなーと。</p>\n\n    <blockquote>\n        <p><a href=\"https://1000ch.net/posts/2018/webcomponents-in-production.html\">Web Components &#x3092;&#x672C;&#x756A;&#x6295;&#x5165;&#x3059;&#x308B;&#xFF08;2018&#x5E74;&#x6625;&#xFF09; - EagleLand</a></p>\n\n    </blockquote>\n<p>そういう点からすると、ここで書かれてる決済ボタンとかは良い例よねーと思った。<br />\n副産物とは思うけど、機能をJSから拡張して使えるようにする発想は賢いなーとも思った。</p><p>ただこの場合、決済機能が使えるJS-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SDK\">SDK</a>があれば全て事足りる気もしてるのも確か。<br />\nまぁポリシー的にこういう見た目じゃないと許しません！ってのがあるなら、WebComponentsで配布されるのは嬉しいんかも。</p><p>なので実際のところ、WebComponentsで本当に良かった！っていう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>には、早々お目にかかれないんやろうなとも思ってる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>lit-htmlとかhyperHTMLとかは？</h3>\n    <p>ちょっと横道へ。</p><p>同じ文脈で登場しがちではあるけど、`lit-html`も`hyperHTML`も、WebComponentsとは直接関係ない。<br />\nHTML文字列を実際のDOMに変換してくれたり、画面に実際に描画したりするだけ。ReactでいうところのJSXと`ReactDOM.render()`の層。</p><p>よって、WebComponentsで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を書く時に楽はできるけど、そもそもコンセプトが違うし、 = WebComponentsな存在ではない。</p><p>もちろん、最初からただのAlt Reactを探してたなら選択肢にしてもいいとは思ってて、個人的なおすすめは`hyperHTML`です。<br />\nただそれでも、「(React|Vue|Xxx)はもう古い、これからはhyperHTMLだ！」とは言えないなーというのが正直なところ。</p><p>なぜかというと、普通に使うとライフサイクルフックもないしローカルなステートも持てないから。<br />\nそれ用の実装を自分で作るか、`LitElement`とか`HyperHTMLElement`とかそういうのを使えばできるようになるけど、そうなるともう「Reactでよくない？」ってなると思う。</p><p>ファイルサイズとかTrasnpileの手間とかはあるけど、それでもあの完成度とか周辺機器の充実具合とか型とか含めると、ありあまるお釣りが来ると思う。<br />\n規模に応じてここを見極められる人だけが、その恩恵に与ればよいかなー。</p>\n\n</div>\n<div class=\"section\">\n    <h3>WebComponentsの使いどころ</h3>\n    \n    <blockquote>\n        <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A6%A5%A7%A5%D6%A5%A2%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3\">ウェブアプリケーション</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>やら構成要素と切り離された、色味のないただの部品を作るための技術</p>\n\n    </blockquote>\n<p>このコンセプトから考えた、自分なりの有意義な使いどころをいくつか紹介。</p>\n\n<div class=\"section\">\n    <h4>textContentの操作</h4>\n    <p>たとえば、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>format-date\n<span class=\"synIdentifier\">  year=</span><span class=\"synConstant\">&quot;numeric&quot;</span>\n<span class=\"synIdentifier\">  month=</span><span class=\"synConstant\">&quot;2-digit&quot;</span>\n<span class=\"synIdentifier\">  day=</span><span class=\"synConstant\">&quot;2-digit&quot;</span>\n<span class=\"synIdentifier\">&gt;</span>\n  2018-06-26T03:07:51.446Z\n<span class=\"synIdentifier\">&lt;/</span>format-date<span class=\"synIdentifier\">&gt;</span>\n</pre><p>って書くとこうなるとか。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>2018/06/26<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>試し書きしたコードの全体は以下Gistからどうぞ。</p>\n\n    <blockquote>\n        <p><a href=\"https://gist.github.com/leader22/9a4c852253d270bab54c969e64199320\">WebComponents to format date strings by Intl.DateTimeFormat() &middot; GitHub</a></p>\n\n    </blockquote>\n<p>いわゆる`textContent`をラップして使うパターンで、HigherOrderWebComponentsとか勝手に言ってみたり？</p><p>そのほかにも、</p>\n\n<ul>\n<li>数値の桁を丸めたり</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>のアカウントをリンクにしたり</li>\n<li>コードブロックの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>あてたり</li>\n<li>`table`に合計の行や平均の列を追加したり</li>\n</ul><p>ちょっと考えてもこれくらい出てきたので、このパターンはもっと色々作れそう。<br />\nこのように機能的なHTMLの要素を作れるっていう捉え方をすると、割と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%AB\">イカ</a>した技術やん！ってなる。</p><p>が、結局これはただのDOM操作なので、素人が作るとすぐ魔窟と化すんやろなーっていう予感もある。<br />\nReact以前の時代を生きたノウハウ aka 生DOMを扱う上でのお作法を知ってないといけないし、なんなら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>も使えないそれ以前の、NativeのDOMの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を適切に操れる（パフォーマンスを気にしながら）スキルが必要なので。</p><p>まあそれは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>でもReact<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>でも、いつの時代でも一緒なんやけど。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Scoped <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a></h4>\n    <p>ShadowDOMなので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>は`:host`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>が使える。<br />\nみんなが欲してやまないScoped <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>ってやつができる。</p><p>これを使えば、単純なレイアウト目的の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>は置き換えられるとは思う。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> FlexBox <span class=\"synStatement\">extends</span> HTMLElement <span class=\"synIdentifier\">{</span>\n  connectedCallback() <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>.attachShadow(<span class=\"synIdentifier\">{</span> mode: <span class=\"synConstant\">'open'</span> <span class=\"synIdentifier\">}</span>);\n    <span class=\"synIdentifier\">this</span>.shadowRoot.innerHTML = `\n      &lt;style&gt;\n        :host <span class=\"synIdentifier\">{</span> display: flex; <span class=\"synIdentifier\">}</span>\n      &lt;/style&gt;\n      &lt;slot&gt;&lt;/slot&gt;\n    `;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>こうすれば、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>flex-box<span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>flex-item!<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>flex-item!<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>flex-item!<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>frex-box<span class=\"synIdentifier\">&gt;</span>\n</pre><p>みたいなこともできる。</p><p>まあでもネストする場合にどうするんだとか、条件によってはこうしたいとか考え出すとスケールしないなーという感想。<br />\n結局のところ、要件がシンプルであるものにしか使えないのは一緒。</p><p>（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A6%A5%A7%A5%D6%A5%A2%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3\">ウェブアプリケーション</a>作りのコンテキストの）Reactの`styled-component`とか比較しだすと勝ち目なんてないので、そこは比較したら敗け。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ちなみに</h4>\n    \n    <blockquote>\n        <p><a href=\"https://www.webcomponents.org/\">webcomponents.org - Discuss &amp; share web components</a></p>\n\n    </blockquote>\n<p>いわゆるWebComponentsでできた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>のカタログらしい。<br />\n今の時点で1581も登録されてるし、なにかすごい使いどころが見つかるかも？と思って見てみた俺の気持ちは以下です。</p><p>「Polymerカタログ」に改名しろ！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>というわけで</h3>\n    <p>いわゆる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A6%A5%A7%A5%D6%A5%A2%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3\">ウェブアプリケーション</a>を作ってるうちは、WebComponents最高！ってなる日は来ないと思ってる。</p><p>なにかあればコメント or リプライください！</p>\n\n</div>"
}
