{
  "title": "URLによって、ナビゲーションリストのCSSを切り替えるスクリプト",
  "html": "<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>さんほんと便利ですね。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/WordPress\">WordPress</a>で固定ページのURLによって、ナビゲーションリストの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>を切り替えるスクリプトを書いてみました。</p><p>目指せWeb屋さんの第一歩！</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>作ったもの</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wordpress\">Wordpress</a>には固定ページを追加できる機能があります。<br />\nその追加したページに対して、現在地を知らせてあげるタブメニューを設置したかったのです。</p>\n\n<ul>\n<li>トップ\n<ul>\n<li>ブログ</li>\n<li>固定ページ1</li>\n<li>固定ページ2</li>\n</ul></li>\n</ul><p>みたいな時に。<br />\n<span style=\"font-size: 90%\">※注：後述しますが、こんなもの書かなくても<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wordpress\">Wordpress</a>様は良く出来てます＋プラグインもあったりします・・・。</span></p>\n\n</div>\n<div class=\"section\">\n    <h3>ソース</h3>\n    \n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>//現在のURLからナビゲーションのリスト要素のcssを変更するスクリプト。\n//現在のURLのhrefの3番目の値と、用意したページリストが同じ場合にクラスを付加。\n//あらかじめcssに、.active{hoge:piyo;} は設定しておくこと。\n$(function(){\nvar page = new Array();　//ページリストの配列。\npage[1] = &#39;home&#39;;\npage[2] = &#39;about-me&#39;;\npage[3] = &#39;bass&#39;;\n//page[4] = &#39;新しいページのURL&#39;;　ページを増やしたら追加可能！\n\nvar url = location.href.split(&#39;/&#39;); \nvar now = url[3];\n//変数nowに、今いるURLの&#34;http://piyo.hoge.com/[この値]/・・・&#34;を取得。\n//3つ目(配列でいう4つ目)の[この値]がいわゆるページのパスになっているはず。\n\nfor (var i = 1; i &lt;= page.length; i++) {\n// page[1]はホーム以下なので無視し、追加したページからチェックしていく。\n    if (page[i] == now) {\n        var actv = page[i];\n        $(&#39;#nav nav ul li a[href$=&#34;&#39; + actv + &#39;/&#34;]&#39;).closest(&#39;li&#39;).addClass(&#39;active&#39;);\n        // 今いるURLがそのページ内なら、li要素にクラスを付加。\n    }\n}\nif(!(actv)){\n  $(&#39;#nav&gt;nav&gt;ul&gt;li:first-child&#39;).addClass(&#39;active&#39;);\n  //どのページも該当しない＝ホーム以下の場合は、#nav以下先頭のli要素＝ホームにクラスを付加。\n}\n});</pre>\n<p>内容はコメントの通りですが、試行錯誤でなんとかたどりついた結論です。<br />\nもっとスマートに書ける方は書けると思います・・。<br />\n↑書ける方、是非教えてください！</p><p>ページはカテゴリとして使うつもり(私は)なので、そんなにページ自体の改廃はしないだろうとの判断で、配列には直接URLのパスを記述するようにしました。<a href=\"#f1\" name=\"fn1\" title=\"※20110611 追記<br />\n一部修正しました。<br />\nページの子ページを作った際に表示がおかしくなっていた不具合を解消してます。\">*1</a></p>\n\n</div>\n<div class=\"section\">\n    <h3>こんなことしなくても</h3>\n    \n    <blockquote>\n        <p><a href=\"http://coliss.com/articles/blog/wordpress/plugin/wordpress-plugin-custom-css-js.html\" target=\"_blank\">WordPressの記事ごとに個別のCSS, JavaScriptを追加できるプラグイン -Custom CSS and JS | コリス</a></p>\n\n    </blockquote>\n<p>こんな便利なものがあるので、自己紹介ページみたいな単発完結型には、こっちのが圧倒的に良いと思います。</p><p>それだけじゃなくて、他にも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wordpress\">Wordpress</a>さまさまな点がもう一つ。<br />\n追加したページへ遷移すると、そのページを表す<b>liタグに.current_page_item</b>ってクラスが自動でちゃんと付きますｗ<br />\nそれも踏まえると、大方のやりたいことはできちゃうんじゃないのかなーと。</p><p>今回の私の場合だと、こうやってスクリプトを書かないと解決できなかったと信じてます。<span style=\"font-size: 90%\">(いや、信じさせて！ｗ</span></p><p>以上、初めてこういうWeb系らしい記事を書いてみました。</p>\n\n</div>\n</div><div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn1\" name=\"f1\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">※20110611 追記\n一部修正しました。\nページの子ページを作った際に表示がおかしくなっていた不具合を解消してます。</span></p>\n</div>"
}
