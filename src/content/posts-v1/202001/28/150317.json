{
  "title": "Rustのモジュールとディレクトリの関係のおさらい",
  "html": "<p>Rust 2018 Editionです。</p>\n\n    <blockquote>\n        <p><a href=\"https://keens.github.io/blog/2018/12/08/rustnomoju_runotsukaikata_2018_editionhan/\">Rust&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x4F7F;&#x3044;&#x65B9; 2018 Edition&#x7248; | &kappa;een&#x306E;Happy Hac&kappa;ing Blog</a></p>\n\n    </blockquote>\n<p>なおこちらの偉大な先人の記事がスッと頭に入る人は、このメモを読む必要ないです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>こういう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リ構造にしたかった</h3>\n    <p>RustでReact的なコードが書ける`yew`を試してたとき、無性に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リ構造を整理したくなって。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>.\n├── app.rs\n├── component\n│   └── header.rs\n└── main.rs</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>でやってるときと同じような感じにしたい。</p><p>ただ愚直にこう配置しても、Rustではパスが通せず<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>できなかった。</p><p>冒頭の記事を読み直したり、あれこれ野良<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>を漁ったりした結果、できたのがコレ。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h3>こうする</h3>\n    <pre class=\"code\" data-lang=\"\" data-unlink>.\n├── app.rs\n├── component\n│   ├── header.rs\n│   └── mod.rs\n└── main.rs</pre><p>もしくは、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>.\n├── app.rs\n├── component\n│   └── header.rs\n├── component.rs\n└── main.rs</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リを切っただけでは何も起こらないので、それを指し示す存在が必要。</p><p>上の例だと`mod.rs`がそれ、下の例だと`component.rs`がそれで、結果的には同じ。<br />\n`mod.rs`は2015 Editionの遺産だそうですが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リにすべてしまっちゃいたい場合はこれしかなさそう。</p><p>`component/mod.rs`にはこう書く。</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synComment\">// component/mod.rs</span>\n<span class=\"synStatement\">pub</span> <span class=\"synStatement\">mod</span> <span class=\"synIdentifier\">header</span>;\n</pre><p>`component`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リ配下のものをよしなにexportする。</p>\n\n</div>\n<div class=\"section\">\n    <h3>`main.rs`が重要</h3>\n    <p>ここから辿れないものは、ファイルとして存在していようとも、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>できない。</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synComment\">// main.rs</span>\n<span class=\"synStatement\">mod</span> <span class=\"synIdentifier\">app</span>;\n<span class=\"synStatement\">mod</span> <span class=\"synIdentifier\">component</span>;\n\n<span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">main</span>() {\n    <span class=\"synPreProc\">yew</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">start_app</span><span class=\"synSpecial\">::</span><span class=\"synStatement\">&lt;</span><span class=\"synPreProc\">app</span><span class=\"synSpecial\">::</span>App<span class=\"synStatement\">&gt;</span>();\n}\n</pre><p>`mod component`が重要。<br />\nこうしておかないと、`app.rs`から`component`配下が参照できない。</p><p>`app.rs`にはこう書く。</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synComment\">// app.rs</span>\n<span class=\"synStatement\">use</span> <span class=\"synPreProc\">crate</span><span class=\"synSpecial\">::</span><span class=\"synPreProc\">component</span><span class=\"synSpecial\">::</span><span class=\"synPreProc\">header</span><span class=\"synSpecial\">::</span>Header;\n\n<span class=\"synComment\">// ...</span>\n\n<span class=\"synStatement\">impl</span> Component <span class=\"synStatement\">for</span> App {\n\n<span class=\"synComment\">// ...</span>\n\n  <span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">view</span>(<span class=\"synType\">&amp;</span><span class=\"synConstant\">self</span>) <span class=\"synStatement\">-&gt;</span> Html {\n    <span class=\"synComment\">// ...</span>\n\n    <span class=\"synPreProc\">html!</span> {\n      <span class=\"synStatement\">&lt;</span>div<span class=\"synStatement\">&gt;</span>\n        <span class=\"synStatement\">&lt;</span>Header <span class=\"synStatement\">/&gt;</span>\n      <span class=\"synStatement\">&lt;/</span>div<span class=\"synStatement\">&gt;</span>\n    }\n  }\n}\n</pre><p>`crate::`で、このプロジェクトのルートから辿ることができる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>`lib.rs`を置いてもいい</h3>\n    <p>上の例で`main.rs`に書いてたものを、`lib.rs`を作って書くこともできる！</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synComment\">// lib.rs</span>\n<span class=\"synStatement\">mod</span> <span class=\"synIdentifier\">app</span>;\n<span class=\"synStatement\">mod</span> <span class=\"synIdentifier\">component</span>;\n\n<span class=\"synStatement\">pub</span> <span class=\"synStatement\">use</span> <span class=\"synPreProc\">app</span><span class=\"synSpecial\">::</span>App;\n</pre><p>こうすると、`App`だけをexportできる！</p><p>`main.rs`はこうなる。</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synComment\">// main.rs</span>\n<span class=\"synStatement\">use</span> <span class=\"synPreProc\">yew_todo</span><span class=\"synSpecial\">::</span>App;\n\n<span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">main</span>() {\n    <span class=\"synPreProc\">yew</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">start_app</span><span class=\"synSpecial\">::</span><span class=\"synStatement\">&lt;</span>App<span class=\"synStatement\">&gt;</span>();\n}\n</pre><p>`yew_todo`のところは、`cargo new`するときに指定した実際のプロジェクト名。</p>\n\n</div>"
}
