{
  "title": "15桁以上のIDとかをマイナス１する関数",
  "html": "<p>そんな関数いつ使うんやって話でしょうが、いる時はいるんです・・ｗ</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>とか使うと、ツイートIDを取り回す必要があったりします。<br />\n具体的には現在表示されてるツイートより古いものを・・って場合に必要です。</p><p>で、さすがの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>さまとなると、IDの桁も馬鹿にならんわけで。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>単純にマイナス１すると</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">document</span>.write(10000000000000000);\n<span class=\"synStatement\">document</span>.write(10000000000000000 - 1); <span class=\"synComment\">// 10000000000000000・・だと・・？！</span>\n</pre><p>減らない！何これ！<br />\n詳しくは知りませんが、有効桁数が決まってるみたいですね。<br />\nで、そんなデカすぎる数値のことは知らん、と。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://ja.wikibooks.org/wiki/JavaScript_%E5%9E%8B%E3%81%AE%E8%A7%A3%E8%AA%AC#.E6.95.B0.E5.AD.97.28Number.29.E5.9E.8B\" target=\"_blank\">JavaScript 型の解説 - Wikibooks</a></p>\n\n    </blockquote>\n<p>なので、こうなったら文字列としてごにょごにょするしかない・・と。</p>\n\n</div>\n<div class=\"section\">\n    <h3>文字列としてマイナス１する関数</h3>\n    <p>というわけで、書きました。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 引数にはマイナス1したい数値を。</span>\n<span class=\"synComment\">// おそらくこんな関数が必要な場合は20桁くらいになってるはずなので文字列を想定。</span>\n<span class=\"synIdentifier\">var</span> minus1 = <span class=\"synIdentifier\">function</span>(strNumber) <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// [A]1ｰ9の値と末尾：末尾が0ではなくて、1桁のみ-1すればOKのパターン</span>\n  <span class=\"synComment\">// [B]0以外の数値の後に0が1回以上繰り返して末尾：n0とかn00とかn000とか、(n-1)999ってしたいパターン</span>\n  <span class=\"synIdentifier\">var</span> reg = <span class=\"synConstant\">/(([1-9])0+)$|([1-9])$/</span>,\n    ex = reg.exec(strNumber);\n\n  <span class=\"synStatement\">if</span> (ex &amp;&amp; <span class=\"synType\">RegExp</span>.$2) <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// [B]の場合</span>\n    <span class=\"synComment\">// n0とかn00のnを取得して、-1</span>\n    <span class=\"synIdentifier\">var</span> regFirstDigit = parseInt(<span class=\"synType\">RegExp</span>.$2, 10) - 1;\n    <span class=\"synStatement\">if</span>(regFirstDigit === 0)<span class=\"synIdentifier\">{</span> regFirstDigit = <span class=\"synConstant\">''</span><span class=\"synIdentifier\">}</span>;\n    <span class=\"synComment\">// 全体の桁数から先頭を引いた分、9をつなげたものを作成</span>\n    <span class=\"synIdentifier\">var</span> i = 0, l = <span class=\"synType\">RegExp</span>.$1.length - 1;\n    <span class=\"synIdentifier\">var</span> regOtherDigit = <span class=\"synConstant\">''</span>;\n    <span class=\"synStatement\">for</span> (; i &lt; l; i++) <span class=\"synIdentifier\">{</span>\n      regOtherDigit += <span class=\"synConstant\">'9'</span>;\n    <span class=\"synIdentifier\">}</span>\n    <span class=\"synComment\">// つなげてリターン</span>\n    <span class=\"synStatement\">return</span> <span class=\"synType\">RegExp</span>.leftContext + regFirstDigit + regOtherDigit;\n  <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> (ex) <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// [A]の場合</span>\n    <span class=\"synComment\">// マッチした値を素直に−1</span>\n    <span class=\"synIdentifier\">var</span> regFirstDigit = parseInt(ex, 10) - 1;\n    <span class=\"synComment\">// つなげてリターン</span>\n    <span class=\"synStatement\">return</span> <span class=\"synType\">RegExp</span>.leftContext + regFirstDigit;\n  <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">else</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// 考えられないけど一応マッチしなかった時用</span>\n    <span class=\"synStatement\">return</span> strNumber;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>;\n\nminus1(<span class=\"synConstant\">'123456789'</span>); <span class=\"synComment\">// 123456788</span>\nminus1(<span class=\"synConstant\">'209328741298743'</span>); <span class=\"synComment\">// 209328741298742</span>\nminus1(<span class=\"synConstant\">'1000000000000000000000'</span>); <span class=\"synComment\">// 999999999999999999999</span>\n</pre><p>最初は全部配列にsplitして、それで・・とか考えてたんですけど、文字列操作ならもうどストレートにやろうと。<br />\n引数はTwitterAPIの検索<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>だと、id_strとかを想定してます。</p><p>まぁただマイナス１するだけですが、何桁のが来ても大丈夫なはず・・。</p><p>やっててよかった<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>！</p>\n\n</div>\n</div>"
}
