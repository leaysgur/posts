{
  "title": "Gitはじめてみた",
  "html": "<p>会社でGitを導入するとかしないとかいう話があって、もし使うことになってもあたふたしないように。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Linux\">Linux</a>もターミナルもさっぱりーみたいな人が多いみたい(勝手ないめーじ)やので、みんながみんな強制導入！ってのは運用としてメリットないんじゃないかなーと個人的には思ってたり。</p><p>はてさて。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>インストール</h3>\n    <p>あちこち調べると、インストールは最新版を手に入れるためにもソースからやれと書いてありました。<br />\nでもソースからインストールしたくない派としては、どうにかしてyumで・・。<br />\nまぁ、リポ選べば普通にあるみたいですけど。</p>\n<pre class=\"code\" data-unlink>sudo yum install git --enablerepo=rpmforge</pre><p>まぁ、コマンド打つまでもなくインストール済だったっていうね・・。<br />\nさくらVPSてgit標準装備なん？今となっては知る由もなしｗ</p>\n\n</div>\n<div class=\"section\">\n    <h3>考え方的なところ</h3>\n    <p>中央の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>だけでなく、ローカルにも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>を持つ体系。<br />\nローカルってのは物理的にローカルPCというわけではなく、中央のサーバー以外のところって意味であって・・。</p><p>いわゆる黒い画面がダメなタイプの人への助け舟、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GUI\">GUI</a>クライアントも沢山あるものの、それはあくまでローカルPCにローカル<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>を作った場合の話。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ssh\">ssh</a>でサーバーにつないで、そこのサーバーのファイルを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GUI\">GUI</a>で見るツールってあるんかな？</p>\n\n</div>\n<div class=\"section\">\n    <h3>Gitコマンドのメモ</h3>\n    \n<div class=\"section\">\n    <h4>init / clone</h4>\n    <p>いちばん最初。<br />\n自分で0からはじめるプロジェクトの場合はinitすることで管理開始。<br />\nそうでなければどこからかcloneすることで管理開始。</p>\n\n    <blockquote>\n        <p>プロジェクトのディレクトリ内に、.gitディレクトリがあるかどうかが管理してるかどうかの違い。<br />\nなのでこの.gitを削除しちゃえば、さよならgit管理っと。</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>add</h4>\n    <p>作成したファイルや修正したファイル、とにかくファイルをgitで管理するためには、このコマンドでgitにファイルの存在を知らせる必要がある。<br />\nステージングするともいうらしい。</p>\n<pre class=\"code\" data-unlink>git add .</pre><p>これでいまのディレクトリ内のファイルを全部addできる。</p>\n\n</div>\n<div class=\"section\">\n    <h4>commit</h4>\n    <p>自分のリポジトリに対して、作業結果をセーブするのがコレ。<br />\n逆に言うと、ファイル自体の修正＋ファイル保存では、git上のセーブデータにはなってないってこと。</p><p>そしてこのコマンドでセーブできるのは、前のaddで管理対象になってるもののみ。<br />\nコミットしようとコマンドを叩いたとき、addされてないファイルがあれば教えてくれるので安心。</p>\n\n    <blockquote>\n        <p>基本的にはgit管理下のディレクトリでは、全ファイルが管理対象となるのが理想。<br />\nどうしても管理したくないファイルは、例外として設定する。(.gitignore)</p>\n\n    </blockquote>\n<pre class=\"code\" data-unlink>git commit -a</pre><p>ちなみにコレすると、addしてなくても勝手にコミットしてくれる。<br />\nはてな的には非推奨らしい。</p><p>コミット時にはコミットログを残す必要があって、viが勝手に起動。<br />\nエディタ開かず済ませたい場合は、こう。</p>\n<pre class=\"code\" data-unlink>git commit -m &#39;ここにめっせーじ&#39;</pre>\n</div>\n<div class=\"section\">\n    <h4>branch</h4>\n    <pre class=\"code\" data-unlink>git branch second</pre><p>secondブランチ作成</p><p>からの</p>\n\n</div>\n<div class=\"section\">\n    <h4>checkout</h4>\n    <pre class=\"code\" data-unlink>git checkout second</pre><p>もう一度branchコマンド使えば、現在のブランチ一覧と現在のブランチが見れるーよ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>merge</h4>\n    <pre class=\"code\" data-unlink># secondブランチでなんかファイル修正\n# 修正したらaddしてコミット\n# 修正結果を本家にくっつけよう！\ngit checkout master\ngit merge second</pre><p>まぁ小規模な内容やったりすると、なぜブランチを切るのかわからんけど・・そこは考えたら負けってやつよね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>そのほか</h4>\n    \n<div class=\"section\">\n    <h5>addしたファイル削除</h5>\n    <pre class=\"code\" data-unlink>git reset HEAD -- fileName</pre>\n</div>\n<div class=\"section\">\n    <h5>commitしたファイル削除</h5>\n    <pre class=\"code\" data-unlink>git rm fileName</pre>\n</div>\n<div class=\"section\">\n    <h5>ブランチ削除</h5>\n    <pre class=\"code\" data-unlink>git branch -d branchName</pre>\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3>こっから先</h3>\n    <p>Gitぽいところというか、真骨頂はこっから先です。<br />\n今までだと、個人としてのファイル管理をちょっと堅牢にしただけっていう。<br />\n意味のあるようで意味のない感じです。</p><p>PullとかPushとかやらなきゃ損損！なんかな？</p>\n\n    <blockquote>\n        <p>参考：イラストでわかる！git入門の入門 : アシアルブログ - <a href=\"http://blog.asial.co.jp/894\">http://blog.asial.co.jp/894</a></p>\n\n    </blockquote>\n<p>ここのシリーズは毎度おもしろい上にわかりやすい！</p>\n\n    <blockquote>\n        <p>参考：hatena/Git-for-Designers · GitHub - <a href=\"https://github.com/hatena/Git-for-Designers\">https://github.com/hatena/Git-for-Designers</a><br />\n参考：Git - Book - <a href=\"http://git-scm.com/book/ja\">http://git-scm.com/book/ja</a></p>\n\n    </blockquote>\n<p>ちょっとむずかしいけど、読んでて損なし。<br />\nというかこっからが真骨頂。</p>\n\n</div>\n</div>"
}
