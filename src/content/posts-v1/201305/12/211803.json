{
  "title": "いまさらPhantomJSを使ってみる",
  "html": "<p>とりあえずインストールと一番簡単なサンプルを動かすまで。<br />\n仕事でも、もしかしたら使えるかも？</p>\n\n<div class=\"section\">\n    <h3>本当に簡単に使える</h3>\n    <p>いろいろ調べてみたものの、どこの記事も古いらしく。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Webkit\">Webkit</a>とかその他諸々インストールして、その上<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9\">ソースコード</a>からでないとビルドできない・・みたいなのは、昔の話！</p><p>今のPhantomJSはもっと簡単にインストールできました。</p>\n\n</div>\n<div class=\"section\">\n    <h3>インストール</h3>\n    \n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Linux\">Linux</a></h4>\n    <p>1. ダウンロードして解凍して</p>\n<pre class=\"code\" data-unlink>mkdir temp &amp;&amp; cd temp\nwget https://phantomjs.googlecode.com/files/phantomjs-1.9.0-linux-x86_64.tar.bz2 #64bitの場合\nbzip2 -cd phantomjs-1.9.0-linux-x86_64.tar.bz2 | tar xvf -</pre><p>2. 解凍されたフォルダにある bin/phantomjs を /usr/local/bin にでも投げ込む or PATH通す！</p><p>以上！</p>\n\n</div>\n<div class=\"section\">\n    <h4>Mac</h4>\n    <p>自宅ではMacで試しました。</p><p>1. 以下ページ中段、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Mac%20OS%20X\">Mac OS X</a>のところからからzipでダウンロード。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://phantomjs.org/download.html\" target=\"_blank\" title=\"PhantomJS: Download and Install\">PhantomJS: Download and Install</a></p>\n\n    </blockquote>\n<p>2. zipを解凍<br />\n3. 解凍されたフォルダにある bin/phantomjs を /usr/local/bin にでも投げ込む or PATH通す！</p><p>以上！</p><p>めっちゃ簡単でした。</p><p>単純にNodeが既にインストールされたたからかもですが、Nodeも簡単にインストールできちゃうので・・。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://lealog.hateblo.jp/entry/2012/12/30/000928\" target=\"_blank\" title=\"これからNodeやるならnodebrew！あとforeverも。 - console.lealog();\">これからNodeやるならnodebrew！あとforeverも。 - console.lealog();</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>一番簡単なサンプル</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>にアクセスして、キャプチャ撮って保存するやつ。</p><p>PhantomJSはインストール済として、PATHも通ってるとして。</p>\n<pre class=\"code\" data-unlink><span class=\"synComment\">// capGoogle.js</span>\n<span class=\"synIdentifier\">var</span> page = require(<span class=\"synConstant\">'webpage'</span>).create();\npage.open(<span class=\"synConstant\">'http://www.google.co.jp'</span>, <span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n    page.render(<span class=\"synConstant\">'google.png'</span>);\n    phantom.exit();\n<span class=\"synIdentifier\">}</span>);\n</pre><p>というようなコードを書いて、</p>\n<pre class=\"code\" data-unlink>phantomjs capGoogle.js</pre><p>すると、</p><p>あっさり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/google\">google</a>.pngが生成されました。<br />\nこれは楽しいかもしれない・・・！</p>\n\n</div>\n<div class=\"section\">\n    <h3>おまけ</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Mac%20OS%20X\">Mac OS X</a> Lion以降で試した場合に、以下のエラーが出たら。</p>\n\n    <blockquote>\n        <p>Can't open input server /Library/InputManagers/MultiClutchInputManager.bundle</p>\n\n    </blockquote>\n<p>まぁエラー出るけど普通に動作するっていう気持ち悪い状態。</p><p>どうやら、 /Library/InputManagers/ がLion以降は不要な割に居座るあげく、他のプログラムと干渉するとかなんとか。<br />\n削除するなり適当にリネームして逃がすなりすれば、エラーは出なくなります。</p>\n\n</div>"
}
