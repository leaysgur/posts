{
  "title": "jQueryとSizzleの関係について",
  "html": "<p>事の発端。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>の使わない機能があまりに多いのでカスタムビルドすることにした</li>\n<li>Sizzleも外せることを知る(容量が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gzip\">gzip</a>で20KB分くらい減る)</li>\n<li>外すと何が変わるか気になる <- いまここ</li>\n</ul><p>ってなモチベーションで調べた一連の内容です。</p>\n\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>とSizzleの関係</h3>\n    <p>あらためて一応。<br />\n「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>といえば」な以下のようなコード。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> $hoge = $(<span class=\"synConstant\">'#hoge'</span>); <span class=\"synComment\">// こういうのとか</span>\n<span class=\"synIdentifier\">var</span> $fuga = $(<span class=\"synConstant\">'.fuga'</span>); <span class=\"synComment\">// こういうのとか</span>\n$hoge.find(<span class=\"synConstant\">'.foo'</span>);     <span class=\"synComment\">// こういうのとか</span>\n$hoge.text();           <span class=\"synComment\">// 実はこういうのも</span>\n</pre><p>そう、いわゆるこの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>の実態がSizzleなのです。<br />\n正確にはもう少し他のメソッドにも関係があります。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/jquery/sizzle/tree/master\" target=\"_blank\" title=\"jquery/sizzle\">jquery/sizzle</a></p>\n\n    </blockquote>\n<p>で、そのSizzleが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>の中でどういう動きをしてるかを調べてみるエントリでございます。</p>\n\n</div>\n<div class=\"section\">\n    <h3>コードを読む</h3>\n    <p>それが一番はやかろうということで、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>の2.xの最新版を読んでいく。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/jquery/jquery/tree/2.1-stable\" target=\"_blank\" title=\"jquery/jquery at 2.1-stable\">jquery/jquery at 2.1-stable</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jquery\">jquery</a>/src/core/init.js</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/jquery/jquery/blob/2.1-stable/src/core/init.js\" target=\"_blank\" title=\"jquery/init.js at 2.1-stable · jquery/jquery\">jquery/init.js at 2.1-stable · jquery/jquery</a></p>\n\n    </blockquote>\n<p>コレがいわゆる本丸、$(selector, context) のところ。<br />\ncontextはさておき、selectorがどう判別されていって動いてるかをざっくり書くと。</p>\n\n<div class=\"section\">\n    <h5>selectorが文字列なら</h5>\n    \n<ul>\n<li>'&lt;div&gt;' みたいな文字列なら</li>\n</ul><p>div要素を作ってそれをラップした$オブジェクトにしてreturn</p>\n\n<ul>\n<li>'#<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>' みたいな文字列なら</li>\n</ul><p>document.getElementById('<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>')したものをラップした$オブジェクトにしてreturn</p>\n\n<ul>\n<li>それ以外は$.fn.findしたものをreturn</li>\n</ul><p>これが実は重要なので、[*1]で後述。</p>\n\n</div>\n<div class=\"section\">\n    <h5>selectorがDOMElementなら</h5>\n    \n<ul>\n<li>その要素をラップした$オブジェクトにしてreturn</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>そのほかselectorが関数の場合などなど</h5>\n    <p>今回は気にしないので割愛。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>[*1] $.fn.find()とは</h4>\n    <p>上述した流れで、$('#id')以外のだいたいの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>がココにたどり着くことになるのですが、<br />\nこれが実はそのまんまSizzleに渡ります。</p>\n\n</div>\n<div class=\"section\">\n    <h4>idが最速</h4>\n    <p>この時点で言えることですね。<br />\nそもそもSizzleに渡らないので、以降の処理や判定がない分速いです。</p><p>つまり速さを追い求めてるなら、'#<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>'的な文字列を渡す使い方しかしちゃダメってことです！！！1</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>冒頭に立ち戻る</h3>\n    <p>で、今回はSizzleの有無による差分が気になるエントリなので、2パターンについてそれぞれ追っていきます。<br />\nちなみに、さっきの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>でもその差分はさくっと見れます。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/jquery/jquery/blob/2.1-stable/src/selector-native.js\" target=\"_blank\" title=\"jquery/selector-native.js at 2.1-stable · jquery/jquery\">jquery/selector-native.js at 2.1-stable · jquery/jquery</a><br />\n<a href=\"https://github.com/jquery/jquery/blob/2.1-stable/src/selector-sizzle.js\" target=\"_blank\" title=\"jquery/selector-sizzle.js at 2.1-stable · jquery/jquery\">jquery/selector-sizzle.js at 2.1-stable · jquery/jquery</a></p>\n\n    </blockquote>\n<p>この2つのファイルが差分になってる模様。<br />\nSizzleがない場合、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>としての実装がある感じ。</p>\n\n<div class=\"section\">\n    <h4>Sizzleを使ってない場合のfind</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/jquery/jquery/blob/2.1-stable/src/selector-native.js\" target=\"_blank\" title=\"jquery/selector-native.js at 2.1-stable · jquery/jquery\">jquery/selector-native.js at 2.1-stable · jquery/jquery</a></p>\n\n    </blockquote>\n<p>94行目あたり。<br />\nというわけで、単にqurySelectorAllしたものをラップして返すようになってます。<br />\nなので、querySelectorAllが存在してて、ちゃんと動く前提であることがわかります。</p><p>このファイルの冒頭のコードコメントにも、外すなら自己責任でやれよって書いてあります。<br />\nそして、このコードのI/Oを保てば、独自のSizzleみたいなのも作れるよとも。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Sizzleを使ってる場合のfind</h4>\n    <p>Sizzleのコンスト<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>タ？に渡ります。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L193\" target=\"_blank\" title=\"sizzle/sizzle.js at master · jquery/sizzle\">sizzle/sizzle.js at master · jquery/sizzle</a></p>\n\n    </blockquote>\n<p>215行目あたりにご注目。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>文字列をパースした結果、</p>\n\n<ul>\n<li>#idならgetElementById</li>\n<li>tagならgetElementsByTagName</li>\n<li>.classならgetElementsByClassName</li>\n<li>それ以外はquerySelectorAllが使えれば使う</li>\n<li>それでもダメな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>はパースしてあれこれする関数へ(1919行あたり)</li>\n</ul><p>奥へ行けば行くほどパフォーマンスは落ちるので、目安として覚えておきたいところ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Sizzleを外すメリット</h3>\n    <p>というわけで、です。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>はほぼ#idしか使わないようにしている</li>\n<li>querySelectorAllがバグなく動く環境が対象である</li>\n<li>かつ、qSAのパフォーマンスも気にならない環境である</li>\n</ul><p>そういう条件下なら、初期化コストとファイル容量がちょっと下がるのでパフォーマンスは良くなる。<br />\nまぁならなんで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>使ってるのっていう話になるパターンばっかな気はするけど。</p>\n\n    <blockquote>\n        <p>まあ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>だけ読み込んで何もしないページのパフォーマンス測っても、<br />\n10msくらいしか早くならなかったので、そうそう選ばない選択肢かなー。(@PC/ChromeCanary)</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>Sizzleを外すデメリット</h3>\n    \n<ul>\n<li>querySelectorAllが遅い環境の場合、余計に遅くなる可能性がある</li>\n<li>querySelectorAllのバグfixやpolyfillがない</li>\n<li>その他Sizzleのブリッジ関数たちも同じく</li>\n<li>やんちゃな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>が使えない</li>\n</ul>\n<div class=\"section\">\n    <h4>querySelectorAll</h4>\n    <p>モバイルではすっごい遅かったイメージがあって、暗黙の内に使ってなかったんですけど、<br />\nやっぱりまだちょっと遅いですね・・。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h5>実機で見たら案の定だった</h5>\n    <p><blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"ja\" dir=\"ltr\">iPhone4/iOS7 と <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iPhone6\">iPhone6</a>/xiOS7、querySelectorAllのパフォーマンス8-20倍くらい違うんですけどこれは</p>&mdash; りぃ (@leader22) <a href=\"https://twitter.com/leader22/status/553005383447351299?ref_src=twsrc%5Etfw\">January 8, 2015</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><br />\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"ja\" dir=\"ltr\">ちなみにgetElementByIdだともっと差が開く(120倍とか・・</p>&mdash; りぃ (@leader22) <a href=\"https://twitter.com/leader22/status/553005512980045824?ref_src=twsrc%5Etfw\">January 8, 2015</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><br />\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"ja\" dir=\"ltr\">GaralxyS3/Android4.0のqSA、iPhone4/iOS7と同じかそれ以下という事実</p>&mdash; りぃ (@leader22) <a href=\"https://twitter.com/leader22/status/553057021797212160?ref_src=twsrc%5Etfw\">January 8, 2015</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><p></p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>Backbone.Marionette使ってるなら</h4>\n    <p>Marionette使ってる場合にViewでよく使うuiってありますよね。<br />\nあのMarionette.Viewは、uiオブジェクトを作る時に全部findで探しに行く実装になってるので、<br />\nせっかくのidも、もれなく全部querySelectorAllされるハメになります。</p><p>どういう意味かわかりますよね・・。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ふと</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/IE9\">IE9</a>未満を非対応にすることで生まれたjQuery2.x系。<br />\nならなんでIE6+なSizzleを使い続けてるんやろ？って思ったけど、<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>(というかSizzle)のオレオレ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>は、そもそもquerySelectorAllでも使えないからですね。</p><p>(あんな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>使うやつはモグリではないかと思ったりもするけど、)<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>的な発想なら妥当な選択やったんですかねー。</p><p>時代はモバイルや！とか言いつつ、出てくるライブラリってPCのことばっか見てたりするし、<br />\nモバイル特化のそういうライブラリ群作るなら今ですよ奥さん！きっと需要あるよ！</p>\n\n</div>"
}
