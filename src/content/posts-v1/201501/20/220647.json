{
  "title": "たまに気になるjQueryセレクタの記法",
  "html": "\n    <blockquote>\n        <p><a href=\"http://lealog.hateblo.jp/entry/2015/01/13/183607\">jQuery&#x3068;Sizzle&#x306E;&#x95A2;&#x4FC2;&#x306B;&#x3064;&#x3044;&#x3066; - console.lealog();</a></p>\n\n    </blockquote>\n<p>って記事をこないだ書きました。<br />\n予想以上に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A5%D6\">はてブ</a>されてて、みんな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>のこと大好きなんやなって思いました。</p><p>で、そのときにメモってたやつをまとめたら、それなりの長さになったのでついでに。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// これと</span>\n$(<span class=\"synConstant\">'#hoge'</span>, <span class=\"synConstant\">'#fuga'</span>);\n\n<span class=\"synComment\">// これ</span>\n$(<span class=\"synConstant\">'#fuga'</span>).find(<span class=\"synConstant\">'#hoge'</span>);\n</pre><p>どっちがどうでどうなるの？みたいな、たまに気になる記法についてです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>そもそも</h3>\n    <p>こんなもんが何の得になるんじゃーってのはごもっともで。<br />\n最初に断っておくと、数あるクソコードのチューニング対象という切り口で見た時、<br />\nこんなものの最適化は序の口にすら当たりません。</p><p>そもそもDOMなんてキャッシュして使うもので、何回も取得なんてやらないのが鉄則。<br />\nで、その数少ないであろう取得時のお作法なので、そこまで役立つことはないと思います。</p><p>が、知ってて損はしないのでいちおう。</p>\n\n</div>\n<div class=\"section\">\n    <h3>たまに気になる記法の違いたち</h3>\n    \n<div class=\"section\">\n    <h4>$(selector, context) === $(context).find(selector)</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 実行されるコードはいっしょ</span>\n$(selector, context);\n$(context).find(selector);\n</pre><p>これは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9\">ソースコード</a>に書いてある通りですね。<br />\ncontextが指定されてた場合、それでもってfindします。</p><p>まあcontextをキャッシュして使いまわせるシーンでは、<br />\n後者のようにfindする方が速くて良いです。</p>\n\n</div>\n<div class=\"section\">\n    <h4>$(selector, context) vs $(context).find(selector)</h4>\n    <p>というわけなので、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;parent&quot;</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\"> </span><span class=\"synType\">class</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;child&quot;</span><span class=\"synIdentifier\">&gt;</span>C1<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\"> </span><span class=\"synType\">class</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;child&quot;</span><span class=\"synIdentifier\">&gt;</span>C2<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>って場合に、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 既に親がキャッシュされてたとしたら</span>\n<span class=\"synIdentifier\">var</span> $<span class=\"synStatement\">parent</span> = $(<span class=\"synConstant\">'#parent'</span>);\n\n$(<span class=\"synConstant\">'.child'</span>); <span class=\"synComment\">// ってするのがいいのか</span>\n$<span class=\"synStatement\">parent</span>.find(<span class=\"synConstant\">'.child'</span>); <span class=\"synComment\">// ってするのがいいのか</span>\n</pre><p>さて、どっちでしょう！</p><br />\n<p>正解は、</p>\n\n<ul>\n<li>findしようとする相手がid<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>で捕まるなら、$('#id') で取るべし(contextはいらない)</li>\n<li>その他の場合は、検索範囲を絞ることができる後者、findで取るべし</li>\n</ul><p>詳しい理由は次へ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>doc.getElementsByClassName vs context.getElementsByClassName</h4>\n    <p>そもそもなDOMのSelectorAPI的な話ですが、コンテキストは指定した方が速い。<br />\n対象がidの場合は、そもそもdocument.getElementByIdであって、context.getElementByIdではない(ってかできない)。</p><p>原則DOMはキャッシュして欲しいので、出来る限りcontextを囲い込むべしってことですね。<br />\nもちろんTPOはありますけど！</p>\n\n</div>\n<div class=\"section\">\n    <h4>$('.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>') vs $('span.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>')</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// &lt;span class=&quot;hoge&quot;&gt;これを取る場合に&lt;/span&gt;</span>\n\n<span class=\"synComment\">// こうするか</span>\n$(<span class=\"synConstant\">'.hoge'</span>);\n<span class=\"synComment\">// こうしたほうがいいのか</span>\n$(<span class=\"synConstant\">'span.hoge'</span>);\n</pre><p>これよく見ますねー。<br />\nなんか厳密に指定したほうが速くなるような気が・・大きなお世話です！</p><p>実装として、</p>\n\n<ul>\n<li>単一のidでもclassでもtagとも判定できない文字列は、もれなくquerySelectorAllされる</li>\n<li>よって、getElementsByClassNameで済んだ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>なのに、querySelectorAllされちゃう</li>\n</ul><p>よって、前者のが速い。</p><p>$('.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a> #fuga')みたいなやつも遅くなるだけなのでやめてあげてください。</p>\n\n</div>\n<div class=\"section\">\n    <h4>$('#<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>') vs $('#<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>', '#<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hoge\">hoge</a>-parent')</h4>\n    <p>contextを指定しちゃうとfindになっちゃうので、前者のが速い。</p>\n\n<ul>\n<li>前者は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>のスコープでgetElementByIdしてくれる</li>\n<li>後者はSizzle($.findの後)でgetElementByIdしてくれる</li>\n</ul><p>ちょっと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>コールの数が減るくらいですけど、いちおう。</p><p>あなたがアレコレ考えなくても<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>様がよしなにしてくれるのです！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>最後に言い訳</h3>\n    <p>つらつらと書いてきましたがこの記事は、</p>\n\n<ul>\n<li>querySelectorAllよりもgetElementsByClassNameの方が速い</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>コールが少ない = 速い</li>\n</ul><p>といったニュアンスで書いてるので、これが当てはまらない環境では相容れない知識です。<br />\nまあIE6とか7とか相手にする時代ならともかく、今はだいたいこの認識で間違いないような？と思ってますが。<br />\n少なくとも手元のiPhone4/5/6では、圧倒的にquerySelectorAllが遅かったし・・。</p><p>ちなみに、抑えておくべき情報は2011年に全て書いてありました。</p>\n\n    <blockquote>\n        <p><a href=\"http://tech.kayac.com/archive/jquery-selector-api-tuneup.html\" target=\"_blank\" title=\"jQueryのCSSセレクタAPIを高速に扱う方法 | tech.kayac.com - KAYAC engineers&apos; blog\">jQueryのCSSセレクタAPIを高速に扱う方法 | tech.kayac.com - KAYAC engineers&apos; blog</a></p>\n\n    </blockquote>\n<p>実は公式にも似たような情報がありました・・！</p>\n\n    <blockquote>\n        <p><a href=\"http://learn.jquery.com/performance/optimize-selectors/\" target=\"_blank\" title=\"Optimize Selectors | jQuery Learning Center\">Optimize Selectors | jQuery Learning Center</a></p>\n\n    </blockquote>\n\n</div>"
}
