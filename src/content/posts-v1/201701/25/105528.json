{
  "title": "JavaScriptからAmazon Cognitoを使うためのまとめ",
  "html": "<p>最低限な要件だけ使ってみるにしても罠だらけだったのでメモ。<br />\n調べてもろくな情報出てこなかったので、業務レベルではまじで誰も使ってないんじゃねーのって気持ちがある。</p><p>願わくばもう使いたくない( ˘ω˘)<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Amazon\">Amazon</a> Cognito is 何</h3>\n    <p>そもそもですが・・。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Amazon\">Amazon</a> Cognitoでできることは、大きく分けて2つです。</p>\n\n<ul>\n<li>ログイン・セッション機能</li>\n<li>データの同期機能</li>\n</ul><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AWS\">AWS</a>のコンソールのCognitoのページUI的にも、</p>\n\n<ul>\n<li>User Pools</li>\n<li>Federated Identities</li>\n</ul><p>ってな切り分けになっててそれぞれ対応してる。<br />\nまあこのサーバーレスだなんだの時代に、そういうことできるサービスがあることは不思議ではない。</p><p>Alternativesという意味では、Firebase Authenticationとかあたり？</p>\n\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SDK\">SDK</a>たち</h3>\n    <p>そしてjsで使う上で必要であろう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SDK\">SDK</a>ですが、いくつかあります。（＝バラバラです）</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/aws\">aws</a>-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/sdk\">sdk</a>: <a href=\"https://github.com/aws/aws-sdk-js\">https://github.com/aws/aws-sdk-js</a></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/amazon\">amazon</a>-cognito-identity-js: <a href=\"https://github.com/aws/amazon-cognito-identity-js\">https://github.com/aws/amazon-cognito-identity-js</a></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/amazon\">amazon</a>-cognito-js: <a href=\"https://github.com/aws/amazon-cognito-js\">https://github.com/aws/amazon-cognito-js</a></li>\n</ul><p>npmからインストールできるそれ関連のパッケージはこの3つ。<br />\n使いたい機能によって、必要なライブラリが変わります。</p><p>Cognitoを使うには、どちらの機能にしてもコンソールでいくつか作業が必要なのですが、この記事ではコードだけ載せていきます。<br />\nなんしかコンソールを通して拾っておくべき情報は以下4つ。</p>\n\n<ul>\n<li>region</li>\n<li>IdentityPoolId</li>\n<li>UserPoolId</li>\n<li>ClientId</li>\n</ul>\n<div class=\"section\">\n    <h4>コンソール作業での落とし穴</h4>\n    <p>User Poolsを作ったあと、それを使うためのAppを登録すると思います。<br />\nそのときに、クライアントシークレットを「生成しない」ようにする必要があります。</p><p>なんか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SDK\">SDK</a>からは、シークレットを使った認証をサポートしてないらしく。<br />\n`1 validation error detected: Value at 'clientId' failed to satisfy constraint`とかいう見当違いのエラーが返ってきたらそれな可能性が高いです。</p><p>ちなみに、別App = 別ClientIdになるので、Federated IdentitiesのIdentity Poolの設定としても、別の外部Providerとして追加が必要。</p>\n\n    <blockquote>\n        <p>にしてもCognitoのコンソールのUIが使いにくすぎる・・・</p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>User Pools</h3>\n    <p>いわゆるログイン・セッションの機能。<br />\n端末またぎで同一ユーザーとしてログイン状態を管理したり、他<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AWS\">AWS</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を叩くためのトークン取得などに使う。</p>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>npm i amazon-cognito-identity-js\n</pre><p>検索するといろんなサンプルが出てくるけど、こっちはこれだけでOK。<br />\nただし`webpack` x `<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>-loader`が必須っぽくて、`browserify`だけでシュッとやるのは無理そう・・？</p><p>これはSMS認証する最低限のコード。</p><p>まずはプールに登録する。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span>\n  CognitoUserPool,\n  CognitoUserAttribute,\n<span class=\"synIdentifier\">}</span> = require(<span class=\"synConstant\">'amazon-cognito-identity-js'</span>);\n<span class=\"synStatement\">const</span> config = require(<span class=\"synConstant\">'./config'</span>);\n\n<span class=\"synStatement\">const</span> userPool = <span class=\"synStatement\">new</span> CognitoUserPool(<span class=\"synIdentifier\">{</span>\n  UserPoolId: config.UserPoolId,\n  ClientId: config.ClientId,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synStatement\">const</span> attributeList = <span class=\"synIdentifier\">[</span><span class=\"synStatement\">new</span> CognitoUserAttribute(<span class=\"synIdentifier\">{</span>\n  Name: <span class=\"synConstant\">'phone_number'</span>,\n  Value: <span class=\"synConstant\">'+8190xxxxyyyy'</span>,\n<span class=\"synIdentifier\">}</span>)<span class=\"synIdentifier\">]</span>;\n\nuserPool.signUp(username, password, attributeList, <span class=\"synStatement\">null</span>, (err, result) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">if</span> (err) <span class=\"synIdentifier\">{</span> console.error(err); <span class=\"synStatement\">return</span>; <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synStatement\">const</span> cognitoUser = result.user;\n<span class=\"synIdentifier\">}</span>);\n</pre><p>これでSMSにメールが飛ぶ！ので、そこのコードを見て、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span>\n  CognitoUser,\n  CognitoUserPool,\n<span class=\"synIdentifier\">}</span> = require(<span class=\"synConstant\">'amazon-cognito-identity-js'</span>);\n<span class=\"synStatement\">const</span> config = require(<span class=\"synConstant\">'./config'</span>);\n\n<span class=\"synStatement\">const</span> userPool = <span class=\"synStatement\">new</span> CognitoUserPool(<span class=\"synIdentifier\">{</span>\n  UserPoolId: config.UserPoolId,\n  ClientId: config.ClientId,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synStatement\">const</span> cognitoUser = <span class=\"synStatement\">new</span> CognitoUser(<span class=\"synIdentifier\">{</span>\n  Username: username,\n  Pool: userPool,\n<span class=\"synIdentifier\">}</span>);\n\ncognitoUser.confirmRegistration(pincode, <span class=\"synConstant\">true</span>, (err, result) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">if</span> (err) <span class=\"synIdentifier\">{</span> console.error(err); <span class=\"synStatement\">return</span>; <span class=\"synIdentifier\">}</span>\n  console.info(result);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>これで確認完了。<br />\nそうすると、ついにトークンを取りにいけるので・・</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span>\n  AuthenticationDetails,\n  CognitoUser,\n  CognitoUserPool,\n<span class=\"synIdentifier\">}</span> = require(<span class=\"synConstant\">'amazon-cognito-identity-js'</span>);\n<span class=\"synStatement\">const</span> config = require(<span class=\"synConstant\">'./config'</span>);\n\n<span class=\"synStatement\">const</span> userPool = <span class=\"synStatement\">new</span> CognitoUserPool(<span class=\"synIdentifier\">{</span>\n  UserPoolId: config.UserPoolId,\n  ClientId: config.ClientId,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synStatement\">const</span> cognitoUser = <span class=\"synStatement\">new</span> CognitoUser(<span class=\"synIdentifier\">{</span>\n  Username: username,\n  Pool: userPool,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synStatement\">const</span> authenticationDetails = <span class=\"synStatement\">new</span> AuthenticationDetails(<span class=\"synIdentifier\">{</span>\n  Username: username,\n  Password: password,\n<span class=\"synIdentifier\">}</span>);\n\ncognitoUser.authenticateUser(authenticationDetails, <span class=\"synIdentifier\">{</span>\n  onSuccess(result) <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> token = result.getIdToken().getJwtToken();\n  <span class=\"synIdentifier\">}</span>,\n\n  onFailure(err) <span class=\"synIdentifier\">{</span>\n    console.error(err);\n  <span class=\"synIdentifier\">}</span>,\n<span class=\"synIdentifier\">}</span>);\n</pre><p>晴れてトークンが手に入ったので、これでこの後の処理をなんやかんや。<br />\n他の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AWS\">AWS</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を叩くときにはこのトークンを渡す。</p><p>今回はSMSで認証してるけど、`attributeList`を空にすればID/PWだけでもOKで、最低限のログイン機能は作れる。</p><p>他にこの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SDK\">SDK</a>でできることは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>にあるコードサンプルが全てなので、PINコードの再送とか、パスワード忘れたとか、認証要素を追加したいとかは以下リンクを参照。<br />\n2017年ですがPromiseな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>はありません。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/aws/amazon-cognito-identity-js#usage\">GitHub - aws/amazon-cognito-identity-js</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>Federated Identities</h3>\n    <p>上述の機能とは切り離して使えるデータ同期の仕組み。<br />\n存在意義としては、前述のログイン機能と連携することもできるし、連携せずに未認証状態でデータを貯められる。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/aws\">aws</a>-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/sdk\">sdk</a></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/amazon\">amazon</a>-cognito-js</li>\n</ul><p>こっちはこの2つが必要。というのも、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> AWS = require(<span class=\"synConstant\">'aws-sdk'</span>);\nconsole.log(AWS.CognitoSyncManager); <span class=\"synComment\">// undefined</span>\n\nrequire(<span class=\"synConstant\">'amazon-cognito-js'</span>);\nconsole.log(AWS.CognitoSyncManager); <span class=\"synComment\">// function....</span>\n</pre><p>こういうわけ。<br />\n必要というより、`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AWS\">AWS</a>.CognitoSync`だけでできる処理をラップしてある感じ。</p><p>( ˘ω˘)..｡o( いやそれもう本家にいれろよ</p><p>使うのは簡単で、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> AWS = require(<span class=\"synConstant\">'aws-sdk'</span>);\nrequire(<span class=\"synConstant\">'amazon-cognito-js'</span>);\n<span class=\"synStatement\">const</span> config = require(<span class=\"synConstant\">'./conf'</span>);\n\nAWS.config.region = config.region;\nAWS.config.credentials = <span class=\"synStatement\">new</span> AWS.CognitoIdentityCredentials(<span class=\"synIdentifier\">{</span>\n  IdentityPoolId: config.IdentityPoolId,\n<span class=\"synIdentifier\">}</span>);\n\nAWS.config.credentials.getPromise()\n  .then(() =&gt; <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> client = <span class=\"synStatement\">new</span> AWS.CognitoSyncManager();\n    <span class=\"synComment\">// コンソールではコレで探すことになる</span>\n    <span class=\"synComment\">// client.getIdentityId()</span>\n    <span class=\"synComment\">// 同じものが取れる</span>\n    <span class=\"synComment\">// AWS.config.credentials.identityId</span>\n\n    client.openOrCreateDataset(<span class=\"synConstant\">'test'</span>, (err, dataset) =&gt; <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">if</span> (err) <span class=\"synIdentifier\">{</span> console.error(err); <span class=\"synStatement\">return</span>; <span class=\"synIdentifier\">}</span>\n\n      dataset.get(<span class=\"synConstant\">'foo'</span>, (err, value) =&gt; <span class=\"synIdentifier\">{</span>\n        <span class=\"synStatement\">if</span> (err) <span class=\"synIdentifier\">{</span> console.error(err); <span class=\"synStatement\">return</span>; <span class=\"synIdentifier\">}</span>\n        console.info(<span class=\"synConstant\">'get'</span>, value);\n      <span class=\"synIdentifier\">}</span>);\n\n      dataset.put(<span class=\"synConstant\">'foo'</span>, <span class=\"synConstant\">'bar'</span>, (err, value) =&gt; <span class=\"synIdentifier\">{</span>\n        <span class=\"synStatement\">if</span> (err) <span class=\"synIdentifier\">{</span> console.error(err); <span class=\"synStatement\">return</span>; <span class=\"synIdentifier\">}</span>\n        console.info(<span class=\"synConstant\">'put'</span>, value);\n      <span class=\"synIdentifier\">}</span>);\n\n      <span class=\"synComment\">// これするまではLocalStorageで完結</span>\n      dataset.synchronize(<span class=\"synIdentifier\">{}</span>);\n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>)\n  .<span class=\"synStatement\">catch</span>(err =&gt; console.error(err));\n</pre><p>Unauthenticatedでの利用を許可してれば、これだけでデータを貯め続けることができます。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/aws/amazon-cognito-js\">GitHub - aws/amazon-cognito-js: Amazon Cognito Sync Manager for JavaScript</a></p>\n\n    </blockquote>\n<p>ただこのままだとLocalStorageが消えたらデータにアクセスできなくなるので、なんらかひもづけしたい・・となるはず。</p><p>そこで、今まで紹介した2つの合わせ技を使うことで、ログイン状態を保ちつつデータを貯め続けることができます。<br />\nですがその前に・・、</p>\n\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/aws\">aws</a>/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/amazon\">amazon</a>-cognito-js の落とし穴</h4>\n    <p>[1] READMEには載ってないメソッドがいろいろある。</p>\n\n<ul>\n<li>`putAll()`とか</li>\n<li>`getAll()`とか</li>\n</ul><p>必要あればそっちも。</p><p>[2] `put()`する時の注意。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>dataset.put(<span class=\"synConstant\">'文字列以外を'</span>, 1, () =&gt; <span class=\"synIdentifier\">{}</span>);\ndataset.put(<span class=\"synConstant\">'putしてしまうと, {}, () =&gt; {});</span>\n\n<span class=\"synComment\">// ここでエラーになってリモートに保存されない</span>\ndataset.synchronize(<span class=\"synIdentifier\">{}</span>);\n</pre><p>`synchronize()`しない場合は問題ないです。LocalStorageにデータはちゃんと貯まるし、`put() / get()`の際に`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSON\">JSON</a>.stringify() / parse()`してくれます。</p><p>なのに、`synchronize()`すると突然エラーになります。しかも、`exceeded maximum retry count`とか見当違いのエラーを吐きます。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/aws/amazon-cognito-js/issues/6\">&quot;Synchronized failed: exceeded maximum retry count&quot; when you attempt to store numbers &middot; Issue #6 &middot; aws/amazon-cognito-js &middot; GitHub</a></p>\n\n    </blockquote>\n<p>あと、`put()`の第三引数の空関数は省略できません。（^ω^#）</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ログインしてデータ同期</h3>\n    <p>さて、どうやって同一IDでCognito Syncし続けるかでした。<br />\nまずさっきの未認証状態でのデータ同期のコードのおさらい。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// まずCredentialsを生成</span>\nAWS.config.credentials = <span class=\"synStatement\">new</span> AWS.CognitoIdentityCredentials(<span class=\"synIdentifier\">{</span>\n  IdentityPoolId: config.IdentityPoolId,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// そしてそれを取得して</span>\nAWS.config.credentials.getPromise()\n  .then(() =&gt; <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// 取得できたらSync</span>\n    <span class=\"synStatement\">const</span> client = <span class=\"synStatement\">new</span> AWS.CognitoSyncManager();    \n  <span class=\"synIdentifier\">}</span>);\n</pre><p>これは未認証状態でも同期できるようにしてるので、Credentialsにはユーザーごとに一意な情報を渡してないです。<br />\nなのでココに、ユーザーを判別できるもの = ログイン機能で得られるトークンを渡せばOKということ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// authenticateしてたら取れる</span>\n<span class=\"synStatement\">const</span> cognitoUser = userPool.getCurrentUser();\n\n<span class=\"synStatement\">if</span> (cognitoUser === <span class=\"synStatement\">null</span>) <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">'no user'</span>);\n  <span class=\"synStatement\">return</span>;\n<span class=\"synIdentifier\">}</span>\n\ncognitoUser.getSession((err, result) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">if</span> (err) <span class=\"synIdentifier\">{</span> console.error(err); <span class=\"synStatement\">return</span>; <span class=\"synIdentifier\">}</span>\n  console.log(<span class=\"synConstant\">'user'</span>, cognitoUser);\n\n  <span class=\"synComment\">// ログイン状態でCredentialsを生成</span>\n  AWS.config.credentials = <span class=\"synStatement\">new</span> AWS.CognitoIdentityCredentials(<span class=\"synIdentifier\">{</span>\n    IdentityPoolId: config.IdentityPoolId,\n    Logins: <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">[</span>`cognito-idp.$<span class=\"synIdentifier\">{</span>config.region<span class=\"synIdentifier\">}</span>.amazonaws.com/$<span class=\"synIdentifier\">{</span>config.UserPoolId<span class=\"synIdentifier\">}</span>`<span class=\"synIdentifier\">]</span>: result.getIdToken().getJwtToken()\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>ここまでやれば、あとは同じコードでいけます。<br />\nもちろんコンソールで、Identity Poolの外部プロ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4\">バイ</a>ダーの設定をしてないとダメです。</p><p>なので冒頭の3つのライブラリを全て組合せないといけない・・。</p>\n\n<div class=\"section\">\n    <h4>未認証 -> 認証ユーザーへのアップグレード</h4>\n    <p>私はこれで困ったのですが、</p>\n\n<ul>\n<li>未認証状態でSyncしてるデータがある</li>\n<li>認証状態になったときに、そのデータを引き継ぎたい</li>\n</ul><p>結論からいうと、それ用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>は用意されてないっぽいので、自力でやるしかないです。<br />\nFirebaseにはそういう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>あったのに。</p><p>なので流れとしては、</p>\n\n<ul>\n<li>未認証状態でSyncしてるデータを`get`</li>\n<li>オンメモリで一時的に保存</li>\n<li>認証して新しいCredentialsを生成</li>\n<li>認証状態でさっき一時的に保存したデータを`put`</li>\n</ul><p>という手間が必要。ダルい。</p>\n\n</div>\n<div class=\"section\">\n    <h4>`synchronize()`時にコンフリクトする</h4>\n    <p>コンフリクトは、`synchronize()`にコールバックとして解消するためのハンドラを渡す。<br />\nこれはREADMEにあったコード。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>dataset.synchronize(<span class=\"synIdentifier\">{</span>\n  onSuccess: <span class=\"synIdentifier\">function</span>(dataset, newRecords) <span class=\"synIdentifier\">{</span>\n     <span class=\"synComment\">//...</span>\n  <span class=\"synIdentifier\">}</span>,\n\n  onFailure: <span class=\"synIdentifier\">function</span>(err) <span class=\"synIdentifier\">{</span>\n     <span class=\"synComment\">//...</span>\n  <span class=\"synIdentifier\">}</span>,\n\n  onConflict: <span class=\"synIdentifier\">function</span>(dataset, conflicts, callback) <span class=\"synIdentifier\">{</span>\n     <span class=\"synIdentifier\">var</span> resolved = <span class=\"synIdentifier\">[]</span>;\n\n     <span class=\"synStatement\">for</span> (<span class=\"synIdentifier\">var</span> i=0; i&lt;conflicts.length; i++) <span class=\"synIdentifier\">{</span>\n\n        <span class=\"synComment\">// Take remote version.</span>\n        resolved.push(conflicts<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span>.resolveWithRemoteRecord());\n\n        <span class=\"synComment\">// Or... take local version.</span>\n        <span class=\"synComment\">// resolved.push(conflicts[i].resolveWithLocalRecord());</span>\n\n        <span class=\"synComment\">// Or... use custom logic.</span>\n        <span class=\"synComment\">// var newValue = conflicts[i].getRemoteRecord().getValue() + conflicts[i].getLocalRecord().getValue();</span>\n        <span class=\"synComment\">// resolved.push(conflicts[i].resolveWithValue(newValue);</span>\n\n     <span class=\"synIdentifier\">}</span>\n\n     dataset.resolve(resolved, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n        <span class=\"synStatement\">return</span> callback(<span class=\"synConstant\">true</span>); <span class=\"synComment\">// onSuccessへ</span>\n     <span class=\"synIdentifier\">}</span>);\n\n     <span class=\"synComment\">// Or... callback false to stop the synchronization process.</span>\n     <span class=\"synComment\">// return callback(false); // onFailureへ</span>\n  <span class=\"synIdentifier\">}</span>,\n\n  onDatasetDeleted: <span class=\"synIdentifier\">function</span>(dataset, datasetName, callback) <span class=\"synIdentifier\">{</span>\n     <span class=\"synComment\">// Return true to delete the local copy of the dataset.</span>\n     <span class=\"synComment\">// Return false to handle deleted datasets outsid ethe synchronization callback.</span>\n\n     <span class=\"synStatement\">return</span> callback(<span class=\"synConstant\">true</span>);\n  <span class=\"synIdentifier\">}</span>,\n\n  onDatasetsMerged: <span class=\"synIdentifier\">function</span>(dataset, datasetNames, callback) <span class=\"synIdentifier\">{</span>\n     <span class=\"synComment\">// Return true to continue the synchronization process.</span>\n     <span class=\"synComment\">// Return false to handle dataset merges outside the synchroniziation callback.</span>\n\n     <span class=\"synStatement\">return</span> callback(<span class=\"synConstant\">false</span>);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>わかる・・わかるけど解せぬ・・。</p>\n\n</div>\n</div>"
}
