{
  "title": "NodeのExpressにSocket.IOのアプリを統合する",
  "html": "<p>ここ最近はNode.jsを勉強中で、Socket.IOについては一通りさわれたと思うので、今度はExpressをさわってます。</p><p>せっかくなので以前のSocket.IOのチャットアプリをExpressにのせて、以降のNodeの勉強をExpress上でやることにしました。<br />\nで、ここからがメモの本題。</p><p>Expressを普通にインストールしてSocket.IOを使うサンプルは結構ありますが、それらをそのまま参考にしてるとapp.jsがどんどん肥大化していきます。</p><p>なんの根拠もない個人的な理由ですが・・、</p>\n\n<ul>\n<li>app.jsはサーバーを起動する部分と各種ルーティング機能への橋渡しなど、必要最低限にしたい</li>\n<li>他にサンプルを作ったときも、うまく結合できる</li>\n</ul><p>ので、コードを出来る限り分割することにしました。</p><p>正解・最適解かはわかりませんが、一応達成できたのでその記念のメモです。</p><p>Expressらしい使い方はまだまだ出来てないので、そこにたどり着くまでの環境整備的な内容ですね。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>前提</h3>\n    <p>今回のメモの内容の環境設定です。</p>\n\n<ul>\n<li>単一の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>以下で実装</li>\n<li>URLに対する一旦のアクセスはNginxで受け、状況に応じてNodeで処理</li>\n<li>Nginxで配布できる静的ファイルはそのまま出力</li>\n<li>Nodeで処理するものは全てExpressで処理</li>\n<li>Socket.IOは他のアプリでも利用できることを想定</li>\n<li>バージョンは、Nodeは0.8.16、Expressは3.0.5、Socket.IOは0.9.13を使用</li>\n</ul><p>ちなみに、インストールした時点のapp.jsはserver.jsにリネームしてます。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Nginxの設定</h3>\n    \n<div class=\"section\">\n    <h4>virtual.conf</h4>\n    <p>私の環境では、/etc/nginx/conf.d/virtual.conf です。</p>\n<pre class=\"code lang-nginx\" data-lang=\"nginx\" data-unlink><span class=\"synComment\"># server_nameとか諸々・・・</span>\n\n<span class=\"synStatement\">location</span> / {\n  <span class=\"synStatement\">if</span> ( -f <span class=\"synIdentifier\">$request_filename</span> ) {\n      <span class=\"synStatement\">break</span>;\n  }\n\n  <span class=\"synStatement\">if</span> ( -f <span class=\"synIdentifier\">$request_filename</span>/index.html ) {\n      <span class=\"synStatement\">rewrite</span> (.*) <span class=\"synIdentifier\">$1</span>/index.html <span class=\"synStatement\">break</span>;\n  }\n\n  <span class=\"synStatement\">if</span> ( !-f <span class=\"synIdentifier\">$request_filename</span> ) {\n      <span class=\"synType\">proxy_pass</span>    http://127.0.0.1:9999;\n      <span class=\"synStatement\">break</span>;\n  }\n}\n\n<span class=\"synComment\"># その他諸々・・・</span>\n</pre><p>ポートは適当。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>フォルダ構成</h3>\n    <pre class=\"code\" data-lang=\"\" data-unlink>. &lt;- このドメインにおけるnginxのドキュメントルート\n├── server.js\n├── node_modules\n│   └── express@3.0.5, socket.io@0.9.13, ejs@0.8.3...\n├── apps\n│   └── socketIoChat.js\n├── public\n│   └── socket-io-chat\n│       ├── chat.js\n│       └── style.css\n├── routes\n│   └── main.js\n└── views\n    ├── index.html\n    └── socketIoChat.html</pre>\n<div class=\"section\">\n    <h4>各フォルダ</h4>\n    <p>説明不要かと思いますが一応。</p>\n\n<ul>\n<li>server.js: Nodeサーバー起動用にシンプルに</li>\n<li>node_modules: 随時ローカルインストールするので割愛</li>\n<li>apps: アプリごとに逃したいコードはこちら</li>\n<li>public: <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/css\">css</a>や画像、クライアントサイドのjsなど</li>\n<li>routes: ルーティング用(必要に応じて分割予定)</li>\n<li>views: いわゆるテンプレ</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>Expressの設定</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">/* Require / Use */</span>\n<span class=\"synIdentifier\">var</span> express = require(<span class=\"synConstant\">'express'</span>),\nhttp = require(<span class=\"synConstant\">'http'</span>),\npath = require(<span class=\"synConstant\">'path'</span>),\nroutes = require(<span class=\"synConstant\">'./routes/main'</span>);\n\n<span class=\"synComment\">/* Express settings */</span>\n<span class=\"synIdentifier\">var</span> app = module.exports = express();\napp.configure(<span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  app.set(<span class=\"synConstant\">'port'</span>, process.env.PORT || 9999);\n  app.set(<span class=\"synConstant\">'views'</span>, __dirname + <span class=\"synConstant\">'/views'</span>);\n  app.set(<span class=\"synConstant\">'view engine'</span>, <span class=\"synConstant\">'ejs'</span>);\n  app.use(express.favicon());\n  app.use(express.logger(<span class=\"synConstant\">'dev'</span>));\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(app.router);\n  app.use(express.<span class=\"synStatement\">static</span>(path.join(__dirname, <span class=\"synConstant\">'public'</span>)));\n  <span class=\"synComment\">// Use .html as view engine.</span>\n  app.engine(<span class=\"synConstant\">'html'</span>, require(<span class=\"synConstant\">'ejs'</span>).renderFile);\n<span class=\"synIdentifier\">}</span>);\n\n\n<span class=\"synComment\">/* Env settings */</span>\napp.configure(<span class=\"synConstant\">'development'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  app.use(express.errorHandler(<span class=\"synIdentifier\">{</span>\n    dumpExceptions: <span class=\"synConstant\">true</span>,\n    showStack: <span class=\"synConstant\">true</span>\n  <span class=\"synIdentifier\">}</span>));\n<span class=\"synIdentifier\">}</span>);\napp.configure(<span class=\"synConstant\">'production'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  app.use(express.errorHandler());\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">/* Url routings */</span>\napp.get(<span class=\"synConstant\">'/'</span>, routes.index);\napp.get(<span class=\"synConstant\">'/socket-io-chat'</span>, routes.socketIoChat);\n\n<span class=\"synComment\">/* Create server */</span>\n<span class=\"synIdentifier\">var</span> server = http.createServer(app).listen(app.get(<span class=\"synConstant\">'port'</span>), <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">&quot;Express server listening on port &quot;</span> + app.get(<span class=\"synConstant\">'port'</span>));\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">/* Socket.IO */</span>\n<span class=\"synIdentifier\">var</span> io = require(<span class=\"synConstant\">'socket.io'</span>).listen(server);\napp.set(<span class=\"synConstant\">'io'</span>, io);\n\n<span class=\"synComment\">/* For /socket-io-chat */</span>\nrequire(<span class=\"synConstant\">'./apps/socketIoChat'</span>);\n</pre>\n<div class=\"section\">\n    <h4>.ejsではなく.htmlをviewに使う</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>app.engine(<span class=\"synConstant\">'html'</span>, require(<span class=\"synConstant\">'ejs'</span>).renderFile);\n</pre>\n</div>\n<div class=\"section\">\n    <h4>requireするモジュール側で、appを参照する</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> app = module.exports = express();\n</pre>\n</div>\n<div class=\"section\">\n    <h4>Express x Socket.IO</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> server = http.createServer(app).listen(app.get(<span class=\"synConstant\">'port'</span>), <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">&quot;Express server listening on port &quot;</span> + app.get(<span class=\"synConstant\">'port'</span>));\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// ...</span>\n\n<span class=\"synIdentifier\">var</span> io = require(<span class=\"synConstant\">'socket.io'</span>).listen(server);\n</pre><p>検索して見つかったサンプルと違うのはこれくらいかな？</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Socket.IOのコードを逃がす</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// server.js</span>\n\n<span class=\"synComment\">// ...</span>\n\n<span class=\"synComment\">// app自体を退避</span>\n<span class=\"synIdentifier\">var</span> app = module.exports = express();\n\n<span class=\"synComment\">// ...</span>\n\n<span class=\"synIdentifier\">var</span> io = require(<span class=\"synConstant\">'socket.io'</span>).listen(server);\n<span class=\"synComment\">// ioをapp.setで一旦退避</span>\napp.set(<span class=\"synConstant\">'io'</span>, io);\n\n<span class=\"synComment\">/* For /socket-io-chat */</span>\nrequire(<span class=\"synConstant\">'./apps/socketIoChat'</span>);\n</pre><p>これである程度見通しの良いままにしておいて・・</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// ./apps/socketIoChat.js</span>\n\n<span class=\"synComment\">// app自体を再定義したら参照可能に！</span>\n<span class=\"synIdentifier\">var</span> app = module.<span class=\"synStatement\">parent</span>.exports,\n<span class=\"synComment\">// 退避したioをappから参照</span>\nio = app.get(<span class=\"synConstant\">'io'</span>);\n\n<span class=\"synIdentifier\">var</span> socketIoChatSocket = io.of(<span class=\"synConstant\">'/chat'</span>).on(<span class=\"synConstant\">'connection'</span>, <span class=\"synIdentifier\">function</span>(client) <span class=\"synIdentifier\">{</span>\n\n<span class=\"synComment\">// ...</span>\n\n\tclient.emit(<span class=\"synConstant\">'connected'</span>);\n\n<span class=\"synComment\">// ...</span>\n\n<span class=\"synIdentifier\">}</span>);\n</pre><p>これで違うSocket.IOアプリを載せたとしても、server.jsは綺麗なままにできる気がする。<br />\nこの内部のコードは、以前にサンプルを載せてるので割愛です。(現行ちょっとだけ変わってるけど・・。)</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://lealog.hateblo.jp/entry/2012/10/08/012317\" target=\"_blank\" title=\"NodeとSocket.IOで作るルーム機能つきチャットのサンプル - console.lealog();\">NodeとSocket.IOで作るルーム機能つきチャットのサンプル - console.lealog();</a></p>\n\n    </blockquote>\n<p>以上、忘れないように。<br />\nこれからもっとNodeでいろいろやりますよ。<br />\nExpressの掘り下げと、fsモジュール関連とか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0\">スクレイピング</a>とかもしてみたい。</p>\n\n</div>"
}
