{
  "title": "ファイルを更新したら自動でリロードする仕組みを作った(Node x ChromeExtension)",
  "html": "<p>YeomanとかLiveReloadとかそういうのは色々あるみたいですが、きっと素敵機能が山盛りで使いこなせない気がしたので、必要なとこだけ自作してみました。<br />\nそれ用のサーバー建てるとか、スクリプト挿入するとか面倒やし。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>概要</h3>\n    \n<ul>\n<li>Nodeのfsモジュールの類で指定したディレクトリ以下を監視</li>\n<li>ファイルの更新を検知したら、Socket.IOでクライアントへ通知</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>拡張でSocket.IOの通知を受け、ページをリロード</li>\n</ul><p>仕組みはシンプルだと思います。</p><p>その他に実装したのは、</p>\n\n<ul>\n<li>指定ディレクトリ以下を再帰的に監視する</li>\n<li>除外したいパターンも指定できる</li>\n</ul><p>といったところです。</p>\n\n    <blockquote>\n        <p>CentOS4系など、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Linux\">Linux</a>のカーネルが古い場合は、inotify-tools等がインストールされていない影響もあり、fs.watchが使えません。(=本記事の内容が使えない)<br />\nこの場合、fs.statなどで代用するしかないみたいです。</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>サーバーサイド</h3>\n    <p>以前の記事で構築したExpressの上で作ったので、Express仕様になってます。<br />\nとは言え必要なところを切り出せば全然動くと思います。</p>\n\n<div class=\"section\">\n    <h4>依存しているモジュール</h4>\n    \n<ul>\n<li>express(おまけ)</li>\n<li>ejs(おまけ)</li>\n<li>socket.io</li>\n<li>fs</li>\n<li>fs-watch-tree</li>\n</ul><p><br />\nNode標準のfsモジュールは色々イケてないらしいので、fs-watch-treeというモジュールを利用しています。<br />\nnpmのページの説明は多少古いようなので、Githubの方を要参照です。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/busterjs/fs-watch-tree\" target=\"_blank\" title=\"busterjs/fs-watch-tree · GitHub\">busterjs/fs-watch-tree · GitHub</a></p>\n\n    </blockquote>\n<p>このモジュールも根本ではfsモジュールを利用しているそうで、イケてない部分は実はそのままイケてなかったりします・・ｗ<br />\nやたらと変更通知するとか・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>target.json</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">{</span>\n  <span class=\"synConstant\">&quot;target&quot;</span>: <span class=\"synIdentifier\">[</span>\n    <span class=\"synConstant\">&quot;/var/www/node/hoge/&quot;</span>,\n    <span class=\"synConstant\">&quot;/var/www/node2/public_html/&quot;</span>,\n    <span class=\"synConstant\">&quot;/var/www/php/wp/&quot;</span>,\n    <span class=\"synConstant\">&quot;/var/www/piyo/public_html/script/&quot;</span>\n  <span class=\"synIdentifier\">]</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%E4%C2%D0%A5%D1%A5%B9\">絶対パス</a>で監視したいディレクトリを指定します。</p>\n\n    <blockquote>\n        <p>このファイルはjsonなので、コメント書くとエラーになります・・。<br />\njsonってしましたが、別にjsファイルでも問題ないぽいです。</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>app.js</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> app = module.<span class=\"synStatement\">parent</span>.exports,\n  io = app.get(<span class=\"synConstant\">'io'</span>),\n  fs = require(<span class=\"synConstant\">'fs'</span>),\n  watchTree = require(<span class=\"synConstant\">&quot;fs-watch-tree&quot;</span>).watchTree,\n  consoleDetail = <span class=\"synIdentifier\">function</span>(e)<span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">var</span> detail = (e.isDelete())\n      ? <span class=\"synConstant\">'deleted'</span>\n      : (e.isModify())\n        ? <span class=\"synConstant\">'modified'</span>\n        : (e.isMkdir())\n          ? <span class=\"synConstant\">'created'</span>\n          : <span class=\"synConstant\">'changed'</span>;\n    <span class=\"synStatement\">return</span> e.name + <span class=\"synConstant\">' was '</span> + detail;\n  <span class=\"synIdentifier\">}</span>,\n  targetList = require(<span class=\"synConstant\">'./target.json'</span>).target,\n  excludeList = <span class=\"synIdentifier\">[</span><span class=\"synConstant\">&quot;node_modules&quot;</span>, <span class=\"synConstant\">&quot;~&quot;</span>, <span class=\"synConstant\">&quot;#&quot;</span>, <span class=\"synConstant\">/^\\./</span>, <span class=\"synConstant\">/^_/</span><span class=\"synIdentifier\">]</span>,\n  watchObj;\n\n<span class=\"synComment\">// First: Check target dir existence.</span>\ntargetList.forEach(<span class=\"synIdentifier\">function</span>(d)<span class=\"synIdentifier\">{</span>\n  fs.exists(d, <span class=\"synIdentifier\">function</span>(exist)<span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">if</span>(exist)<span class=\"synIdentifier\">{</span>\n      console.info(<span class=\"synConstant\">'Start watching: %s'</span>, d);\n    <span class=\"synIdentifier\">}</span><span class=\"synStatement\">else</span><span class=\"synIdentifier\">{</span>\n      console.error(<span class=\"synConstant\">'Dir %s doesn</span><span class=\"synSpecial\">\\'</span><span class=\"synConstant\">t exist.'</span>, d);\n      process.exit();\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// Second: Client connected, then watch indicated dir.</span>\n<span class=\"synIdentifier\">var</span> autoReloaderSocket = io.of(<span class=\"synConstant\">'/reloader'</span>).on(<span class=\"synConstant\">'connection'</span>, <span class=\"synIdentifier\">function</span>(client) <span class=\"synIdentifier\">{</span>\n  client.emit(<span class=\"synConstant\">'connected'</span>);\n  console.info(<span class=\"synConstant\">'Client has connected.'</span>);\n\n  targetList.forEach(<span class=\"synIdentifier\">function</span>(d)<span class=\"synIdentifier\">{</span>\n    watchObj = watchTree(d, <span class=\"synIdentifier\">{</span>\n      exclude: excludeList\n    <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">function</span> (e) <span class=\"synIdentifier\">{</span>\n      console.info(consoleDetail(e));\n      client.emit(<span class=\"synConstant\">'reload'</span>);\n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>);\n\n  client.on(<span class=\"synConstant\">'disconnect'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    watchObj.end();\n    console.info(<span class=\"synConstant\">'Client has disconnected.'</span>);\n  <span class=\"synIdentifier\">}</span>);\n\n<span class=\"synIdentifier\">}</span>);\n</pre><p>あとは親のExprssサーバーを起動すればOKという感じ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>クライアントサイド</h3>\n    \n<div class=\"section\">\n    <h4>Extensionの概要</h4>\n    \n<ul>\n<li>manifest.jsonで指定した開発環境では、Content Scriptを挿入</li>\n<li>Content ScriptがSocket.IOの通知を受け、ページをリロード</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Manifest.json</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">{</span>\n  <span class=\"synConstant\">&quot;manifest_version&quot;</span>: 2,\n  <span class=\"synConstant\">&quot;name&quot;</span>: <span class=\"synConstant\">&quot;Reloader&quot;</span>,\n  <span class=\"synConstant\">&quot;version&quot;</span>: <span class=\"synConstant\">&quot;1.0&quot;</span>,\n\n  <span class=\"synConstant\">&quot;description&quot;</span>: <span class=\"synConstant\">&quot;Reload pages automatically.&quot;</span>,\n  <span class=\"synConstant\">&quot;icons&quot;</span>: <span class=\"synIdentifier\">{</span>\n    <span class=\"synConstant\">&quot;16&quot;</span>: <span class=\"synConstant\">&quot;icons/icon_16x16.png&quot;</span>,\n    <span class=\"synConstant\">&quot;48&quot;</span>: <span class=\"synConstant\">&quot;icons/icon_48x48.png&quot;</span>,\n    <span class=\"synConstant\">&quot;128&quot;</span>: <span class=\"synConstant\">&quot;icons/icon_128x128.png&quot;</span>\n  <span class=\"synIdentifier\">}</span>,\n  <span class=\"synConstant\">&quot;content_scripts&quot;</span>: <span class=\"synIdentifier\">[{</span>\n    <span class=\"synConstant\">&quot;run_at&quot;</span>: <span class=\"synConstant\">&quot;document_end&quot;</span>,\n    <span class=\"synConstant\">&quot;matches&quot;</span>: <span class=\"synIdentifier\">[</span><span class=\"synConstant\">&quot;http://*.YOURSERVER/*&quot;</span><span class=\"synIdentifier\">]</span>,\n    <span class=\"synConstant\">&quot;js&quot;</span>: <span class=\"synIdentifier\">[</span><span class=\"synConstant\">&quot;socket.io.js&quot;</span>, <span class=\"synConstant\">&quot;reload.js&quot;</span><span class=\"synIdentifier\">]</span>\n  <span class=\"synIdentifier\">}]</span>,\n  <span class=\"synConstant\">&quot;browser_action&quot;</span>: <span class=\"synIdentifier\">{</span>\n    <span class=\"synConstant\">&quot;default_icon&quot;</span>: <span class=\"synConstant\">&quot;icons/icon_19x19.png&quot;</span>\n  <span class=\"synIdentifier\">}</span>,\n  <span class=\"synConstant\">&quot;permissions&quot;</span>: <span class=\"synIdentifier\">[</span><span class=\"synConstant\">&quot;tabs&quot;</span>, <span class=\"synConstant\">&quot;http://*/*&quot;</span>, <span class=\"synConstant\">&quot;https://*/*&quot;</span><span class=\"synIdentifier\">]</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h4>Content Script</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>(<span class=\"synIdentifier\">function</span>(io) <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">var</span> socket = io.connect(<span class=\"synConstant\">'http://YOURNODESERVER/reloader'</span>, <span class=\"synIdentifier\">{</span>port: 9999<span class=\"synIdentifier\">}</span>),\n  isReloading = 0;\n\n  socket.on(<span class=\"synConstant\">'connected'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    console.log(<span class=\"synConstant\">'Waiting for updates...'</span>);\n  <span class=\"synIdentifier\">}</span>);\n\n  socket.on(<span class=\"synConstant\">'reload'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">if</span>(isReloading)<span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">return</span>;\n    <span class=\"synIdentifier\">}</span>\n    isReloading = 1;\n    console.log(<span class=\"synConstant\">'Reloading.'</span>)\n    <span class=\"synStatement\">location</span>.reload();\n  <span class=\"synIdentifier\">}</span>);\n\n<span class=\"synIdentifier\">}</span>(io));\n</pre><p>isReloadingは、通知がやたらと飛ぶイケてないfs.watchのためです。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>未達、不満など</h3>\n    \n<div class=\"section\">\n    <h4>excludeできてない</h4>\n    <p>勉強不足なせいだとは思いますが、除外の指定をしているにも関わらず、普通に通知されたりします。<br />\nなんでやろ・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>excludeListもtargetみたく外出ししたかった</h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>のとこが引っかかって、外から呼べなかったんです。<br />\nどうにかならんかなあ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>watchしてるファイルの変更通知がやたら飛ぶ</h4>\n    <p>fsモジュールのイケてないところだそうです。<br />\nどうしようもないのでクライアントサイドで間引いてます。<br />\nその内改善されると思ってます。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Content ScriptのOn/Offとかしたかった</h4>\n    <p>今だとmanifest.json内でしか設定ができません。<br />\nただContentScriptは後からOn/Offできるものではないそうなので、どうすりゃいいのかしら。</p>\n\n</div>\n<div class=\"section\">\n    <h4>公開したかった</h4>\n    <p>Githubとか、ChromeStoreとか。<br />\nでもちょっと納得できない出来なので、ブログに書くにとどめます・・。</p><p>とは言え個人で使う分には十分なので、今のとここのまま使ってます。<br />\n意外と便利です。</p>\n\n</div>\n</div>\n</div>"
}
