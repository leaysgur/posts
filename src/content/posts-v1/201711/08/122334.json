{
  "title": "テストでモックできなくて困るNode.jsのモジュールの書き方",
  "html": "<p>こういう書き方にしてしまったせいで、テストの時にうまくモックできず困ったよというメモ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>問題のコード</h3>\n    <p>こういうやつ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">function</span> foo(id) <span class=\"synIdentifier\">{</span>\n  bar(id);\n\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synIdentifier\">function</span> bar(id) <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// some heavy logics...</span>\n<span class=\"synIdentifier\">}</span>\n\nmodule.exports = <span class=\"synIdentifier\">{</span>\n  foo,\n  bar,\n<span class=\"synIdentifier\">}</span>;\n</pre><p>モジュール内が関数だけで構成されてるのは○。<br />\nただし、テスト的には都合が悪い。</p>\n\n</div>\n<div class=\"section\">\n    <h3>何に困るか</h3>\n    <p>テストでこの関数をモックしたい・・って時に困る。</p><p>さっきのコード例で、`foo()`をテストするときに、`bar()`をモックしたいとする。</p><p>jestだとこんな風にするはず。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> mod = require(<span class=\"synConstant\">'../mod'</span>);\n\ndescribe(<span class=\"synConstant\">'foo test'</span>, () =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">let</span> barSpy;\n  beforeEach(() =&gt; <span class=\"synIdentifier\">{</span>\n    barSpy = jest\n      .spyOn(mod, <span class=\"synConstant\">'bar'</span>)\n      .mockImplementation(jest.fn);\n  <span class=\"synIdentifier\">}</span>);\n  afterEach(() =&gt; <span class=\"synIdentifier\">{</span>\n    barSpy.mockRestore();\n  <span class=\"synIdentifier\">}</span>);\n\n  test(<span class=\"synConstant\">'should call bar'</span>, () =&gt; <span class=\"synIdentifier\">{</span>\n    mod.foo();\n    expect(barSpy).toHaveBeenCalledTimes(1);\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>一見なんの問題もなさそうですが、実際はモックしたはずの`bar()`は呼ばれません。</p>\n\n</div>\n<div class=\"section\">\n    <h3>なぜか</h3>\n    <p>`mod.bar`は確かにモックされてるが、肝心の`mod.foo`内で呼ばれる`bar()`は、モックされてない`bar()`だから。</p><p>`foo()`のスコープで見ると、関数`bar`はあくまでファイル内にある`bar`であり、外でモックされてるかどうかなんか知ったこっちゃあない状態になってる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>こうすればよい</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> mod = (module.exports = <span class=\"synIdentifier\">{}</span>);\n\nmod.foo = <span class=\"synIdentifier\">function</span> foo(id) <span class=\"synIdentifier\">{</span>\n  mod.bar(id);\n\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n\nmod.bar = <span class=\"synIdentifier\">function</span> bar(id) <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// some heavy logics...</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>うーん、初歩的なミス・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>ちなみに</h3>\n    <p>エクスポートする側でちゃんと親の参照を保っていても、インポートする側 = 使う側がこうしてたらダメ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> foo <span class=\"synIdentifier\">}</span> = require(<span class=\"synConstant\">'./mod'</span>);\n\n<span class=\"synStatement\">const</span> usecase = (module.exports = <span class=\"synIdentifier\">{}</span>);\n\nusecase.baz = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  foo();\n<span class=\"synIdentifier\">}</span>;\n</pre><p>この場合に、`foo`がモックできなくて困る。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> mod = require(<span class=\"synConstant\">'./mod'</span>);\n\n<span class=\"synStatement\">const</span> usecase = (module.exports = <span class=\"synIdentifier\">{}</span>);\n\nusecase.baz = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  mod.foo();\n<span class=\"synIdentifier\">}</span>;\n</pre><p>こうなってないとダメ。</p>\n\n</div>"
}
