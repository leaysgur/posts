{
  "title": "Solid.jsを試してみた感想",
  "html": "<p>実際の案件で、3ヶ月くらいかけてコードを書いてみての感想。</p>\n\n<p>TL;DRとしては、</p>\n\n<ul>\n<li>思ってた通りに良いものではある</li>\n<li>が、手放しで褒めるにはあと一息</li>\n<li>今後に期待したい</li>\n</ul>\n\n\n<p>という感じ。</p>\n\n<h3 id=\"Better-ReactNextjs-alternatives\">Better React(!Next.js) alternatives</h3>\n\n<p>という視点で、よかった点をいくつか。</p>\n\n<h4 id=\"JSXはやはり楽ちん\">JSXはやはり楽ちん</h4>\n\n<p>やっぱりJSXの取り回しの楽さはよい。っても比較対象はSvelteくらいしかないけど。</p>\n\n<ul>\n<li>Propsでも<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を自在に渡せる</li>\n<li><code>LocalProps &amp; JSX.ButtonHTMLAtrributes&lt;HTMLButtonElement&gt;</code>できる</li>\n</ul>\n\n\n<p>このあたりはSvelteの明確な弱点であり、少しずつ改善はされてても現時点ではまだまだなので、そういう意味で。</p>\n\n<h4 id=\"軽い\">軽い</h4>\n\n<p>もとよりSignalsに根ざしてるというところで、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CSR\">CSR</a>メインな場合に、React+αのαの選定に悩まずSolid一本で全部済むのは体験としてもよい。</p>\n\n<p>そしてバンドルサイズも軽い。V-DOMなんかいらんかったんや。</p>\n\n<h4 id=\"コンポーネントのDX\"><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>のDX</h4>\n\n<pre class=\"code jsx\" data-lang=\"jsx\" data-unlink>const Counter = () =&gt; {\n  const [count, setCount] = createSignal(0);\n  const doubled = createMemo(() =&gt; count() * 2);\n\n  return (\n    &lt;button onClick={() =&gt; setCount((c) =&gt; c + 1)}&gt;{doubled()}&lt;/button&gt;\n  );\n};</pre>\n\n\n<p>という<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>があったときに、</p>\n\n<ul>\n<li><code>return</code>されてない部分は、一度だけ実行される</li>\n<li><code>return</code>された部分は、その後もアップデートされる</li>\n</ul>\n\n\n<p>という「リアクティブな値がト<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%E9%A5%C3%A5%AD%A5%F3%A5%B0\">ラッキング</a>される仕組みとそのスコープ」についての理解は必須。</p>\n\n<p>ここがReact経験者からすると慣れが必要なところではあるが、React未経験な人<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A4%AB%A4%E9%A4%B7\">からし</a>たら、どっちが自然に感じるのかは気になるところであり、良し悪しというか、そういうもんって割り切りをするだけかなーと。</p>\n\n<p><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>のPropsをDestrucuturingしてはいけないという縛りも、長くやってるとむしろ安心するようになってる自分がいた。</p>\n\n<pre class=\"code jsx\" data-lang=\"jsx\" data-unlink>return (\n  &lt;div&gt;\n    Before: {props.name}\n    After: {draftName}\n  &lt;/div&gt;\n);</pre>\n\n\n<p>こういう例みたく、どの値がProps経由で外界から渡されたもの？ってのがひと目でわかるから。</p>\n\n<p>オプショナルなPropsに初期値を入れたい場合だけ、<code>mergeProps()</code>っていうユーティリティを使う必要があって、そこは確かにちょっとだけ手間。</p>\n\n<h4 id=\"自動レンダリング最適化\">自動<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>最適化</h4>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Flealog.hateblo.jp%2Fentry%2F2023%2F06%2F14%2F122650\" title=\"Solid/Svelte/(P)Reactで、それぞれリストを描画するコードの比較 - console.lealog();\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\" loading=\"lazy\"></iframe><cite class=\"hatena-citation\"><a href=\"https://lealog.hateblo.jp/entry/2023/06/14/122650\">lealog.hateblo.jp</a></cite></p>\n\n<p>この記事でも少し触れてるけど、<code>For</code>や<code>Show</code>という特別な<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を使うことで、いわゆるメモ化を任意のブロック単位でできるのがすごく良い。</p>\n\n<p>もちろん<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%BB%B0%B9%E0%B1%E9%BB%BB%BB%D2\">三項演算子</a>も<code>{items.map()}</code>みたいな書き方もできるので、適材適所で使ったらいいのかなと。\n（配列の中身が配列ごとアップデートされるような場合は、全入れ替えになるので<code>For</code><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>で書いても意味ない）</p>\n\n<p>使い分けを悩むこと自体が問題だというなら、徹底して使う側に倒すといい。MobXのときの<code>observer(Comp)</code>と同じ。</p>\n\n<h3 id=\"気になるところ\">気になるところ</h3>\n\n<h4 id=\"APIがEasyすぎる\"><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>がEasyすぎる</h4>\n\n<p>これは完全にIMOではあるが、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>セットはもっとシンプルでいいなと感じる。</p>\n\n<p>まず<code>createResource()</code>というSWRライクな書き方で非同期処理を抽象化できる<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>があるけど、キャッシュの機能がないので、いわゆる<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>につなぐ使い方ではあまり実用的でない。\n<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を非同期に読む<code>lazy()</code>の裏側で使われてるとはいえ、どのみち<code>@tanstack/solid-query</code>使うわ〜となるなら、最初からその存在を意識したくないなって。</p>\n\n<blockquote><p><a href=\"https://www.solidjs.com/docs/latest/api#createresource\">https://www.solidjs.com/docs/latest/api#createresource</a></p></blockquote>\n\n<p>あとTree-shakeされるとはいえ、RxJSとつなぐための<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>がコアに入ってるのも、なんか節操ない印象を受けてしまう。</p>\n\n<p>もひとつ個人的に言うと、サブパッケージになってるとはいえ、<code>createStore()</code>は魔術みがすぎる。</p>\n\n<blockquote><p><a href=\"https://www.solidjs.com/docs/latest/api#createstore\">https://www.solidjs.com/docs/latest/api#createstore</a></p></blockquote>\n\n<p>甘い香りに誘われて最初は使ってたけど、あとで見直したときに嫌な予感がしたので使うのをやめた。</p>\n\n<h4 id=\"コンパイラがBabelベース\"><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>がBabelベース</h4>\n\n<p>別に動いてるからええやんって話ではあるけど、なんかちょっと気になってしまう。なんとなく、先行きは大丈夫なんだろうか？って。</p>\n\n<blockquote><p><a href=\"https://github.com/solidjs/solid/tree/main/packages/babel-preset-solid\">https://github.com/solidjs/solid/tree/main/packages/babel-preset-solid</a></p></blockquote>\n\n<p>そしてそのBabel<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>を支える<code>dom-expressions</code>っていうライブラリが、またまたRyan氏の個人<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>にあったり。</p>\n\n<p>いや、別にいいけど、なんだかちょっとだけ不安な気持ちというか・・・。</p>\n\n<p>ちなみにSWCの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>としてこのあたりを再実装してる人もいるけど、それが本体に取り込まれるかは不明。（たぶん起こらない気がする）</p>\n\n<blockquote><p><a href=\"https://github.com/modderme123/swc-plugin-jsx-dom-expressions\">https://github.com/modderme123/swc-plugin-jsx-dom-expressions</a></p></blockquote>\n\n<p>というような、ふとしたときに感じる属人性が気になるという話でした。</p>\n\n<h3 id=\"エコシステム\">エコシステム</h3>\n\n<p>Reactのそれにはもちろん遠く及ばんとしても、なんでもかんでも外部のライブラリに頼りたいわけじゃなければ、なんとかなるかと。</p>\n\n<p><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CSR\">CSR</a>メインのプロジェクトで採用する分には、</p>\n\n<ul>\n<li><a href=\"https://github.com/solidjs/solid-router\">https://github.com/solidjs/solid-router</a></li>\n<li><a href=\"https://github.com/solidjs/solid-meta\">https://github.com/solidjs/solid-meta</a></li>\n<li><a href=\"https://github.com/solidjs-community/solid-primitives\">https://github.com/solidjs-community/solid-primitives</a></li>\n<li><a href=\"https://github.com/solidjs-community/solid-transition-group\">https://github.com/solidjs-community/solid-transition-group</a></li>\n<li><a href=\"https://github.com/TanStack/query/tree/main/packages/solid-query\">https://github.com/TanStack/query/tree/main/packages/solid-query</a></li>\n</ul>\n\n\n<p>このあたりがあれば事足りるし、あとはVanillaなライブラリをよしなに組み込めばいい。</p>\n\n<p>SolidStartは個人的に路線があまり好きではないのであんまり追ってないけど、そんなに活発に開発されてる印象はなくて、この先どうなるんやろうなーって感じ。</p>\n\n<h3 id=\"おわりに\">おわりに</h3>\n\n<p>Solid 2.0に期待してるぞ・・・！</p>\n\n<blockquote><p><a href=\"https://github.com/solidjs/solid/discussions/1804\">The ideal Solid? (v2, v3, v4, etc) &middot; solidjs/solid &middot; Discussion #1804 &middot; GitHub</a></p></blockquote>\n"
}
