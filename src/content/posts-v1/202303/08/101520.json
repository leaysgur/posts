{
  "title": "Svelte(Kit)のScoped CSSで付与されるクラス名を変えたい",
  "html": "<p>`svelte-9hyylu`みたいなやつ。</p><p>なんか冗長じゃない？これ削れば少しでもページ容量を減らせるのでは？的なモチベーション。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"Svelte単体の場合\">Svelte単体の場合</h3>\n    <p>`compile()`という`.svelte`ファイルを処理する処理があり、そこに`cssHash()`というオプションがあるのでそれをいじる。</p>\n\n    <blockquote>\n        <p>A function that takes a { hash, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/css\">css</a>, name, filename } argument and returns the string that is used as a classname for scoped <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>. It defaults to returning svelte-${hash(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/css\">css</a>)}<br />\n<a href=\"https://svelte.dev/docs#compile-time-svelte-compile\">https://svelte.dev/docs#compile-time-svelte-compile</a></p>\n\n    </blockquote>\n<p>Docsによると、デフォルトの実装は、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">function</span> cssHash(<span class=\"synIdentifier\">{</span> hash, css, name, filename <span class=\"synIdentifier\">}</span>) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> <span class=\"synConstant\">`svelte-</span><span class=\"synSpecial\">${hash(css)}</span><span class=\"synConstant\">`</span>;\n<span class=\"synIdentifier\">}</span>\n</pre><p>で、この`hash()`の実装はココ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/blob/11af8509242956d5414fd8dc3205a40855437ab5/src/compiler/compile/utils/hash.ts\">svelte/hash.ts at 11af8509242956d5414fd8dc3205a40855437ab5 &middot; sveltejs/svelte &middot; GitHub</a></p>\n\n    </blockquote>\n<p>だいたい、3文字から7文字のハッシュが取れるようになってそう。</p><p>ただこのオプションを自分で指定する機会はそうそうないはずで、だいたいはSvelteKitだったりViteだったりを経由することになるはず。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"SvelteKitvite-plugin-svelte\">SvelteKit(vite-plugin-svelte)</h3>\n    <p>この場合、</p>\n\n<ul>\n<li>`vite.config.js`で指定する方法</li>\n<li>`svelte.config.js`で指定し、それを`vite.config.js`で読む方法</li>\n</ul><p>この2つがあるけど、どちらにせよ、`compilerOpitons`の`cssHash()`を指定すれば、それが`svelte.compile()`に届くようになってる。</p><p>ひとつ注意としては、いわゆる`dev`モードではそれが無視されるという点。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/vite-plugin-svelte/blob/1be016cf0c240bafcc643b1d6f0747e1b71f1871/docs/faq.md#why-cant-csshash-be-set-in-development-mode\">https://github.com/sveltejs/vite-plugin-svelte/blob/1be016cf0c240bafcc643b1d6f0747e1b71f1871/docs/faq.md#why-cant-csshash-be-set-in-development-mode</a></p>\n\n    </blockquote>\n<p>無視してるコードはここ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/vite-plugin-svelte/blob/1be016cf0c240bafcc643b1d6f0747e1b71f1871/packages/vite-plugin-svelte/src/utils/compile.ts#L61-L65\">https://github.com/sveltejs/vite-plugin-svelte/blob/1be016cf0c240bafcc643b1d6f0747e1b71f1871/packages/vite-plugin-svelte/src/utils/compile.ts#L61-L65</a></p>\n\n    </blockquote>\n<p>本番ビルドではちゃんと反映される。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"意義はあるか\">意義はあるか</h3>\n    <p>10ページ以下くらいのシンプルなサイトでは、`_${hash(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/css\">css</a>).slice(-1)}`という2文字にすることで、581KBだった`build`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リが、580KBになった。1KB減った。</p><p>めちゃめちゃ規模が大きいならありそう、だが、雑に短くするとハッシュが衝突して表示が崩れるリスクがあるので、それを目視確認しながら地道に調整するのはなかなかに大変そうではある。</p><p>Scoped <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>も結局はDXのための仕組みなので、本気で容量を削りたいなら自分で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>を書くしかないのだなあ。</p><p>ちなみに、Svelteの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>の`hash()`関数は、そのまま使うと（接頭辞なしで）クラス名としてinvalidな文字列が出ることがあるらしい。奥が深い。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/issues/6821\">cssHash&#39;s hash() function may generate invalid CSS identifiers &middot; Issue #6821 &middot; sveltejs/svelte &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>"
}
