{
  "title": "JavaScriptの値渡しとか参照渡しとか、プリミティブとかイミュータブルだとか",
  "html": "<p>なんてタイトルにしたら良いのかまったくわからんｗ</p><p>とはいえ、最近のハッとした事例。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> arr1, arr2;\narr1 = arr2 = <span class=\"synIdentifier\">[]</span>;\n\n<span class=\"synStatement\">for</span> (<span class=\"synIdentifier\">var</span> i = 0; i &lt; 3; i++) <span class=\"synIdentifier\">{</span>\n    arr1<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span> = 1;\n<span class=\"synIdentifier\">}</span>\narr1 = <span class=\"synIdentifier\">[]</span>;\n\nconsole.log(arr1.length); <span class=\"synComment\">// 0</span>\nconsole.log(arr2.length); <span class=\"synComment\">// 3</span>\n</pre><p>わかってる人にはなんてことないこのコード。<br />\nでも、いわゆる「プログラミング」初心者にはこう見える・・。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>誤解してる例</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// arr1, arr2 という変数を2つ用意し、空の配列をいれる</span>\n<span class=\"synIdentifier\">var</span> arr1, arr2;\narr1 = arr2 = <span class=\"synIdentifier\">[]</span>;\n\n<span class=\"synComment\">// arr1に値をいれる</span>\n<span class=\"synComment\">// 3回繰り返す</span>\n<span class=\"synStatement\">for</span> (<span class=\"synIdentifier\">var</span> i = 0; i &lt; 3; i++) <span class=\"synIdentifier\">{</span>\n    arr1<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span> = 1;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// arr1を空の配列にする</span>\narr1 = <span class=\"synIdentifier\">[]</span>;\n\nconsole.log(arr1.length); <span class=\"synComment\">// さっき空にしたから当然0</span>\nconsole.log(arr2.length); <span class=\"synComment\">// arr2には何もしてないから0でしょ？ え？3？！</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3>なにを誤解してるのか</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// arr1, arr2 という変数を2つ用意し、空の配列をいれる</span>\n<span class=\"synIdentifier\">var</span> arr1, arr2;\narr1 = arr2 = <span class=\"synIdentifier\">[]</span>;\n</pre><p>まずコレ。<br />\n正しくは、arr1, arr2 という変数を2つ用意し、\"単一の\"配列を参照する</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// arr1に値をいれる</span>\n<span class=\"synComment\">// 3回繰り返す</span>\n<span class=\"synStatement\">for</span> (<span class=\"synIdentifier\">var</span> i = 0; i &lt; 3; i++) <span class=\"synIdentifier\">{</span>\n    arr1<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span> = 1;\n<span class=\"synIdentifier\">}</span>\n</pre><p>コレも正しくは、arr1に値を入れているのではなく、<br />\narr1が\"参照している配列に\"、値が格納される</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// arr1を空の配列にする</span>\narr1 = <span class=\"synIdentifier\">[]</span>;\n</pre><p>あとコレ。<br />\n正しくは、arr1の\"参照先\"を、新たな配列に向ける</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>console.log(arr2.length); <span class=\"synComment\">// arr2には何もしてないから0でしょ？ え？3？！</span>\n</pre><p>よって、arr2は以前3回ループした配列を参照してるので、3。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h4>ちなみに</h4>\n    <p>まあObjectでやっても同じ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> obj1, obj2;\nobj1 = obj2 = <span class=\"synIdentifier\">{}</span>;\n\n<span class=\"synStatement\">for</span> (<span class=\"synIdentifier\">var</span> i = 0; i &lt; 3; i++) <span class=\"synIdentifier\">{</span>\n    obj1<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span> = 1;\n<span class=\"synIdentifier\">}</span>\nobj1 = <span class=\"synIdentifier\">{}</span>;\n\nconsole.log(obj1); <span class=\"synComment\">// {}</span>\nconsole.log(obj2); <span class=\"synComment\">// {0: 1, 1: 1, 2: 1}</span>\n</pre><p>というか配列はそもそもObject(型)なので。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>その誤解してる理論でいくと</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> str1, str2;\nstr1 = str2 = <span class=\"synConstant\">'str'</span>\n\nstr1 = <span class=\"synStatement\">null</span>;\n\nconsole.log(str1); <span class=\"synComment\">// null</span>\nconsole.log(str2); <span class=\"synComment\">// str</span>\n</pre><p>なぜstr2がnullにならないのか。</p><p>これは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>のデータ型によって挙動が違って、</p>\n\n<ul>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n</ul><p>にはこの理論が当てはまらなくて、</p>\n\n<ul>\n<li>Object</li>\n</ul><p>にだけ、当てはまるから。</p><p>正確には、</p>\n\n<ul>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n</ul><p>これらはプリミティブ値で、値が格納されるタイプ。<br />\nどっかで聞いた単語を充てるなら、イミュータブル。</p>\n\n<ul>\n<li>Object</li>\n</ul><p>こいつは値ではなく参照が格納されるタイプ。<br />\nどっかで聞いた単語を充てるなら、ミュータブル。</p>\n\n<div class=\"section\">\n    <h4>プリミティブ値でイミュータブルなので</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> str1, str2;\nstr1 = str2 = <span class=\"synConstant\">'str'</span>; <span class=\"synComment\">// str1 に 'str'、str2 にも 'str' を格納</span>\n\nstr1 = <span class=\"synStatement\">null</span>;\n\nconsole.log(str1); <span class=\"synComment\">// null</span>\nconsole.log(str2); <span class=\"synComment\">// str2は最初に'str'を代入してから何もしてないので、 'str'</span>\n</pre><p></p><p>うーん、初心者的にはそんなこと言われてもまったくピンとこないシリーズよねー。<br />\nそもそも個人的にも、これをちゃんと言葉で説明するとどうなるのか、よくわかってないんですよねー・・。</p>\n\n    <blockquote>\n        <p>プリミティブとかイミュータブルとか、そもそもそれがわかりにくいというかなんというか。<br />\nObjectのソレを参照渡しって言えるっぽいけど、果たして本当の”参照渡し”なのだろうかと考えだすともうね！</p>\n\n    </blockquote>\n\n</div>\n</div>"
}
