{
  "title": "Astro のコードを読む Part.3",
  "html": "\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2022/05/11/214052\">Astro &#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x8AAD;&#x3080; Part.2 - console.lealog();</a></p>\n\n    </blockquote>\n<p>これの続きであり、最後の記事です。</p><p>2週間ちょいでバージョンが`1.0.0-beta.27`から、`1.0.0-beta.33`になり、この時点でのハッシュは`51db2b9b4efd899bdd7efc481a5f226b3b040614`でした。</p><p>まもなくメジャーバージョンがリリースされることもあり、これが最後のコードリーディング。</p><p>残してきたビルドコマンドまわりと、Partial Hydrationの仕組みまわりを読む。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>astro build</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>の`build`コマンドを見ていく。</p><p>このコマンドは、SSGとして成果物をディスクに書き出す処理、もしくは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>するためのランタイムを生成する処理になる。</p>\n\n<div class=\"section\">\n    <h4>AstroBuilder</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/withastro/astro/blob/51db2b9b4efd899bdd7efc481a5f226b3b040614/packages/astro/src/core/build/index.ts#L47\">https://github.com/withastro/astro/blob/51db2b9b4efd899bdd7efc481a5f226b3b040614/packages/astro/src/core/build/index.ts#L47</a></p>\n\n    </blockquote>\n\n<ul>\n<li>ビルドコマンドの実体\n<ul>\n<li>以前にも見たポリフィルをロードしたあとは、これに丸投げ</li>\n</ul></li>\n<li>コンスト<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>タ\n<ul>\n<li>以前にみた`RouteManifest`の生成</li>\n</ul></li>\n<li>`run()`\n<ul>\n<li>`setup()`からの`build()`</li>\n</ul></li>\n<li>`setup()`\n<ul>\n<li>以前にみた`createVite()`から、Viteの設定オブジェクトを用意</li>\n<li>それを使ってViteのサーバーを立てる</li>\n</ul></li>\n<li>`build()`\n<ul>\n<li>`collectPagesData()`: ページとそのアセットのリストを返す</li>\n<li>`staticBuild()`: ページを生成する</li>\n<li>アセットの書き出し</li>\n</ul></li>\n</ul><p>各所でインテグレーションのためにフックを呼んでたり、メトリクスをログに出したりはしてるけど、基本的にはこれだけ。ビルドでもViteを酷使していくスタイル。</p>\n\n</div>\n<div class=\"section\">\n    <h4>collectPagesData()</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/withastro/astro/blob/51db2b9b4efd899bdd7efc481a5f226b3b040614/packages/astro/src/core/build/page-data.ts#L33\">https://github.com/withastro/astro/blob/51db2b9b4efd899bdd7efc481a5f226b3b040614/packages/astro/src/core/build/page-data.ts#L33</a></p>\n\n    </blockquote>\n\n<ul>\n<li>`RouteManifest`を頼りに、すべてのページ（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>）を探す</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>は、以前に見た`preload()`によって<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>する\n<ul>\n<li>`dev`ではリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トに応じてやってたこと</li>\n<li>`build`では一括でやってる</li>\n</ul></li>\n<li>`getStaticPaths()`が存在してれば、その個別ページも同様にやる\n<ul>\n<li>`paginate()`の設定の単位でよしなに</li>\n</ul></li>\n</ul><p>ちなみに返り値は、`allPages`と`assets`という2つのオブジェクトで、どっちもファイル名がキーになってた。</p>\n\n</div>\n<div class=\"section\">\n    <h4>staticBuild()</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/withastro/astro/blob/51db2b9b4efd899bdd7efc481a5f226b3b040614/packages/astro/src/core/build/static-build.ts#L26\">https://github.com/withastro/astro/blob/51db2b9b4efd899bdd7efc481a5f226b3b040614/packages/astro/src/core/build/static-build.ts#L26</a></p>\n\n    </blockquote>\n\n<ul>\n<li>ページの情報を回収\n<ul>\n<li>`.astro`で定義されたやつ</li>\n<li>`client:`のディレクティブの有無の確認とか</li>\n<li>hoistedされるものを含め、JSが必要なものの確認も</li>\n</ul></li>\n<li>`clientBuild()`\n<ul>\n<li>クライアントサイドのJSをビルドする処理</li>\n<li>さっき確認したときに見つからなかったなら、何もしない</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>用にビルドしてる場合は、ファイルをコピーするだけ</li>\n<li>ビルド専用のViteの設定オブジェクトを用意して、ここでも`vite.build()`を呼ぶ</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>も`preload()`のときとは違う顔ぶれ</li>\n<li>`rollupOptions.input`に対して、クライアントサイドのJSを全部流す</li>\n<li>`esbuild`でミニファイ</li>\n</ul></li>\n<li>`ssrBuild()`\n<ul>\n<li>本命のプロジェクト自体のビルド</li>\n<li>ただし、まだ静的なファイルを生成するわけではない</li>\n<li>Rollupのビルドアウトプットのチャンク集ができるまで</li>\n<li>こっちもビルド専用のViteの設定オブジェクトを用意して、`vite.build()`を呼ぶ</li>\n<li>`@astro/plugin-build-pages`がここで登場</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>されたモジュールのエントリーポイント用のテンプレ</li>\n</ul></li>\n<li>`generatePages()`\n<ul>\n<li>これまでに集めた`internals`オブジェクトのデータを活用</li>\n<li>その中で`type: page`と判断されたものを、`generatePage()`</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>済のエント<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A1%BC%A5%D5%A5%A1\">リーファ</a>イルの中から、そのパスに合致するものを探す</li>\n<li>あったらそれを`generatePath()`</li>\n</ul></li>\n<li>`generatePath()`\n<ul>\n<li>`dev`コマンド時にもやってた`render()`がここで呼ばれてる</li>\n<li>ただし結果はディスクに書き出されるという違いがある</li>\n<li>これでやっと最終的なHTMLができる</li>\n</ul></li>\n<li>あとはビルドに使った一時ファイルを削除して終わり</li>\n</ul><p>長かった。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Partial Hydrationまわり</h3>\n    <p>Astroの存在意義でもあるこの部分を読まずには終われまい。</p>\n\n<ul>\n<li>`.astro`内部で`import`してる別の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を評価するのは、`preload()`でViteに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>されるとき\n<ul>\n<li>`$$metadata`にそういうデータが詰まってる</li>\n</ul></li>\n<li>`client:idle`などの`hydrationDirectives`も、この時点で判別される\n<ul>\n<li>そして`client:only`には特別なマーキング</li>\n</ul></li>\n<li>`client:*`のディレクティブがあった = クライアントサイドでJSが必要ということ\n<ul>\n<li>なので`clientBuild()`時に、それ用のコードが出力される</li>\n</ul></li>\n<li>`ssrBuild()`の各ページごとに`topLevelImports`を見つけるところで、挿入される\n<ul>\n<li>`client:idle`は、`astro/client/idle.js`のような<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CC%BF%CC%BE\">命名</a>ルールでランタイムのファイルが対応する</li>\n</ul></li>\n<li>これらは別の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リにある\n<ul>\n<li><a href=\"https://github.com/withastro/astro/tree/51db2b9b4efd899bdd7efc481a5f226b3b040614/packages/astro/src/runtime/client\">https://github.com/withastro/astro/tree/51db2b9b4efd899bdd7efc481a5f226b3b040614/packages/astro/src/runtime/client</a></li>\n</ul></li>\n<li>ハイドレーションの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>\n<ul>\n<li>基本的にはよしななタイミングで`innerHTML`を更新したり関数を呼ぶだけ</li>\n<li>`requestIdleCallback`や`IntersectionObserver`などにあわせて</li>\n</ul></li>\n<li>`.svelte`などのUI<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>のコードももちろんViteでビルドする\n<ul>\n<li>インテグレーションを追加すると、Viteの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>リストに入ってくる</li>\n<li>そして`clientBuild()`の時に使われる</li>\n</ul></li>\n</ul><p>なんとな〜く、わかったかな。</p>\n\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    \n<ul>\n<li>URLに対応する`pages`をまとめた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DE%A5%CB%A5%D5%A5%A7%A5%B9%A5%C8\">マニフェスト</a>をまず作る</li>\n<li>それらルートのエントリーとなる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>をロードしていく\n<ul>\n<li>Viteで`ssrLoadModule()`する`preload()`が最初の関門</li>\n<li>そのためのVite<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>たち</li>\n</ul></li>\n<li>数多のフォーマットを、いったんJSにまとめるのがポイント\n<ul>\n<li>`.astro`をJS表現にして by WASM</li>\n<li>`.svelte|vue|jsx`も全部JS表現にして</li>\n<li>依存関係やら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>などのアセットの相関をまとめあげ</li>\n</ul></li>\n<li>`render()`でその<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>関数を実行して、HTMLを吐かせる\n<ul>\n<li>`dev`コマンドではそれをリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>ト時に実行して返す</li>\n<li>`build`コマンドでは一括でやって書き出す</li>\n</ul></li>\n</ul><p>ViteでビルドしたものをViteでビルドしてViteでビルドする！って感じ。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>モードでビルドする実行パスは追えず終いだった。（つかれた）<br />\nただし<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>モード、コードとしても後付した感がすごいので、v2に向けてコードベースをリライトしたりしそうやなって思った。</p><p>それなりに大変だったけど、Nodeのツールなおかげで実行時にもだいたい難読化されてたりしないし、デバッガー使ってコードリーディングができて楽でいいですね。</p><p>（実際にAstroでサイトを作ってみてる感想としては、動いてるし方向性としても間違いないけど、DXとしては正直まだまだと思ってるので、あと数日でほんとにメジャーバージョン出すの？って思ってたら、7月後半に延期するって記事が出てた！）</p>\n\n</div>"
}
