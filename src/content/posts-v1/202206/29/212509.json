{
  "title": "vercel/edge-runtime のコードを読む",
  "html": "<p>初手からREPLがついてたりと、なかなか洗練されてそう・・ってのが第一印象。</p>\n\n    <blockquote>\n        <p><a href=\"https://edge-runtime.vercel.app/\">What is Edge Runtime | Edge Runtime</a></p>\n\n    </blockquote>\n<p>あとは`cloudflare/miniflare`のコードを読んだ身として、どういう実装になってるんやろ？ってのも気になったので。やはりNode.jsの`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vm\">vm</a>`を使ってるのか、はたまた未知のテク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED\">ノロ</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC\">ジー</a>か・・・！</p><p>読んだのは最新の・・というか、いま時点ではまだ1コミットしかなかった。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/vercel/edge-runtime/commit/0b11a95e2f470d278db27982e4905febc6ac9bb7\">https://github.com/vercel/edge-runtime/commit/0b11a95e2f470d278db27982e4905febc6ac9bb7</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>の構成</h3>\n    <p>モノレポ。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>.\n└── packages\n    ├── format\n    ├── jest-environment\n    ├── primitives\n    ├── runtime\n    ├── types\n    └── vm</pre><p>この時点でわかる、やっぱ`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vm\">vm</a>`モジュール使ってそうって感じ。まぁ他に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1\">コスパ</a>のいい選択肢ないんやろうけど。</p>\n\n</div>\n<div class=\"section\">\n    <h3>@edge-runtime/types</h3>\n    <p>その名の通りの型。</p><p>`declare global {}`してくれてるので、手元でコード書くときにも使える。</p>\n\n    <blockquote>\n        <p><a href=\"https://edge-runtime.vercel.app/features/typescript-support\">https://edge-runtime.vercel.app/features/typescript-support</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>@edge-runtime/jest-environment</h3>\n    <p>そのまんま。Jestのコンテキストを拡張してるだけ。</p><p>（Jest遅いからあんま使いたくないんよな・・`node -r`で使えるようになってるほうが嬉しい）</p>\n\n</div>\n<div class=\"section\">\n    <h3>@edge-runtime/format</h3>\n    <p>コンソールに何かしら出力するときのフォーマッタで、内部的に利用してるやつ。</p><p>`console.log(format(args))`的な使われ方をしてる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>@edge-runtime/runtime</h3>\n    <p>公開されてる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>の`bin`もここにあった。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>自体は、</p>\n\n<ul>\n<li>REPLモードなのか</li>\n<li>ファイル指定なのか</li>\n<li>サーバーとしてなのか</li>\n</ul><p>といった分岐のハンドリングをやってる。</p><p>エクスポートされてる`EdgeRuntime`ってクラスが本体で、モジュールとして直接利用することもできるやつ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/vercel/edge-runtime/blob/0b11a95e2f470d278db27982e4905febc6ac9bb7/packages/runtime/src/edge-runtime.ts\">https://github.com/vercel/edge-runtime/blob/0b11a95e2f470d278db27982e4905febc6ac9bb7/packages/runtime/src/edge-runtime.ts</a></p>\n\n    </blockquote>\n<p>次に見ていく`extends EdgeVM`してるほかは、`addEventListener()`やグローバルな例外のハンドラ、`fetch()`を内部的に呼ぶコードなどを用意してる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>@edge-runtime/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vm\">vm</a></h3>\n    <p>やはりずばりの`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vm\">vm</a>`の`createContext()`と`runInContext()`をやるための層。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/vercel/edge-runtime/blob/0b11a95e2f470d278db27982e4905febc6ac9bb7/packages/vm/src/vm.ts\">https://github.com/vercel/edge-runtime/blob/0b11a95e2f470d278db27982e4905febc6ac9bb7/packages/vm/src/vm.ts</a></p>\n\n    </blockquote>\n<p>`evaluate()`っていう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VM\">VM</a>でコードを実行するメソッドがメイン。</p><p>そのほか、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VM\">VM</a>のコンテキストにコードをロードしてくる`require()`ってのがあり、CommonJSモジュールの依存解決とかもできるようになってた。（いつ何のために使うんや？）</p>\n\n</div>\n<div class=\"section\">\n    <h3>@edge-runtime/primitives</h3>\n    <p>Edgeのランタイムで利用できるグローバルな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>たちで、さっきの`EdgeVM`のコンテキストでは事前にロードされてる。</p><p>軽いのは自前実装してるけど、全部なわけではなく、適宜npmの既存ポリフィルを使ってた。HTTPまわりはやはり`undici`だった。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/vercel/edge-runtime/blob/0b11a95e2f470d278db27982e4905febc6ac9bb7/packages/primitives/src/index.js\">https://github.com/vercel/edge-runtime/blob/0b11a95e2f470d278db27982e4905febc6ac9bb7/packages/primitives/src/index.js</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>「え、コードこんだけ？少なっ」っていうのが素直な感想。</p><p>そして次に、めちゃめちゃキレイなコード・・っていう。`miniflare`（というかCloudflare Workers）より機能が圧倒的に少ない分、コードもシンプルですごく読みやすかった。</p><p>すごい汎用的なV8なEdgeランタイムのシミュレーターっていうか、Vercel Edge Functionsって、Vercel特有の何かしらってないの・・？</p>\n\n    <blockquote>\n        <p><a href=\"https://edge-runtime.vercel.app/features/available-apis\">Edge Runtime APIs | Edge Runtime</a></p>\n\n    </blockquote>\n<p>個人的には、Node.jsの上にこういう層を実装するんではなく、なんか実行可能バイナリみたいなのが直接提供される日がそのうちできてくんのかな〜とか思ってる。ユニバーサルなやつ。</p>\n\n</div>"
}
