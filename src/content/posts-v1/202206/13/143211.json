{
  "title": "AstroでSSGする場合の個人的ベストプラクティス",
  "html": "<p>個人的なやつなので、すべての案件にハマるわけではないはず。</p><p>今回はたまたまAstroを選んでるけど、他のものを使ってSSGする場合にも、ある程度は当てはまる内容かと。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"データの取得コマンドとSSGのコマンドを分ける\">データの取得コマンドとSSGのコマンドを分ける</h3>\n    <p>ビルドコマンドを叩いた時に、</p>\n\n<ul>\n<li>SSGのフローの一貫としてデータを`fetch()`し、それを使ってページ生成</li>\n</ul><p>というのではなく、</p>\n\n<ul>\n<li>データを取得し、ローカルにキャッシュするコマンド</li>\n<li>そのキャッシュを使って、SSGでページ生成するコマンド</li>\n</ul><p>という2段構えにするということ。</p><p>こうすることで、ローカルでの開発時にネットワーキングしなくて済む。<br />\nデータ取得のコマンドを賢く作れば、毎回一括ダウンロードもしなくてよくなるし。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>にSSGを採用した場合、遅かれ早かれ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>からすべてのデータを引っこ抜くことになるので、そこだけを個別に最適化できるようにしたほうが絶対に幸せになれる。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>に対してGraphQLで個別に・・とか本当にいらなくて、`all.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>`だけあればあとはこっちでよしなに整形する。</p><p>そういう意味でも、各<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>ベンダー各位がそれ用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>ツールとか作ってくれていいのにって思ってる。だいたい手動でページング書かないといけなくてだるいので。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"下書き記事のプレビューはCSRする専用のページを作る\">下書き記事のプレビューは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSR\">CSR</a>する専用のページを作る</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>へのアクセスに必要なキーは、URLのパラメータにするなりLocalStorageにしまうなりすればよい。</p><p>こうすれば、</p>\n\n<ul>\n<li>公開ページと同様の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を使える</li>\n<li>下書きページのためだけにビルドパイプラインを増やして<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Basic%C7%A7%BE%DA\">Basic認証</a>を・・・とか全部いらない</li>\n</ul><p>SSG時に期待するであろう記事データを見て、静的にするか動的にするか書くだけ。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink>{Boolean(article)\n  ? <span class=\"synIdentifier\">&lt;</span>StaticRenderer<span class=\"synIdentifier\"> {article} /&gt;</span>\n  : <span class=\"synIdentifier\">&lt;</span>DynamicRenderer<span class=\"synIdentifier\"> client:only /&gt;</span>\n}\n</pre><p>ディレクティブで`client:only`にしておけばよい。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Pagesにロジックを書かない\">Pagesにロジックを書かない</h3>\n    <p>`pages/*.astro`でJSのコードをあれこれ書かないということ。</p><p>代わりに全部それ用の`.js`に逃がしてそこで書く。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>---\n<span class=\"synStatement\">export</span> <span class=\"synIdentifier\">{</span> getStaticPathsForArticlePages as getStaticPaths <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;../../data/index.js&quot;</span>;\n\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> setupArticlePage <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;../../data/index.js&quot;</span>;\n\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> article, relatedArticles, allCategories <span class=\"synIdentifier\">}</span> = await setupArticlePage(Astro);\n---\n\n&lt;!-- 以降はそのまま --&gt;\n</pre><p><br />\nただし、`Astro.glob()`だけは逃がせないらしい。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/withastro/rfcs/discussions/190\">Make Astro global available outside of *.astro files &middot; Discussion #190 &middot; withastro/rfcs &middot; GitHub</a></p>\n\n    </blockquote>\n<p>これは内部実装のVite<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>の都合かと。</p><p>現状、Astro<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>のDXは微妙であり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VSCode\">VSCode</a>以外のエディタにとってはただのテキストファイルであることも踏まえると、まあ妥当かなーって。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"その他の個人的なもの\">その他の個人的なもの</h3>\n    \n<ul>\n<li>`/public`は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/favicon\">favicon</a>類くらいしか置かない\n<ul>\n<li>画像もそれを使う<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>に閉じ込める</li>\n</ul></li>\n<li>`/layouts`は使わない\n<ul>\n<li>もちろんサイト構成にもよるけど</li>\n<li>基本的にレイアウトを共有する旨味はないと思ってる派閥</li>\n<li>特定の幅高さなどを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> Variablesで共有するのはアリ（というかそれだけでいい）</li>\n</ul></li>\n<li>`client:*`のディレクティブを使うとき、一緒に渡すPropsは公開されてしまってよいものか確認する\n<ul>\n<li>Partial Hydrationのために、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSON\">JSON</a>がそのままクライアントに落ちることになるので</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>では問題にならない最適化してない巨<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSON\">JSON</a>が、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSR\">CSR</a>では問題になるってこと</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"まとめ\">まとめ</h3>\n    <p>Astroは、0JSに軸足を置いてるってところが個人的には推しポイント。ただそれがゆえに、取り回しのいい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>に寄せてコードを書いてしまうと、最適化しようとしたときに不便っていう二律背反があり、そこだけ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リ構造とか悩ましい。</p><p>それはそれとして、来月のメジャーリリース時には、DXまわりがもっと快適になってるといいな〜。</p>\n\n</div>"
}
