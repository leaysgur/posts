{
  "title": "html-rewriter-wasmでHTMLをパースする",
  "html": "<p>HTMLファイルをパースして、</p>\n\n<ul>\n<li>特定の文字列を抜き出したり</li>\n<li>特定の属性を書き換えたものを書き出したり</li>\n</ul><p>ってことをやりたい時、今までは`cheerio`を使うことが個人的には多かった。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/cheeriojs/cheerio\">GitHub - cheeriojs/cheerio: Fast, flexible, and lean implementation of core jQuery designed specifically for the server.</a></p>\n\n    </blockquote>\n<p>懐かしい`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>`的な記法で操作できる・・とはいえ、もはや`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>`のことぜんぜん覚えてなくて、生DOMの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>ばっか使っちゃったり。<br />\nかといって、`cheerio`が内部で使ってるHTMLのASTパーサーである`parse5`や`htmlparser2`をそのまま使うのは、ローレベルすぎて乗り気じゃなかったり。</p><p>というところで、なんか代用できるものはないかな？って思ってたところで、`HTMLRewriter`のことを思い出したという話。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>HTMLRewriter</h3>\n    <p>そもそもは、Cloudflare Workersのランタイムに実装されてる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/runtime-apis/html-rewriter\">https://developers.cloudflare.com/workers/runtime-apis/html-rewriter</a></p>\n\n    </blockquote>\n<p>別の所から`fetch()`したHTMLを、書き換えながらもストリーミングでレスポンスできるよっていうなかなかユニークなやつ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>async <span class=\"synIdentifier\">function</span> handleRequest(req) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> res = await fetch(req);\n\n  <span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> HTMLRewriter()\n    .on(<span class=\"synConstant\">'div'</span>, myDivHandler)\n    .transform(res);\n<span class=\"synIdentifier\">}</span>\n</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/i18n\">i18n</a>やリンク切れ検知やらに使えるよっていう触れ込みで紹介されてるけど、個人的には<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>の何かしらに使えないだろうか・・とか一時期は考えてた。</p>\n\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2021/11/26/112306\">CDN&#x30A8;&#x30C3;&#x30B8;&#x3067;SSR&#x3001;&#x3067;&#x306F;&#x306A;&#x304F;SSG+&alpha;&#x3067;&#x304D;&#x306A;&#x3044;&#x304B; - console.lealog();</a></p>\n\n    </blockquote>\n<p>まあ実際はこれといった活用法が思いつかなくて、いわば存在を忘れかけてた。</p>\n\n</div>\n<div class=\"section\">\n    <h3>html-rewriter-wasm</h3>\n    <p>で、そんな折に`miniflare`における`HTMLRewriter`の実装として使われるべくポートされたWASMの実装があるのを思い出し。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/cloudflare/html-rewriter-wasm\">GitHub - cloudflare/html-rewriter-wasm: WebAssembly version of HTMLRewriter</a></p>\n\n    </blockquote>\n<p>CFWの`HTMLRewriter`は`Stream`ベースの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>しかなかったけど、`html-rewriter-wasm`の`HTMLRewriter`は同期で使えそうでいいのでは？冒頭の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>に使えるのでは？と思いやってみたところ、バッチリだったよ！という記事でした。</p>\n\n<div class=\"section\">\n    <h4>簡単な使い方など</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> HTMLRewriter <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;html-rewriter-wasm&quot;</span>;\n\n<span class=\"synStatement\">const</span> htmlString = `&lt;!doctype html&gt;...&lt;/html&gt;`;\n<span class=\"synStatement\">const</span> encoder = <span class=\"synStatement\">new</span> TextEncoder();\n\n<span class=\"synComment\">// インスタンス</span>\n<span class=\"synStatement\">const</span> rewriter = <span class=\"synStatement\">new</span> HTMLRewriter((chunk) =&gt; <span class=\"synIdentifier\">{}</span>);\n\n<span class=\"synComment\">// やりたいことハンドラ</span>\nrewriter\n  .on(<span class=\"synConstant\">&quot;img[src]&quot;</span>, <span class=\"synIdentifier\">{</span> <span class=\"synComment\">/* ... */</span> <span class=\"synIdentifier\">}</span>)\n  .on(<span class=\"synConstant\">&quot;video &gt; source&quot;</span>, <span class=\"synIdentifier\">{</span> <span class=\"synComment\">/* ... */</span> <span class=\"synIdentifier\">}</span>)\n\n<span class=\"synComment\">// ロード + 終了マーク</span>\nawait rewriter.write(encoder.encode(htmlString));\nawait rewriter.end();\n\n<span class=\"synComment\">// 片付け</span>\nrewriter.free();\n</pre><p>という感じで、`write()`と`end()`を呼んだら、その<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>は役目を終えて使い回せなくなる。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ハンドラ</h4>\n    <p>やりたいことでは、いわゆる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>ーが書けるので、だいたいのことができる。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>ーの詳細は、CFWのドキュメントがまとまってて楽だった。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/runtime-apis/html-rewriter#selectors\">https://developers.cloudflare.com/workers/runtime-apis/html-rewriter#selectors</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>ーと一緒に、`element`と`comments`と`text`の3つに対してやりたいことハンドラを渡す。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> HTMLRewriter <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;html-rewriter-wasm&quot;</span>;\n\n<span class=\"synStatement\">const</span> rewriter = <span class=\"synStatement\">new</span> HTMLRewriter();\n\nrewriter\n  .on(<span class=\"synConstant\">&quot;h2, h3, h4&quot;</span>, <span class=\"synIdentifier\">{</span>\n    element(el) <span class=\"synIdentifier\">{}</span>,\n    comments(comment) <span class=\"synIdentifier\">{}</span>,\n    text(text) <span class=\"synIdentifier\">{</span>\n      console.log(text);\n    <span class=\"synIdentifier\">}</span>,\n  <span class=\"synIdentifier\">}</span>)  \n  .on(<span class=\"synConstant\">&quot;.my-slider img&quot;</span>, <span class=\"synIdentifier\">{</span>\n    element(el) <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">const</span> src = el.getAttribute(<span class=\"synConstant\">&quot;src&quot;</span>);\n      <span class=\"synStatement\">if</span> (src !== <span class=\"synStatement\">null</span>) <span class=\"synIdentifier\">{</span>\n        console.log(src);\n      <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">}</span>,\n  <span class=\"synIdentifier\">}</span>);\n</pre>\n</div>\n<div class=\"section\">\n    <h4>書き出し</h4>\n    <p>リライトしたあとで、ファイルに書き出したいとき。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> HTMLRewriter <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;html-rewriter-wasm&quot;</span>;\n\n<span class=\"synStatement\">const</span> encoder = <span class=\"synStatement\">new</span> TextEncoder();\n<span class=\"synStatement\">const</span> decoder = <span class=\"synStatement\">new</span> TextDecoder();\n\n<span class=\"synComment\">// ここに貯める</span>\n<span class=\"synIdentifier\">let</span> output = <span class=\"synConstant\">&quot;&quot;</span>;\n<span class=\"synStatement\">const</span> rewriter = <span class=\"synStatement\">new</span> HTMLRewriter((outputChunk) =&gt; <span class=\"synIdentifier\">{</span>\n  output += decoder.decode(outputChunk);\n<span class=\"synIdentifier\">}</span>);\n\nrewriter.on(<span class=\"synConstant\">&quot;p&quot;</span>, <span class=\"synIdentifier\">{</span>\n  element(element) <span class=\"synIdentifier\">{</span>\n    element.setInnerContent(<span class=\"synConstant\">&quot;new&quot;</span>);\n  <span class=\"synIdentifier\">}</span>,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synStatement\">try</span> <span class=\"synIdentifier\">{</span>\n  await rewriter.write(encoder.encode(<span class=\"synConstant\">&quot;&lt;p&gt;old&lt;/p&gt;&quot;</span>));\n  await rewriter.end();\n  console.log(output); <span class=\"synComment\">// &lt;p&gt;new&lt;/p&gt;</span>\n<span class=\"synIdentifier\">}</span> <span class=\"synStatement\">finally</span> <span class=\"synIdentifier\">{</span>\n  rewriter.free();\n<span class=\"synIdentifier\">}</span>\n</pre><p>というように<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>のコールバックでチャンクを貯める。</p><p>ディスクからの読み書きは、今までどおり`node:fs`から`readFile()`なり`writeFile()`なりで。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>使われてる文字を抽出</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> output = <span class=\"synStatement\">new</span> Set();\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>encoder, decoder<span class=\"synIdentifier\">]</span> = <span class=\"synIdentifier\">[</span><span class=\"synStatement\">new</span> TextEncoder(), <span class=\"synStatement\">new</span> TextDecoder()<span class=\"synIdentifier\">]</span>;\n\n<span class=\"synStatement\">const</span> excludeReg = <span class=\"synConstant\">/!doctype html/i</span>;\n<span class=\"synStatement\">const</span> rewriter = <span class=\"synStatement\">new</span> HTMLRewriter((chunk) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> text = decoder.decode(chunk).trim();\n\n  <span class=\"synStatement\">if</span> (text !== <span class=\"synConstant\">&quot;&quot;</span> &amp;&amp; !excludeReg.test(text)) <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">for</span> (<span class=\"synStatement\">const</span> c of text) output.add(c);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>)\n  <span class=\"synComment\">// Not printed</span>\n  .on(<span class=\"synConstant\">&quot;head, script, style&quot;</span>, <span class=\"synIdentifier\">{</span>\n    element(element) <span class=\"synIdentifier\">{</span>\n      element.remove();\n    <span class=\"synIdentifier\">}</span>,\n  <span class=\"synIdentifier\">}</span>)\n  .on(<span class=\"synConstant\">&quot;*&quot;</span>, <span class=\"synIdentifier\">{</span>\n    element(element) <span class=\"synIdentifier\">{</span>\n      element.removeAndKeepContent();\n    <span class=\"synIdentifier\">}</span>,\n    comments(comment) <span class=\"synIdentifier\">{</span>\n      comment.remove();\n    <span class=\"synIdentifier\">}</span>,\n  <span class=\"synIdentifier\">}</span>);\n\nawait rewriter.write(encoder.encode(htmlString));\nawait rewriter.end();\n\nrewriter.free();\n</pre>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>という感じでなかなか便利かつ、手元で試した限りは`cheerio`よりパフォーマンスも良かったので、これからも使っていきたいところ。</p>\n\n</div>"
}
