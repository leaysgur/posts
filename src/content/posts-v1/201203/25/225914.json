{
  "title": "nginxだけでWordPressを動かすための設定",
  "html": "<p>またも作業メモと、設定について。</p><p>やらなきゃいけないのは以下2点。</p>\n\n<ol>\n<li>ドメインの振り分け設定</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A1%BC%A5%DE%A5%EA%A5%F3%A5%AF\">パーマリンク</a>のための設定</li>\n</ol><p>IP直打ちで初期設定で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/WordPress\">WordPress</a>を使う分には不要ですが、そんな人はまぁいないと思うので・・ｗ</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>nginxでのドメイン設定やドキュメントルートについて</h3>\n    <p>ココさえ抑えれば、後は特に悩まなくて良いかと。<br />\n逆に色々調べると、あれこれやり方は出てきますが、基本的には一緒みたい。</p>\n\n<div class=\"section\">\n    <h4>nginx.conf</h4>\n    <p>nginxのインストールディレクトリにある、nginx.confを主に設定します。<br />\n私はちなみにyumでインストールしました。<br />\nnginx.confの中身</p>\n\n    <pre class=\"code\" data-unlink>#######################################################################\n#\n# This is the main Nginx configuration file. \n#\n# More information about the configuration options is available on\n#   * the English wiki - http://wiki.nginx.org/Main\n#   * the Russian documentation - http://sysoev.ru/nginx/\n#\n#######################################################################\n\n#----------------------------------------------------------------------\n# Main Module - directives that cover basic functionality\n#\n#   http://wiki.nginx.org/NginxHttpMainModule\n#\n#----------------------------------------------------------------------\n\nuser              nginx;\n# worker_processes  1;\nworker_processes 2;\nworker_cpu_affinity 01 10;\n\nerror_log  /var/log/nginx/error.log;\n#error_log  /var/log/nginx/error.log  notice;\n#error_log  /var/log/nginx/error.log  info;\n\npid        /var/run/nginx.pid;\n\n\n#----------------------------------------------------------------------\n# Events Module\n#\n#   http://wiki.nginx.org/NginxHttpEventsModule\n#\n#----------------------------------------------------------------------\n\nevents {\n    worker_connections  1024;\n}\n\n\n#----------------------------------------------------------------------\n# HTTP Core Module\n#\n#   http://wiki.nginx.org/NginxHttpCoreModule\n#\n#----------------------------------------------------------------------\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; &#39;\n                      &#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;\n                      &#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;;\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  45;\n\n    #gzip  on;\n    gzip                on;\n    gzip_http_version   1.0;\n    gzip_min_length     1000;\n    gzip_comp_level     2;\n    gzip_proxied        expired no-cache no-store private auth;\n    gzip_vary           on;\n    gzip_types          text/plain\n                        text/xml\n                        text/css\n                        text/javascript\n                        image/x-icon\n                        application/xml\n                        application/rss+xml\n                        application/json\n                        application/x-javascript;\n    gzip_disable        &#34;MSIE [1-6]\\.&#34;;\n    gzip_disable        &#34;Mozilla/4&#34;;\n\n    # Hide server info.\n    server_tokens     off;\n\n    # Cache contents\n    expires 14d;\n\n    # Load config files from the /etc/nginx/conf.d directory\n    include /etc/nginx/conf.d/*.conf;\n}</pre>\n<p>まるまる載せてますが、サーバーによって設定が変わる部分もあるのでご注意。<br />\nちなみにここでは本記事で設定すべし！とした内容はひとつも設定してません。<br />\nWebサーバーの大元として、設定すべき部分を書いてます。</p><p>なので、各ドメイン単位でのドキュメントルートとか、そういった設定をちゃんとする必要があります。<br />\nどこで設定してるかというと、最後の方にある・・・</p>\n\n    <pre class=\"code lang-linux\" data-lang=\"linux\" data-unlink>    # Load config files from the /etc/nginx/conf.d directory\n    include /etc/nginx/conf.d/*.conf;</pre>\n<p>ってとこです。</p><p>nginxでは、このnginx.confだけじゃなくてconf.dディレクトリ以下に設定ファイルを置いて、そっちで設定することもできるそうな。</p>\n\n    <blockquote>\n        <p>他所様によっては、sites-availableとかsites-enableとかディレクトリを作ってApacheのソレらしく書いてたりもします。<br />\nもちろんそれでもできます。<br />\nどれが正しいの？って思いがちですが、どれも正しいんですね・・。<br />\nその場合は、nginx.confの最後の方に、include...がちゃんと書かれてるはずです。</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>conf.dディレクトリ</h4>\n    <p>初期設定では、この中に以下のファイルがあると思います。</p>\n\n<ol>\n<li>default.conf</li>\n<li>ssl.conf</li>\n<li>virtual.conf</li>\n</ol><p>default.confには、いわゆるデフォルトサーバーの設定を書きます。<br />\n基本的には、ここの内容に従って処理を進めます。<br />\nで、より適合する条件があれば、そっちを採用します。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://nginx.org/ja/docs/http/request_processing.html\" target=\"_blank\" title=\"nginx はどのようにリクエストを処理するか\">nginx はどのようにリクエストを処理するか</a></p>\n\n    </blockquote>\n<p>今回は通例に従って、virtual.confに設定していきます。<br />\nここでは、www.example.comと、example.comで1WordPressにします。<br />\nblog.example2.comでもう1WordPressにします。</p>\n\n    <pre class=\"code lang-linux\" data-lang=\"linux\" data-unlink>server {\n    listen  80;\n    server_name example.com *.example.com;\n    rewrite ^   http://www.example.com$request_uri? permanent;\n}\n\nserver {\n    listen  80;\n    server_name www.example.com;\n    access_log  /var/www/example/logs/access.log;\n    error_log   /var/www/example/logs/error.log;\n\n    location / {\n        root /var/www/example/public_html;\n        index index.html index.htm index.php;\n    }\n\n    location ~ \\.php$ {\n        include /etc/nginx/fastcgi_params;\n        fastcgi_pass    127.0.0.1:9000;\n        fastcgi_index   index.php;\n        fastcgi_param   SCRIPT_FILENAME /var/www/example/public_html$fastcgi_script_name;\n    }\n\n    location ~ /\\.ht {\n        deny  all;\n    }\n}\n\nserver {\n    listen  80;\n    server_name blog.example2.com;\n    access_log  /var/www/blog/logs/access.log;\n    error_log   /var/www/blog/logs/error.log;\n\n    location / {\n        root /var/www/blog/public_html;\n        index index.html index.htm index.php;\n\n        if (!-e $request_filename) {\n                rewrite ^.+?($/-.*) $1 last;\n                rewrite ^.+?(/.*\\.php)$ $1 last;\n                rewrite ^ /index.php last;\n        }\n    }\n\n    location ~ \\.php$ {\n        include /etc/nginx/fastcgi_params;\n        fastcgi_pass    127.0.0.1:9000;\n        fastcgi_index   index.php;\n        fastcgi_param   SCRIPT_FILENAME /var/www/blog/public_html$fastcgi_script_name;\n    }\n\n    location ~ /\\.ht {\n        deny  all;\n    }\n}</pre>\n<p>最初のブロックで、「なんたら.example.comドメインへのアクセスは、全て以下に書いてるwww.example.comの設定と同じ処理に」する、としています。<br />\nで、肝心のwww.example.comへのアクセス時の処理を設定します。</p><p>ログの場所とか、ドキュメントルートの場所とかをここで任意の場所に設定できます。</p><p>複数のドメインで、という場合は、また同じように書きます。<br />\nもうおわかりかとおもいますが、[server]で囲まれてる部分を追加することで、どんどん細かくやっていけます。</p>\n\n    <blockquote>\n        <p>1ファイルでいっぱい書きたくないわ！って人のために、さっきのsites-availableとかがあるのかと。</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/WordPress\">WordPress</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A1%BC%A5%DE%A5%EA%A5%F3%A5%AF\">パーマリンク</a>のために</h4>\n    <p>最後のブロックのblog.example2.comでは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A1%BC%A5%DE%A5%EA%A5%F3%A5%AF\">パーマリンク</a>用に記述を追加しています。</p>\n\n    <pre class=\"code lang-linux\" data-lang=\"linux\" data-unlink>        if (!-e $request_filename) {\n                rewrite ^.+?($/-.*) $1 last;\n                rewrite ^.+?(/.*\\.php)$ $1 last;\n                rewrite ^ /index.php last;\n        }</pre>\n<p>これをしないと、パーマリンクを設定した時に、わけのわからんURL遷移になって、とにかく動きません。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>設定を反映</h3>\n    \n    <pre class=\"code lang-linux\" data-lang=\"linux\" data-unlink>/etc/init.d/nginx configtest\n/etc/init.d/nginx reload</pre>\n<p>設定ファイルをテストしてみて、OKだったらロードしちゃいましょう。<br />\nいきなりロードしちゃってもOKです。</p>\n\n</div>\n<div class=\"section\">\n    <h3>気になるところ</h3>\n    <p>fast-cgiのパスって、どっか一箇所に書けないもんなんでしょうか・・。<br />\nやっぱそれぞれのserverディレクティブ単位でちゃんと書かないといけないのかしら。</p>\n\n</div>\n</div>"
}
