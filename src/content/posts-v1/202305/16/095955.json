{
  "title": "Web Sessions at Google I/O 2023の気になった発表のまとめ",
  "html": "<p>まとめプレイリストが公開されてたので、その中から気になったやつを流し見した。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.youtube.com/playlist?list=PLOU2XLYxmsIJGxIV8Lt8gF_79Z334LQ6h\">https://www.youtube.com/playlist?list=PLOU2XLYxmsIJGxIV8Lt8gF_79Z334LQ6h</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3 id=\"Whats-new-in-Web\">What's new in Web</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=x9rh0Du4Czg\">https://www.youtube.com/watch?v=x9rh0Du4Czg</a></p>\n\n    </blockquote>\n\n<ul>\n<li>ブラウザで使える最新機能のご紹介</li>\n<li>`dialog`要素はいいぞ\n<ul>\n<li>`showModal()`のほう</li>\n<li>フォーカスやタブ管理までブラウザがやってくれるし、スタッキングコンテキストも安心</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CSS\">CSS</a> transform\n<ul>\n<li>`transform: scale(1)`を`scale: 1`って書けるように</li>\n<li>複数の組み合わせでもコードがごちゃつかない</li>\n</ul></li>\n<li>新しい<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CSS\">CSS</a>の単位\n<ul>\n<li>`lv(h|w|min|max)`、`sv(h|w|min|max)`、`dv(h|w|min|max)`</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB\">スマホ</a>でアドレスバーがあったりなかったりしても大丈夫</li>\n</ul></li>\n<li>`:focus-visible`擬似クラス\n<ul>\n<li>ほしかったやつ</li>\n</ul></li>\n<li>`structuredClone()`\n<ul>\n<li>さよなら`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/JSON\">JSON</a>.parse(<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/JSON\">JSON</a>.strigify(x))`</li>\n</ul></li>\n<li>`TransformStream()`\n<ul>\n<li>Nodeではおなじみreadableとwritableのペア</li>\n</ul></li>\n<li>`importmap`</li>\n<li>これらは、モダンブラウザの最新verならどこでも動くもの</li>\n<li>というような<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D6%A5%E9%A5%A6%A5%B6%A1%BC\">ブラウザー</a>ごとの実装のベースラインをまとめていくよ\n<ul>\n<li><a href=\"https://web.dev/baseline/\">https://web.dev/baseline/</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"How-to-optimize-web-responsiveness-with-Interaction-to-Next-Paint\">How to optimize web responsiveness with Interaction to Next Paint</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=KZ1kxzsJZ5g\">https://www.youtube.com/watch?v=KZ1kxzsJZ5g</a></p>\n\n    </blockquote>\n\n<ul>\n<li>新しい指標であるINP\n<ul>\n<li>Interaction to Next Paint</li>\n<li><a href=\"https://web.dev/inp/\">https://web.dev/inp/</a></li>\n</ul></li>\n<li>FIDは本当に最初の1回しか見てなかった\n<ul>\n<li>ユーザーはその後も回遊するはずで、そっちが大事</li>\n<li>ゆくゆくはFIDを置き換える</li>\n</ul></li>\n<li>ユーザー入力に対して200ms以内に反応すべし\n<ul>\n<li>500msを超えると問題</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"The-9-most-effective-Core-Web-Vitals-opportunities-of-2023\">The 9 <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/most\">most</a> effective Core Web Vitals opportunities of 2023</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=mdB-J6BRReo\">https://www.youtube.com/watch?v=mdB-J6BRReo</a></p>\n\n    </blockquote>\n\n<ul>\n<li><a href=\"https://web.dev/top-cwv-2023/\">https://web.dev/top-cwv-2023/</a></li>\n<li>#1 LCP: LCPに関わる要素はHTMLで表現する\n<ul>\n<li>背景ではなく`img`要素にするとか</li>\n<li>`loading=lazy`しない</li>\n<li>`rel=\"preload\"`はよい</li>\n</ul></li>\n<li>#2 LCP: LCPに関わるものを優先的に処理する\n<ul>\n<li>`fetchpriority`属性</li>\n<li>現状は<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Chromium\">Chromium</a>系にだけ実装</li>\n</ul></li>\n<li>#3 LCP: <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CDN\">CDN</a>にコンテンツを配置する\n<ul>\n<li>TTFBに効くよ</li>\n</ul></li>\n<li>#4 CLS: サイズ指定を忘れない\n<ul>\n<li>`img`要素に`width/height`を指定しようね</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CSS\">CSS</a>の`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/aspect\">aspect</a>-ratio`も使えるよ</li>\n<li>広告枠には`min-height`</li>\n</ul></li>\n<li>#5 CLS: bfcacheを活用する\n<ul>\n<li>デフォルトで有効ではあるけど</li>\n<li>DevToolsのApplicationタブでも様子が見れる</li>\n</ul></li>\n<li>#6 CLS: <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CSS\">CSS</a>のレイアウトを動かさない\n<ul>\n<li>`top`ではなく`translate`で</li>\n</ul></li>\n<li>#7 FID|INP: メインスレッドを専有しない\n<ul>\n<li>いわゆるロングタスク</li>\n<li>`setTimeout()`でメインスレッドから逃がしたりして\n<ul>\n<li><a href=\"https://web.dev/optimize-long-tasks/\">https://web.dev/optimize-long-tasks/</a></li>\n</ul></li>\n</ul></li>\n<li>#8 FID|INP: 不必要な<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>に注意\n<ul>\n<li>使われないものは送らない</li>\n<li>コード<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8\">カバレッジ</a>を計測するなどして監視</li>\n<li>適切にコード分割・遅延ロードしよう</li>\n</ul></li>\n<li>#9 FID|INP: 大きくDOMを更新しない\n<ul>\n<li>大きなDOM変更を避ける</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CSS\">CSS</a>の`contain`や`content-visibility`で制御したり</li>\n<li>`requestAnimationFrame()`も使いすぎるとよくない</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"WebAssembly-A-new-development-paradigm-for-the-web\">WebAssembly: A new development paradigm for the web</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=RcHER-3gFXI\">https://www.youtube.com/watch?v=RcHER-3gFXI</a></p>\n\n    </blockquote>\n\n<ul>\n<li>WASMとは</li>\n<li>ブラウザでできなかったことができるようになる\n<ul>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>など他言語の資産を活用できる</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/OpenCV\">OpenCV</a>, Tensorflow, <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SQLite\">SQLite</a>, <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/FFmpeg\">FFmpeg</a>, etc...</li>\n</ul></li>\n<li>パフォーマンスの向上も狙える\n<ul>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Figma\">Figma</a>やSnapchatや<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Photoshop\">Photoshop</a>など</li>\n</ul></li>\n<li>npmにも1500以上のWASMライブラリが公開されてる</li>\n<li>続々\n<ul>\n<li><a href=\"https://github.com/WebAssembly/relaxed-simd\">https://github.com/WebAssembly/relaxed-simd</a></li>\n<li><a href=\"https://github.com/WebAssembly/tail-call\">https://github.com/WebAssembly/tail-call</a></li>\n<li><a href=\"https://github.com/WebAssembly/memory64\">https://github.com/WebAssembly/memory64</a></li>\n<li><a href=\"https://github.com/WebAssembly/js-promise-integration\">https://github.com/WebAssembly/js-promise-integration</a></li>\n</ul></li>\n<li>WASM MVP\n<ul>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/C/C%2B%2B\">C/C++</a>, Rust</li>\n<li>自分でメモリを割り当て、開放する必要がある言語</li>\n<li>メモリの使用量が読めなくて苦労するとか</li>\n<li>呼び出すJS側と別に管理・コピーしないといけないとか悩ましい</li>\n</ul></li>\n<li>WASM <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/GC\">GC</a>\n<ul>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/GC\">GC</a> HeapをJSとWASMで共有できる拡張</li>\n<li>JS側にも参照をそのまま渡せたり速いし軽い</li>\n<li>Flutter(<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Dart\">Dart</a>)とKotlinで、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Canvas\">Canvas</a>描画のパフォーマンスが向上した</li>\n</ul></li>\n<li>Kotlin\n<ul>\n<li>クライアントサイドの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D3%A5%B8%A5%CD%A5%B9%A5%ED%A5%B8%A5%C3%A5%AF\">ビジネスロジック</a>を、デ<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>間で共有できる</li>\n<li>WASMへも変換できるようになり、Webのロジックまで1ソースでできるように</li>\n<li><a href=\"https://kotlinlang.org/docs/wasm-overview.html\">https://kotlinlang.org/docs/wasm-overview.html</a></li>\n</ul></li>\n<li>(<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Jetpack\">Jetpack</a>)ComposeがWebに対応して、UIレイヤーまで1ソースで管理できるように\n<ul>\n<li><a href=\"https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-imageviewer#compose-multiplatform-for-web\">https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-imageviewer#compose-multiplatform-for-web</a></li>\n<li>しかし出力されるのは`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/canvas\">canvas</a>`・・！</li>\n</ul></li>\n<li>Flutter\n<ul>\n<li>同様にWASMの対応がきた</li>\n<li><a href=\"https://docs.flutter.dev/platform-integration/web/wasm\">https://docs.flutter.dev/platform-integration/web/wasm</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"Whats-new-in-web-UI\">What's new in web UI</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=buChHSdsF9A\">https://www.youtube.com/watch?v=buChHSdsF9A</a></p>\n\n    </blockquote>\n\n<ul>\n<li>新しいUI関連の機能の紹介</li>\n<li>新しいレスポンシブ表現</li>\n<li>コンテナクエリ\n<ul>\n<li>メディアクエリより細かい単位</li>\n</ul></li>\n<li>スタイルクエリ\n<ul>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CSS\">CSS</a> Variablesに対応する</li>\n<li>`@container style(--rain >= 75%)`とか</li>\n</ul></li>\n<li>`:has()`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a></li>\n<li>`:nth-child(2 of .foo)`</li>\n<li>`text-wrap: balance`\n<ul>\n<li>帰ってきた・・・！</li>\n</ul></li>\n<li>`initial-letter`</li>\n<li>`svh`, `lvh`, `dvh`</li>\n<li>sRGBより広い色域のサポート</li>\n<li>`color-mix()`\n<ul>\n<li>透過度も混ぜられるように</li>\n</ul></li>\n<li>続いて<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>関連</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CSS\">CSS</a> Nesting</li>\n<li>`@layer`</li>\n<li>`@scope()`</li>\n<li>`transform: translateX(5%)`から`translate: 5% 0`</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>類</li>\n<li>Popover\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Popover_API\">https://developer.mozilla.org/en-US/docs/Web/API/Popover_API</a></li>\n<li>いわゆるポップアップUIがブラウザネイティブで</li>\n<li>`popovertarget`属性のついた`button`から</li>\n<li>`popover`属性のついた要素をひらく</li>\n</ul></li>\n<li>Anchor positioning\n<ul>\n<li><a href=\"https://drafts.csswg.org/css-anchor-position-1/\">https://drafts.csswg.org/css-anchor-position-1/</a></li>\n<li>どこに配置するか</li>\n<li>`@position-fallback` / `@try`</li>\n</ul></li>\n<li>Selectmenu\n<ul>\n<li><a href=\"https://chromestatus.com/feature/5737365999976448\">https://chromestatus.com/feature/5737365999976448</a></li>\n<li>`select`要素では足りなかった表現ができる</li>\n<li>`selectmenu`要素の中に、`option`や`button`を置ける</li>\n</ul></li>\n<li>最後にインタ<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ション関連</li>\n<li>Scroll driven animation\n<ul>\n<li><a href=\"https://developer.chrome.com/articles/scroll-driven-animations/\">https://developer.chrome.com/articles/scroll-driven-animations/</a></li>\n<li>効率的にスクロールをアニメーションに連携できるやつ</li>\n<li>`animation-timeline`</li>\n</ul></li>\n<li>View Transitions <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\">https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"Whats-new-in-web-animations\">What's new in web animations</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=oDcb3fvtETs\">https://www.youtube.com/watch?v=oDcb3fvtETs</a></p>\n\n    </blockquote>\n\n<ul>\n<li>View Transitions <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\">https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API</a></li>\n<li>基本はページ単位だが、 `view-transition-name`でページの一部分だけにも適応できる</li>\n<li>いまは`document.startTransition()`だが、`element.startTransition()`もできるようになるかも</li>\n<li>`view-transition-offscreen`で画面外のものはスキップしたり</li>\n</ul></li>\n<li>Scroll-driven animations\n<ul>\n<li><a href=\"https://scroll-driven-animations.style/\">https://scroll-driven-animations.style/</a></li>\n<li>スクロール量に応じたアニメーションがJSなしでできる</li>\n<li>どこまで読み勧めてるかの進捗バーみたいなのとか</li>\n<li>`animation-timeline: scroll()`</li>\n<li>`self, nearest, root`と`horizontal, vertical, inline, block`</li>\n<li>デフォルトは`nearest block`</li>\n</ul></li>\n<li>続・Scroll-driven animations\n<ul>\n<li>その要素がスクロールによってビューポートに現れたら</li>\n<li>ペライチでありがちな演出がJSなしでできる</li>\n<li>`animation-timeline: view()`</li>\n<li>`animation-range`</li>\n</ul></li>\n<li>まだまだScroll-driven animations\n<ul>\n<li>`@keyframe`で`entry 0 {}%`や`exit 100% {}`を定義できるように</li>\n</ul></li>\n<li>Easing function\n<ul>\n<li>理想的な<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/bounce\">bounce</a>アニメーションを<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CSS\">CSS</a>だけで</li>\n<li>`animation-timing-function: linear()`</li>\n</ul></li>\n<li>Transformプロパティ\n<ul>\n<li>複数のtransformを個別に、順番を気にせず書ける</li>\n<li>個別にアニメーションさせても補完してくれる</li>\n<li>translate, rotate, scale, transformの適用順</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"WebDriver-BiDi-Future-of-browser-automation\">WebDriver BiDi: Future of browser automation</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=6oXic6dcn9w\">https://www.youtube.com/watch?v=6oXic6dcn9w</a></p>\n\n    </blockquote>\n\n<ul>\n<li>WebDriverの歴史\n<ul>\n<li>Webは90sに生まれたが、自動テストが意識されはじめたのは2000sになってから</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Selenium\">Selenium</a>にはじまり、cypressやPuppeteerなどいろいろなのが出てきた</li>\n</ul></li>\n<li>ブラウザを立ててJSを実行するcypressのようなハイレベルなものもあれば</li>\n<li>複数のタブで開いたときの挙動など、ローレベルなものもある\n<ul>\n<li>WebDriverは後者を支えるもの</li>\n<li>CDP(<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Chrome\">Chrome</a> DevTools Protocol)を使うPuppeteerも後者の仲間</li>\n</ul></li>\n<li>WebDriver(Classic)の仕組み\n<ul>\n<li>HTTPリク<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トを受けて、ブラウザの公開する<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>を叩く</li>\n<li>HTTPな都合上、long-pollなんかも必須で、動作も速くなかった</li>\n<li>コンソールのログなんかも見れない</li>\n</ul></li>\n<li>そこでCDPに注目が集まった\n<ul>\n<li>内部的にWebSocketで直接ブラウザに命令を送る</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Chromium\">Chromium</a>ベースなブラウザである必要がある</li>\n<li>ネットワークに介入できたりデ<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>のシミュレートもできる</li>\n</ul></li>\n<li>どちらも特徴があるが、両方のいいところを<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%B7%A5%E5%A5%A2%A5%C3%A5%D7\">マッシュアップ</a>したい</li>\n<li>そこで生まれたのがWebDriver BiDi\n<ul>\n<li>BiDirectional</li>\n<li><a href=\"https://w3c.github.io/webdriver-bidi/\">https://w3c.github.io/webdriver-bidi/</a></li>\n<li>WebSocketを介して、WebDriver BiDi Protocolでやり取りするいいとこ取り</li>\n</ul></li>\n<li>絶賛WIPではあるが、モダン4ブラウザを巻き込んだWGになってる\n<ul>\n<li>既存のツールやサービスも参加してる</li>\n<li>Puppeteerなんかは初期Specのサポートがもうある</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"How-to-create-personalized-web-experiences\">How to create personalized web experiences</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=JiVQBqAkkac\">https://www.youtube.com/watch?v=JiVQBqAkkac</a></p>\n\n    </blockquote>\n\n<ul>\n<li>UXをより細かく調整していくにあたり、使えるものたち</li>\n<li>フォント\n<ul>\n<li>ブラウザ自体の設定、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CSS\">CSS</a>の指定、リーダーモード</li>\n<li>`rem`のほか、 `rlh`, `rex`, `ric`など</li>\n</ul></li>\n<li>OSと色をあわせる\n<ul>\n<li>`accent-color`プロパティ</li>\n<li>`AccentColor`と`AccentColorText`が値に使えるように</li>\n<li>`@media (prefer-color-<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/scheme\">scheme</a>: dark)`</li>\n<li>`@media (forced-colors: active)`</li>\n</ul></li>\n<li>Reduced motion\n<ul>\n<li>`@media (prefer-reduced-motion: reduce)`</li>\n<li>`@media (prefer-contrast)`</li>\n</ul></li>\n<li>色\n<ul>\n<li>HD color</li>\n<li>`oklch()`</li>\n<li>`@media (dynamic-range)`</li>\n</ul></li>\n<li>あらゆる閲覧環境に対応する\n<ul>\n<li>ブラウザの言語設定 by `accept-language`ヘッダー</li>\n<li>`margin-inline`といった書字方向に捕われない記述</li>\n<li>コンテナークエリであらゆる閲覧環境に</li>\n</ul></li>\n<li>a11y\n<ul>\n<li>`@media (pointer: coarse)`</li>\n<li>DevToolsの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BB%A5%B7%A5%D3%A5%EA%A5%C6%A5%A3\">アクセシビリティ</a>ツリー</li>\n<li>セマンティックな<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%DE%A1%BC%A5%AF%A5%A2%A5%C3%A5%D7\">マークアップ</a>（でAIも嬉しい時代）</li>\n</ul></li>\n<li>より最適化されたUIを目指す\n<ul>\n<li>コンテナクエリ</li>\n<li>スタイルクエリ</li>\n<li>`:has()`</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"Rethinking-reactivity-with-Angular-Signals\">Rethinking reactivity with Angular Signals</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=EIF0g9LDHcQ\">https://www.youtube.com/watch?v=EIF0g9LDHcQ</a></p>\n\n    </blockquote>\n\n<ul>\n<li>Angularもv16でSignalsが使えるようになった</li>\n<li>SignalsがもたらすReactivityとは\n<ul>\n<li>ある値に呼応して、その依存値がすべて更新されること</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B9%A5%D7%A5%EC%A5%C3%A5%C9%A5%B7%A1%BC%A5%C8\">スプレッドシート</a>のセルみたく</li>\n</ul></li>\n<li>構成要素は3つ\n<ul>\n<li>signal: 値を抱える箱</li>\n<li>computed: signalの派生</li>\n<li>effect : signalに依存する副作用、画面の表示もこれ</li>\n</ul></li>\n<li>これらはViewとは分離されていて、任意の場所で使える</li>\n<li>v16から依存なしで使えるし、使わなくてもいい</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"Debugging-modern-web-applications\">Debugging modern web applications</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=3lNkq264nkM\">https://www.youtube.com/watch?v=3lNkq264nkM</a></p>\n\n    </blockquote>\n\n<ul>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Chrome\">Chrome</a> DevToolsの15年の歴史\n<ul>\n<li>各種<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>に寄り添う形で進化してきた</li>\n</ul></li>\n<li>最近のおすすめ機能のご紹介\n<ul>\n<li>主にSourceパネルから</li>\n</ul></li>\n<li>Authored & deployed View\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/devtools-modern-web-debugging/\">https://developer.chrome.com/blog/devtools-modern-web-debugging/</a></li>\n<li>デプロイされ、ブラウザが読み込んだコードではなく、自分が書いたコードを見れる</li>\n</ul></li>\n<li>3rdパーティのコードを無視するようになる\n<ul>\n<li>リストではグレーアウトされ、コールスタックではスキップ</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D6%A5%EC%A1%BC%A5%AF%A5%DD%A5%A4%A5%F3%A5%C8\">ブレークポイント</a>はみんな使ってると思うけど、それに加えて2つ</li>\n<li>Conditional breakpoint\n<ul>\n<li>条件付きで<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D6%A5%EC%A1%BC%A5%AF%A5%DD%A5%A4%A5%F3%A5%C8\">ブレークポイント</a>が指定できる</li>\n</ul></li>\n<li>Logpoint\n<ul>\n<li>DevTools側から`console.log`を仕込める</li>\n<li>コードが汚れない</li>\n</ul></li>\n<li>Recorderパネル\n<ul>\n<li>バグの再現なんかを共有するのに使える</li>\n</ul></li>\n<li>今後のDevToolsにも期待\n<ul>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/RFC\">RFC</a>の<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>もあるよ</li>\n<li><a href=\"https://github.com/ChromeDevTools/rfcs\">https://github.com/ChromeDevTools/rfcs</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"Advanced-Web-APIs-in-real-world-apps\">Advanced Web APIs in real world apps</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=Y40vMQap9fs\">https://www.youtube.com/watch?v=Y40vMQap9fs</a></p>\n\n    </blockquote>\n\n<ul>\n<li>Project Fuguの進捗\n<ul>\n<li><a href=\"https://developer.chrome.com/capabilities/\">https://developer.chrome.com/capabilities/</a></li>\n<li><a href=\"https://developer.chrome.com/fugu-showcase/\">https://developer.chrome.com/fugu-showcase/</a></li>\n</ul></li>\n<li>Photopeaの例\n<ul>\n<li>画像編集ができるサービス</li>\n<li>PWAとしてインストールすると、OSのメニューから画像を開けるように</li>\n<li><a href=\"https://web.dev/patterns/files/\">https://web.dev/patterns/files/</a></li>\n</ul></li>\n<li>Blockbenchの例\n<ul>\n<li>3Dモデルのエディター</li>\n<li>`EyeDropper` <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>が使われてる</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper\">https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper</a></li>\n</ul></li>\n<li>Construct 3の例\n<ul>\n<li>File System <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Access\">Access</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API\">https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API</a></li>\n</ul></li>\n<li>Boxy <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SVG\">SVG</a>の例\n<ul>\n<li>Local Font <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Access\">Access</a> <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Local_Font_Access_API\">https://developer.mozilla.org/en-US/docs/Web/API/Local_Font_Access_API</a></li>\n</ul></li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Photoshop\">Photoshop</a>の例\n<ul>\n<li>OPFS: OriginPrivateFileSystem</li>\n<li><a href=\"https://developer.chrome.com/articles/origin-private-file-system/\">https://developer.chrome.com/articles/origin-private-file-system/</a></li>\n<li>拡縮の処理を効率化するために使ってる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"Find-form-issues-with-Chrome-DevTools\">Find form issues with <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Chrome\">Chrome</a> DevTools</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=Rb-LALxgsfY\">https://www.youtube.com/watch?v=Rb-LALxgsfY</a></p>\n\n    </blockquote>\n\n<ul>\n<li>いいフォームのつくりかた\n<ul>\n<li><a href=\"https://web.dev/tags/forms/\">https://web.dev/tags/forms/</a></li>\n</ul></li>\n<li>オートフィルを活用するとよい</li>\n<li>入力内容は<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>自体に保存できる\n<ul>\n<li>あとから変更することもでき、あらゆるフォームで使い回せる</li>\n</ul></li>\n<li>適切な`name`属性がなくても、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>はオートフィルを提案できる\n<ul>\n<li>まじか</li>\n</ul></li>\n<li>オートフィルできない理由は、DevToolsのConsoleパネルのIssuesに出る\n<ul>\n<li>`--enable-features=AutofillEnableDevtoolsIssues`</li>\n</ul></li>\n<li>オートフィルはa11yにも有用\n<ul>\n<li>入力の手間を省くこともできるし、間違いもない</li>\n</ul></li>\n<li>キーボードのアクセサリーに\n<ul>\n<li>任意の入力項目で、任意の項目を呼び出せるようになったり</li>\n</ul></li>\n<li>`enable-autofill-touch-to-fill-for-credit-cards`\n<ul>\n<li>カードの一覧を、ボトムシートUIでより探しやすく</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/PCI\">PCI</a>準拠の都合なんかで、クレカの入力項目がそれぞれ別の`iframe`になってたとしても\n<ul>\n<li>同じセキュリティオリジンであれば、よしなにオートフィルする</li>\n</ul></li>\n<li>ベストプ<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ティス</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>は`autocomplete`属性がなくても、よしなに処理する\n<ul>\n<li>が、Non-standardな値が指定されてると、うまく処理できない</li>\n</ul></li>\n<li>`autocomplete`属性は、ブラウザのためのものなので、サイト独自のものに勝手に使わない\n<ul>\n<li>標準の値を指定するか、指定しないか</li>\n</ul></li>\n<li>`label`の`for`が対応してないエラーもDevToolsでわかる</li>\n<li>フォームを適切に作ることができれば、スクリーンリーダーにも優しい</li>\n<li><a href=\"https://developer.chrome.com/blog/devtools-autofill/\">https://developer.chrome.com/blog/devtools-autofill/</a></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"感想\">感想</h3>\n    <p>つかれた・・・。</p>\n\n<ul>\n<li>最初のプレイリストをざっくり眺めるだけでも楽しいね</li>\n<li>イベント全体のrecapが5分くらいの動画なのでそれだけでも</li>\n<li>個別のセッションは内容が被ったりしてるのもあるので、What's newシリーズだけ見るでもいいかも</li>\n</ul><p>個人的にアツかったのは、</p>\n\n<ul>\n<li>WASM <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/GC\">GC</a>\n<ul>\n<li>でも`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/canvas\">canvas</a>`で吐かれるのはなあ・・・</li>\n</ul></li>\n<li>Popover/Selectmenu\n<ul>\n<li>ブラウザ標準になるのはよいこと</li>\n</ul></li>\n<li>Scroll-driven animations\n<ul>\n<li>JSなしでできるようになるの嬉しい</li>\n</ul></li>\n<li>Conditional breakpoint / Logpoint\n<ul>\n<li>ぜったい使う！</li>\n</ul></li>\n</ul><p>というわけで、がんばれ<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>以外のブラウザベンダ〜〜〜！</p>\n\n</div>"
}
