{
  "title": "preactjs/wmr について",
  "html": "\n    <blockquote>\n        <p><a href=\"https://github.com/preactjs/wmr\">GitHub - preactjs/wmr: &#x1F469;&zwj;&#x1F680; The tiny all-in-one development tool for modern web apps.</a></p>\n\n    </blockquote>\n<p>これです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>WMRとは</h3>\n    \n    <blockquote>\n        <p>The tiny all-in-one development tool for modern web apps, in a single 2mb file with no dependencies.</p>\n\n    </blockquote>\n<p>とのこと。</p><p>READMEを見る限り、`wmr start`と`wmr build`でそれぞれdevとprod用のコマンドを提供してくれる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>ツールらしく、`preact-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/cli\">cli</a>`と何が違うんや？とか、それこそParcelとかViteとかと何が違うんや？と思ってた。</p><p>で、あれこれ調べてると、中の人（`@_developit`氏）が熱く語ってる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Podcast\">Podcast</a>を発見。</p><p>というわけで、それをざっくりまとめたのがこの記事です。</p>\n\n</div>\n<div class=\"section\">\n    <h3>JS Party #158</h3>\n    \n    <blockquote>\n        <p><a href=\"https://changelog.com/jsparty/158\">Waldo&#39;s My Roommate? featuring Jason Miller and WMR (JS Party #158) |&gt; Changelog</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>WMRってどういう意味？</h4>\n    \n<ul>\n<li>当初はHMRをもじって、Warm Module Replacementって呼んでた\n<ul>\n<li>ただ今となっては、Web Modules Runtimeって呼んだりも</li>\n</ul></li>\n<li>まあアルファベットの並びに特に意味はないのだ</li>\n</ul><p>ちなみに発音は、「だぶりゅーえむあーる」らしい。「ぅまぁ」じゃなかった。</p>\n\n</div>\n<div class=\"section\">\n    <h4>モダンなウェブアプリとは？</h4>\n    \n<ul>\n<li>あなたが最近取り組んでるプロジェクトのこと</li>\n<li>より最新の仕様やコードで書かれたアプリのこと\n<ul>\n<li>ES Modulesが動くES2017以降くらいの</li>\n<li>もちろん古いコード資産もサポートしたいと思ってる</li>\n<li>けど、よりフォーカスするのは最新のもの</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>既存のツールでいうと？</h4>\n    \n<ul>\n<li>CreateReactAppとかNextとかwebpackみたいなもの？</li>\n<li>webpackに近いといえるけど、微妙に違う</li>\n<li>最近でいうならViteとかのほうが近い\n<ul>\n<li>ほかにもSnowpackとかWeb Dev Serverとか</li>\n<li>ES Modulesファーストな開発ツールということ</li>\n</ul></li>\n<li>思想としてはPercelのほうがわかりやすい\n<ul>\n<li>コードだけ書けば、それに必要なバンドラーの設定などを勝手にしてくれる</li>\n<li>限られた時間の中で、バンドラーの設定に時間を費やすべきではない</li>\n</ul></li>\n<li>Microbundleというビルドツールも作ったけど、あれは逆の発想\n<ul>\n<li>ありとあらゆる恣意的なRollupの設定を適用するバンドラーだった</li>\n</ul></li>\n<li>そうではなく、コードベースを調べ、必要な設定だけを使ってバンドルする思想\n<ul>\n<li>ビルド時にはRollupを使ってる</li>\n</ul></li>\n</ul><p>Parcelって久しぶりに聞いた気がする・・！</p>\n\n</div>\n<div class=\"section\">\n    <h4>開発時はバンドルしない</h4>\n    \n<ul>\n<li>ビルド時はRollupだったが、開発時はバンドルしない\n<ul>\n<li>このへんがViteとかに似てる</li>\n<li>互いにいくつかの機能は統合したほうがいいかも？みたいな話もしながら開発をはじめた</li>\n</ul></li>\n<li>開発サーバーへのモジュールのリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トに応えるだけ\n<ul>\n<li>すべてをバンドルして返すのではなく、それぞれをHTTPリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トで処理する</li>\n</ul></li>\n<li>Babel互換のAST<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B9%A5%D5%A5%A9%A1%BC%A5%DE%A1%BC\">トランスフォーマー</a>と、Rollup互換の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>機構を自作した\n<ul>\n<li>Rollup自体は使わないのに、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>が動作する</li>\n</ul></li>\n<li>全コードベースのグラフを構築するのではなく、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>ンにするだけ\n<ul>\n<li><a href=\"https://github.com/guybedford/es-module-lexer\">https://github.com/guybedford/es-module-lexer</a></li>\n<li>読み込んだモジュールはメモリにキャッシュするから速い</li>\n<li>あとはRollup互換の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>がよしなに処理する</li>\n</ul></li>\n<li>glitch.com のStaticモードをより良くした感じを目指してはじめた\n<ul>\n<li>`npm i`せず、コード中にいきなり`import`を書いても、それが動く</li>\n<li>裏でnpmからtarを直接ストリーミングして返してる</li>\n<li>必要なのはコード自身と型定義くらいってわかってるし、それもディスクに書き込まない</li>\n</ul></li>\n<li>もちろん、読み込めないモジュールも世の中には存在する・・・</li>\n<li>初回は直接ストリーミングするけど、裏で圧縮したものをディスクに書いておく\n<ul>\n<li>Rollupを通すだけなので速い</li>\n<li>次回以降のリロードやHMRでは、より速くモジュールを届けられる</li>\n<li>モジュールは個別にレスポンスするのではなく、まとめて最適化して返す</li>\n</ul></li>\n<li>CJSと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/UMD\">UMD</a>のモジュールも、ESMに変換して返してる\n<ul>\n<li>内部的に、`npm`のモジュールの場合は、`/@npm/foo`みたいなパスで`import`できるようになってる</li>\n</ul></li>\n<li>拡張子も自動で判断して、必要ならばトランスパイルする\n<ul>\n<li>ブラウザの`import`の仕様に沿いたいし個人的にはしたくなかった</li>\n<li>けど、世の中的に必要であろうと判断した</li>\n<li>もちろん拡張子を指定するほうが処理の無駄が減るので速く動くはず</li>\n</ul></li>\n<li>WMRのコードは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a> + JSDocの型定義で書かれてる</li>\n<li>あとは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> Modulesや、一部の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D5%A5%A3%A5%C3%A5%AF%A5%B9\">プレフィックス</a>付き`import`もできる\n<ul>\n<li>TSの場合は、その<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9\">エイリアス</a>を定義した`tsconfig`を生成する</li>\n</ul></li>\n</ul><p>`package.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>`なしで開発できるのいいけど、それはそれで問題も出てきそうよね・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>WMRとPreactの関係は？</h4>\n    \n<ul>\n<li>`npm init`や`create-wmr`が生成するテンプレはPreactが使われる\n<ul>\n<li>これはPreactを使えということ？</li>\n</ul></li>\n<li>Preactが必須というツールでは決してない\n<ul>\n<li>自分たちがそういうツールがほしかったからそうなってるだけ</li>\n</ul></li>\n<li>軽量なコードでプロトタイピングを手早くやりたかったという経緯\n<ul>\n<li>ここしばらくはバンドラー界隈を傍観していた</li>\n</ul></li>\n<li>それができるものがなかったので\n<ul>\n<li>最近になって、ES Modulesが使えるようになり、それを使いたいと思うようになった</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>での仕事として、ExportMapを広めることに注力してきた\n<ul>\n<li>これによって、バンドラーがそのパッケージが最新のコードを使ってるかどうかがわかる</li>\n<li>同時に、古いコードも共存させられる</li>\n<li>これを前提とするのはどうかと思った</li>\n</ul></li>\n<li>ES Modulesが前提であれば\n<ul>\n<li>HMRもクエリパラメータでキャッシュを飛ばすだけでいい</li>\n<li>HTTP/2のローカルサーバーで開発もできる</li>\n<li>ユーザーが書いたコードが、そのままブラウザで実行されるようになる</li>\n<li>これまでの`import`は、実際には裏で変換されたコードを読み込んでいた</li>\n</ul></li>\n<li>WMRはPreactには依存していない\n<ul>\n<li>内部的には、20くらいのRollup<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>でできてる</li>\n<li>いくつかの非公開の自作モジュールがあるが、すべて独立したもの</li>\n<li>たとえばViteからそれらを使うこともできるはず</li>\n<li>ExportMapを解釈する実装は、他のツールのものよりも良くできてると思っていて、npmに公開することもできる</li>\n</ul></li>\n<li>ただPreactをデフォルトにすることで、機能を実装するための実験台にしてた面はある</li>\n<li>最近事前<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>の最適化の機能などを追加したしたけど、これもPreactとは関係ない\n<ul>\n<li>`prerender`という関数を定義して、文字列を返すというだけ</li>\n</ul></li>\n<li>ReactでもVueでもSvelteでも、それ用のテンプレを作ることは簡単にできる\n<ul>\n<li>それを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AD%A5%F3%A5%B0\">ブロッキング</a>してるバグは1つあるけど・・</li>\n</ul></li>\n<li>WMRをフォークするよりは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>として実装してもらえるとよい\n<ul>\n<li>そうすればまた別の誰かがコラボレーションできる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>コラボレーションと競争</h4>\n    \n<ul>\n<li>コラボレーションを推奨するなら、新規ツールを作る理由は？となる\n<ul>\n<li>このあたりの線引についてどう考えているか</li>\n</ul></li>\n<li>これは難しい質問</li>\n<li>ExportMapの実装は、自分が要約として公開する価値があるものだとは思う</li>\n<li>Babel互換のAST<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B9%A5%D5%A5%A9%A1%BC%A5%DE%A1%BC\">トランスフォーマー</a>も作ったけど、コミュニティとしては必要ないかもしれない\n<ul>\n<li>たぶん必要ない</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>ではなく他の言語でもっと速く動かせないかという動きもある</li>\n<li>`esbuild`を試したこともあるけど、非常に高速だった</li>\n<li>可能性は感じたけど、結論としては自分たちのニーズのために自作した</li>\n</ul></li>\n<li>うまく言えないけど、このあたりにその答えがある気はしている</li>\n</ul><p>これは難しい話よね・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>実用性としては</h4>\n    \n<ul>\n<li>プロトタイピングや開発に便利なのはわかった</li>\n<li>けど、複雑なアプリを作って本番公開したりできるか？</li>\n<li>答えとしては2つある</li>\n<li>まず、新しいツールであるということ\n<ul>\n<li>これはどんなツールにも言えることではある</li>\n<li>つまりはどこかにバグが潜んでいてもおかしくない</li>\n</ul></li>\n<li>もう1つは、ES Modulesベースのスタイルがどれほど実用性に耐えうるかということ\n<ul>\n<li>これはまだはっきり言えない</li>\n<li>10000くらいのモジュールを使ってる場合、HTTP/1ではきっと遅くて使えないはず</li>\n<li>npmのモジュールはキャッシュされるし、頻繁に増減もしない</li>\n<li>しかしユーザーコードは、それぞれのソースファイルに対応する</li>\n</ul></li>\n<li>本番ビルド時は、WMRはただのRollupになる\n<ul>\n<li>独自の互換<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>を実行することもない</li>\n<li>Rollupは本番でもよく使われてる</li>\n</ul></li>\n<li>ビルドするだけが本番デプロイではなく、そこにはプロキシなどの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2\">ミドルウェア</a>などが必要かもしれない\n<ul>\n<li>だからwebpackを使ってる人たちも多いはず</li>\n<li>それはまた別で考えるべきことではある</li>\n</ul></li>\n<li>WMRには`start`コマンドがあり本番サーバーを立てられるが、それを推奨はしない\n<ul>\n<li>自分でNodeのサーバーを立てるのではなく、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>などからHTTP/2を利用することがベター</li>\n<li>ローカルで、できる限り近しい挙動を再現するために同梱してあるだけ</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>WMRはスタックではない</h4>\n    \n<ul>\n<li>Next.jsのようなサーバーで動作させるものでもない</li>\n<li>そこには明確な線引がある\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>も実験的に作ったけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%B9%A5%C6%A5%A3%A5%F3%A5%B0\">ホスティング</a>はユーザーがやることになる</li>\n</ul></li>\n<li>WMRとしては、静的なファイル生成に終始する</li>\n<li>たとえばEleventyからWMRを使おうとしている人がいるのを知ってる\n<ul>\n<li>WMRの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2\">ミドルウェア</a>からEleventyにプロキシするか、EleventyからWMRを指す`script`タグを使うか</li>\n<li>後者のほうが適切</li>\n</ul></li>\n<li>Eleventyを使ってない場合、ファイルベースのルーティングがやりたくなるかもしれない\n<ul>\n<li>そのために<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リを配列として`import`できる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>と、そのデモもある</li>\n</ul></li>\n<li>WMRは低レイヤーなものなので、やればできることは多いけど、それらが目的ではない</li>\n</ul><p>なるほど！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>というわけで</h3>\n    <p>雑にいうと、Viteと同じような開発体験が得られるESMベースの開発ツール。</p><p>ただ内部的には違ってて、互いに参考にしながら切磋琢磨していくのであろうなあ・・と思った。</p><p>Viteの2.0におけるRollup互換の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>システムは、WMRインスパイアって書いてあったし。</p>\n\n    <blockquote>\n        <p><a href=\"https://vitejs.dev/guide/comparisons.html#wmr\">Comparisons with Other No-Bundler Solutions | Vite</a></p>\n\n    </blockquote>\n<p>個人的には、Preactを使ったアプリをサッと作りたいなら、とりあえず採用していいのかなと思った。<br />\n動作も軽いし、設定ファイルいらずで即コードが書き始められる体験はやっぱり良いので。</p><p>ViteからPreactのテンプレを使っても、だいたい同じようには動くんやろうけど・・。</p><p>それ以上は結局SveltKitやNext.jsやら、それら特有のあの機能が欲しいから使うみたいになりそう。</p><p>世はNon-bundler戦国時代に突入するのだろうか！</p>\n\n</div>"
}
