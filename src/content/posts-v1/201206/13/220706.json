{
  "title": "JavaScriptとJSXの違うところ[初歩]",
  "html": "<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>からプログラミングの勉強を始めた私が、最近JSXを学び始めました。</p><p>で、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の書式に一通り慣れた身が、JSXを触ってみて感じた「違い」のまとめです。</p>\n\n    <blockquote>\n        <p>注：深い意味での<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の挙動とココが違う！みたいな考察記事ではありません。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>をちょっとやった人が、JSXをさわるにあたって前もって知ってたらおトク！程度の軽い内容です。</p>\n\n    </blockquote>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>文字列連結にはキャストが必須</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JavaScript!</span>\n<span class=\"synIdentifier\">var</span> cnt = 30;\nconsole.log(cnt + <span class=\"synConstant\">&quot;点ゲット！&quot;</span>); <span class=\"synComment\">// 30点ゲット！</span>\n</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>でよくこういうの書いてたのですが、全部キャストしないといけないんですね。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JSX!</span>\n<span class=\"synIdentifier\">var</span> cnt = 30;\nlog(cnt as <span class=\"synType\">string</span> + <span class=\"synConstant\">&quot;点ゲット！&quot;</span>); <span class=\"synComment\">// 30点ゲット！</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3>:voidじゃないfunctionはreturn必須</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JavaScript!</span>\n<span class=\"synIdentifier\">var</span> cnt = 1;\n<span class=\"synIdentifier\">function</span> countUp()<span class=\"synIdentifier\">{</span>\n  cnt++;\n<span class=\"synIdentifier\">}</span>\ncountUp();\n</pre><p>何も返さない関数ってのが書けたけど</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JSX!</span>\n<span class=\"synIdentifier\">var</span> cnt: <span class=\"synType\">number</span> = 1;\n<span class=\"synIdentifier\">function</span> countUp(): void<span class=\"synIdentifier\">{</span> <span class=\"synComment\">// :voidってつける</span>\n  cnt++;\n<span class=\"synIdentifier\">}</span>\ncountUp();\n\n<span class=\"synComment\">// もしくは</span>\n\n<span class=\"synIdentifier\">var</span> cnt: <span class=\"synType\">number</span> = 1;\n<span class=\"synIdentifier\">function</span> countUp(): <span class=\"synType\">number</span><span class=\"synIdentifier\">{</span> <span class=\"synComment\">// 返り値の型つける</span>\n  cnt++;\n  <span class=\"synStatement\">return</span> cnt; <span class=\"synComment\">// returnする</span>\n<span class=\"synIdentifier\">}</span>\ncountUp();\n</pre><p>: voidにするか、しっかり返り値の型と、関数内でのreturnが必要です。</p><p></p>\n\n</div>\n<div class=\"section\">\n    <h3>同じ型しか比較できないので===はない</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JavaScript!</span>\n<span class=\"synIdentifier\">var</span> cnt = 30;\n<span class=\"synIdentifier\">var</span> cntS = <span class=\"synConstant\">&quot;30&quot;</span>;\nconsole.log(cnt === cntS); <span class=\"synComment\">// false</span>\nconsole.log(cnt == cntS); <span class=\"synComment\">// true</span>\n</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>では型違いでも無理やり比較できました。<br />\nでも＝2つはいわゆるBadPartsなので、＝3つが推奨。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JSX!</span>\n<span class=\"synIdentifier\">var</span> cnt: <span class=\"synType\">number</span> = 30;\n<span class=\"synIdentifier\">var</span> cntS: <span class=\"synType\">string</span> = <span class=\"synConstant\">&quot;30&quot;</span>;\nlog(cnt === cntS); <span class=\"synComment\">// そもそも＝3つは書式のエラー</span>\nlog(cnt == cntS); <span class=\"synComment\">// 型違いなので比較不可能でエラー</span>\nlog(cnt == cntS as <span class=\"synType\">number</span>); <span class=\"synComment\">// これならtrue</span>\n</pre><p>比較するのは同じ型同士で、っていう文化がなかった・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>配列、オブジェクトは型統一 or variant</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JavaScript!</span>\n<span class=\"synIdentifier\">var</span> cnt = <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{}</span>;\n<span class=\"synIdentifier\">var</span> arr = <span class=\"synIdentifier\">[</span>1, <span class=\"synConstant\">&quot;2つ目&quot;</span>, cnt, <span class=\"synIdentifier\">{</span>key1: 2, key2: <span class=\"synConstant\">&quot;あいうえお&quot;</span><span class=\"synIdentifier\">}]</span>;\n</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の配列には、なんでも入れれました。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JSX!</span>\n<span class=\"synIdentifier\">var</span> cnt = <span class=\"synIdentifier\">function</span>(): void<span class=\"synIdentifier\">{}</span>;\n<span class=\"synIdentifier\">var</span> arr = <span class=\"synIdentifier\">[</span>1, <span class=\"synConstant\">&quot;2つ目&quot;</span>, cnt, <span class=\"synIdentifier\">{</span>key1: 2, key2: <span class=\"synConstant\">&quot;あいうえお&quot;</span><span class=\"synIdentifier\">}]</span>: variant<span class=\"synIdentifier\">[]</span>;\n</pre><p>JSXの場合は、型を揃えるか、variant型の配列にするしかないです。</p>\n\n<div class=\"section\">\n    <h4>オブジェクトも型固定or variant</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JSX!</span>\n<span class=\"synIdentifier\">var</span> cnt = <span class=\"synIdentifier\">function</span>(): void<span class=\"synIdentifier\">{}</span>;\n<span class=\"synIdentifier\">var</span> obj = <span class=\"synIdentifier\">{</span>\n  one: 1, \n  two: <span class=\"synConstant\">&quot;2つ目&quot;</span>, \n  three: cnt, \n  four: <span class=\"synIdentifier\">{</span>key1: 2, key2: <span class=\"synConstant\">&quot;あいうえお&quot;</span><span class=\"synIdentifier\">}</span>: Map.&lt;variant&gt;\n<span class=\"synIdentifier\">}</span>: Map.&lt;variant&gt;;\n</pre><p>うおー、面倒くさい！ｗ</p>\n\n    <blockquote>\n        <p>なんで配列はstring[ ]みたいに書けるのに、マップはMap.<string>みたいに書かないとダメなんでしょう。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%C6%A5%E9%A5%EB\">リテラル</a>記法？したい！</p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>intにキャストすればMath.floorいらず</h3>\n    <p>コレハベンリー。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JavaScript!</span>\n<span class=\"synIdentifier\">var</span> enshu = 3.14159;\nenshu = Math.floor(enshu);\nconsole.log(enshu); <span class=\"synComment\">// 3</span>\n</pre><p>キャストしちまえば・・・！</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JSX!</span>\n<span class=\"synIdentifier\">var</span> enshu = 3.14159;\nlog enshu as <span class=\"synStatement\">int</span>; <span class=\"synComment\">// 3</span>\n</pre><p>とかなんとか書いた後に気になってコンパイルされたやつを見たら、あっさりその仕組が。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JavaScript!</span>\n<span class=\"synIdentifier\">var</span> enshu = 3.14159;\n<span class=\"synComment\">//enshu = Math.floor(enshu);</span>\nconsole.log(enshu | 0); <span class=\"synComment\">// 3</span>\n</pre><p>ビット演算で簡単にできるんですね・・ｗ</p>\n\n</div>\n<div class=\"section\">\n    <h3>何かと決まりがあって試すのも大変</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>だととりあえず定義すればとりあえず使えたのに、JSXだとクラスやら型やら気にしないといけなくて面倒やなぁ・・っと。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JavaScript!</span>\n<span class=\"synIdentifier\">var</span> sample = 20;\ncosole.log(sample);\n</pre><p>たったこれだけしたくても</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JSX!</span>\n<span class=\"synStatement\">class</span> Test <span class=\"synIdentifier\">{</span> <span class=\"synComment\">// class作らなきゃダメ！</span>\n  <span class=\"synStatement\">static</span> <span class=\"synIdentifier\">var</span> sample = 20; <span class=\"synComment\">// staticって付けないとダメ！</span>\n\n  <span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> run() : void <span class=\"synIdentifier\">{</span>\n    log Test.sample; <span class=\"synComment\">// Test.ってしないとダメ！</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>そもそもクラスベースの言語なら当たり前というか、気にするまでもない事項というか・・。<br />\nでも、気軽に触れないのはなぁー。<br />\nオフライン環境・電車の中とかで勉強できひんし。</p>\n\n</div>\n<div class=\"section\">\n    <h3>最後に</h3>\n    <p>ほんとはPrototype的な感じの違いやら、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>でいうクラス的なものとの違いやら書けたら良いんでしょうけど、そこまで理解できてないので。<br />\nきっとそこは達人<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE\">プログラマ</a>の皆さんが書かれると思います。<br />\n検索すると現にいっぱい出てくるし。</p><p>ここ最近思う一番の敗因は、クラスベースの言語からプログラミングを学び始めなかったことです。<br />\nそういう意味で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>をプログラミングの第一歩にするのって、どうなんかなぁ・・と思う今日この頃。<br />\nブラウザベースでDOM操作を専門にやる、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>使えればOK！とかそういうのなら良いんでしょうけど。</p><p>他でも言われてるようですが、私はまだJSXのターゲットではないようです。<br />\nもっと根本的なトコが足りてない！</p>\n\n</div>\n</div>"
}
