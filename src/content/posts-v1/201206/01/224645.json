{
  "title": "0からはじめるJSX Part.1",
  "html": "<p>昨日<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ustream\">Ustream</a>で見てたんですが、DeNA社が開発した「JSX」というものが気になります。</p><p>スライド資料にも出てましたが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>は現状<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A1%BC%A5%C8%A5%D5%A5%A9%A5%F3\">スマートフォン</a>で動作する唯一無二の言語です。<br />\nただその仕様はかなり独特なもので、保守性や実行スピードなど、気になる点もあり・・。</p><p>で、それを一挙に解決しちゃうのが、このJSXだそうです。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://jsx.github.com/\" target=\"_blank\" title=\"JSX - a faster, safer, easier alternative to JavaScript\">JSX - a faster, safer, easier alternative to JavaScript</a></p>\n\n    </blockquote>\n<p>以下、職業<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE\">プログラマ</a>ではないにわか学習者が、JSXを触るとこう感じる、っていう記事です。<br />\n達人<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE\">プログラマ</a>の皆さんの記事は山ほどあるので、たまにはこういうのも良いんじゃないかと自己満で。</p><p>見当違いな内容や、吹っ飛んだ解釈も多々あると思いますので要注意です。<br />\nもちろん読み流していただいて結構ですが、<a href=\"https://twitter.com/#!/leader22\" target=\"_blank\" title=\"りぃ (leader22) は Twitter を利用しています\">＠leader22</a>宛にご意見いただけると勉強が捗るので助かります。</p><p>一応サジを投げたくなるまでは見ていこうと思っているので、とりあえずPart.1ということで。<br />\nとは言えアプローチは恐らく一般のやり方とは違います。<br />\n0からというかマイナススタートくらいな立ち位置なので・・。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>今のところの理解</h3>\n    \n<ul>\n<li>Prototypeだなんだといってた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>を、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>っぽく型付け強く使うための言語拡張。</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>より早い！安全！簡単！らしい。</li>\n<li>JSX書式でコードを書いて、コンパイルすると<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>のソースになる。</li>\n<li>あくまで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>としての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の拡張。(DOM操作が楽とかブラウザ向けとかではなく)</li>\n</ul><p>良くも悪くも無茶苦茶書いても動いてた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>を、ちゃんと統制していきましょうっていうものなんでしょうか。<br />\nコンパイルさせることで、最適な書き方(ベストプラクティスであったり、Minifyだったり)を担保して、速度も確保しちゃうのが狙いかなぁ。<br />\n大規模開発で、クオリティが個人にスキルに依存しちゃうところを、1レイヤー介すことで解消する感じかしら。</p>\n\n</div>\n<div class=\"section\">\n    <h3>とりあえずのHello, world</h3>\n    \n<div class=\"section\">\n    <h4>hello.jsx</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> Test <span class=\"synIdentifier\">{</span>\n\t<span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> run() : void <span class=\"synIdentifier\">{</span>\n\t\tlog <span class=\"synConstant\">&quot;<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hello%20world\">hello world</a>!&quot;</span>;\n\t<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>consoleにHello, worldするだけ。<br />\nSyntaxが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>で映えるのが良いですね。</p><p>けど<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>っぽい！<br />\nstaticとか！voidとか！意味わからん感じが！</p>\n\n</div>\n<div class=\"section\">\n    <h4>hello.js</h4>\n    <p>コンパイルするとこうなる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> JSX = <span class=\"synIdentifier\">{}</span>;\n(<span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n\n<span class=\"synComment\">/**</span>\n<span class=\"synComment\"> * copies the implementations from source interface to target</span>\n<span class=\"synComment\"> */</span>\n<span class=\"synIdentifier\">function</span> $__jsx_merge_interface(target, source) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">for</span> (<span class=\"synIdentifier\">var</span> k <span class=\"synStatement\">in</span> source.prototype)\n    <span class=\"synStatement\">if</span> (source.prototype.hasOwnProperty(k))\n      target.prototype<span class=\"synIdentifier\">[</span>k<span class=\"synIdentifier\">]</span> = source.prototype<span class=\"synIdentifier\">[</span>k<span class=\"synIdentifier\">]</span>;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">/**</span>\n<span class=\"synComment\"> * defers the initialization of the property</span>\n<span class=\"synComment\"> */</span>\n<span class=\"synIdentifier\">function</span> $__jsx_lazy_init(obj, prop, func) <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">function</span> reset(obj, prop, value) <span class=\"synIdentifier\">{</span>\n    <span class=\"synType\">Object</span>.defineProperty(obj, prop, <span class=\"synIdentifier\">{</span>\n      value: value, \n      enumerable: <span class=\"synConstant\">true</span>,\n      writable: <span class=\"synConstant\">true</span>,\n      configurable: <span class=\"synConstant\">true</span>\n    <span class=\"synIdentifier\">}</span>);\n    <span class=\"synStatement\">return</span> value;\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synType\">Object</span>.defineProperty(obj, prop, <span class=\"synIdentifier\">{</span>\n    get: <span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">return</span> reset(obj, prop, func());\n    <span class=\"synIdentifier\">}</span>,\n    set: <span class=\"synIdentifier\">function</span> (v) <span class=\"synIdentifier\">{</span>\n      reset(obj, prop, v);\n    <span class=\"synIdentifier\">}</span>,\n    enumerable: <span class=\"synConstant\">true</span>,\n    configurable: <span class=\"synConstant\">true</span>\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">/*</span>\n<span class=\"synComment\"> * global functions called by JSX as Number.* (renamed so that they do not conflict with local variable names)</span>\n<span class=\"synComment\"> */</span>\n<span class=\"synIdentifier\">var</span> $__jsx_parseInt = parseInt;\n<span class=\"synIdentifier\">var</span> $__jsx_parseFloat = parseFloat;\n<span class=\"synIdentifier\">var</span> $__jsx_isNaN = isNaN;\n<span class=\"synIdentifier\">var</span> $__jsx_isFinite = isFinite;\n\n<span class=\"synIdentifier\">var</span> $__jsx_ObjectToString = <span class=\"synType\">Object</span>.prototype.toString;\n<span class=\"synIdentifier\">var</span> $__jsx_ObjectHasOwnProperty = <span class=\"synType\">Object</span>.prototype.hasOwnProperty;\n\n<span class=\"synComment\">/*</span>\n<span class=\"synComment\"> * public interface to JSX code</span>\n<span class=\"synComment\"> */</span>\nJSX.require = <span class=\"synIdentifier\">function</span> (path) <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">var</span> m = $__jsx_classMap<span class=\"synIdentifier\">[</span>path<span class=\"synIdentifier\">]</span>;\n  <span class=\"synStatement\">return</span> m !== <span class=\"synStatement\">undefined</span> ? m : <span class=\"synStatement\">null</span>;\n<span class=\"synIdentifier\">}</span>\n<span class=\"synComment\">/**</span>\n<span class=\"synComment\"> * class Test extends Object</span>\n<span class=\"synComment\"> * @constructor</span>\n<span class=\"synComment\"> */</span>\n<span class=\"synIdentifier\">function</span> Test() <span class=\"synIdentifier\">{</span>\n<span class=\"synIdentifier\">}</span>\n\nTest.prototype = <span class=\"synStatement\">new</span> <span class=\"synType\">Object</span>;\n<span class=\"synComment\">/**</span>\n<span class=\"synComment\"> * @constructor</span>\n<span class=\"synComment\"> */</span>\n<span class=\"synIdentifier\">function</span> Test$() <span class=\"synIdentifier\">{</span>\n<span class=\"synIdentifier\">}</span>;\n\nTest$.prototype = <span class=\"synStatement\">new</span> Test;\n\n<span class=\"synComment\">/**</span>\n<span class=\"synComment\"> */</span>\nTest.run$ = <span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">&quot;<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hello%20world\">hello world</a>!&quot;</span>);\n<span class=\"synIdentifier\">}</span>;\n\nTest$run$ = Test.run$;\n\n<span class=\"synIdentifier\">var</span> $__jsx_classMap = <span class=\"synIdentifier\">{</span>\n  <span class=\"synConstant\">&quot;t/run/001.hello.jsx&quot;</span>: <span class=\"synIdentifier\">{</span>\n    Test: Test,\n    Test$: Test$\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>;\n\n\n<span class=\"synIdentifier\">}</span>());\nJSX.require(<span class=\"synConstant\">'t/run/001.hello.jsx'</span>).Test.run$();\n</pre><p>多分上の方ほとんどはお決まりのコードで、いわゆるJSXの心臓みたいなとこでしょうか。<br />\n下の方の、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>Test.run$ = <span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">&quot;<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hello%20world\">hello world</a>!&quot;</span>);\n<span class=\"synIdentifier\">}</span>;\n\nTest$run$ = Test.run$;\n\n<span class=\"synIdentifier\">var</span> $__jsx_classMap = <span class=\"synIdentifier\">{</span>\n  <span class=\"synConstant\">&quot;t/run/001.hello.jsx&quot;</span>: <span class=\"synIdentifier\">{</span>\n    Test: Test,\n    Test$: Test$\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>;\n\n\n<span class=\"synIdentifier\">}</span>());\nJSX.require(<span class=\"synConstant\">'t/run/001.hello.jsx'</span>).Test.run$();\n</pre><p>が、コンパイルされて変換されたメインのコードっぽい。<br />\nなんとなく読めるようになってる自分に感動した！ｗ</p><p>ただ、なんでそうするのかがわからん・・・！<br />\n使わせてもらう分にはそんなん意識する必要ないんやろけども。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>不満な点</h3>\n    <p>要するに、愚痴欄です。</p>\n\n<div class=\"section\">\n    <h4>どこが簡単なのさ！</h4>\n    <p>試してみるのにNode.jsがいるとかgit cloneせにゃならんとかそもそもコンパイルせなあかんとか、敷居が高すぎます。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>はブラウザとメモ帳だけあったら動く！やから勉強しやすかったのになぁ。<br />\n速さを求めるって時点で避けては通れないんでしょうけど・・。</p><p>オンラインで試せるとこ：<a href=\"http://jsx.github.com/try/\" target=\"_blank\" title=\"JSX - Statically-typed, object-oritented programming lauguage\">JSX - Statically-typed, object-oritented programming lauguage</a>もあるので、オンラインで書いてコンパイルされたソースを保存していつも通り読み込んで・・とかもできるけど、それはなぁ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>検索しても意味わかんないです</h4>\n    <p>まだドキュメントも充実してないってのは仕方ないとしても。<br />\nおそらく初学者用のドキュメントなんて出てくるのはまっだまだ先で、今のところは達人<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE\">プログラマ</a>ーの方々のスーパーテクニック集ばっかです。<br />\n悪魔の罠です。</p>\n\n</div>\n<div class=\"section\">\n    <h4>難しい方の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a></h4>\n    <p>最近勉強してきてわかったのは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>にもジャンルがあって、</p>\n\n<ul>\n<li>ゲーム作ったりサービスのコア部として動いてたり、Web<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>としての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a></li>\n<li>ブラウザ専用のデザインの補助としての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a></li>\n</ul><p>だいたいこの2種類に大別されるんじゃないかなーと。<br />\n前者は知ってて損はないけど、知らんでも困らないってこと。(もちろん効率の良い書き方すべきってのはもちろんあるとしても。)<br />\n↑なんか誤解を招きそうな感じｗ</p>\n\n</div>\n<div class=\"section\">\n    <h4>新しい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a></h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>とかやってる人からすると、すらすら書けるんやろなーと思います。<br />\n昨日の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ustream\">Ustream</a>でもそうやったし。</p><p>ただ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/PHP\">PHP</a>を少しかじって、やっと一息といった程度の身としては、まったく別言語に感じます。<br />\nこれを学習コストって言うんでしょうが、「JSX独特の書式を覚える」のが大変そうやなぁ・・と。<br />\nそもそも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>はおろかいわゆる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>がわからんので、</p>\n\n    <blockquote>\n        <p>JSX is a statically-typed, object-oriented programming language...</p>\n\n    </blockquote>\n<p>statically-typedにもobject-orientedにも慣れてない身としてはとても大変です。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>というわけで</h3>\n    \n<ul>\n<li>厳密な意味でのスピードも求められず、</li>\n<li>保守性なり他人のコードを気にする必要のある規模の開発もせず、</li>\n<li>とっつきにくい型付＋<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE\">オブジェクト指向</a>でのコーディングのメリットを受けるようなコードも書く必要がない。</li>\n</ul><p>そんな今の私には、無用の長物という印象を受けたのが正直なところ。</p><p>とは言え、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>らしい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>を勉強するっていうのが最近の目標やったりもするので、良い機会ということで、JSX勉強していこうと思ってます。<br />\n今まで勉強してきた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の知識も無駄にならなさそうやので。</p><p>次回、まずは<a href=\"http://jsx.github.com/tutorial.html\" target=\"_blank\" title=\"JSX Tutorial\">JSX Tutorial</a>を攻めます。</p>\n\n</div>\n</div>"
}
