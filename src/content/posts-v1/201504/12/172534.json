{
  "title": "モバイルブラウザからアプリを開くには",
  "html": "<p>あいも変わらずモバイル情報です。</p><p>成果物はこちら。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/app-opener\" target=\"_blank\" title=\"leader22/app-opener\">leader22/app-opener</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>事の発端</h3>\n    <p>よく見ますよね、モバイルサイトの至る所にある「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>でシェア」、「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>でシェア」ってボタン。<br />\nよく見るんですけど・・・押しますか？アレ。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>も<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>も、もちろんアプリを使ってますよね。<br />\nブラウザでなんて、誰もログインしてないですよね。</p><p>てことは誰も押さないですよね？！！</p><p>ネイティブアプリ全盛期にブラウザWebでシェアしてね！ったって、<br />\nわざわざログインしてまでやってくれる人が、果たしてどれくらいいるでしょうか。</p><p>うー、Webつらい！アプリ強い！<br />\nせめてこのボタンを押すとアプリが起動し・・たら素敵ではありませんか？！</p>\n\n</div>\n<div class=\"section\">\n    <h3>どうにかなるのか</h3>\n    <p>別に目新しい技術ではないのですが、実は\"URIScheme\"っていうものがあります。</p>\n\n    <blockquote>\n        <p>URL<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A1%BC%A5%DE\">スキーマ</a>って言われたりスキームって言われたり、色々呼ばれてます。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>だと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%C6%A5%F3%A5%C8\">インテント</a>って呼んでたりもするらしい。</p>\n\n    </blockquote>\n<p>\"http://\" だとブラウザが起動するのと同じように、特定のアプリを呼び出すやつです。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>なら\"<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/twitter\">twitter</a>://\"とかです。<br />\nこれらはアプリ側で定義されてある必要があります。</p>\n\n</div>\n<div class=\"section\">\n    <h3>それならそうと</h3>\n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">a</span><span class=\"synIdentifier\"> </span><span class=\"synType\">href</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;twitter://timeline&quot;</span><span class=\"synIdentifier\">&gt;</span><span class=\"synUnderlined\">TwitterAppのタイムラインを表示！</span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">a</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>ってすりゃいいわけです。<br />\n楽勝です。</p><p>と言いたいところですが・・・。</p>\n\n<ul>\n<li>アプリがインストールされてなかったら？</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>でも動くのか？</li>\n</ul><p>とか気になってきますよね？<br />\n確かに動くし良いっちゃ良いのですが、そこは気にしないといけません。</p>\n\n</div>\n<div class=\"section\">\n    <h3>app-opner.js</h3>\n    <p>てなわけで作りました。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/app-opener\" target=\"_blank\" title=\"leader22/app-opener\">leader22/app-opener</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS5\">iOS5</a>以上、Android4以上で動くと思います。<br />\n厳密に色んな端末で検証したわけではないですが、手元のいくつかの端末では動いてました。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> isAndroid = navigator.userAgent.toLowerCase().indexOf(<span class=\"synConstant\">'android'</span>) !== -1;\n<span class=\"synIdentifier\">var</span> shareText = encodeURIComponent(<span class=\"synConstant\">'Webからアプリが開いたよ！！ @leader22++ https://github.com/leader22/app-opener'</span>) + <span class=\"synConstant\">' '</span>;\n<span class=\"synIdentifier\">var</span> schemeStr = (isAndroid) ? <span class=\"synConstant\">'intent://post?message='</span> + shareText + <span class=\"synConstant\">'#Intent;scheme=twitter;package=com.twitter.android;end;'</span>\n                            : <span class=\"synConstant\">'twitter://post?message='</span> + shareText;\n<span class=\"synStatement\">new</span> AppOpener(<span class=\"synIdentifier\">{</span>\n    schemeStr:   schemeStr,\n    fallbackUrl: <span class=\"synConstant\">'http://lealog.net'</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>って定義されたページでも用意しておけば、リンク踏むだけでおっけーです。<br />\nschemeStrさえ用意すれば、後はなんとかしてくれるライブラリです。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h3>OS別の挙動について</h3>\n    \n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a></h4>\n    <p>有効なスキームだった場合は、思った通り動作します。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>でも、アプリ内WebViewでも問題なかったです。</p><p>ログインしてない場合などは、アプリは開きますがもちろんログイン画面に行きます。</p><p>普通のaタグだったりで直接コレを開こうとすると、<br />\nアプリがインストールされてない場合などに、無効なリンクとして処理されるっぽく、処理できない旨のalertが表示されます。</p><p>この味気ないalertではなく、それなりにハンドリングしたい・・ってあなた！<br />\niframeを使えばなんとかなります！</p><p>冒頭の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>からコードを見てみてくださいまし。</p>\n\n    <blockquote>\n        <p><a href=\"http://wiki.akosma.com/IPhone_URL_Schemes\" target=\"_blank\" title=\"IPhone URL Schemes - akosma wiki\">IPhone URL Schemes - akosma wiki</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/URI\">URI</a>スキーム自体を探すのにはココが便利です。</p>\n\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a></h4>\n    <p>またもこいつに手を焼かれるのかとおもいきや、割とすんなりです。<br />\nただ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>のプロセス管理？の挙動がちょっと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>民からすると特殊で、そこだけ注意します。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>の場合は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%C6%A5%F3%A5%C8\">インテント</a>なる仕組みを使って実現します。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>と同じスキームでも動くっぽいのですが、どのアプリを使うかをユーザーに判断させるようなフローになるっぽい。<br />\nURL開く時に、「ブラウザで開く？それとも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>で開く？」って出るアレ。</p><p>アレもまぁある種親切なのですが・・・、<br />\nこれを回避したい場合には、この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%C6%A5%F3%A5%C8\">インテント</a>を使ってアプリを直接指定する他ないようです。</p><p>たとえば<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>なら、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>iOS: &#39;twitter://post?message={{TEXT}}&#39;\nANDROID: &#39;intent://post?message={{TEXT}}#Intent;scheme=twitter;package=com.twitter.android;end;&#39;</pre><p>って感じです。</p><p>棚ぼた的な感じですが、この指定の仕方をしていると、該当するアプリがインストールされていない場合、<br />\nGooglePlayを開いてくれるという謎のフォールバック機能が！</p><p>どうやら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>ではiframeから呼べないっぽいので、どちらでも動く愚直に開く方式にしました。</p><p>あ、一つ言い忘れました。<br />\nS Browser、お前だけは許さねぇ！</p>\n\n    <blockquote>\n        <p><a href=\"https://gist.github.com/uupaa/b25c9cf47bbeedea5a7f\" target=\"_blank\" title=\"おや… S Browser 三銃士 の様子が…\">おや… S Browser 三銃士 の様子が…</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>いんたーねっと情報</h4>\n    \n    <blockquote>\n        <p><a href=\"http://aawaara.com/post/74543339755/smallest-piece-of-code-thats-going-to-change-the\">Smallest piece of code that&#39;s going to change the... - Aawaara</a></p>\n\n    </blockquote>\n<p>こういう感じ？</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>これで晴れてアプリでシェアできる</h3>\n    <p>できます。が。</p><p>実はいちばんやりたかった<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>アプリの起動がどうにもこうにもできませんで・・。<br />\n正確には、起動まではいけるが、「1タップで即シェアな状態」までもっていくスキームが見つけられず・・。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google%C0%E8%C0%B8\">Google先生</a>に聞いてありとあらゆるパターンを試しましたがダメでした。</p><p>せっかく作ったのに勿体無いなーと思いつつ、<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>やLINE、その他のアプリはスキームさえあればコレで動くので、成果としてはまあ満足してはいるんですけどねー。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>でシェアするスキーム！WANTED！</p>\n\n<div class=\"section\">\n    <h4>ほんとは</h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>のschemeStrの差まで吸収して、各<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SNS\">SNS</a>にシェアするメソッドまで定義しようと思ってました。<br />\nただ、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>さまが使えないとなるともはや・・なので、自由に渡すカタチにしました。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>の場合のインストールされてなかったフックくらいは提供しても良かったのですが、特に使い道がないのでそっとしておきました。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ちなみに</h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>さま曰く、</p>\n\n    <blockquote>\n        <p>Don't prefill captions, comments, messages, or the user message parameter of posts with content a person didn’t create, even if the person can edit or remove the content before sharing.</p>\n\n    </blockquote>\n<p>つまり、できたところでポリシー違反にはなるので、それはそれでアレなんですが・・。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.facebook.com/policy#control\" target=\"_blank\" title=\"Platform Policy\">Platform Policy</a></p>\n\n    </blockquote>\n<p>やっぱりWebはWebらしく謙虚にいきましょうと思った春のひとときでした。</p>\n\n</div>\n</div>"
}
