{
  "title": "仕事でコードを書くときに意識していること",
  "html": "<p>達人<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC\">プログラマー</a>を読んだせいか、最近よく考えてることでもあるので、この際なのでポエムにしてみた。</p><p>受託の会社バイアスはあるかもしれないけど、基本的にコードを書くエンジニアには通ずるところがあるはず。<br />\n<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>設計に時間をかける</h3>\n    <p>これは、「いきなりエディタに向かってコードを書き始めない」ということ。</p><p>フォーマットはなんでもいいけど、</p>\n\n<ul>\n<li>まずどういうものを実装しようとしていて</li>\n<li>愚直にやるならこうする</li>\n<li>それによって既存のコードに影響がないか</li>\n<li>過去のコードと一貫しているか</li>\n<li>他の要件とぶつからないか</li>\n<li>etc..</li>\n</ul><p>などなど一通り思案して、必要ならメモを書いて、頭の中でコードをイメージする作業を先にやる。<br />\nそしてイメージできたものを、ガッとエディタに打ち込んで動くコードにしていく。</p><p>もちろん書いてみてはじめて気づく落とし穴もあったりするけど、その時はまたエディタから離れる。<br />\nコードを見てコードを治そうとすると、あちらを立てればこちらが立たず状態になることもよくあるし、一度落ち着いて俯瞰して考えるほうがうまくいくことが多いかなと。</p><p>そもそもイメージできないのであれば、コードとして具現化できるわけがないのである。<br />\nスポーツで頭の中でイメージできない動きが実際にできるわけがないのと同じ。</p><p>いきあたりばったりでとりあえず思いついた案をできました！ってコードレビューに出したりするのはやめて、一晩寝かすくらい時間をかけてもよいはず。</p><p>そしてこれだ！っていう設計は、だいたいお風呂で舞い降りてくるし・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>シンプルに実装する</h3>\n    <p>ようは、脳内メモリを使わなくてもいいコードを書くように心がけるということ。</p><p>たとえば、</p>\n\n<ul>\n<li>複雑な条件分岐を書くのではなく、early-returnする</li>\n<li>`reduce()`や`map()`のインラインで何行も書くなら、そもそも`for`でやる</li>\n<li>真偽値を反転させて判定するより、フラグをそもそも逆に定義する</li>\n<li>etc..</li>\n</ul><p>のように、記述方法が選べる場合に、より素直な方法を選ぶということ。</p><p>変数名をわかりやすくするとか、コメントを適宜ちゃんと書くとか、DRYに気をつけるとか、そういう当たり前のことができるようになった上での、もうひと手間のステップではあるけど。</p>\n\n    <blockquote>\n        <p>別件で、「余計なコードを書かないようにする」っていうのはある種のスキルかもなって思ったので、いつかそういうポエムを書こうと思った。</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>道具は使い倒す</h3>\n    <p>ライブラリの機能を、正しく理解して、余すところなく使いこなそうという話。</p><p>そもそもライブラリ（依存）は、なにか成し遂げたい目標や、やりたいことがあるから導入するもの。</p><p>なんか使い方があってるか不安・・って場合は、そもそもそのライブラリはあなたには早すぎたということ。<br />\n導入したけどそのライブラリの30％くらいしか使えてないなら、その30％だけを達成する別のライブラリを選べばよかったということ。</p><p>後からコードを見た人が、「なんで○○を採用してるのに、あの機能を使ってないん？」ってならないようにするということ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>シンプルに設計する</h3>\n    <p>ここまで手を動かす段階の話をしてきたけど、これはその更に前。</p><p>こういうことを実現したいという要件自体に切り込んで、可能ならわかりやすく仕様を変えてしまう。</p><p>受託の場合、依頼元とちゃんと話すということがとにかく重要で、納得感のある変更にすることが大事。<br />\n（ただしそもそもそういう話ができる関係性の場合に限る）</p>\n\n<ul>\n<li>いろんなことを一度に達成しようとして複雑化しすぎてるから</li>\n<li>プロジェクトの状況によって、スケジュールのために</li>\n<li>メンバーのスキルセットを踏まえた結果、実装難易度を下げるために</li>\n</ul><p>などなど、仕様が変わる理由はいろいろあるけど、個人的な都合にならないよう、そもそもの要求からかけ離れないように。</p><p>こんなんどうやって実装すんねん！っていうやつ、だいたいは言い出した側も苦肉の策だったり考慮漏れがいっぱいあったりするので、これって実はこうすれば簡単だったりします？的な提案をしていくといいって話。<br />\n自分の思慮が足りないだけの場合は、軽く一蹴されるかもしれんけど、それはそれで経験値になるはず。</p><p>というか、こういう一連の流れこそを、エンジニアリングと呼ぶのでは。</p><p>というのは建前で、実際は複雑怪奇な謎仕様をこの世に具現化しないようにしましょうね、エンジニアの威信にかけて・・ってだけ。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h3>日々の所作としてのリファクタ</h3>\n    <p>人によって、リファクタに対するイメージが違うと思っていて、</p>\n\n<ul>\n<li>必要があったらやる</li>\n<li>時間があったらやる</li>\n</ul><p>みたいに考えてる人が多い気がする。</p><p>けど、そういうものではないよね？って話。</p><p>一点の非の打ち所もない完璧なコードって、自分ひとりで書いたコードベースであっても、そうそうないはず。<br />\nつまりリファクタする余地なんかどこにでもあるということで、それをあなたがやってないだけって話。</p><p>スキあらば「ここ直したいリスト」をしたためておいて、机のホコリを払うくらいの感覚で、目についたらすぐやるようにする。<br />\n時間がなくて・・って言えないように、いかに自分の日々の中に自然と組み込んでいくかの問題。</p>\n\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>とまあ他にもいろいろと思うところはあるけど、とりあえずすぐ思いついたのだけ書き出しておいた。</p><p>文字にするとなんか当たり前のことしかいってないけど、それを仕事プログラミングで成果として出せるようになるまでには、それなりに時間がかかった気がする。</p><p>そういう意味で、いい渋さを出せるおじさんエンジニアになりたいと思います。</p>\n\n</div>"
}
