{
  "title": "mediasoupを使う前に知っておくべき概念たち",
  "html": "<p>公私問わず`mediasoup`をここ半年くらいずっと触ってて、ドキュメントだけでなく中のコードもそれなりに読み通してる身として。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>mediasoupとは</h3>\n    \n    <blockquote>\n        <p><a href=\"https://mediasoup.org/\">mediasoup</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OSS\">OSS</a>で公開されてる、Node.jsから利用できるWebRTCの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SFU\">SFU</a>です。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SFU\">SFU</a>を簡単に説明すると、WebRTCの接続をクライアント同士で行うのではなく、共通のサーバーでリレーさせて実現する仕組み。</p>\n\n<ul>\n<li>サーバーにだけ送信すれば良いのでクライアント側の負荷も下がる</li>\n<li>クライアントは受け取りたいメディアだけを選択して受け取れる</li>\n<li>サーバー側で録音したりメディアの二次加工ができる</li>\n</ul><p>などなど、トポロジとしての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/P2P\">P2P</a>が必要でないなら、WebRTCの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>のほとんどは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SFU\">SFU</a>ありきなのでは？と思ったりもする・・。<br />\nもちろん片手で数えられるくらいの人数が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D3%A5%C7%A5%AA%A5%C1%A5%E3%A5%C3%A5%C8\">ビデオチャット</a>するくらいなら、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SFU\">SFU</a>なしでもやれんことはないけど。</p>\n\n<div class=\"section\">\n    <h4>コードと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a></h4>\n    <p>コードは、メディアを取り回す部分は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>で書かれてて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>がNode.jsつまり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>で呼び出せるデザインになってます。<br />\n我々ユーザーがさわるのはNode.jsの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>だけなので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>さえかければ簡単にメディアサーバーが作れてしまいます。</p><p>（程度はあれど）WebRTCの実装はなかなかに大変で、これが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OSS\">OSS</a>で公開されてるのは本当にありがたい！</p><p>最新のメジャーバージョンは3で、サーバーの実装はこの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/versatica/mediasoup\">https://github.com/versatica/mediasoup</a></p>\n\n    </blockquote>\n<p>そのメディアサーバーに接続するクライアント<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SDK\">SDK</a>のラインナップは次のとおり。</p>\n\n<ul>\n<li><a href=\"https://github.com/versatica/mediasoup-client\">https://github.com/versatica/mediasoup-client</a>\n<ul>\n<li>ブラウザ用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SDK\">SDK</a></li>\n<li>機能がいちばん豊富</li>\n</ul></li>\n<li><a href=\"https://github.com/versatica/libmediasoupclient\">https://github.com/versatica/libmediasoupclient</a>\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SDK\">SDK</a>で、ラップすれば<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>用に</li>\n<li>ほとんどの機能はあるけど、DataChannelのサポートがまだない</li>\n</ul></li>\n<li><a href=\"https://github.com/versatica/mediasoup-client-aiortc\">https://github.com/versatica/mediasoup-client-aiortc</a>\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Python\">Python</a>のWebRTC実装である`aiortc`をラップしており、Node.jsから利用できる\n<ul>\n<li>`mediasoup-client`のコアとして使うイメージ</li>\n</ul></li>\n<li>つい最近できた + `aiortc`側の実装に引きずられてる部分がある\n<ul>\n<li><a href=\"https://github.com/versatica/mediasoup-client-aiortc/issues/9\">https://github.com/versatica/mediasoup-client-aiortc/issues/9</a></li>\n</ul></li>\n</ul></li>\n</ul><p>基本的にはこの中のどれかを使うことになります。（というか使わない道は用意されてない）</p>\n\n</div>\n<div class=\"section\">\n    <h4>まずドキュメントを読もう</h4>\n    \n    <blockquote>\n        <p><a href=\"https://mediasoup.org/documentation/v3/\">mediasoup :: v3</a></p>\n\n    </blockquote>\n<p>ありとあらゆる角度からフォローされてて読む価値ありなので、最終的には全ページ読んだほうがいいです！<br />\nドキュメント読まずに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>にIssue立てる人とかが結構いて、中の人も困ってるので。</p><p>それでもわからない場合は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>ではなくDiscourseに書く運用になってるのでそちらへ。</p>\n\n    <blockquote>\n        <p><a href=\"https://mediasoup.discourse.group/\">https://mediasoup.discourse.group/</a></p>\n\n    </blockquote>\n<p>まあそうならないための一助としてのこの記事だったりもするけど・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>考え方</h4>\n    <p>生のWebRTCの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>のことはいったん忘れてください。</p><p>いわゆるPub/Subモデルでメディアをやり取りできるというのが、`mediasoup`を使う時の考え方として大事です。</p>\n\n<ul>\n<li>`video`を送信するだけの人もいれば</li>\n<li>`audio`を受信するだけの人もいる</li>\n<li>どれを受信するかはその人の自由であり</li>\n<li>それはサーバーサイドでも同じ</li>\n</ul><p>というように、自由度が高く1つずつ積み上げて組み合わせて作っていくイメージでやるとよいです。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>概念: サーバーサイド</h3>\n    <p>いわゆる`mediasoup`語と、主な登場人物たちの紹介です。</p><p>まずはサーバーサイドから。</p>\n\n<ul>\n<li>Worker</li>\n<li>Router</li>\n<li>Transport</li>\n<li>Producer</li>\n<li>Consumer</li>\n</ul><p>他にももう少しだけあるけど、最低限だとこれだけ。<br />\n数が多い！って思うかもしれないけど、柔軟な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>とはそういうものなので・・。</p>\n\n<div class=\"section\">\n    <h4>Worker</h4>\n    \n    <blockquote>\n        <p><a href=\"https://mediasoup.org/documentation/v3/mediasoup/api/#Worker\">https://mediasoup.org/documentation/v3/mediasoup/api/#Worker</a></p>\n\n    </blockquote>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%2B%2B\">C++</a>のサブプロセスとして、Node.jsのプロセスの配下で動く</li>\n<li>CPUコアの単位で用意するのが最効率</li>\n<li>当たり前だがどんなシーンでも最低1つは必要</li>\n<li>Node.jsのサービスを立てるときに用意しておくイメージ</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Router</h4>\n    \n    <blockquote>\n        <p><a href=\"https://mediasoup.org/documentation/v3/mediasoup/api/#Router\">https://mediasoup.org/documentation/v3/mediasoup/api/#Router</a></p>\n\n    </blockquote>\n\n<ul>\n<li>`Worker`から作られるメディアのハブで、端的に言うとルームみたいなもの</li>\n<li>`Router`に向けてメディアを送信し、`Router`からメディアを購読するデザイン</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SFU\">SFU</a>はトランスコードを行わないので、`Router`ごとにコーデックに関する指定をすることになる\n<ul>\n<li>このルームではH264を使う、このルームは音声のみなど指定したい場合はココで縛る</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Transport</h4>\n    \n    <blockquote>\n        <p><a href=\"https://mediasoup.org/documentation/v3/mediasoup/api/#Transport\">https://mediasoup.org/documentation/v3/mediasoup/api/#Transport</a></p>\n\n    </blockquote>\n\n<ul>\n<li>`Router`から作られる、接続しようとするクライアントとの橋みたいなもの\n<ul>\n<li>送信するために1つ、受信するために1つ用意することになる</li>\n</ul></li>\n<li>種類がいくつかある\n<ul>\n<li>ブラウザがWebRTCで接続するなら`WebRtcTransport`</li>\n<li>同じくサーバーサイドでRTPを流したいなどの場合は、`PlainTransport`</li>\n</ul></li>\n<li>ICEやDTLSの状態を持つことになる層で、コードを書くとき一番よく触ることになる\n<ul>\n<li>`RTCPeerConnection`みたいなもの</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Producer</h4>\n    \n    <blockquote>\n        <p><a href=\"https://mediasoup.org/documentation/v3/mediasoup/api/#Producer\">https://mediasoup.org/documentation/v3/mediasoup/api/#Producer</a></p>\n\n    </blockquote>\n\n<ul>\n<li>メディアを送信することを、produceすると言う\n<ul>\n<li>`Router`に属する`Transport`上でproduceすると、`Producer`ができる</li>\n<li>クライアントとしては`RTCRtpSender`みたいなもの</li>\n</ul></li>\n<li>メディアではなくデータ（DataChannel）の場合は、`DataProducer`を作ることになる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Consumer</h4>\n    \n    <blockquote>\n        <p><a href=\"https://mediasoup.org/documentation/v3/mediasoup/api/#Consumer\">https://mediasoup.org/documentation/v3/mediasoup/api/#Consumer</a></p>\n\n    </blockquote>\n\n<ul>\n<li>メディアを受信することを、consumeすると言う\n<ul>\n<li>`Router`に属する`Transport`上でconsumeすると、`Consumer`ができる</li>\n<li>クライアントとしては`RTCRtpReceiver`みたいなもの</li>\n</ul></li>\n<li>メディアではなくデータ（DataChannel）の場合は、`DataConsumer`を作ることになる</li>\n<li>`Producer`のIDを指定して作る</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>概念: クライアントサイド</h3>\n    <p>続いてクライアントの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SDK\">SDK</a>側。</p>\n\n<ul>\n<li>Device</li>\n<li>Transport</li>\n<li>Producer</li>\n<li>Consumer</li>\n</ul><p>基本的には、サーバーサイドのそれとクライアントサイドのそれは1:1で紐づくものなので、新たな登場人物はそんなにないです。</p>\n\n<div class=\"section\">\n    <h4>Device</h4>\n    \n    <blockquote>\n        <p><a href=\"https://mediasoup.org/documentation/v3/mediasoup-client/api/#Device\">https://mediasoup.org/documentation/v3/mediasoup-client/api/#Device</a></p>\n\n    </blockquote>\n\n<ul>\n<li>クライアントもといユーザーエージェントそのもの\n<ul>\n<li>ブラウザによって実装が違うので、そこを吸収するために必要</li>\n</ul></li>\n<li>`Router`の設定をロードして使う</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Transport</h4>\n    \n    <blockquote>\n        <p><a href=\"https://mediasoup.org/documentation/v3/mediasoup-client/api/#Transport\">https://mediasoup.org/documentation/v3/mediasoup-client/api/#Transport</a></p>\n\n    </blockquote>\n\n<ul>\n<li>`Device`によって作られる\n<ul>\n<li>`RTCPeerConnection`そのもの</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Producer</h4>\n    \n    <blockquote>\n        <p><a href=\"https://mediasoup.org/documentation/v3/mediasoup-client/api/#Producer\">https://mediasoup.org/documentation/v3/mediasoup-client/api/#Producer</a></p>\n\n    </blockquote>\n\n<ul>\n<li>`Transport`によって作られる</li>\n<li>データの場合は`DataProducer`</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Consumer</h4>\n    \n    <blockquote>\n        <p><a href=\"https://mediasoup.org/documentation/v3/mediasoup-client/api/#Consumer\">https://mediasoup.org/documentation/v3/mediasoup-client/api/#Consumer</a></p>\n\n    </blockquote>\n\n<ul>\n<li>`Transport`によって作られる</li>\n<li>データの場合は`DataConsumer`</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%B0%A5%CA%A5%EA%A5%F3%A5%B0\">シグナリング</a></h3>\n    <p>ここまで説明した登場人物を作る<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>は用意されてるものの、どのタイミングでどれを作るかなどは完全にユーザー依存です。</p><p>サーバーサイドの`Worker`や、クライアントサイドの`Device`は事前に作っておけるけど、それ以外はクライアントとサーバー間で調整が必要になる。<br />\nそれをWebSocketやRESTでよしなにやることを、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%B0%A5%CA%A5%EA%A5%F3%A5%B0\">シグナリング</a>するという。</p><p>`mediasoup`は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%B0%A5%CA%A5%EA%A5%F3%A5%B0\">シグナリング</a>にまったく関与しないし、何でやってもよいということになってます。<br />\n`Router`のコーデックの設定などをUIで動的に指定したいかもしれないし。</p><p>`Transport`と`Producer`と`Consumer`に関しては、サーバーサイドで先に作って、それと対になるものをクライアントで作ることになる点だけ注意。</p><p>つまり、次の流れに沿って処理をすることになるということ。</p>\n\n<ul>\n<li>クライアント: `Transport`を作りたい旨を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%B0%A5%CA%A5%EA%A5%F3%A5%B0\">シグナリング</a></li>\n<li>サーバー: `Transport`をどこかの`Router`に作る</li>\n<li>サーバー: 作った`Transport`の情報をクライアントに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%B0%A5%CA%A5%EA%A5%F3%A5%B0\">シグナリング</a></li>\n<li>クライアント: その情報を使って`Transport`を作る</li>\n</ul><p>`Producer`を作るときも、`Consumer`を作るときも同じような流れになる。</p><p>どういうコードを書くかももちろん自由。<br />\n最初に送信用と受信用の`Transport`2つ分をサーバーで用意しておくもよし、逐一<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%B0%A5%CA%A5%EA%A5%F3%A5%B0\">シグナリング</a>するもよし、ベストプ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ティスはアプリケーションの要件次第です。</p>\n\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>というわけで今記事では、`mediasoup`についての基本的な概念について手厚くお送りしました。<br />\n個人的に`mediasoup`を使う上での最初の壁は、この登場人物の多さと役割分担をしっかり理解できるかだと思ってます。</p><p>最低限の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SFU\">SFU</a>の実装を用意して、クライアントAとBが互いに1種類のメディアを送受信したい場合は、こんな感じのリソースツリーになるはず。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink># サーバー\n- Worker1\n  - Router1\n    - SendTransportForA\n      - ProducerForA\n    - SendTransportForB\n      - ProducerForB\n    - RecvTransportForA\n      - ConsumerForA\n    - RecvTransportForB\n      - ConsumerForB</pre><pre class=\"code\" data-lang=\"\" data-unlink># クライアント\n- Device\n  - SendTransport\n    - Producer\n  - RecvTransport\n    - Consumer</pre><p>\"送信と受信は分けて考えられる\"ということに気付けるかどうかがミソ。<br />\nあと、videoとaudioを送る場合、`Producer`は2つ必要だけども`Transport`は送信用のやつ1つでOKってところ。</p><p>実装も段階を分けて1stepずつやっていくとわかりやすいです。</p><p>ともあれ、これさえわかってればコードリーディングも捗るはず！</p>\n\n</div>"
}
