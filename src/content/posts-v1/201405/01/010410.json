{
  "title": "SassのMixinとPlaceholderの使い分け",
  "html": "<p>ひとり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B1%A1%BC%A5%B9%A5%B9%A5%BF%A5%C7%A5%A3\">ケーススタディ</a>です。</p><p>前提として最近もやもや色々考えるけど、結局なんて結論付けたいかがよくわからんのが多いので、メモ書きってなニュアンス。</p><p>まずはおさらい。</p>\n\n<div class=\"section\">\n    <h3>Mixin</h3>\n    <pre class=\"code lang-sass\" data-lang=\"sass\" data-unlink><span class=\"synComment\">// いわゆる関数っぽい定義の仕方で</span>\n@mixin sample($color, $size) <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">background-color</span>: $<span class=\"synType\">color</span>;\n  <span class=\"synType\">width</span>: $<span class=\"synType\">size</span>;\n  <span class=\"synType\">height</span>: $<span class=\"synType\">size</span>;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// 使える</span>\n<span class=\"synSpecial\">.</span><span class=\"synType\">sample</span> <span class=\"synIdentifier\">{</span>\n  @include sample(<span class=\"synConstant\">blue</span>, <span class=\"synConstant\">30</span>);\n<span class=\"synIdentifier\">}</span>\n</pre><p>ほかにも、</p>\n<pre class=\"code lang-sass\" data-lang=\"sass\" data-unlink><span class=\"synComment\">// いわゆる関数っぽい定義の仕方で</span>\n@mixin sample($color, $size) <span class=\"synIdentifier\">{</span>\n  .sample {\n    <span class=\"synType\">background-color</span>: $<span class=\"synType\">color</span>;\n    <span class=\"synType\">width</span>: $<span class=\"synType\">size</span>;\n    <span class=\"synType\">height</span>: $<span class=\"synType\">size</span>;\n    @<span class=\"synType\">content</span>; // コレに対して\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synError\">}</span>\n\n<span class=\"synComment\">// ブロック投げ込める</span>\n@include sample(blue, 30) <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">text-align</span>: <span class=\"synType\">center</span>;\n<span class=\"synIdentifier\">}</span>;\n</pre>\n    <blockquote>\n        <p>参考：<a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\" target=\"_blank\" title=\"File: SASS_REFERENCE — Sass Documentation\">File: SASS_REFERENCE — Sass Documentation</a></p>\n\n    </blockquote>\n<p>引数が受けられるのがポイント、と。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Placeholder</h3>\n    <pre class=\"code lang-sass\" data-lang=\"sass\" data-unlink><span class=\"synComment\">// いわゆるテンプレみたいなのを定義しておくと</span>\n%sample <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">background-color</span>: <span class=\"synConstant\">white</span>;\n  <span class=\"synType\">width</span>: <span class=\"synConstant\">40px</span>;\n  <span class=\"synType\">height</span>: <span class=\"synConstant\">40px</span>;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// そのまま拝借したり、上書きして使える</span>\n<span class=\"synSpecial\">.</span><span class=\"synType\">sample</span> <span class=\"synIdentifier\">{</span>\n  @extend %sample;\n  <span class=\"synType\">background-color</span>: <span class=\"synConstant\">red</span>;\n<span class=\"synIdentifier\">}</span>\n</pre>\n    <blockquote>\n        <p>参考：<a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholder_selectors_\" target=\"_blank\" title=\"File: SASS_REFERENCE — Sass Documentation\">File: SASS_REFERENCE — Sass Documentation</a></p>\n\n    </blockquote>\n<p>一見同じようにも見えますが、後述するとおり書きだされた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>の中身がちょっと変わります。</p>\n\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B1%A1%BC%A5%B9%A5%B9%A5%BF%A5%C7%A5%A3\">ケーススタディ</a></h3>\n    <p>というように、それぞれ用途があって存在する機能ってとこまではよし。<br />\nで、どっちを使うべきかという話になるケースってのは、どっちの機能でも満たせる要件って時なので・・。</p>\n\n<ul>\n<li>共通のスタイルを、使いたい箇所で使う</li>\n<li>スタイルの上書きはするかもしれない</li>\n</ul>\n<div class=\"section\">\n    <h4>[1] Mixin</h4>\n    <pre class=\"code lang-sass\" data-lang=\"sass\" data-unlink><span class=\"synComment\">// _inc.scss</span>\n@mixin <span class=\"synStatement\">button</span>($color) <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">color</span>: $<span class=\"synType\">color</span>;\n  <span class=\"synType\">text-align</span>: <span class=\"synType\">center</span>;\n  <span class=\"synType\">width</span>: <span class=\"synConstant\">100px</span>;\n  @<span class=\"synType\">content</span>;\n<span class=\"synIdentifier\">}</span>\n</pre><pre class=\"code lang-sass\" data-lang=\"sass\" data-unlink><span class=\"synComment\">// main.scss</span>\n<span class=\"synPreProc\">@import &quot;./inc&quot;;</span>\n\n<span class=\"synSpecial\">.</span><span class=\"synType\">main-container</span> <span class=\"synIdentifier\">{</span>\n  .button {\n    @include button(<span class=\"synConstant\">red</span>) {\n      <span class=\"synType\">height</span>: <span class=\"synConstant\">40px</span>;\n    <span class=\"synIdentifier\">}</span>;\n  <span class=\"synError\">}</span>\n<span class=\"synError\">}</span>\n</pre><pre class=\"code lang-css\" data-lang=\"css\" data-unlink>// main<span class=\"synIdentifier\">.css</span>\n<span class=\"synIdentifier\">.main-container</span> <span class=\"synIdentifier\">.button</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">color</span>: <span class=\"synConstant\">red</span>;\n  <span class=\"synType\">text-align</span>: <span class=\"synType\">center</span>;\n  <span class=\"synType\">width</span>: <span class=\"synConstant\">100px</span>;\n  <span class=\"synType\">height</span>: <span class=\"synConstant\">40px</span>;\n<span class=\"synIdentifier\">}</span>\n</pre><p>Mixinはそのまんまで、使ったところで定義した内容が全部インクルードされる。<br />\nなのでインクルードしまくると、その分だけ重複したコードが増えていく。<br />\n動的にスタイルを上書きできる！ってのは良さそうに見えるけど、それPlaceholderでできるよ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>[2] Mixin</h4>\n    <pre class=\"code lang-sass\" data-lang=\"sass\" data-unlink><span class=\"synComment\">// _inc.scss</span>\n@mixin <span class=\"synStatement\">button</span>($color) <span class=\"synIdentifier\">{</span>\n  .button {\n    <span class=\"synType\">color</span>: $<span class=\"synType\">color</span>;\n    <span class=\"synType\">text-align</span>: <span class=\"synType\">center</span>;\n    <span class=\"synType\">width</span>: <span class=\"synConstant\">100px</span>;\n    @<span class=\"synType\">content</span>;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synError\">}</span>\n</pre><pre class=\"code lang-sass\" data-lang=\"sass\" data-unlink><span class=\"synComment\">// main.scss</span>\n<span class=\"synPreProc\">@import &quot;./inc&quot;;</span>\n\n<span class=\"synSpecial\">.</span><span class=\"synType\">main-container</span> <span class=\"synIdentifier\">{</span>\n  @include button(<span class=\"synConstant\">red</span>) {\n    <span class=\"synType\">height</span>: <span class=\"synConstant\">40px</span>;\n  <span class=\"synIdentifier\">}</span>;\n<span class=\"synError\">}</span>\n</pre><pre class=\"code lang-css\" data-lang=\"css\" data-unlink>// main<span class=\"synIdentifier\">.css</span>\n<span class=\"synIdentifier\">.main-container</span> <span class=\"synIdentifier\">.button</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">color</span>: <span class=\"synConstant\">red</span>;\n  <span class=\"synType\">text-align</span>: <span class=\"synType\">center</span>;\n  <span class=\"synType\">width</span>: <span class=\"synConstant\">100px</span>;\n  <span class=\"synType\">height</span>: <span class=\"synConstant\">40px</span>;\n<span class=\"synIdentifier\">}</span>\n</pre><p>これは[1]と大差ないんやけど、最近見かけたコードスタイルやったので一応載せてみる。<br />\n個人的にはピンときてなくて、そもそもなんて<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>が展開されるか見えないとかありえんし、<br />\nMixinって概念と定義の時点でクラスを吐き出すってのがもう本末転倒な気がして。</p>\n\n</div>\n<div class=\"section\">\n    <h4>[3] Placeholder</h4>\n    <pre class=\"code lang-sass\" data-lang=\"sass\" data-unlink><span class=\"synComment\">// _inc.scss</span>\n%<span class=\"synStatement\">button</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">text-align</span>: <span class=\"synType\">center</span>;\n  <span class=\"synType\">width</span>: <span class=\"synConstant\">100px</span>;\n<span class=\"synIdentifier\">}</span>\n</pre><pre class=\"code lang-sass\" data-lang=\"sass\" data-unlink><span class=\"synComment\">// main.scss</span>\n<span class=\"synPreProc\">@import &quot;./_inc&quot;;</span>\n\n<span class=\"synSpecial\">.</span><span class=\"synType\">main-container</span> <span class=\"synIdentifier\">{</span>\n  .button {\n    @extend %button;\n    <span class=\"synType\">color</span>: <span class=\"synConstant\">red</span>;\n    <span class=\"synType\">height</span>: <span class=\"synConstant\">40px</span>;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synError\">}</span>\n</pre><pre class=\"code lang-css\" data-lang=\"css\" data-unlink>// main<span class=\"synIdentifier\">.css</span>\n<span class=\"synIdentifier\">.main-container</span> <span class=\"synIdentifier\">.button</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">text-align</span>: <span class=\"synType\">center</span>;\n  <span class=\"synType\">width</span>: <span class=\"synConstant\">100px</span>;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synIdentifier\">.main-container</span> <span class=\"synIdentifier\">.button</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">color</span>: <span class=\"synConstant\">red</span>;\n  <span class=\"synType\">height</span>: <span class=\"synConstant\">40px</span>;\n<span class=\"synIdentifier\">}</span>\n</pre><p>コードが増えた風に見えるのは、Placeholderの仕様がそうなってるから。<br />\nPlaceholderとして共通で使える部分が固められて、差分がそれぞれ増えていく。</p><p>Mixinで重複コードを増やす理由はないので、基本的にはコレを使うシーンが一番多いのではないかなーと思ってる。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>個人的には、明確に引数を受ける必要がある以外は、Placeholder使った方が良いのではないかなーと思う。</p><p>いわゆる共通のスタイルを継承して云々・・ってコンテキストで使うのはPlaceholderで、<br />\nいわゆる関数ライクにシンプルにコードを保ちたいときにはMixinを使う。</p><p>変に柔軟に対応できるように・・とかって高度な設計思想を持っても理解されなきゃ意味ないし、<br />\n多少雑でもそういう住み分けを徹底して設計するほうが、後で運用しやすいと思ってる。<br />\n選択肢を減らして考えさせないのが運用を楽にする勘所ってのが持論なので・・。<br />\n<br />\n</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://thesassway.com/intermediate/understanding-placeholder-selectors\" target=\"_blank\" title=\"Understanding placeholder selectors\">Understanding placeholder selectors</a></p>\n\n    </blockquote>\n\n</div>"
}
