{
  "title": "Cloudflare WorkersでGitHubのWebhooksを受け取りハッシュを検証する",
  "html": "<p>いわゆるWebhooksは、改ざん防止のためのハッシュをつけることができる。</p><p>それを受け取り側で検証するコードはこういう風に書くっていうメモ。Node.jsの場合は調べればいっぱい出てくるけど、最近のWorker環境系ではズバリなやつが見つからなかったので。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"コード\">コード</h3>\n    <pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synType\">const</span> encoder <span class=\"synStatement\">=</span> <span class=\"synStatement\">new</span> TextEncoder<span class=\"synStatement\">();</span>\n<span class=\"synComment\">/**</span>\n<span class=\"synComment\"> * </span><span class=\"synSpecial\">@param</span><span class=\"synComment\"> </span><span class=\"synIdentifier\">{string}</span><span class=\"synComment\"> signature</span>\n<span class=\"synComment\"> * </span><span class=\"synSpecial\">@param</span><span class=\"synComment\"> </span><span class=\"synIdentifier\">{[string, string]}</span><span class=\"synComment\"> payloadAndSecret</span>\n<span class=\"synComment\"> * </span><span class=\"synSpecial\">@returns</span><span class=\"synComment\"> </span><span class=\"synIdentifier\">{Promise&lt;boolean&gt;}</span>\n<span class=\"synComment\"> */</span>\n<span class=\"synType\">const</span> verifySignature <span class=\"synStatement\">=</span> <span class=\"synStatement\">async</span> <span class=\"synStatement\">(</span>signature<span class=\"synStatement\">,</span> <span class=\"synIdentifier\">[</span>payload<span class=\"synStatement\">,</span> secret<span class=\"synIdentifier\">]</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">const</span> key <span class=\"synStatement\">=</span> <span class=\"synStatement\">await</span> crypto.subtle.importKey<span class=\"synStatement\">(</span>\n    <span class=\"synConstant\">&quot;raw&quot;</span><span class=\"synStatement\">,</span>\n    encoder.encode<span class=\"synStatement\">(</span>secret<span class=\"synStatement\">),</span>\n    <span class=\"synIdentifier\">{</span> name: <span class=\"synConstant\">&quot;HMAC&quot;</span><span class=\"synStatement\">,</span> hash: <span class=\"synConstant\">&quot;SHA-256&quot;</span> <span class=\"synIdentifier\">}</span><span class=\"synStatement\">,</span>\n    <span class=\"synConstant\">false</span><span class=\"synStatement\">,</span>\n    <span class=\"synIdentifier\">[</span><span class=\"synConstant\">&quot;verify&quot;</span><span class=\"synIdentifier\">]</span>\n  <span class=\"synStatement\">);</span>\n\n  <span class=\"synType\">const</span> verified <span class=\"synStatement\">=</span> <span class=\"synStatement\">await</span> crypto.subtle.verify<span class=\"synStatement\">(</span>\n    <span class=\"synConstant\">&quot;HMAC&quot;</span><span class=\"synStatement\">,</span>\n    key<span class=\"synStatement\">,</span>\n    hexToBytes<span class=\"synStatement\">(</span>signature<span class=\"synStatement\">),</span>\n    encoder.encode<span class=\"synStatement\">(</span>payload<span class=\"synStatement\">)</span>\n  <span class=\"synStatement\">);</span>\n\n  <span class=\"synStatement\">return</span> verified<span class=\"synStatement\">;</span>\n\n  <span class=\"synComment\">/**</span>\n<span class=\"synComment\">   * </span><span class=\"synSpecial\">@param</span><span class=\"synComment\"> </span><span class=\"synIdentifier\">{string}</span><span class=\"synComment\"> hex</span>\n<span class=\"synComment\">   * </span><span class=\"synSpecial\">@returns</span><span class=\"synComment\"> </span><span class=\"synIdentifier\">{ArrayBuffer}</span>\n<span class=\"synComment\">   */</span>\n  <span class=\"synStatement\">function</span> hexToBytes<span class=\"synStatement\">(</span>hex<span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synType\">const</span> bytes <span class=\"synStatement\">=</span> <span class=\"synStatement\">new</span> <span class=\"synSpecial\">Uint8Array</span><span class=\"synStatement\">(</span>hex.length / <span class=\"synConstant\">2</span><span class=\"synStatement\">);</span>\n    <span class=\"synStatement\">for</span> <span class=\"synStatement\">(</span><span class=\"synType\">let</span> c <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span><span class=\"synStatement\">;</span> c <span class=\"synStatement\">&lt;</span> hex.length<span class=\"synStatement\">;</span> c <span class=\"synStatement\">+=</span> <span class=\"synConstant\">2</span><span class=\"synStatement\">)</span>\n      bytes<span class=\"synIdentifier\">[</span>c / <span class=\"synConstant\">2</span><span class=\"synIdentifier\">]</span> <span class=\"synStatement\">=</span> parseInt<span class=\"synStatement\">(</span>hex.substring<span class=\"synStatement\">(</span>c<span class=\"synStatement\">,</span> c + <span class=\"synConstant\">2</span><span class=\"synStatement\">),</span> <span class=\"synConstant\">16</span><span class=\"synStatement\">);</span>\n\n    <span class=\"synStatement\">return</span> bytes.buffer<span class=\"synStatement\">;</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n\n\n<span class=\"synType\">const</span> handleFetch <span class=\"synStatement\">=</span> <span class=\"synStatement\">async</span> <span class=\"synStatement\">(</span>req<span class=\"synStatement\">,</span> env<span class=\"synStatement\">,</span> _ctx<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">const</span> signature <span class=\"synStatement\">=</span> req.headers.<span class=\"synStatement\">get(</span><span class=\"synConstant\">&quot;X-Hub-Signature-256&quot;</span><span class=\"synStatement\">)</span> ?? <span class=\"synConstant\">&quot;N/A&quot;</span><span class=\"synStatement\">;</span>\n  <span class=\"synType\">const</span> payload <span class=\"synStatement\">=</span> <span class=\"synStatement\">await</span> req.text<span class=\"synStatement\">();</span>\n  <span class=\"synComment\">// sha256=xxx...</span>\n  <span class=\"synType\">const</span> verified <span class=\"synStatement\">=</span> <span class=\"synStatement\">await</span> verifySignature<span class=\"synStatement\">(</span>signature.slice<span class=\"synStatement\">(</span><span class=\"synConstant\">7</span><span class=\"synStatement\">),</span> <span class=\"synIdentifier\">[</span>\n    payload<span class=\"synStatement\">,</span>\n    env.GITHUB_WEBHOOK_SECRET<span class=\"synStatement\">,</span>\n  <span class=\"synIdentifier\">]</span><span class=\"synStatement\">);</span>\n\n  <span class=\"synStatement\">if</span> <span class=\"synStatement\">(</span><span class=\"synConstant\">!</span>verified<span class=\"synStatement\">)</span> <span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> Response<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;Not Found&quot;</span><span class=\"synStatement\">,</span> <span class=\"synIdentifier\">{</span> <span class=\"synStatement\">status</span>: <span class=\"synConstant\">404</span> <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n  <span class=\"synType\">const</span> push <span class=\"synStatement\">=</span> <span class=\"synSpecial\">JSON</span>.parse<span class=\"synStatement\">(</span>payload<span class=\"synStatement\">);</span>\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>のWebhooksはSHA256のほうが推奨らしいのでそっちを使って検証する。肝心のところはWeb Cryptoに丸投げ。</p><p>いったん`text()`で受け取って、あとで`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSON\">JSON</a>.parse()`するのがなるほどなって感じ。</p>\n\n</div>"
}
