{
  "title": "Gitのstashについてのメモ",
  "html": "<p>検索すればなんでも出てくるけど、自分の言葉でメモしておきたいので。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>git stash</h3>\n    <p>branch変えたい、とりあえずあるだけpushしたい、pullしたい云々あった場合、今の変更をとりあえず保存しておけるのがこのstashというコマンド。</p><p>全てではないけども、だいたいよく使いそうなものをメモ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>一通りの使い方</h3>\n    <pre class=\"code\" data-unlink>git stash save</pre><p>して脇に避けた変更は、</p>\n<pre class=\"code\" data-unlink>git stash pop</pre><p>で元に戻せる。</p><p>popと同じく変更を戻すコマンドには、</p>\n<pre class=\"code\" data-unlink>git stash apply</pre><p>というのもある。</p><p>実は、pop = apply + dropのこと。</p><p>popとapplyの違いは、変更を戻して、stashを使い捨てるか、apply：適応=変更を戻すだけか。</p><p>ちなみに、</p>\n<pre class=\"code\" data-unlink>git stash\n# git stash saveと同じ</pre><p>もひとつちなみに、stashは何回でもできるので、</p>\n<pre class=\"code\" data-unlink>git stash list</pre><p>とするとstashの履歴が見れる。</p><p>ということはつまり、</p>\n<pre class=\"code\" data-unlink>git stash pop stash@{0}</pre><p>のようにすればどのstash分を元に戻すかが選べる。</p><p>もう言うまでもないけど、</p>\n<pre class=\"code\" data-unlink>git stash apply\n# git stash apply stash@{0} 同じ動作</pre><p>どのstashかを指定しない＝先頭(0番目)が指定される。</p><p>で、popじゃなくてapplyばっかりしてると、この履歴が残りっぱなしになるので、</p>\n<pre class=\"code\" data-unlink>git stash drop stash@{0}</pre><p>とかして消す。</p>\n<pre class=\"code\" data-unlink>git stash clear</pre><p>とすると、全部の履歴を消すこともできる。</p>\n\n    <blockquote>\n        <p>ふと思ったけど、pushする前にpull --rebaseした方がいいよってのと一緒で、実はpopじゃなくてapply & dropにした方が何かと良いのではなかろうか。</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>そのほか</h3>\n    <pre class=\"code\" data-unlink>git stash pop</pre><p>このときコンフリクトが起きた場合、pop=履歴消えるが失敗して、both modifiedなファイルが出る。</p><p>いつも通り修正して、修正が終わったなら、</p>\n<pre class=\"code\" data-unlink>git stash drop</pre><p>うん、やっぱpop使わない方が良い気がしてきた。</p>\n\n    <blockquote>\n        <p>popに失敗した=stashに預けてた変更はどこまで反映されたのかと不安になってたけど、mergeされた結果コンフリクトが起きたというのであれば、基本的には何かしらの形で反映されたと思って良さそう。</p>\n\n    </blockquote>\n\n</div>\n</div>"
}
