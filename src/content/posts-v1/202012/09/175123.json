{
  "title": "Workboxで画像をランタイムでキャッシュする",
  "html": "<p>アクセスするとメガ単位でたくさんの画像を読み込むサービスがありまして・・。</p><p>リファクタによって、動的に必要な画像だけを読み込むように改修はしたけど、それでも回遊するとサイズがすごいことになる。</p><p>これをなんとかするならServiceWorkerしかない！というわけで。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Workbox</h3>\n    <p>最初は0から手書きしようかと思ったけど、ちょっとやり始めただけであれこれ面倒なことがわかったので、先人に頼ることにした。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.google.com/web/tools/workbox\">Workbox &nbsp;|&nbsp; Google Developers</a></p>\n\n    </blockquote>\n<p>ご丁寧に、こういうことがやりたいんじゃろ？っていうのがガイドの中にあって、そうそうこれこれ〜って感じだった。</p><p>事前キャッシュではなく、あくまでランタイムでのキャッシュがしたかったので、これ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> CacheableResponsePlugin <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;workbox-cacheable-response&quot;</span>;\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> CacheFirst <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;workbox-strategies&quot;</span>;\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> ExpirationPlugin <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;workbox-expiration&quot;</span>;\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> registerRoute <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;workbox-routing&quot;</span>;\n\nregisterRoute(\n  (<span class=\"synIdentifier\">{</span> request <span class=\"synIdentifier\">}</span>) =&gt; request.destination === <span class=\"synConstant\">&quot;image&quot;</span>,\n  <span class=\"synStatement\">new</span> CacheFirst(<span class=\"synIdentifier\">{</span>\n    cacheName: <span class=\"synConstant\">&quot;images&quot;</span>,\n    plugins: <span class=\"synIdentifier\">[</span>\n      <span class=\"synStatement\">new</span> CacheableResponsePlugin(<span class=\"synIdentifier\">{</span>\n        statuses: <span class=\"synIdentifier\">[</span>0, 200<span class=\"synIdentifier\">]</span>,\n      <span class=\"synIdentifier\">}</span>),\n      <span class=\"synStatement\">new</span> ExpirationPlugin(<span class=\"synIdentifier\">{</span>\n        maxAgeSeconds: 30 * 24 * 60 * 60, <span class=\"synComment\">// 30 Days</span>\n        purgeOnQuotaError: <span class=\"synConstant\">true</span>,\n      <span class=\"synIdentifier\">}</span>),\n    <span class=\"synIdentifier\">]</span>,\n  <span class=\"synIdentifier\">}</span>),\n);\n</pre><p>拡張子問わず、画像に対するリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トをキャッシュする設定。</p>\n\n<ul>\n<li>ちゃんと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9\">ステータスコード</a>200で取得できたものだけ</li>\n<li>キャッシュできる容量を超えたら自動パージ</li>\n</ul><p>というコードがこれだけで書ける。</p><p>我々が欲しかったのはServiceWorkerではなく、Workboxだったのじゃよ・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Rollupで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>なしでビルド</h3>\n    <p>Workboxの使い方を探すと、PWA用途に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>で事前キャッシュ仕込めて簡単☆みたいなのばっか出てくる。</p><p>まぁ普通にアプリのコードと同じようにRollupで設定書いて、ビルドすればいいだけなので、特筆すべきことはない・・と思ったら、ちょっとハマった。</p><p>最終的な`rollup.config.js`はこんな感じ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> production = process.env.NODE_ENV === <span class=\"synConstant\">&quot;production&quot;</span>;\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> <span class=\"synIdentifier\">{</span>\n  input: <span class=\"synConstant\">&quot;src/sw.js&quot;</span>,\n  output: <span class=\"synIdentifier\">{</span>\n    format: <span class=\"synConstant\">&quot;iife&quot;</span>,\n    name: <span class=\"synConstant\">&quot;sw&quot;</span>,\n    file: <span class=\"synConstant\">&quot;service-worker.js&quot;</span>\n  <span class=\"synIdentifier\">}</span>,\n  plugins: <span class=\"synIdentifier\">[</span>\n    resolve(),\n    replace(<span class=\"synIdentifier\">{</span>\n      <span class=\"synConstant\">&quot;process.env.NODE_ENV&quot;</span>: production ? <span class=\"synConstant\">&quot;'production'&quot;</span> : <span class=\"synConstant\">&quot;''&quot;</span>,\n    <span class=\"synIdentifier\">}</span>),\n    production &amp;&amp; terser()\n  <span class=\"synIdentifier\">]</span>,\n<span class=\"synIdentifier\">}</span>\n</pre><p>まず最初の注意点は、`format: iife`にするところ。</p><p>次に、`process.env`にアクセスするコードがWorkbox側にあるので、それを処理しないと`process is not defined`って`register()`時にエラーになるところ・・。<br />\n（そんなコードを公開するんじゃないよという気持ち）</p><p>あとは使ってるモジュールたちをいつもどおり`npm install`すれば、ビルドできる。</p>\n\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a> Pagesの場合</h3>\n    <p>専用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>でやってるなら特に引っかかりはしないはず。</p><p>けど、そのままの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a> Pagesの場合、ユーザー名が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>になってたり、末尾スラッシュの制御ができなかったりする。</p><p>それを回避するためにこう書けばいいよという神ガイドがこちらのGistにあった。</p>\n\n    <blockquote>\n        <p><a href=\"https://gist.github.com/7c5d1e8449b2fbc97d372675f16b566e\">ServiceWorker for github pages.</a></p>\n\n    </blockquote>\n<p>最初`scope`のパスのことに気付かずなんで動かんのや・・ってハマってたので助かった〜。</p>\n\n</div>"
}
