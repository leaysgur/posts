{
  "title": "Tailwind CSSは、ViteのMPAで最適化できない",
  "html": "<p>ということに仕事で困らされて、最近それなりの時間を持っていかれた記念のメモ。</p><p>とりあえずの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EF%A1%BC%A5%AF%A5%A2%A5%E9%A5%A6%A5%F3%A5%C9\">ワークアラウンド</a>は見出したけど、あとでどこかの誰かがもっといい感じにやってくれへんかな〜って。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>やりたかったこと</h3>\n    \n<ul>\n<li>ViteのMultiple-Page機能を使ってアプリを作る</li>\n<li>各Pageでは、そのページで使われてる最低限のJS・<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>のみを出力したい</li>\n</ul><p>つまり、</p>\n\n<ul>\n<li>たくさんのUIがあるPageA\n<ul>\n<li>JSも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>もそれなりのサイズになることが予想される</li>\n</ul></li>\n<li>ちょっとしたテキストがあるだけのPageB\n<ul>\n<li>JSはおろか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>のサイズもちょっとだけ</li>\n</ul></li>\n</ul><p>ということがしたかった。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Viteの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a></h3>\n    <p>あえて書くまでもないけど、`vite.config.js`でこういう指定をするだけ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> resolve <span class=\"synIdentifier\">}</span> = require(<span class=\"synConstant\">'path'</span>)\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> defineConfig <span class=\"synIdentifier\">}</span> = require(<span class=\"synConstant\">'vite'</span>)\n\nmodule.exports = defineConfig(<span class=\"synIdentifier\">{</span>\n  build: <span class=\"synIdentifier\">{</span>\n    rollupOptions: <span class=\"synIdentifier\">{</span>\n      input: <span class=\"synIdentifier\">{</span>\n        pageA: resolve(__dirname, <span class=\"synConstant\">'pageA/index.html'</span>),\n        pageB: resolve(__dirname, <span class=\"synConstant\">'pageB/index.html'</span>)\n      <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>)\n</pre>\n    <blockquote>\n        <p><a href=\"https://vitejs.dev/guide/build.html#multi-page-app\">https://vitejs.dev/guide/build.html#multi-page-app</a></p>\n\n    </blockquote>\n<p>こうすると、</p>\n\n<ul>\n<li>`pageA/index.html`からなる一連の依存グラフによるページ</li>\n<li>`pageB/index.html`からなる一連の依存グラフによるページ</li>\n</ul><p>それぞれが生成されるようになる。</p><p>あとは互いを単なる`a[href]`でつなげれば、SPAではないけど、あたかも1つのアプリのように見せることができる。</p><p>これがなかなかに気の利くやつで、例えばこのアプリをReactでやってた場合、それはAでもBでも使われる共通のチャンクに入れて最適化してくれたりする。<br />\nAにはいろんなUIがあってバンドルサイズが多少ふくらんでも、BにそれがないならBは小さいままになる。いい感じ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>最適化されない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a></h3>\n    <p>最適化される = 冒頭で書いたやりたいことが実現できるということ。</p><p>正確には、Viteがデフォルトでサポートしてる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> Modulesの仕組みだと、JSと一緒でちゃんと最適化される。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> in JSの場合も、もちろんそれはもはやJSなので、最適化される。</p><p>記事タイトルにもあるように、Tailwindを使った場合だけが問題。</p><p>というのを検証した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>がこちら！</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/vite-mpa-tailwind-css-bundle-size\">GitHub - leader22/vite-mpa-tailwind-css-bundle-size</a></p>\n\n    </blockquote>\n<p>READMEに`vite build`のログを貼ってあるけど、AとBで同じサイズの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>が出力されてしまってる・・。<br />\nAではたくさんのユーティリティクラスを書いてて、Bではほとんど書いてないのにも関わらず。</p>\n\n</div>\n<div class=\"section\">\n    <h3>原因</h3>\n    <p>従来の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>は、</p>\n\n<ul>\n<li>使うものを自分で定義</li>\n<li>ソースにもそれをそのまま書く</li>\n<li>そしてバンドルする</li>\n</ul><p>いわば<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%E0%A5%A2%A5%C3%A5%D7\">ボトムアップ</a>のアプローチで、書き手にすべてが委ねられてた。</p><p>Tailwindはその反対で、</p>\n\n<ul>\n<li>デフォルトで莫大なカタログが用意されてる</li>\n<li>必要なものをソースに書く</li>\n<li>使われてるものだけをバンドルする</li>\n</ul><p>っていう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%C3%A5%D7%A5%C0%A5%A6%A5%F3\">トップダウン</a>なアプローチになってる。</p><p>なので、Tailwindで最終的なバンドルサイズを削減するためには、使われてるものを明示して後は捨てるための`purge`の指定が必須。<br />\nさもないと、ものすごい数のユーティリティクラスがバンドルされてしまう。</p><p>で、この指定は`tailwind.config.js`で静的に対象ファイルのリストを定義する必要がある。`[\"./app1/**/*.jsx\"]`みたいに。</p><p>そして、その`tailwind.config.js`が`postcss.config.js`から参照されて、それが`vite.config.js`で参照される。<br />\nここに、「今どのページのための<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>をバンドルしてるのか？」っていう実行コンテキストの概念がないのが原因。</p><p>ページAのための<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>を処理してるなら、`purge`にはAで使ってるファイル群だけが列挙されてほしい。<br />\nしかし、設定ファイルがいわばグローバルなので、せめてもの抵抗として全ページを並べるしかない・・。</p><p>その結果できあがるのは、`全ページの最大公約数.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/css\">css</a>`であり、ぜんぜんUIのないページBにおいてもそれが使われてしまう・・というわけ。</p><p>そもそも、グローバルで後からふるい落とすっていうTailwindの考え方が、Viteやそれ系のLoader/Pluginの考え方にマッチしてないだけなのかなーとは思う。<br />\n実行コンテキストも何も、そんな概念にとらわれずに`.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/css\">css</a>`だけ処理すればいいはずちゃうんけ！って。私もそう思います。</p>\n\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EF%A1%BC%A5%AF%A5%A2%A5%E9%A5%A6%A5%F3%A5%C9\">ワークアラウンド</a></h3>\n    <p>と言ってしまっていいのか微妙やけど、いちおう。</p><p>というのは、</p>\n\n<ul>\n<li>`vite build`でViteに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>をビルドしてもらう</li>\n<li>その後で、自分でも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>をビルドして、同名で上書きする</li>\n</ul><p>というもの。<br />\n開発中は無駄なサイズを気にしないことにして、ビルド時にだけつじつま合わせをする作戦。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>NODE_ENV=production ./node_modules/.bin/tailwindcss \\\n  -i ./app2/style.css \\\n  -o ./dist/assets/app2.74ba676f.css \\\n  --minify \\\n  --purge ./app2/**/*.jsx</pre><p>こういうコマンドのイメージ。<br />\n実際には上書きするファイル名は動的に変わるので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>でやるにはちゃんと書き換えが必要ではある。</p><p>ちなみにNextの場合も考えてみたけど、たぶん同様にページ単位で最適化することはできなくて、アプリ単位になっちゃうと予想。</p><p>あ〜誰かなんとかしてくれますように☆（別にTailwind推しでもなんでもない勢より）</p>\n\n</div>"
}
