{
  "title": "なんでもSPAにするんじゃねぇ！という主張のその先",
  "html": "<p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"en\" dir=\"ltr\">Your shopping <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/website\">website</a> is not an SPA.<br><br>I repeat: your shopping <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/website\">website</a> is not an SPA.<br><br>Stop trying to sculpt David with a  JS chainsaw and get yourself an HTML/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> chisel.</p>&mdash; Alex Russell (@slightlylate) <a href=\"https://twitter.com/slightlylate/status/1425131555874291717?ref_src=twsrc%5Etfw\">2021年8月10日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p><p>この主張、界隈（少なくとも自分の観測範囲）では割とよく見かけるし、なんか定期的に話題になるトピックなのかなーと。</p><p>まあ持論としてもコレには概ね同意しており、会社のスタンスとも相まって、常日頃からぼんやり考えてたりすることでもある。</p><p>で、そんな折にこのツイートを発見して、さらにそれに言及してる人々を見て、ふと自分でも現状を整理しておきたいなーという気持ちになったので筆を執った次第。</p><p>つまりそういうポエムです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>元ツイの内容ざっくり</h3>\n    \n<ul>\n<li>ショッピングサイトをSPAにするんじゃない！\n<ul>\n<li>JSというチェーンソーで彫刻を作ろうとしてるようなもん</li>\n</ul></li>\n<li>SPAにできるからといって、SPAにしていいってもんではないのだ\n<ul>\n<li>自家用車にロケットブースター載せるか？</li>\n</ul></li>\n<li>これはロースペックな環境や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/EC%A5%B5%A5%A4%A5%C8\">ECサイト</a>をずっとやってきての経験</li>\n<li>イマドキのWeb開発っていうと、ReactでReduxでGraphQLで・・ってなりがち</li>\n<li>JSをオフにしてぜんぶ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>しろ\n<ul>\n<li>a11yとかはひと手間いるかもしらんけども</li>\n</ul></li>\n<li>それでも動的な部分は必要ではって？\n<ul>\n<li>わかった、じゃあチームの中の限られたメンバーでだけ使え</li>\n<li>パフォーマンスを保証する前提でなら、JSを使ってもよい</li>\n</ul></li>\n<li>なんしかJSは限られたところでだけ使え\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EB%A5%B9%A5%BF\">フルスタ</a>ック？フルストップの間違いでは？</li>\n</ul></li>\n<li>いいからJSは用法用量を守って使え！</li>\n</ul><p>という感じに激おこ・・！けど、まあその気持ちもわかるわ〜って感じ。</p><p>というところを、Solid.jsの中の人であり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>のコ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%F3%A5%D0%A1%BC\">アメンバー</a>でもある`@RyanCarniato`氏が言及してたのを発見。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Ryan氏の言及スレざっくり</h3>\n    <p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"en\" dir=\"ltr\">Almost. Even better get yourself an <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a> framework. <a href=\"https://twitter.com/MarkoDevTeam?ref_src=twsrc%5Etfw\">@MarkoDevTeam</a>, the best way build dynamic isomorphic MPAs with modern <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>. <a href=\"https://t.co/IQ0BunExHn\">https://t.co/IQ0BunExHn</a></p>&mdash; Ryan Carniato (@RyanCarniato) <a href=\"https://twitter.com/RyanCarniato/status/1425299209255673859?ref_src=twsrc%5Etfw\">2021年8月11日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p>\n\n<ul>\n<li>そういうケースは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a>でやるのがよい</li>\n<li>そして今のところ、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>がベストな選択肢だと思ってる\n<ul>\n<li>もちろん誇張してるところはあるけど</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>ってそういうところやし</li>\n</ul></li>\n<li>たとえば競合を並べてみる\n<ul>\n<li>AstroとかElder.jsがあるのは知ってる</li>\n<li>Qwikも最近出てきたところ</li>\n</ul></li>\n<li>いわゆるSPA出自なツールは軸足が違う認識なので外す\n<ul>\n<li>Next, Nuxt, SvelteKit</li>\n</ul></li>\n<li>Astroはその仕組みの中でこれらのUIライブラリを使えるのがよい\n<ul>\n<li>けどまだ始まったばかりのプロジェクト</li>\n</ul></li>\n<li>この気持ちは2012-2013年くらいに感じたやつに近い\n<ul>\n<li>Reactが出てきて、SPAすごい！みたいな時期</li>\n</ul></li>\n<li>あの頃と違うのは、青写真が既にあること\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>はこの分野をもう7年近くもやってる</li>\n</ul></li>\n<li>近いうちにくるトレンドとして予想してるのは、以下をすべて満たす仕組み\n<ul>\n<li>1. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>ドリブンで部分的hydrationできるもの</li>\n<li>2. 順不同・オンデマンドで遅延hydrationできるもの</li>\n<li>3. 任意に停止・再開できるhydrationができるもの</li>\n<li>4. ストリーミングで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>できるもの</li>\n</ul></li>\n<li>これを全部まとめてやるのは厳しいのでは？（という質問に対して）\n<ul>\n<li>現状、それぞれできてるもの、できてないものが別れてる</li>\n<li>1は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>で（AstroもElder.jsもできるような？）</li>\n<li>2はAstroとQwikで</li>\n<li>3は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>とQwikで</li>\n<li>4は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>で</li>\n</ul></li>\n</ul><p>とのこと。</p><p>同じ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a>推しの人がいることがわかってよかった。</p>\n\n<div class=\"section\">\n    <h4>補足: <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a>（MultiPageApplication）</h4>\n    <p>ここでいう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a>は、複数のHTMLファイルからなるページで、1つのアプリ・サイトを構成するやり方のこと。各ページ間は単なる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CF%A5%A4%A5%D1%A1%BC%A5%EA%A5%F3%A5%AF\">ハイパーリンク</a>で、互いに依存しない。</p><p>SPAはその反対に、1つのHTMLファイルが全ページをまかない1つのアプリを構成するやり方。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a>な構成は個人的にも推してて、去年のこの記事も大まかに同じ趣旨だった。</p>\n\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2020/09/25/102314\">&#x9759;&#x7684;&#x30B5;&#x30A4;&#x30C8;&#x30B8;&#x30A7;&#x30CD;&#x30EC;&#x30FC;&#x30BF;&#x3001;&#x3082;&#x3068;&#x3044;MPA&#x5411;&#x3051;better webpack&#x3068;&#x3057;&#x3066;&#x306E;Next.js - console.lealog();</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>補足: <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a></h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/marko-js/marko\">GitHub - marko-js/marko: A declarative, HTML-based language that makes building web apps fun</a></p>\n\n    </blockquote>\n<p>国内ではあんまり話題になってないイメージではあるけど、あのeBay社がやってる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OSS\">OSS</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>。</p>\n\n<ul>\n<li>Svelte同様、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>して使う</li>\n<li>クライアントにはJSが必要な部分のコードだけ小さく返せる</li>\n<li>HTMLライクな独自の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>を`.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/marko\">marko</a>`ファイルに書く\n<ul>\n<li>ただSvelteと違って、完全に独自<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a></li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>した結果はストリーミングして返すこともできる</li>\n<li>基本的には`node build.js`的な感じでサーバーを建てて使うデザイン</li>\n</ul><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>がものすごくチューニングされてて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>は`import`せずにどこでも使えたり、事細かく`webpack`したチャンクを吐けるとのこと。</p><p>特に、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>した結果を真にストリーミング（HTTPの`Transfer-Encoding: chunked`）で返せるのは、現状だと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>だけらしい。</p>\n\n</div>\n<div class=\"section\">\n    <h4>補足: Astro, Elder.js, Qwik</h4>\n    \n<ul>\n<li><a href=\"https://github.com/snowpackjs/astro\">https://github.com/snowpackjs/astro</a></li>\n<li><a href=\"https://github.com/Elderjs/elderjs\">https://github.com/Elderjs/elderjs</a></li>\n<li><a href=\"https://github.com/builderio/qwik\">https://github.com/builderio/qwik</a></li>\n</ul><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>と同じグループとされていた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>たち。<br />\n比較対象のグループには、NextとかNuxtとかSvelteKitとか、いわゆる有名どころが並ぶ。</p><p>これらはどれも独自のコンセプトがあって、人類の発想力はすごいな・・ってなるので要チェック。</p>\n\n</div>\n<div class=\"section\">\n    <h4>補足: ○○ Hydration</h4>\n    <p>Hydrationとは、事前<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>された状態（乾いてる）に、お湯をかけて戻すイメージで、クライアントサイドでJSのイベントリスナを設定したり状態を復元したりと、JSを実行すること。</p><p>Nextとかの場合、その後のルーティングのためにその分のコードが落ちてきてて、このタイミングで実行される。SvelteKitは設定でこれを完全に落とすこともできるけど、これらは基本的にはページ単位でしか制御できない。</p><p>つまり、ページの大部分は事前<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>しておける静的なので、動的なところだけを部分的に（Partial）Hydrationしたい、JS減らしたいって思っても、それができない。</p><p>あとはそのHydrationをするタイミングも、物によってはページロード時である必要はなかったりもする。</p>\n\n<ul>\n<li>スクロールされて画面表示されたら</li>\n<li>幅狭い端末だったら</li>\n<li>etc..</li>\n</ul><p>そういう意味で、遅延（Lazy）Hydrationできると、なお嬉しいって感じ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>なんでもSPAにするんじゃねぇ！について</h3>\n    <p>基本的には同意する。</p><p>SPAじゃなくてよいものをSPAにしないというのは、ちゃんと技術選定・設計するということで、やって当たり前。思考停止でなんでもSPAにするのはダメ以前に問題外で、エンジニアならちゃんとエンジニアリングしないといけない。</p><p>というかフォーマットはなんであれ、キャッシュできない巨大なファイルをクライアントに送るのは避けたい。<br />\n後のDXに影響を与えかねない一枚岩のコードベースになる可能性があるのも怖い。</p><p>ただしその帰着として「ぜんぶ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>にしろ」っていうのは、ちょいと極論過ぎやしませんかね・・ってスタンスです。</p><p>じゃあどうするか。</p>\n\n</div>\n<div class=\"section\">\n    <h3>そういえばJamstackっていうのが</h3>\n    <p>（Jamstackの定義も、いつまでたっても人によるけどもさておき）</p><p>事前に生成できるものを生成しておくというのは、どんな構成であろうともやればよい。静的コンテンツは正義。</p><p>ただ、更新頻度によってはそれが現実的に叶わないというのもわかってて、サイト・アプリのすべてをクラシックなJamstackとして事前<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>で構成できるサイト（notアプリ）は、相当限られると思う。</p><p>もしそういう真に静的コンテンツのみで構成されるサイトがあるなら、それこそEleventyとか使ってJSとは無縁の世界に暮せばよい。現世にはないと思ってるけど・・。（WebComponentsでワンチャン！って一瞬思ったけどすぐ考え直した）</p><p>てなわけで、「静的な部分もあるけど、動的な部分もあるのだ」っていうのこそ一般的で、そこをどうするか考えるところからっていうケースが多いなーと最近は思う。</p>\n\n</div>\n<div class=\"section\">\n    <h3>そこで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a>ですよ</h3>\n    <p>という結論である点は、Ryan氏と同じことを考えていたのだなあと。</p>\n\n<ul>\n<li>事前に生成できるものは静的にしておく</li>\n<li>ちょっとした動的部分は、できれば部分的にHydrationする</li>\n<li>複雑なところは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a>の中でSPAにすればいい</li>\n</ul><p>というのが、ちょうどいいかなーと思ってる今日このごろ。</p><p>ただまあ実際の案件（特に受託）だと、部分的にHydrationできるような攻めたツールは選べないことが多くて。</p>\n\n<ul>\n<li>？？？「初期の開発はお願いしたいけど、その後は内製したいから、とりあえずReact（Next）でお願いします」</li>\n<li>わたし「アッ、はい・・（ここに思い浮かんだ言葉を入れてね）」</li>\n</ul><p>というわけでなので、「Nextをexport専用のbetter webpackとして使って<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a>にしつつ、せめて中身はPreactにすることで、フルHydrationすることになってもちょっと軽い」っていう妥協点が、自分の中での鉄板な選択肢になってる感じはある。</p><p>Astro〜はやくきてくれ〜。</p>\n\n</div>\n<div class=\"section\">\n    <h3>やっぱり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>はナシなのか</h3>\n    <p>そういえば昔、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>なんかいらないかもっていう記事を書いたことがあった。</p><p>でもあれは、</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>自体が不要というわけではない</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B6%E4%A4%CE%C3%C6%B4%DD\">銀の弾丸</a>ではないので、誰しもが飛びつくものではないということ</li>\n<li>そのコストを承知の上で採用するのは構わない</li>\n</ul><p>というのが主旨であって、そのスタンスは今も変わってない。自分のこれまでの仕事で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>の必要性に駆られたことがないがゆえのバイアスは否めないとも思うけど。</p><p>とことんパフォーマンスを追求するなら、部分的HydrationよりもJS不要のフル<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>のほうがパフォーマンスがいいのは自明なので。運用の難易度は高いとしても。</p><p>ただそのあとでやっぱHydrationしたい・・となると、そういう仕組みからまた必要になるわけで、その結果eBayみたいなところが自社用に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>を作るのは合点がいくなーって思った。</p>\n\n    <blockquote>\n        <p><a href=\"https://dev.to/this-is-learning/building-javascript-frameworks-to-conquer-ecommerce-3glc\">Building JavaScript Frameworks to Conquer eCommerce - DEV Community</a></p>\n\n    </blockquote>\n<p>あとNextとかSvelteKitとかは、初回だけ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>しつつあとはSPAを返すデザインなので、ここでいうフル<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>とはまたちょっと違うよなーとも。</p><p>そのあたりの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>よもやまについては、同じくRyan氏のこの記事シリーズが示唆に富んでてよかった。</p>\n\n    <blockquote>\n        <p><a href=\"https://dev.to/ryansolid/series/13734\">Server Rendering in JavaScript Series&#39; Articles - DEV Community</a></p>\n\n    </blockquote>\n<p>「我々はJSなんか使わん！フル<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>で最軽量最速を目指すんや！」ってなったら、今だとやっぱ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a> EdgeのWorkerでやるのが理想なんかな？Cloudflare Workersの`HTMLRewritter`とか、ばっちりその用途っぽいし。</p><p>そこまで攻めきれない、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>用サーバーなんかメンテしたくない（できない）勢としては、やはり事前<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>+（部分的）Hydrationな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a>っていう構成が、あらゆる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1\">コスパ</a>がよくてしっくりきてる。</p><p>はてさて、この先はどうなることやら。</p>\n\n</div>"
}
