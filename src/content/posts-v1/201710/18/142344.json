{
  "title": "MediaStreamをMediaRecorderでWebMにして定期的にサーバーに送ってMPEG-TSにして最終的にHLSで配信する",
  "html": "<p>っていう実験を弊社の開発合宿でやったので、その学びをメモっておきます。</p><p>最近こういうわかりやすいようでわからないタイトルの記事が多い気がする・・。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>構想</h3>\n    \n<ul>\n<li>`getUserMedia()`でローカルストリームをとってもいいし</li>\n<li>WebRTCでつないでリモートストリームをとってもいいし</li>\n<li>なんしかMediaStreamをMediaRecorderでWebMにして</li>\n<li>定期的にサーバーに送ってその都度<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPEG\">MPEG</a>-TSに変換</li>\n<li>最後にHLSの`.m3u8`を手書きして配信</li>\n</ul><p>過去に似たようなことをやってる人は既にいたので、若干のネタ被り感はある。</p>\n\n<div class=\"section\">\n    <h4>Inspired by</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/JosePedroDias/webcam2hls\">GitHub - JosePedroDias/webcam2hls: serve your webcam via the MediaStream Recording API on the browser, will send webm videos to the server which will generate HLS stream for playback</a></p>\n\n    </blockquote>\n<p>2014年の作品。</p>\n\n<ul>\n<li>WebMを一括でサーバーに送って変換するタイプ</li>\n</ul><p>単純に`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ffmpeg\">ffmpeg</a>`で変換すればいいのはわかってたけど、それだと長時間録画で死ぬ気がしたのでそこが差異。<br />\nあと内容が古いからか動かなかった・・。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.slideshare.net/mganeko/media-recorder-and-webm\">MediaRecorder &#x3068; WebM &#x3067;&#x3001;&#x30AA;&#x30EC;&#x30AA;&#x30EC; Live Streaming</a></p>\n\n    </blockquote>\n<p>2015年のがねこさんの作品。</p><p>MediaRecorderの辛さはここで先に知ってたけど、2017年になってるし何か変わってるかも・・？という期待もあった。</p><p>いくつかのパターンが試行されてて、</p>\n\n<ul>\n<li>WebMをWebMのまま定期的に再生するタイプ</li>\n<li>WebMをサーバーで単一ストリームにためて、それを返すタイプ</li>\n</ul><p>ただ前者はフォーマット的な問題があるし、後者はいつまでもレスポンスが返ってこないことになるので微妙だなーと。</p><p>というわけで、今回の構想は中々いいラインを攻めてるのではないかなーと思ってた。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>結果</h3>\n    <p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fleader22%2Fms2hls\" title=\"leader22/ms2hls\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/leader22/ms2hls\">github.com</a></cite></p><p>成功といえば成功、失敗といえば失敗かなーという感じ。</p><p>セグメントを適切な長さで送ってるので、クライアント・サーバーともに処理の負荷は大し<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A4%BF%A4%B3\">たこ</a>とないし、通信量も抑えられてるので、長時間の録画にも向いてる。<br />\n試しに録画した分だと45分は撮れてたし、理論上はもっと長くても問題ないはず。</p><p>リモートのストリームも問題なく録画できるので、出先とかイベントで「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iPhone\">iPhone</a>からざっくり撮ったものを、後から見返したい」っていう当初の目標は達成できた。<br />\nただひとつ失敗かなーと思うのは、最終的な成果物であるHLS形式のアセット一式が、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>でしか再生できなかっ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A4%BF%A4%B3\">たこ</a>と。</p><p>HLS.jsを通すと最初のセグメントしか再生されず、動画の合計時間も上手く取得できないような挙動に・・なんでやろう・・。<br />\nHLS.jsがエラーを吐くわけでもないので、メディア側の問題なんやろーとは思うけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>で再生できるからなーなんでやろう・・。</p><p>`.m3u8`の記述には問題ないはず・・なので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPEG\">MPEG</a>-TSのトランスコード（`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ffmpeg\">ffmpeg</a>`の設定）で何か足りなかったんだろうか・・。</p><p>ちなみに、単一の`.webm`を`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ffmpeg\">ffmpeg</a>`でセグメントに一括分割するパターンだと上手く再生されるので、やっぱりトランスコードまわりかなー。</p>\n\n</div>\n<div class=\"section\">\n    <h3>学び</h3>\n    <p>合宿で発表した資料があるのでそちら参照です。</p>\n\n    <blockquote>\n        <p><a href=\"https://leader22.github.io/slides/pxg_camp-2017b/\">MediaStream to HttpLiveStreaming</a></p>\n\n    </blockquote>\n<p>3行でまとめると、</p>\n\n<ul>\n<li>MediaRecorderは<s>クソ</s>まだまだ</li>\n<li><a href=\"https://github.com/fastify/fastify\">https://github.com/fastify/fastify</a> いいやん</li>\n<li>録画したいなら某社みたくサーバーでやれ</li>\n</ul><p>って感じでした。</p>\n\n</div>"
}
