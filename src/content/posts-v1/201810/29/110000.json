{
  "title": "続・React x MobXな趣味プロダクトをTypeScriptでリライトした",
  "html": "\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2018/01/09/155747\">React x MobX&#x306A;&#x8DA3;&#x5473;&#x30D7;&#x30ED;&#x30C0;&#x30AF;&#x30C8;&#x3092;TypeScript&#x3067;&#x30EA;&#x30E9;&#x30A4;&#x30C8;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x305F; - console.lealog();</a></p>\n\n    </blockquote>\n<p>という記事を書いてから9ヶ月が経った・・・。</p><p>ただ今回は「リライトしようとしてた」ではなく、今度こそついに「リライトした」ので、その過程やらハマりどころをメモっておく。</p><p>前回の記事はもう古くなってると思うので、読まなくていいですｗ<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>どんなプロダクトなの</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/leader22/mmss-client/\">GitHub - leader22/mmss-client</a></p>\n\n    </blockquote>\n\n<ul>\n<li>個人で借りてる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VPS\">VPS</a>に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%C3%A5%D4%A5%F3%A5%B0\">リッピング</a>したmp3をバックアップしてる（たぶん300GBくらいある）</li>\n<li>それをよしなにプレイリスト化した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSON\">JSON</a>ファイルで動くオレオレ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iTunes\">iTunes</a></li>\n<li>機能は少ないけど、なんだかんだ毎日使ってる</li>\n</ul><p>なので、TodoAppを小規模というなら、中の下くらいの規模。</p><p>TSでリライトしようと思った動機は、単に時間があったのと、Reactが恋しくなったから・・。</p>\n\n<div class=\"section\">\n    <h4>depsは変わらず</h4>\n    <pre class=\"code\" data-lang=\"\" data-unlink>&#34;mobx&#34;: &#34;^5.5.2&#34;,\n&#34;mobx-react&#34;: &#34;^5.3.6&#34;,\n&#34;react&#34;: &#34;^16.6.0&#34;,\n&#34;react-dom&#34;: &#34;^16.6.0&#34;,\n&#34;styled-components&#34;: &#34;^4.0.2&#34;</pre><p>強いて言うなら`post-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/css\">css</a>`をやめて、`styled-components`にした。<br />\nやっぱすべてをJS界で完結できるのはすごい楽。</p>\n\n</div>\n<div class=\"section\">\n    <h4>`@babel/preset-typescript`</h4>\n    <p>`ts-loader`も`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/awesome\">awesome</a>-typescript-loader`も使わずに、Flow感覚でTypeScriptが使えると噂のアレです。</p><p>厳密にはTypeScriptの全機能が使えるわけではないけども、一般的な型付けはできるし、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>もしないからビルドも早いし最高！</p><p>まあこの規模なら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>したとて・・って感じとは思うけど、いよいよ個人的にFlowを使う理由がなくなったなー。</p><p>Babelはほんとこれだけのために利用してて、あとはいつもどおりWebpackでポン。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ハマったシリーズ</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>しないTypeScriptで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーになるのばっかなので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B1%A5%A2%A5%EC%A5%B9%A5%DF%A5%B9\">ケアレスミス</a>な可能性も大いにあり。なんかわかったらぜひ教えてください。</p>\n\n<div class=\"section\">\n    <h4>TypeScript と styled-components と Ref</h4>\n    <p>問題のコードがこちら。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">class</span> Audio <span class=\"synStatement\">extends</span> React.Component<span class=\"synStatement\">&lt;</span>Props<span class=\"synStatement\">&gt;</span> <span class=\"synIdentifier\">{</span>\n  elRef: React.RefObject<span class=\"synStatement\">&lt;</span>HTMLAudioElement<span class=\"synStatement\">&gt;;</span>\n\n  <span class=\"synStatement\">constructor(</span>props: Props<span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">super(</span>props<span class=\"synStatement\">);</span>\n\n    <span class=\"synIdentifier\">this</span>.elRef <span class=\"synStatement\">=</span> React.createRef<span class=\"synStatement\">();</span>\n  <span class=\"synIdentifier\">}</span>\n\n  render<span class=\"synStatement\">()</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> src<span class=\"synStatement\">,</span> onEnded <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">this</span>.props<span class=\"synStatement\">;</span>\n\n    <span class=\"synStatement\">return</span> <span class=\"synStatement\">(</span>\n      <span class=\"synStatement\">&lt;</span>Wrap\n        ref<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{this</span>.elRef<span class=\"synIdentifier\">}</span> <span class=\"synComment\">// ココが型エラーになる</span>\n        autoPlay\n        controls\n        controlsList<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;nodownload&quot;</span>\n        src<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>src<span class=\"synIdentifier\">}</span>\n        onEnded<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>onEnded<span class=\"synIdentifier\">}</span>\n      /<span class=\"synStatement\">&gt;</span>\n    <span class=\"synStatement\">);</span>\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">const</span> Wrap <span class=\"synStatement\">=</span> styled.audio<span class=\"synConstant\">`</span>\n<span class=\"synConstant\">  width: 100%;</span>\n<span class=\"synConstant\">  vertical-align: top;</span>\n<span class=\"synConstant\">`</span><span class=\"synStatement\">;</span>\n</pre><p>コメントにもあるように`ref`を取ってるところで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーになる。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>Type &#39;RefObject&lt;HTMLAudioElement&gt;&#39; is not assignable to type &#39;string | (string &amp; RefObject&lt;HTMLAudioElement&gt;) | (string &amp; ((instance: HTMLAudioElement | null) =&gt; any)) | (((instance: Component&lt;ThemedOuterStyledProps&lt;DetailedHTMLProps&lt;AudioHTMLAttributes&lt;HTMLAudioElement&gt;, HTMLAudioElement&gt;, any&gt;, any, any&gt; | null) =&gt; any) &amp; string) | ... 5 more ... | undefined&#39;.\n  Type &#39;RefObject&lt;HTMLAudioElement&gt;&#39; is not assignable to type &#39;RefObject&lt;Component&lt;ThemedOuterStyledProps&lt;DetailedHTMLProps&lt;AudioHTMLAttributes&lt;HTMLAudioElement&gt;, HTMLAudioElement&gt;, any&gt;, any, any&gt;&gt; &amp; ((instance: HTMLAudioElement | null) =&gt; any)&#39;.\n    Type &#39;RefObject&lt;HTMLAudioElement&gt;&#39; is not assignable to type &#39;RefObject&lt;Component&lt;ThemedOuterStyledProps&lt;DetailedHTMLProps&lt;AudioHTMLAttributes&lt;HTMLAudioElement&gt;, HTMLAudioElement&gt;, any&gt;, any, any&gt;&gt;&#39;.\n      Type &#39;HTMLAudioElement&#39; is not assignable to type &#39;Component&lt;ThemedOuterStyledProps&lt;DetailedHTMLProps&lt;AudioHTMLAttributes&lt;HTMLAudioElement&gt;, HTMLAudioElement&gt;, any&gt;, any, any&gt;&#39;.\n        Property &#39;setState&#39; is missing in type &#39;HTMLAudioElement&#39;.</pre><p>使い方はたぶんあってると思うので、`styled-components`の型がおかしいとは思うけど、よくわからん。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.styled-components.com/docs/advanced#refs\">styled-components: Advanced Usage</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EF%A1%BC%A5%AF%A5%A2%A5%E9%A5%A6%A5%F3%A5%C9\">ワークアラウンド</a>は、`Wrap`じゃなくて`audio`をそのまま使って、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>を`inherit`とかでごまかす。</p>\n\n</div>\n<div class=\"section\">\n    <h4>TypeScript と mobx（とmobx-react）</h4>\n    <p>2つあります。</p>\n\n<div class=\"section\">\n    <h5>`ObservableArray` の初期化</h5>\n    <pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> decorate<span class=\"synStatement\">,</span> observable<span class=\"synStatement\">,</span> IObservableArray <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">'mobx'</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> Song <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">'../../../shared/typings/mmss'</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">class</span> Finder <span class=\"synIdentifier\">{</span>\n  songs: IObservableArray<span class=\"synStatement\">&lt;</span>Song<span class=\"synStatement\">&gt;;</span>\n\n  <span class=\"synStatement\">constructor()</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>.songs <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">[]</span><span class=\"synStatement\">;</span> <span class=\"synComment\">// ココが型エラーになる</span>\n  <span class=\"synIdentifier\">}</span>\n\n  initSongs<span class=\"synStatement\">(</span>songs: Song<span class=\"synIdentifier\">[]</span><span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>.songs.replace<span class=\"synStatement\">(</span>songs<span class=\"synStatement\">);</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\ndecorate<span class=\"synStatement\">(</span>Finder<span class=\"synStatement\">,</span> <span class=\"synIdentifier\">{</span>\n  songs: observable.shallow<span class=\"synStatement\">,</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> Finder<span class=\"synStatement\">;</span>\n</pre><p>エラーはこう。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>Type &#39;never[]&#39; is not assignable to type &#39;IObservableArray&lt;Song&gt;&#39;.\n  Property &#39;spliceWithArray&#39; is missing in type &#39;never[]&#39;.</pre><p>空配列が`never`の配列になっちゃう。</p><p>`strictNullChecks: true`なせいでこうなるっぽい記事を見かけたけど、そう言われてもなーという。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EF%A1%BC%A5%AF%A5%A2%A5%E9%A5%A6%A5%F3%A5%C9\">ワークアラウンド</a>は、問題の行を次のように。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">// this.songs = [];</span>\n<span class=\"synIdentifier\">this</span>.songs <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">[]</span> <span class=\"synStatement\">as</span> unknown<span class=\"synIdentifier\">[]</span> <span class=\"synStatement\">as</span> IObservableArray<span class=\"synStatement\">&lt;</span>Song<span class=\"synStatement\">&gt;;</span>\n</pre><p>なんだかなー。</p>\n\n</div>\n<div class=\"section\">\n    <h5>`private` と `decorate()` の組み合わせ</h5>\n    <p>これも謎い。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> decorate<span class=\"synStatement\">,</span> observable<span class=\"synStatement\">,</span> computed <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">'mobx'</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">class</span> Ui <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">private</span> isHoverPlayer: <span class=\"synType\">boolean</span><span class=\"synStatement\">;</span>\n  <span class=\"synStatement\">private</span> isHoverPlaylist: <span class=\"synType\">boolean</span><span class=\"synStatement\">;</span>\n\n  <span class=\"synStatement\">constructor()</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>.isHoverPlayer <span class=\"synStatement\">=</span> <span class=\"synConstant\">false</span><span class=\"synStatement\">;</span>\n    <span class=\"synIdentifier\">this</span>.isHoverPlaylist <span class=\"synStatement\">=</span> <span class=\"synConstant\">false</span><span class=\"synStatement\">;</span>\n  <span class=\"synIdentifier\">}</span>\n\n  get isPlaylistShown<span class=\"synStatement\">()</span>: <span class=\"synType\">boolean</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>.isHoverPlayer <span class=\"synConstant\">||</span> <span class=\"synIdentifier\">this</span>.isHoverPlaylist<span class=\"synStatement\">;</span>\n  <span class=\"synIdentifier\">}</span>\n\n<span class=\"synIdentifier\">}</span>\n\ndecorate<span class=\"synStatement\">(</span>Ui<span class=\"synStatement\">,</span> <span class=\"synIdentifier\">{</span>\n  isHoverPlayer: observable<span class=\"synStatement\">,</span> <span class=\"synComment\">// ココが型エラーになる</span>\n  isHoverPlaylist: observable<span class=\"synStatement\">,</span>\n  isPlaylistShown: computed<span class=\"synStatement\">,</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> Ui<span class=\"synStatement\">;</span>\n</pre><p>エラーこちら。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>Argument of type &#39;{ isHoverPlayer: IObservableFactory &amp; IObservableFactories &amp; { enhancer: IEnhancer&lt;any&gt;; }; isHoverPlaylist: IObservableFactory &amp; IObservableFactories &amp; { enhancer: IEnhancer&lt;any&gt;; }; isPlaylistShown: IComputed; }&#39; is not assignable to parameter of type &#39;{ prototype?: MethodDecorator | PropertyDecorator | MethodDecorator[] | PropertyDecorator[] | undefined; }&#39;.\n  Object literal may only specify known properties, and &#39;isHoverPlayer&#39; does not exist in type &#39;{ prototype?: MethodDecorator | PropertyDecorator | MethodDecorator[] | PropertyDecorator[] | undefined; }&#39;.</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EF%A1%BC%A5%AF%A5%A2%A5%E9%A5%A6%A5%F3%A5%C9\">ワークアラウンド</a>は、`private`をやめるだけ。</p><p>TypeScriptの問題なのか、MobX側の型の問題なのかもわからず途方に暮れてます。（実害はないけど）</p><p>原因が自分の中ではっきりしてないのでどれもIssue立てたりはしてない。</p>\n\n</div>\n<div class=\"section\">\n    <h5>`inject()` したPropsが見えない</h5>\n    <p>これは前回の記事でも書いたのと同じ。<br />\n内容は割愛するけども、何も変わってなかったということをお伝えしたい。</p>\n\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3>思うところ</h3>\n    <p>MobXの使い勝手自体は特に変わりなく、これくらいの規模ならほんとにフィットしてて、必要最低限のコードでシュッと書けて良い感じかなーと思う。</p><p>まあ謎の型エラーをこうも踏んでしまって、次はなんか別のにしようかなという気持ちがないといえば嘘になるけど・・。</p><p>React Hooksでいろいろ変わるかもしれないし、大して変わらないかもしれんけど、まあぼちぼちやってこ。</p>\n\n</div>"
}
