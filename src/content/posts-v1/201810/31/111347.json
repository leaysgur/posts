{
  "title": "React Today and Tomorrow and 90% Cleaner React の要点まとめ",
  "html": "<p>React HooksにはじまりAlgebraic EffectsだFPだなんだと話題に事欠かない昨今ですが、そういうのは根本から見ていくに限る！ということで。</p><p>ReactConf2018のHooksが発表されたセッションを見ながら書いたメモです。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=dpw9EHDh2bM\">React Today and Tomorrow and 90% Cleaner React - YouTube</a></p>\n\n    </blockquote>\n<p>1時間半もあるんやでこの動画・・。<br />\nまあ実際は3人のスピーカーが交代で話してるので、3部作だったりする。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>React Today</h3>\n    \n<div class=\"section\">\n    <h4>Reactの歩み</h4>\n    \n<ul>\n<li>`npm i`される回数は年々70%もUPしてる</li>\n<li>採用企業も増えた</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a> Trendsではついに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>を抜いた</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Reactの使命</h4>\n    \n<ul>\n<li>よりよいUIを簡単に作れるようにすること</li>\n<li>そのために大事なこと3つ</li>\n<li>1. 複雑な要件を単<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BD%E3%B2%BD\">純化</a>できること\n<ul>\n<li>Suspenseはその好例</li>\n</ul></li>\n<li>2. パフォーマンスに優れている\n<ul>\n<li>Code splittingとかにも優しい</li>\n<li>Time Slicingなど<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>にも効く</li>\n</ul></li>\n<li>3. Devtoolsが手厚い\n<ul>\n<li>Profilerがついてる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Reactの課題</h4>\n    \n<ul>\n<li>1. 共通コードの取り回し問題</li>\n<li>現時点での解法としてよく見るのはこの2つ\n<ul>\n<li>HoC</li>\n<li>Render props</li>\n</ul></li>\n<li>ただしWrapper hellに陥りがち\n<ul>\n<li>= HoCがめちゃくちゃネストすること</li>\n</ul></li>\n<li>2. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の肥大化問題\n<ul>\n<li>主にLifecycleフックが膨れがち</li>\n<li>非同期処理とか、DOMさわったりとか</li>\n</ul></li>\n<li>3. class<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の扱い難しい問題\n<ul>\n<li>どの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>をいつ使えばいいのどう書けばいいの問題</li>\n<li>人間には早すぎた</li>\n<li>マシーンにも優しくない（HMRとか実装大変らしい）</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>React Tommorow</h3>\n    \n<div class=\"section\">\n    <h4>課題にどう立ち向かうか</h4>\n    \n<ul>\n<li>1つずつ解決することはできる\n<ul>\n<li>ただし1つが解決すると、もう1つが悪化することもある</li>\n</ul></li>\n<li>どうしよう？</li>\n<li>Reactがclass<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>よりシンプルな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を持ってないのが問題\n<ul>\n<li>Mixinっていう概念が昔あった</li>\n<li>でも失敗だった</li>\n<li><a href=\"https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html\">https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html</a></li>\n</ul></li>\n<li>新しいナニカが必要</li>\n</ul>\n<div class=\"section\">\n    <h5><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RFC\">RFC</a></h5>\n    \n<ul>\n<li>Reactに新機能を追加するときは、まず<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RFC\">RFC</a>を用意するようにした</li>\n<li>いきなり機能追加するのではなく、Proposalとして出す\n<ul>\n<li>なぜこの機能が必要か</li>\n<li>どういう経緯か</li>\n</ul></li>\n<li>コミュニティからのフィードバックを反映していく</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4>（どういう機能を追加しようとしてるかのデモ）</h4>\n    \n<ul>\n<li>Functional<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>でStateを持つにはどう書けばいい？</li>\n<li>現状だとできなくて、class<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を使うしかない</li>\n</ul><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> React from <span class=\"synConstant\">'react'</span>;\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> <span class=\"synStatement\">class</span> Greeting <span class=\"synStatement\">extends</span> React.Component <span class=\"synIdentifier\">{</span>\n  constructor(props) <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">super</span>(props);\n    <span class=\"synIdentifier\">this</span>.state = <span class=\"synIdentifier\">{</span> name: <span class=\"synConstant\">'Mary'</span> <span class=\"synIdentifier\">}</span>;\n    <span class=\"synIdentifier\">this</span>.onChangeName = <span class=\"synIdentifier\">this</span>.onChangeName.bind(<span class=\"synIdentifier\">this</span>);\n  <span class=\"synIdentifier\">}</span>\n\n  onChangeName(ev) <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>.setState(<span class=\"synIdentifier\">{</span> name: ev.target.value <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>\n\n  render() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> (\n      &lt;section&gt;\n        &lt;input\n          value=<span class=\"synIdentifier\">{this</span>.state.name<span class=\"synIdentifier\">}</span>\n          onChange=<span class=\"synIdentifier\">{this</span>.onChangeName<span class=\"synIdentifier\">}</span>\n        /&gt;\n      &lt;/section&gt;\n    );\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n<ul>\n<li>これを、Functional<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>でやりたい</li>\n<li>Hooksと呼んでる仕組みで解決すると、こう書ける</li>\n</ul><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> React, <span class=\"synIdentifier\">{</span> useState <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'react'</span>;\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> <span class=\"synIdentifier\">function</span> Greeting(props) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>name, setName<span class=\"synIdentifier\">]</span> = useState(<span class=\"synConstant\">'Mary'</span>);\n\n  <span class=\"synIdentifier\">function</span> onChangeName(ev) <span class=\"synIdentifier\">{</span>\n    setName(ev.target.value);\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synStatement\">return</span> (\n    &lt;section&gt;\n      &lt;input\n        value=<span class=\"synIdentifier\">{this</span>.state.name<span class=\"synIdentifier\">}</span>\n        onChange=<span class=\"synIdentifier\">{this</span>.onChangeName<span class=\"synIdentifier\">}</span>\n      /&gt;\n    &lt;/section&gt;\n  );\n<span class=\"synIdentifier\">}</span>\n</pre>\n<ul>\n<li>この2つの例の違い</li>\n<li>class<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の場合\n<ul>\n<li>`this`によるアクセスが発生</li>\n<li>`state`はオブジェクト</li>\n<li>`handler`も別途定義が必要</li>\n</ul></li>\n<li>Hooksを使う場合\n<ul>\n<li>`this`は存在しない</li>\n<li>`state`と`handler`は都度用意する</li>\n<li>`state`と`handler`はペアになってる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Hooks</h4>\n    \n<ul>\n<li>何がしたいのかがわかりやすい\n<ul>\n<li>あれこれやっちゃう関数みたいなのは作れない</li>\n<li>`state`なら`state`のことだけやる</li>\n<li>Lifecycleフックの中でごちゃごちゃもできない</li>\n</ul></li>\n<li>Hooksは呼び出し順に依存する</li>\n<li>なので`if`の中に書いたりはできない\n<ul>\n<li>Linterで検知できる</li>\n</ul></li>\n<li>Hooksは他にも種類がいくつかある</li>\n</ul>\n<div class=\"section\">\n    <h5>`useContext()`</h5>\n    \n<ul>\n<li>Context <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を使える</li>\n<li>Render propsではなくダイレクトに変数にできる</li>\n<li>つまりネストが減る</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>`useEffect()`</h5>\n    \n<ul>\n<li>Lifecycleフックの代わりになる\n<ul>\n<li>中でReactが用意してないことをする</li>\n</ul></li>\n<li>その<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>のスコープの内容を使って何かする</li>\n<li>複数のことをやりたい場合は複数のHooksにする\n<ul>\n<li>役割を持たせすぎないことを推奨</li>\n</ul></li>\n<li>関数を返すと、それが`componentWillUnmount()`の代わりになる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>チューニング</h5>\n    \n<ul>\n<li>この調子でHooksを増やしていくと、コードは肥大化する</li>\n<li>しかし幸いなことにこれらはすべてただの関数！</li>\n<li>切り出して使うことができる\n<ul>\n<li>`useXxx()`として切り出すのを推奨</li>\n<li>CustomHooksと呼んでる</li>\n<li>もちろん引数も渡せる</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4>Hooksまとめ</h4>\n    \n<ul>\n<li>class<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>でなくとも同等のことができる\n<ul>\n<li>class<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>が消えるわけではない</li>\n</ul></li>\n<li>共通コードは関数にしてしまえる</li>\n<li>使うか使わないかも自由\n<ul>\n<li>無理してまでコードを書き換えたりしないで</li>\n<li>今までと異なる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%F3%A5%C9%A5%BB%A5%C3%A5%C8\">マインドセット</a>が必要なので、最初は大変だと思う</li>\n</ul></li>\n<li>まだProposalではなるが、これからのReactになっていくもの</li>\n</ul>\n<div class=\"section\">\n    <h5>Reactのロゴ</h5>\n    \n<ul>\n<li>そういえば、なぜ原子（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>？）？</li>\n<li>組み合わさってはじめて具体化するもの</li>\n<li>Hooksも組み合わせにより<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を成す\n<ul>\n<li>Hooksを通して、Reactの真髄に触れるイメージ</li>\n</ul></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3>90% Cleaner React</h3>\n    \n<div class=\"section\">\n    <h4>Hooksを使ってリファクタ</h4>\n    \n<ul>\n<li>Render propsによるWrapper hellなコードを書き換え\n<ul>\n<li>class w/ MediaQueriesなコードもHooksできれいに</li>\n<li>`useEffect()`の第2引数で、`componentDidUpdate()`をカバー</li>\n</ul></li>\n<li>より実践的な例として、カ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BB%A5%EB\">ルーセル</a>のコードを書き換え\n<ul>\n<li>`useState()`がいっぱいでてきたらどうする？</li>\n<li>`useReducer()`があるよ</li>\n<li>Refには`useRef()`があるよ</li>\n</ul></li>\n<li>まだ全ての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>を把握できてるわけではない\n<ul>\n<li>フィードバック待ってます</li>\n</ul></li>\n</ul><p>ライブコーディングなので動画見たほうが早いですね・・！</p>\n\n</div>\n</div>"
}
