{
  "title": "ReactのSWRで、複数のキーをまとめてmutateしたい",
  "html": "<p>たとえばページングが必要なリストがあって、そのリストをどこかで増減させた場合。</p><p>いま見てるページに関わらず、全てのリストを最新のものにしたい・・って話。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>でも渡せればいいけど、`mutate()`には単一の文字列キーしか渡せないので、さてどうするか？<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>力ずくでやる</h3>\n    <p>というのが、現状ではドキュメントにも載ってる正解の方法らしい。</p>\n\n    <blockquote>\n        <p><a href=\"https://swr.vercel.app/ja/docs/advanced/cache#%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE%E3%81%8B%E3%82%89%E8%A4%87%E6%95%B0%E3%81%AE%E3%82%AD%E3%83%BC%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">Cache &ndash; SWR</a></p>\n\n    </blockquote>\n<p>そのコードがこちら。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> useSWRConfig <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'swr'</span>;\n\n<span class=\"synIdentifier\">function</span> useMatchMutate() <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> cache, mutate <span class=\"synIdentifier\">}</span> = useSWRConfig()\n  <span class=\"synStatement\">return</span> (matcher, ...args) =&gt; <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">if</span> (!(cache <span class=\"synStatement\">instanceof</span> Map)) <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">throw</span> <span class=\"synStatement\">new</span> Error(<span class=\"synConstant\">'matchMutate requires the cache provider to be a Map instance'</span>)\n    <span class=\"synIdentifier\">}</span>\n\n    <span class=\"synStatement\">const</span> keys = <span class=\"synIdentifier\">[]</span>\n\n    <span class=\"synStatement\">for</span> (<span class=\"synStatement\">const</span> key of cache.keys()) <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">if</span> (matcher.test(key)) <span class=\"synIdentifier\">{</span>\n        keys.push(key)\n      <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">}</span>\n\n    <span class=\"synStatement\">const</span> mutations = keys.map((key) =&gt; mutate(key, ...args))\n    <span class=\"synStatement\">return</span> Promise.all(mutations)\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>という感じで、</p>\n\n<ul>\n<li>`useSWRConfig()`から、キャッシュを直接操作する</li>\n<li>全てのキーに対して、任意の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>をあてて</li>\n<li>該当するものを`mutate()`</li>\n</ul><p>わかりやすい！けど、自作せんでいいように同梱してほしいな〜。</p><p>デフォルトではキャッシュ層に`Map`が使われていて、それを想定したコードになってることに注意。<br />\nキャッシュ層をカスタマイズしてるなら、それ用にコードを書き換える必要があるということ。</p>\n\n</div>"
}
