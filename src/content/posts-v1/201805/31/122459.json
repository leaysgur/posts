{
  "title": "react-native-web と react-native-dom",
  "html": "<p>`react-native-web`は去年くらいに話題になってたと思うけど、最近は`react-native-dom`なる別のやつが取り沙汰されてて、これらは何が違うの？</p><p>という人へ。</p><p>ずばりコレではあるものの、それでもわからんよって人のためへのメモ書きです。</p><p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"en\" dir=\"ltr\">Difference between react-native-dom and react-native-web. <a href=\"https://twitter.com/hashtag/reactnative?src=hash&amp;ref_src=twsrc%5Etfw\">#reactnative</a><br>RNDom is the third party RN Native implementation, and has Worker Thread. RNWeb is the UI library which is similar to RN features, and RNWeb run on UI thread. <a href=\"https://t.co/iXZLn7owLy\">pic.twitter.com/iXZLn7owLy</a></p>&mdash; なかざん@りあくとねーてぃぶおじさん (@Nkzn) <a href=\"https://twitter.com/Nkzn/status/1000409138189320192?ref_src=twsrc%5Etfw\">2018年5月26日</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><p>例のごとくなんか間違ってたら教えてください。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>おさらい</h3>\n    \n<ul>\n<li>react-native: <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>のNativeアプリが書けるやつ</li>\n<li>react-native-dom: `react-native`で、Webアプリが書けるやつ</li>\n<li>react-native-web: `react-native`で、Webアプリが書けるやつ</li>\n</ul><p>・・・「react-native-dom react-native-web 違い」（ッターン</p><p>ってなると思う、だいたいの人は。</p>\n\n</div>\n<div class=\"section\">\n    <h3>react-native-dom</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/vincentriemer/react-native-dom\">GitHub - vincentriemer/react-native-dom: An experimental, comprehensive port of React Native to the web.</a></p>\n\n    </blockquote>\n<p>特徴はREADMEのてっぺんにデカデカと書いてある。</p>\n\n<ul>\n<li>Multithreaded by defaul</li>\n<li>Same layout behavior as React Native on mobile</li>\n<li>Built with the same bundler used for existing React Native platforms</li>\n<li>Ecosystem compatible escape hatch to the DOM</li>\n</ul><p>というわけで、既存の`react-native`（という1ソースで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>の2プラットフォームに対応できる仕組み）の上で、第Nのプラットフォームとしてブラウザをターゲットにしたもの。</p><p>`react-native`が使ってる描画エンジンをWASMにポーティングして使ってるとか、WebWorkerを使ってマルチスレッドを実現とか、そのあたりがアツいと言われてる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>react-native-web</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/necolas/react-native-web\">GitHub - necolas/react-native-web: React Native for Web</a></p>\n\n    </blockquote>\n<p>こちらの特徴もREADMEより抜粋。</p>\n\n<ul>\n<li>High-quality user interfaces</li>\n<li>Write once, render anywhere</li>\n</ul><p>というわけで、`react-native`という本来アプリを作るための基盤・<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を、Web（ブラウザ）でも動かせるようにしたもの。<br />\nだから`react-native`じゃない普通のReact<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>も組み込めるし、通常のDOM要素も今まで通りそのまま使える。</p><p>言ってしまうとただのUI集で、Onsen UIの中の人からの話を聞いてみたくなるやつ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>というわけで</h3>\n    <p>`react-native`なコードを書けば、ブラウザ上で動くWebアプリが作れるという点では同じに見えるかもしれない。<br />\nただし、それを実現する部分と、いわゆる設計思想が異なる似て非なるもの。</p><p>まあこの界隈ではいつものことやけど、バズる割にだいたいの人には縁のない話よねーとは思う。</p><p>そういや <a href=\"https://mobile.twitter.com/\">https://mobile.twitter.com/</a> は`react-native-web`でできてるらしいけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>のアプリは`react-native`でできてんのかね・・？</p>\n\n</div>\n<div class=\"section\">\n    <h3>個人的に思うこと</h3>\n    \n<ul>\n<li>`react-native`で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>のアプリは作る</li>\n<li>その上で、Web（モバイル）用もコードを共有して作りたい</li>\n</ul><p>という前提がないと、これら単体をWeb向けに使うっていうのは得策じゃないよなーと思った。</p><p>というのも、</p>\n\n<ul>\n<li>`video`とか`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canvas\">canvas</a>`とか`audio`とかそのあたりの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>でいろいろしたいとか</li>\n<li>用意された<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の挙動を少し変えたいとか</li>\n<li>用意された<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>では実現できないUIにしたいとか</li>\n</ul><p>いわゆる`react-native`-wayから外れた要求が出るたびに、すごくつらい思いをするのは目に見えてるし。</p><p>`react-native`の用意するいい感じの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>なんか使わなくても、既存のWebの資産をよしなに組み合わせてちゃんとWebアプリを組める側の人間からすると、`react` / `react-dom`くらいの抽象化で十分よなーという気持ち。</p>\n\n</div>"
}
