{
  "title": "Array.prototype.slice.call(arguments)とは",
  "html": "<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synType\">Array</span>.prototype.slice.call(<span class=\"synIdentifier\">arguments</span>);\n</pre><p>っていう、いかにも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>を使いこなしている風なこの書き方。<br />\nもちろん最初はまったく意味がわからんかったです。</p><p>そして次に、意味はわかっても、使い道がわからんかったです。</p><p>けど最近、使い道がやっと見えてきました。</p><p>というわけで、その過程をメモ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>arguments</h3>\n    <p>ざっくり引数のこと。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> func1 = <span class=\"synIdentifier\">function</span>(name, arg1, arg2) <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synIdentifier\">arguments</span>); <span class=\"synComment\">// [&quot;Test&quot;, 100, 200]</span>\n<span class=\"synIdentifier\">}</span>;\n<span class=\"synIdentifier\">var</span> func2 = <span class=\"synIdentifier\">function</span>(name) <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synIdentifier\">arguments</span>); <span class=\"synComment\">// [&quot;Test2&quot;, true, function]</span>\n<span class=\"synIdentifier\">}</span>;\n\nfunc1(<span class=\"synConstant\">'Test'</span>, 100, 200);\nfunc2(<span class=\"synConstant\">'Test2'</span>, <span class=\"synConstant\">true</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{}</span>);\n</pre><p>関数の実行スコープ内で勝手に作られるローカル変数で、それぞれ引数が配列っぽく格納されてる。<br />\n「配列っぽく」というのは、実際のArrayの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>ではないから。<br />\nDOMのNodeListみたく、配列っぽく使いたいのに使えないコって感じ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Array.prototype.slice.call()</h3>\n    \n<div class=\"section\">\n    <h4>Array.prototype.****.call()</h4>\n    <p>そこでコレ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> divTags = <span class=\"synStatement\">document</span>.querySelectorAll(<span class=\"synConstant\">'div'</span>);\n\n<span class=\"synComment\">// divTags.forEach(function(e, i) { console.log(i + ': ' + e); });</span>\n<span class=\"synComment\">// ってしたいのにできないので</span>\n\n<span class=\"synType\">Array</span>.prototype.forEach.call(divTags, <span class=\"synIdentifier\">function</span>(e, i) <span class=\"synIdentifier\">{</span> console.log(i + <span class=\"synConstant\">': '</span> + e); <span class=\"synIdentifier\">}</span>);\n</pre><p>これと同じようなもので、本家Arrayのちからを借りたい時に使う。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Array.slice()</h4>\n    \n    <blockquote>\n        <p>参考：<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\" target=\"_blank\" title=\"Array.slice - JavaScript | MDN\">Array.slice - JavaScript | MDN</a></p>\n\n    </blockquote>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> arr1 = <span class=\"synIdentifier\">[</span>1, 2, 3<span class=\"synIdentifier\">]</span>;\n<span class=\"synIdentifier\">var</span> arr2 = arr1.slice();\n<span class=\"synIdentifier\">var</span> arr3 = arr1.slice(1);\n\nconsole.log(arr2); <span class=\"synComment\">// [1, 2, 3]</span>\nconsole.log(arr3); <span class=\"synComment\">// [2, 3]</span>\narr2 = arr3 = <span class=\"synIdentifier\">[]</span>;\nconsole.log(arr1); <span class=\"synComment\">// [1, 2, 3]</span>\n</pre><p>配列のコピーが欲しい時に使うやつですね。</p>\n\n    <blockquote>\n        <p>コピーといえば、Array.sliceはシャローコピーで云々かんぬんというのがある気がするけど、<br />\n本筋とはあまり関係がない気がするのと、うまく説明できる気がしないので・・気になるけど頭の隅にそっと置いておく。</p>\n\n    </blockquote>\n<p>というわけで、以下の謎だったコードは、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synType\">Array</span>.prototype.slice.call(<span class=\"synIdentifier\">arguments</span>);\n</pre><p>argumentsを配列に変換してるコードということがわかりました。<br />\nあとの引数はコピーを開始する位置ってことで、そのまんまsliceですね。</p>\n\n    <blockquote>\n        <p>ちなみに、Array.prototype.** と [].** は同じ動きなのでお好きな方を。<br />\n短く書ける方がイケてるとかいう俗説があるらしい。</p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>つかいみち</h3>\n    <p>さてさて、理屈はわかったけど使い道がわからんわ！<br />\nってのは割とよくある気がしてて、せっかくわかったなら是非モノにしたい！というわけで調べました。</p>\n\n<div class=\"section\">\n    <h4>Backbone.js</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// Backbone.Events.triggerの実装(関係ないとこは削ってます)</span>\ntrigger: <span class=\"synIdentifier\">function</span>(name) <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">var</span> args = slice.call(<span class=\"synIdentifier\">arguments</span>, 1); <span class=\"synComment\">// つかってるー！</span>\n  <span class=\"synStatement\">if</span> (!eventsApi(<span class=\"synIdentifier\">this</span>, <span class=\"synConstant\">'trigger'</span>, name, args)) <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>;\n  <span class=\"synIdentifier\">var</span> events = <span class=\"synIdentifier\">this</span>._events<span class=\"synIdentifier\">[</span>name<span class=\"synIdentifier\">]</span>;\n  <span class=\"synStatement\">if</span> (events) triggerEvents(events, args);\n  <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>;\n<span class=\"synIdentifier\">}</span>,\n</pre><p>なるほど。<br />\n明示的に受けたいのは、なんてイベント(name)をtriggerするかだけ。<br />\n後の引数はよしなに処理を渡したいので・・って感じですね、ふむ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Underscore.js</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// _.delayの実装より</span>\n_.delay = <span class=\"synIdentifier\">function</span>(func, wait) <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">var</span> args = slice.call(<span class=\"synIdentifier\">arguments</span>, 2); <span class=\"synComment\">// つかってる！</span>\n  <span class=\"synStatement\">return</span> setTimeout(<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span> <span class=\"synStatement\">return</span> func.apply(<span class=\"synStatement\">null</span>, args); <span class=\"synIdentifier\">}</span>, wait);\n<span class=\"synIdentifier\">}</span>;\n</pre><p>これも同じで、本来実装したい挙動に関するものにフォーカスして関数の実装は書く。<br />\nそれでも引数は渡ってくることもあるし、ただ流せばいいだけやし、みたいな時に使うんですね。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ちなみに</h3>\n    <p>そもそもこれはargumentsに限った話ではなくて、<br />\nいわゆるArrayライクなオブジェクトなら・・OKっていう。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> obj = <span class=\"synIdentifier\">{</span>\n  <span class=\"synConstant\">'0'</span>: <span class=\"synConstant\">'zero'</span>,\n  <span class=\"synConstant\">'1'</span>: <span class=\"synConstant\">'one'</span>,\n  <span class=\"synConstant\">'2'</span>: <span class=\"synConstant\">'two'</span>,\n  <span class=\"synConstant\">'3'</span>: <span class=\"synConstant\">'three'</span>,\n  <span class=\"synConstant\">'4'</span>: <span class=\"synConstant\">'four'</span>,\n  length: 5\n<span class=\"synIdentifier\">}</span>;\n\n<span class=\"synType\">Array</span>.prototype.slice.call(obj); <span class=\"synComment\">// [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;]</span>\n</pre><p>うん、ひとつかしこくなりました。</p><p>以下、直接関係ないけどいろいろ見てた記事さまたち</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://5509.hatenablog.com/entry/2012/12/16/234011\" target=\"_blank\" title=\"$.extend()とディープコピーを理解しよう - slowjet\">$.extend()とディープコピーを理解しよう - slowjet</a><br />\n参考：<a href=\"http://webtech-walker.com/archive/2012/12/backbone_model_object.html\" target=\"_blank\" title=\"Backbone.Modelのattributesにオブジェクト入れるときの注意 - Webtech Walker\">Backbone.Modelのattributesにオブジェクト入れるときの注意 - Webtech Walker</a><br />\n参考：<a href=\"https://github.com/aheckmann/sliced\" target=\"_blank\" title=\"aheckmann/sliced\">aheckmann/sliced</a></p>\n\n    </blockquote>\n\n</div>"
}
