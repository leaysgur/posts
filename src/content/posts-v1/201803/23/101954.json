{
  "title": "WebRTCなコードをE2Eテストする",
  "html": "<p>という試みをやってみたのでその学びをメモ。</p><p>もちろん全てのケースをカバーできたわけではなく、無限に気になることはあるけど、まあきっかけといことで。</p><p>環境は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/macOS\">macOS</a>です。CIで動かすのは続編としてまたいつかブログに書きます。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>何を使うか</h3>\n    <p>いわゆるE2E（URLでページ開いてボタン押したらどうでこうで）をやりたい場合、フロントエンド的な観測範囲だと現時点ではこの2択になるのかなーと思う。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Selenium\">Selenium</a></li>\n<li>TestCafe</li>\n</ul><p>他にオススメあれば知りたいです。</p>\n\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Selenium\">Selenium</a></h4>\n    <p><a href=\"https://github.com/webrtc/samples/tree/gh-pages/test\">https://github.com/webrtc/samples/tree/gh-pages/test</a> とかでも使われてる例があって身近ではあるけど、正直使いたくない・・。</p><p><a href=\"https://github.com/webdriverio/webdriverio\">https://github.com/webdriverio/webdriverio</a> とかあわせていれれば多少の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>はマシになるけど、もう少し気の利いたやつが欲しい。</p><p>そもそも2つしか選択肢ないけど、最後の手段として一旦置き。</p>\n\n</div>\n<div class=\"section\">\n    <h4>TestCafe</h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Selenium\">Selenium</a>（もといWebDriver）に依存してないし、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>もモダン。`expect()`とかの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%B5%A1%BC%A5%B7%A5%E7%A5%F3\">アサーション</a>機能も同梱されててわかってる感。</p><p>これでやりたいことができれば何の不満もないなーということで、ちょっと触ってみたところ、いけそうだったので今回はTestCafeを採用。</p><p>というわけで。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>TestCafeでWebRTCなコードをE2Eテストする</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/leader22/webrtc-e2e\">GitHub - leader22/webrtc-e2e: E2E test for WebRTC app with TestCafe.</a></p>\n\n    </blockquote>\n<p>この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>には簡単なシナリオしか置いてないけど、概ね次のような仕様。</p>\n\n<ul>\n<li>WebRTCの通信を、1ページ内で行う\n<ul>\n<li>1ページに2つのPeerを用意する</li>\n</ul></li>\n<li>ボタンを押すと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/P2P\">P2P</a>開始\n<ul>\n<li>両者ともに通信できてることを検証する</li>\n</ul></li>\n</ul><p>`/tests`配下とか見てもらえれば、割とシュッとE2Eのテストができてるのがわかるかと。</p><p>以下はハマりどころのメモです。</p>\n\n</div>\n<div class=\"section\">\n    <h3>素直に`getUserMedia()`できない</h3>\n    <p>というのも、gUMすると出る「許可しますか？」ダイアログ。あれがTestCafeからさわれない。なんてこった。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/DevExpress/testcafe/issues/1727\">Permission dialogs aren&#39;t handled &middot; Issue #1727 &middot; DevExpress/testcafe &middot; GitHub</a></p>\n\n    </blockquote>\n<p>なので、基本的にはFakeデ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>を使うしかない。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>なら、`--use-fake-device-for-media-stream --use-fake-ui-for-media-stream`を付けて起動する。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>なら、`{ fake: true }`を渡してgUMする。</p><p>もしくは、別の方法で`MediaStream`を生み出して使う。</p>\n\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2018/02/19/160808\">getUserMedia()&#x4EE5;&#x5916;&#x3067;MediaStream&#x3092;&#x7528;&#x610F;&#x3059;&#x308B;&#x306B;&#x306F; - console.lealog();</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>httpsOnlyな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>は使えない</h3>\n    <p>↑のとも関連するけど・・。</p><p>TestCafeの実行イメージはこんな感じ。</p>\n\n<ul>\n<li>TestCafeが母艦となるページを開く</li>\n<li>その中で、対象のページを順次開いてテスト実行する</li>\n</ul><p>で、この母艦となるページが`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/https\">https</a>`ではないので、結局最終的に叩かれるページの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が`http`で使えないやつの場合は使えない。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/DevExpress/testcafe/issues/1985\">Run testcafe with https protocol &middot; Issue #1985 &middot; DevExpress/testcafe &middot; GitHub</a></p>\n\n    </blockquote>\n<p>うーん、つらい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/localhost\">localhost</a>`おすすめ</h3>\n    <p>↑な理由で、だいたいテストを実行したいページを自作するハメになると思う・・。</p><p>その際のハマりポイントをもうひとつ。</p><p>TestCafeは仕組み的に、HTMLファイルを用意して`file://`でアクセスしてテストってことができる。</p><p>ただこれだと、`<a href=\"http://localhost\">http://localhost</a>` だと通るのに、 `file://` だと使えない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>とかでコケる可能性がある。`HTMLCanvasElement#captureStream()`とか。</p><p>なので、TestCafeでテスト実行するときにだけWebサーバーを建ててそこでページを開く方針がオススメ。</p>\n\n    <blockquote>\n        <p><a href=\"http://devexpress.github.io/testcafe/documentation/using-testcafe/command-line-interface.html#-a-command---app-command\">Command Line Interface | TestCafe</a></p>\n\n    </blockquote>\n<p>それ用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3\">コマンドライン</a>引数もある。</p>\n\n</div>\n<div class=\"section\">\n    <h3>ブラウザを引数つきで起動する</h3>\n    <p>やっとさっきの話でFakeデ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>を使いたい場合の、ブラウザのフラグをどう渡すか。</p><p>結論としては、現状の`testcafe`コマンドからは渡せません！</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/DevExpress/testcafe/issues/905\">Allow passing flags for browsers &middot; Issue #905 &middot; DevExpress/testcafe &middot; GitHub</a></p>\n\n    </blockquote>\n<p>なので自分でNodeの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>を書いて、そこで指定する。<br />\nこんな感じ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/webrtc-e2e/blob/master/run.js\">webrtc-e2e/run.js at master &middot; leader22/webrtc-e2e &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>テストのスピードを指定する</h3>\n    <p>TestCafeが実行するブラウザ操作やテストの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%B5%A1%BC%A5%B7%A5%E7%A5%F3\">アサーション</a>など、各種挙動の機敏さを指定できる。</p><p>`speed`っていうまんまなパラメータがあって、これを指定するのが重要。</p><p>というのも、WebRTCみたく通信のラグを考慮しないといけない場合、フルスピードで動かすとだいたいコケる。</p>\n\n    <blockquote>\n        <p><a href=\"http://devexpress.github.io/testcafe/documentation/using-testcafe/command-line-interface.html#--speed-factor\">Command Line Interface | TestCafe</a></p>\n\n    </blockquote>\n<p>指定できるのは`0.01`から`1`で、ローカルどうしの通信だと、だいたい`0.5`くらいがちょうどいい体感です。</p><p>実はテストコード中で、任意の箇所でsleepするみたいな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>もTestCafeは用意してある。（`t.wait()`ってやつ）<br />\nテストコードを汚す覚悟でそっちを使うのもアリかと。</p>\n\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>上でWebAudioは使えない</h3>\n    <p>これはあまり深追いしてないのでもしかしたら違うかも。</p>\n\n    <blockquote>\n        <p><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=807017\">807017 - WebAudio user-gesture warning for audio context prevents any audio output - chromium - Monorail</a></p>\n\n    </blockquote>\n<p>というように、WebAudioで音を鳴らすのにユーザー入力を介する必要が出てくる。</p><p>そしてこの「ユーザー入力」を、TestCafeで起こしたクリックとかのイベントで賄えないっぽい。</p><p>なので、どうあがいてもこの制限を突破することができずに詰む。</p><p>ちなみに、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>だと動く。（そのうち動かなくなりそうでもあるけど・・）</p>\n\n</div>\n<div class=\"section\">\n    <h3>WebRTCで通信してることをどう判断するか その1</h3>\n    <p>実際に、</p>\n\n<ul>\n<li>ボタンを押して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/P2P\">P2P</a>でつながったこと</li>\n<li>`video`の表示が更新されてること</li>\n</ul><p>を、どうやってテストするのかという話。</p><p>ケースに応じて2つの観点をチェックした。</p><p>ひとつは、`RTCPeerConnection`とか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SDK\">SDK</a>のイベントを使って、`console.log()`する方法。</p><p>TestCafeのテストコードで使える`getBrowserConsoleMessages()`ってのを使うと、その時点でのコンソールの出力を読める。</p><p>これで、既定の回数イベントのログがあるかどうかを見る。</p>\n\n</div>\n<div class=\"section\">\n    <h3>WebRTCで通信してることをどう判断するか その2</h3>\n    <p>もうひとつ、`video`の表示をチェックする方法。</p><p>これも単純で、`video`を`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canvas\">canvas</a>`に転写して、`toDataURL()`で比較する。</p><p>通信開始前に取得したURLと、通信開始後に取得したURLが異なる場合、なんらかの変化があった = 通信できたとする。</p><p>ここで1つハマったのは、</p>\n\n<ul>\n<li>とある`MediaStream`がある</li>\n<li>ローカルではそれを`video.srcObject`で表示してる</li>\n<li>そのMediaStreamをWebRTC経由でリモートに送って、同様に`video`で表示</li>\n</ul><p>この場合、一見どちらの`video`にも同じ映像が表示（遅延を考慮しない場合、というか、単色静止画のストリームだったとして）されていても、`toDataURL()`すると異なる結果になる。</p><p>WebRTCで通信するときの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9\">エンコード</a>処理みたいなので微妙に色味が変わるからなんやろうと予想。</p>\n\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>という感じで色々ハマりポイントはあったけど、いちおうやりたかったことはできた。</p><p>あとはこれをCIで動かすところと、異なるブラウザ同士でどうにか通信するテストを書けないかを模索してみて、また何かあれば書くかも。</p>\n\n</div>"
}
