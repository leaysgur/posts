{
  "title": "Svelteで生DOMを扱う",
  "html": "<p>Reactでいうところの`ref`を、Svelteでどうやって扱うか。</p><p>まぁドキュメントにちゃんと書いてあるけども。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>bind:this</h3>\n    \n    <blockquote>\n        <p><a href=\"https://svelte.dev/docs#bind_element\">https://svelte.dev/docs#bind_element</a></p>\n\n    </blockquote>\n<p>1つ目のやり方がこれ。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">  </span><span class=\"synStatement\">import</span><span class=\"synSpecial\"> </span><span class=\"synIdentifier\">{</span><span class=\"synSpecial\"> onMount </span><span class=\"synIdentifier\">}</span><span class=\"synSpecial\"> from </span><span class=\"synConstant\">&quot;svelte&quot;</span><span class=\"synSpecial\">;</span>\n\n<span class=\"synSpecial\">  </span><span class=\"synIdentifier\">let</span><span class=\"synSpecial\"> el = </span><span class=\"synStatement\">null</span><span class=\"synSpecial\">;</span>\n<span class=\"synSpecial\">  onMount</span>(()<span class=\"synSpecial\"> =&gt; </span><span class=\"synIdentifier\">{</span>\n<span class=\"synSpecial\">    </span><span class=\"synStatement\">const</span><span class=\"synSpecial\"> timer = setInterval</span>(\n<span class=\"synSpecial\">      </span>()<span class=\"synSpecial\"> =&gt; el.textContent = </span><span class=\"synType\">Date</span><span class=\"synSpecial\">.now</span>()<span class=\"synSpecial\">,</span>\n<span class=\"synSpecial\">      </span>1000\n<span class=\"synSpecial\">    </span>)<span class=\"synSpecial\">;</span>\n\n<span class=\"synSpecial\">    </span><span class=\"synStatement\">return</span><span class=\"synSpecial\"> </span>()<span class=\"synSpecial\"> =&gt; clearInterval</span>(<span class=\"synSpecial\">timer</span>)<span class=\"synSpecial\">;</span>\n<span class=\"synSpecial\">  </span><span class=\"synIdentifier\">}</span>)<span class=\"synSpecial\">;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> bind:this=</span><span class=\"synConstant\">{el}</span><span class=\"synIdentifier\"> /&gt;</span>\n</pre><p>`bind:this`ディレクティブで、変数に入れる。</p><p>そしてその変数は、`onMount()`のフックで取る。<br />\nそうしないと、まだ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>されてないので、`undefined`になっちゃう。</p>\n\n</div>\n<div class=\"section\">\n    <h3>use:action</h3>\n    \n    <blockquote>\n        <p><a href=\"https://svelte.dev/docs#use_action\">https://svelte.dev/docs#use_action</a></p>\n\n    </blockquote>\n<p>2つ目のやりかた。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">  </span><span class=\"synStatement\">import</span><span class=\"synSpecial\"> </span><span class=\"synIdentifier\">{</span><span class=\"synSpecial\"> myAction </span><span class=\"synIdentifier\">}</span><span class=\"synSpecial\"> from </span><span class=\"synConstant\">&quot;./actions.js&quot;</span><span class=\"synSpecial\">;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> use:myAction /&gt;</span>\n</pre><p>というように、`use:関数名`って書く。</p><p>関数側はこのように。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">export</span> <span class=\"synStatement\">const</span> myAction = (el) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> timer = setInterval(\n    () =&gt; el.textContent = <span class=\"synType\">Date</span>.now(),\n    1000\n  );\n\n  <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">{</span>\n    destroy() <span class=\"synIdentifier\">{</span>\n      clearInterval(timer);\n    <span class=\"synIdentifier\">}</span>,\n  <span class=\"synIdentifier\">}</span>;\n<span class=\"synIdentifier\">}</span>;\n</pre><p>`destory()`はこのDOM要素が破棄されるタイミングで呼ばれる。</p><p>こうすると、それ用の関数に処理を切り出せていい感じ。</p>\n\n<div class=\"section\">\n    <h4>パラメータを渡す</h4>\n    <p>ちなみにDOM要素のほかにパラメータを受け取るためには、ディレクティブで渡せばよい。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> use:myAction=</span><span class=\"synConstant\">{2000}</span><span class=\"synIdentifier\"> /&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> use:myAction2=</span><span class=\"synConstant\">{{</span><span class=\"synIdentifier\"> foo, bar }} /&gt;</span>\n</pre><p>こうすると、第2引数で取れるようになる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">export</span> <span class=\"synStatement\">const</span> myAction = (el, duration = 1000) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> timer = setInterval(\n    () =&gt; el.textContent = <span class=\"synType\">Date</span>.now(),\n    duration\n  );\n\n  <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">{</span>\n    destroy() <span class=\"synIdentifier\">{</span>\n      clearInterval(timer);\n    <span class=\"synIdentifier\">}</span>,\n  <span class=\"synIdentifier\">}</span>;\n<span class=\"synIdentifier\">}</span>;\n</pre>\n</div>\n<div class=\"section\">\n    <h4>渡したパラメータが更新されたら</h4>\n    <p>リアクティブな値を渡した場合など。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">export</span> <span class=\"synStatement\">const</span> myAction2 = (el, params) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">{</span>\n    update(params) <span class=\"synIdentifier\">{</span>\n      <span class=\"synComment\">// Do something</span>\n    <span class=\"synIdentifier\">}</span>,\n    destroy() <span class=\"synIdentifier\">{}</span>,\n  <span class=\"synIdentifier\">}</span>;\n<span class=\"synIdentifier\">}</span>;\n</pre><p>`update()`を用意しておくと、値が変わったときに呼ばれるようになる。</p>\n\n</div>\n</div>"
}
