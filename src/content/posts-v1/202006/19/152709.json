{
  "title": "Svelte/Sapperを静的サイトジェネレーター（SPA）として使う",
  "html": "<p>最近ひさしぶりにペライチの静的なサイトを作る機会があって、何で作ろうかなーと考えた。</p><p>Nextの`export`や、Nuxtの`generate`があるなら、Svelte/SapperにもそういうSSGの機能があるのでは？というのがきっかけ。</p>\n\n    <blockquote>\n        <p><a href=\"https://sapper.svelte.dev/docs#Exporting\">https://sapper.svelte.dev/docs#Exporting</a></p>\n\n    </blockquote>\n<p>もちろんあった。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>使い方</h3>\n    <pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>sapper <span class=\"synStatement\">export</span><span class=\"synIdentifier\"> --legacy</span>\n</pre><p>以上。</p><p>`--legacy`をつけると、</p>\n\n<ul>\n<li>モダンなブラウザ向け</li>\n<li>Babelが必要なレガシー環境向け</li>\n</ul><p>というように2つ実行ファイルとしての`.js`が吐き出される。（どっちを使うかは動的に判断されるし、その判断コードもデフォルトで用意される）</p><p>無事に出力されたら、`__sapper__/export`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リ配下にあるものを、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%B9%A5%C6%A5%A3%A5%F3%A5%B0\">ホスティング</a>すればよい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>最低限のファイルたち</h3>\n    <pre class=\"code\" data-lang=\"\" data-unlink>.\n├── README.md\n├── package.json\n├── rollup.config.js\n├── src\n│   ├── client.js\n│   ├── components\n│   │   ├── foo.svelte\n│   │   └── bar.svelte\n│   ├── routes\n│   │   └── index.svelte\n│   ├── server.js\n│   └── template.html\n└── static\n    ├── global.css\n    └── image\n        └── sample.jpg</pre><p>というように、`client.js`と`routes/index.svelte`と`template.html`だけあればよい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>注:  `server.js`も必須</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>しないなら、サーバー側のエンドポイントなんかいらんのでは？と思って消したら動かなくなった。</p><p>これには理由があって、Sapperの`export`コマンドはこんな感じで動くから。</p>\n\n<ul>\n<li>最初に`build`コマンドを叩いてサーバーを起動</li>\n<li>ルートからたどれる全ページをクローリングして</li>\n<li>出会ったページを静的に出力する</li>\n</ul><p>なので、最低限のコードだけ書いた`server.js`が必要というわけらしい。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> sirv from <span class=\"synConstant\">&quot;sirv&quot;</span>;\n<span class=\"synStatement\">import</span> polka from <span class=\"synConstant\">&quot;polka&quot;</span>;\n<span class=\"synStatement\">import</span> * as sapper from <span class=\"synConstant\">&quot;@sapper/server&quot;</span>;\n\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> PORT, NODE_ENV <span class=\"synIdentifier\">}</span> = process.env;\n<span class=\"synStatement\">const</span> dev = NODE_ENV === <span class=\"synConstant\">&quot;development&quot;</span>;\n\npolka() <span class=\"synComment\">// You can also use Express</span>\n  .use(sirv(<span class=\"synConstant\">&quot;static&quot;</span>, <span class=\"synIdentifier\">{</span> dev <span class=\"synIdentifier\">}</span>), sapper.middleware())\n  .listen(PORT, (err) =&gt; <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">if</span> (err) console.log(<span class=\"synConstant\">&quot;error&quot;</span>, err);\n  <span class=\"synIdentifier\">}</span>);\n</pre><p>公式のテンプレートで用意されるコードから不要な処理を削っていって、残ったのがこれだけ。<br />\nWebサーバーは`express`でも`fastify`でももちろんよくて、`sapper`と静的ファイルを返す<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2\">ミドルウェア</a>さえあればいい。</p><p>で、この使い方はいわゆるSPAモードというもの（言われてみれば確かに）で、対応中のIssueはこちら。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/sapper/issues/383\">SPA mode &middot; Issue #383 &middot; sveltejs/sapper &middot; GitHub</a></p>\n\n    </blockquote>\n<p>`ssrEnabled`というオプションが生えるらしい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>Svelteのランタイムの小ささに取り憑かれた勢として、こういう使い方もできるのは思わぬ収穫だった。</p><p>ペライチみたいに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SEO\">SEO</a>を意識する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>はもちろん採用するけど、完全なSPAを作るにしても、Svelte単体よりよいのでは・・？と思うくらいには簡単だった。</p>\n\n</div>"
}
