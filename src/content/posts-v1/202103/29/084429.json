{
  "title": "Cloudflare Workersを軽く試した感想",
  "html": "\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers\">Cloudflare Workers docs</a></p>\n\n    </blockquote>\n<p>巷で話題のエッジワーカーというやつ。</p><p>お仕事で使えるかもしれないというわけで、Docsを一通り読んでみて、ちょっとしたコードをデプロイしてみたところまでの感想。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Docsを読んでの学び</h3>\n    \n<div class=\"section\">\n    <h4>コールドスタートがない</h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AWS\">AWS</a>やら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GCP\">GCP</a>のそれと違って、ランタイムごとにコンテナを〜という構造ではないから。</p><p>V8のIsolateなる機能を使って、基本的に立ちっぱのホストの上で、ランタイムだけを起動できるとのこと。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/learning/how-workers-works\">How Workers works &middot; Cloudflare Workers docs</a></p>\n\n    </blockquote>\n<p>なので、たまーに動かすコードでも実行が速いというわけ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>リージョン: 地球</h4>\n    <p>普通にそう書いてあってカッコいい・・ってなった。</p>\n\n</div>\n<div class=\"section\">\n    <h4>実行時間の制限がない</h4>\n    <p>時間に関する制限は、CPU時間だけ。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/platform/limits\">Limits &middot; Cloudflare Workers docs</a></p>\n\n    </blockquote>\n<p>Netlify functionsやLambdaで気軽にできなかった、</p>\n\n<ul>\n<li>Slack <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Bot\">Bot</a>のリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>ト受付、まずはレスポンス返す</li>\n<li>からの、時間かかる本処理の結果を改めて送信</li>\n</ul><p>みたいなことが、単独でできる。</p><p>Slack <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Bot\">Bot</a>は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB\">チュートリアル</a>でもカバーされてて<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>にコードもある。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/signalnerve/workers-slack-bot\">https://github.com/signalnerve/workers-slack-bot</a></p>\n\n    </blockquote>\n<p>そして実行時間で課金されるわけでもないっていうのがポイント。</p><p>用途によってはCPU時間がオーバーすることもあるかもしれんけど、ほとんどの一般人は困らない感じよね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Cronでの定期実行もできる</h4>\n    <p>さすが〜欲しい機能わかってる〜って感じ。</p><p>この場合は、`addEventListener(\"fetch\")`ではなく、`addEventListener(\"scheduled\")`でハンドラを定義する。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/platform/cron-triggers\">Cron Triggers &middot; Cloudflare Workers docs</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>HTTPしか話せない</h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C4%CC%BF%AE%A5%D7%A5%ED%A5%C8%A5%B3%A5%EB\">通信プロトコル</a>として。</p><p>つまり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MySQL\">MySQL</a>やMongoDBやらを簡単に読みに行けないし、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SMTP\">SMTP</a>やら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/UDP\">UDP</a>やらも、もちろん使えない。</p><p>いわゆる`ServiceWorkerGlobalScope`でコード書いてるという認識がなくて、単なるFaaS代替と捉えてると、思ってるのと違う・・ってなりそう。</p><p>そういうデザインなので仕方がない気はするけど、実用性という意味では割と大きな制限かなーと思う。（DBの前段にGraphQL置くか〜〜〜ってなる）</p>\n\n</div>\n<div class=\"section\">\n    <h4>Node.jsではない</h4>\n    <p>つまり、`EventEmitter`とか`child_process`とか`Buffer`とか`crypto`とか、そういうのはない。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/WHATWG\">WHATWG</a> Streamsとか、Web Cryptoとかそういうのはある。（これも`ServiceWorker`なので・・と思えばまあ）</p><p>`npm`から持ってきたライブラリがそのままでは動かない、みたいなのはよくありそうで、よくわかってないと誤解されそう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>FaaS代替としても使える</h4>\n    <p>まあ本来の用途ではないけど、`workers_dev`の機能とかもあるし、それなりに想定された<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>なんやろうなと。</p><p>上述の通りNodeで動くものが100％動くわけではないってことさえ注意すれば、ちょっとした<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>をさくっとデプロイできるのは便利。</p><p>ただやはり本旨としての、「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>に本来は飛ぶはずのリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トをinterceptして、HTMLをリライトして返す」みたいなことに使ってみたいという欲がでるな・・。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/examples/rewrite-links\">Rewrite links &middot; Cloudflare Workers docs</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>（FaaS代替として）コードを書いてみて</h3>\n    \n<div class=\"section\">\n    <h4>wanglerがよくできてる</h4>\n    <p>Workerをデプロイするための<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>が`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>`というコマンドで、これがよくできてるなと思った。</p><p>`webpack`が同梱されてて、`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a> publish`ってするだけで、自動でprodビルドしてデプロイしてくれる便利・・！<br />\n単にFaaS代替として使ううちは、自分でビルドしたい気持ちもそんなに出てこないので、`sls`の代わりに使える。</p><p>あとは`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a> secret put MY_SECRET_KEY`ってすると、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4\">環境変数</a>的な値を埋め込めたりするのも、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GUI\">GUI</a>から設定したくない派としては嬉しいポイント。</p>\n\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a> dev惜しい</h4>\n    <p>`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a> dev`という、仮の実行環境にコードをデプロイして、それを透過的に`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/localhost\">localhost</a>`からアクセスする機能がある。</p><p>（実際にデプロイしてるということに気づかず、ローカルで完結してるっていう先入観があると、即リロードしても反映されてないあれ？ってなるはず）</p><p>`console.log()`で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>できるのはすごい便利な反面、ファイルの増減で割とカジュアルにcrashしたりする感じがある・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>シンプルゆえに</h4>\n    <p>そもそもの発端がFaaS代替ではなく、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>前のServiceWorkerなメンタルモデルなので、そこに慣れてないといろいろハマるかなーと思った。</p>\n\n<ul>\n<li>`Response`生成したら`Request`の中身さわれなくなるとか</li>\n<li>`waitUntil()`、`passThroughOnException()` の使い方いまいちわからんとか</li>\n</ul><p>あとは、リク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トをパースするコードも用意されてないので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC\">ルーター</a>みたいなのが欲しくなるまでに時間はかからないと思う。</p><p>観測範囲だとやはり <a href=\"https://github.com/lukeed/worktop\">https://github.com/lukeed/worktop</a> 推しかな・・？</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>あくまでFaaS代替としては、</p>\n\n<ul>\n<li>Cons: HTTPの縛り</li>\n<li>Cons: Nodeではない</li>\n<li>Pros: コールドスタートがない</li>\n<li>Pros: リージョンの概念がなく地球のどこからでも速い</li>\n</ul><p>ってあたりが大きな差異かな？</p><p>ただロギングの仕組みすらもなかったりするので、単機能な用途ならまだしも、あれこれやる必要がある場合、Edgeでそれをやる意義を見いだせない場合は、そんなに使い勝手がいいわけではないのかなーと。</p><p>あとは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>の手前にいることを活かした使い方と、Cache/KV/DOまわりを使った独創性のある<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>を試してみたい。なんか丁度いい案件ないかな〜。</p>\n\n</div>"
}
