{
  "title": "DOM ready events considered harmful | HTTP 203 の要点まとめ",
  "html": "<p>なかなか気になるタイトルの動画が出てたので。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=_iq1fPjeqMQ\">DOM ready events considered harmful | HTTP 203 - YouTube</a></p>\n\n    </blockquote>\n<p>こういうコード、ほんとに懐かしいな・・・ｗ</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// コレとか</span>\n$(() =&gt; <span class=\"synIdentifier\">{}</span>);\n\n<span class=\"synComment\">// コレとか</span>\n<span class=\"synStatement\">document</span>.addEventListener(<span class=\"synConstant\">&quot;DOMContentLoaded&quot;</span>, () =&gt; <span class=\"synIdentifier\">{}</span>, <span class=\"synConstant\">false</span>);\n</pre><p>これまではめちゃめちゃよく使われてきたけど、実はよろしくないよっていう話。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"TLDR\">TL;DR</h3>\n    \n<ul>\n<li>あるあるコードの問題</li>\n<li>`bundle.js`内で、DCLを待って処理するようにしてた場合</li>\n</ul><pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synComment\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">    </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">link</span><span class=\"synIdentifier\"> </span><span class=\"synType\">rel</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;stylesheet&quot;</span><span class=\"synIdentifier\"> </span><span class=\"synType\">href</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;style.css&quot;</span><span class=\"synIdentifier\"> /&gt;</span>\n<span class=\"synPreProc\">    </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;bundle.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">  </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;app&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n</pre><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// bundle.js</span>\n<span class=\"synStatement\">document</span>.addEventListener(<span class=\"synConstant\">&quot;DOMContentLoaded&quot;</span>, () =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// 処理...</span>\n<span class=\"synIdentifier\">}</span>, <span class=\"synConstant\">false</span>);\n</pre>\n<ul>\n<li>コードが運用されるにつれ、こう改修されるかもしれない</li>\n</ul><pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synComment\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">    </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">link</span><span class=\"synIdentifier\"> </span><span class=\"synType\">rel</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;stylesheet&quot;</span><span class=\"synIdentifier\"> </span><span class=\"synType\">href</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;style.css&quot;</span><span class=\"synIdentifier\"> /&gt;</span>\n<span class=\"synPreProc\">    </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;bundle.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">  </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;app&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synComment\">&lt;!-- ↓追加したよ --&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">defer</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;https://cdn.example.com/analytics.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n</pre>\n<ul>\n<li>こんな風に3rdの`defer`な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>が追加されたりするとどうなるか</li>\n<li>メインで実行すべきコード（DCL）がどんどん後回しになる</li>\n<li>どうすればいいか？</li>\n<li>DCLを待つのをやめて、`bundle.js`にも`defer`をつけるのがよい</li>\n</ul><pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synComment\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">    </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">link</span><span class=\"synIdentifier\"> </span><span class=\"synType\">rel</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;stylesheet&quot;</span><span class=\"synIdentifier\"> </span><span class=\"synType\">href</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;style.css&quot;</span><span class=\"synIdentifier\"> /&gt;</span>\n<span class=\"synPreProc\">    </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">defer</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;bundle.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">  </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;app&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">defer</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;https://cdn.example.com/analytics.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n</pre><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// bundle.js</span>\n\n<span class=\"synComment\">// 処理...</span>\n</pre>\n<ul>\n<li>基本的にはコレでよい</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"DOMContentLoadedへの道のり\">DOMContentLoadedへの道のり</h3>\n    \n<ul>\n<li>ブラウザのしくみとして、ページがパースされていくにつれ、何が起きるか</li>\n<li>1: `readyState: interactive`</li>\n<li>2: 既存のstyle(media matches含む)の処理</li>\n<li>3: `defer`な`script`すべてを順番に実行</li>\n<li>4: `DOMContentLoaded`イベント発火</li>\n<li>5: `readyState: complete`</li>\n<li>6: `load`イベント発火</li>\n<li>7: `pageshow`イベント発火</li>\n<li>こうしてみると、`DOMContentLoaded`とは？という感もある</li>\n<li>なので基本的に`defer`を使えばよい\n<ul>\n<li>`type=module`にすれば、デフォルトで`defer`になる</li>\n<li>記述された順に実行されるので、依存ライブラリなどは先に</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"deferのこれまで\">deferのこれまで</h3>\n    \n<ul>\n<li>1997年にIE4にはいった</li>\n<li>しかしバグがあって、複数のdeferの実行順序が変わるケースがあった・・・</li>\n<li>2012年のIE10までバグってた・・・</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"asyncもあるよ\">asyncもあるよ</h3>\n    \n<ul>\n<li>いつでも`defer`でいいわけではない</li>\n<li>`async`のほうがいいときもある\n<ul>\n<li>3rdの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>のように優先度が低いもの</li>\n<li>単体で完結するようなもの</li>\n<li>`defer`みたく読み込み順を待つ必要がないもの</li>\n</ul></li>\n<li>`async`で、その実行タイミングをブラウザに任せてしまう\n<ul>\n<li>優先度を上げたいならpreloadするとか</li>\n</ul></li>\n<li>本当に必要だったのは特定の要素がreadyかどうかのはず</li>\n<li>例えばWebComponentsで書けば、`connectedCallback`が使える</li>\n<li>ただし、`innerHTML`みたいに子要素を使って何かしたい場合、`async`では不都合が起きるかもしれない\n<ul>\n<li>`async`な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>が実行されるタイミングで、子要素がちゃんと存在する保証がないから</li>\n<li>親はあるので、親要素に対して動作するWebComponentsを書くというテクもある</li>\n</ul></li>\n<li>`MutationObserver`も使える</li>\n<li>DOMのアップデートを検知できるので、それで特定の要素の存在を検知する</li>\n</ul><p>というわけで、`defer`を啓蒙する動画でした！</p>\n\n</div>"
}
