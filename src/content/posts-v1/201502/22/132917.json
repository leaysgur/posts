{
  "title": "Frontrend Conference！ #frontrend",
  "html": "<p>いってきたメモシリーズ。<br />\n聞いたのは以下のセッション。</p>\n\n<ul>\n<li>Pragmatic Front-end Developer: From Artisan to Expert</li>\n<li>Reactive Programming in <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a> [js]</li>\n<li>Introduction to React [js]</li>\n<li>Lightning Talks [<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/css\">css</a>]</li>\n<li>Introduction to ServiceWorker [js]</li>\n<li>Evaluating <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> [<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/css\">css</a>]</li>\n<li>Styling <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a> (Editor)</li>\n</ul><p>そんなにメモってないですが一応。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Pragmatic Front-end Developer: From Artisan to Expert</h3>\n    \n<div class=\"section\">\n    <h4>敷居の低い技術だからこそ</h4>\n    \n    <blockquote>\n        <p>Every line of code should appear to be written by a single person, no matter the number of contributors.</p>\n\n    </blockquote>\n<p>というわけで、</p>\n\n<ul>\n<li>EditorConfig</li>\n<li>コード<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AC%A5%A4%A5%C9%A5%E9%A5%A4%A5%F3\">ガイドライン</a></li>\n<li>スタイルガイド</li>\n</ul><p>などなど使っていくべき。</p><p>技術よりも、いかに人がコラボレーションしていくかを考えるべき。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Be (an) EXPART</h4>\n    \n<div class=\"section\">\n    <h5>できないと言わない(オプションを示す)</h5>\n    <p>エンジニアができないと言うと、まわりは信じるしかない。<br />\nそこにつけこまないように。</p>\n\n</div>\n<div class=\"section\">\n    <h5>壊れ窓の中で仕事をしない</h5>\n    <p>目に見えるバグや、すぐ手の届く不具合はすぐに直すように。</p>\n\n</div>\n<div class=\"section\">\n    <h5>「十分」がいつなのかを知る</h5>\n    <p>永遠にバグはなくならない。<br />\nそのタイミングや割り切りの間隔を養うように。</p>\n\n</div>\n<div class=\"section\">\n    <h5>知識を増やすための時間を定常的に設ける</h5>\n    <p>現状に甘んじることなく。</p><p>がんばらねば。</p>\n\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3>Reactive Programming in <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a> [js]</h3>\n    \n    <blockquote>\n        <p><a href=\"http://ahomu.github.io/s/150221-frontrend_conference/index.html#1\" target=\"_blank\" title=\"Reactive Programming in JavaScript\">Reactive Programming in JavaScript</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Reactiveとは</h4>\n    <p>イベントや値の関係性をデータフローとみなし、<br />\nそのデータフローの宣言を元に変更を自動的に伝播させていく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A5%E9%A5%C0%A5%A4%A5%E0\">パラダイム</a>。</p><p>曖昧な概念で、まぎらわしいものも多いので注意とのこと。</p>\n\n</div>\n<div class=\"section\">\n    <h4>RxJS</h4>\n    <p>スライドのサンプルコードの考え方がわかりやすかった。<br />\nObservableなストリームを宣言して、Observerでsubscribeして処理する。</p><p>アホほど<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9\">メソッド</a>があるのが流行らない理由の一つらしいｗ<br />\nデモのコードはすぐ理解できるくらいの簡単なものなんやけど、その先がってことなんやろな・・・。</p><p>いかんせん概念からかなり理解しておかないとシッチャカメッチャカなコードしか生まれてこなさそうで、そういう意味でこの手のものは使うの難しそうやなーと思った。</p><p>ちなみに、ReactiveにやるならBacon.jsってのがオススメらしい。</p>\n\n    <blockquote>\n        <p><a href=\"https://baconjs.github.io/\" target=\"_blank\" title=\"Bacon.js - Functional Reactive Programming library for JavaScript\">Bacon.js - Functional Reactive Programming library for JavaScript</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Introduction to React [js]</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/hokaccha/introduction-to-react\" target=\"_blank\" title=\"Introduction To React // Speaker Deck\">Introduction To React // Speaker Deck</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>React.js</h4>\n    <p>ステートレスな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>設計ができるのが一番の利点。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>ではもちろん無理で</li>\n<li>Backbone系ではある程度できるが手動になる</li>\n<li>Angular/Vueなら双方向だが、規模が大きくなるとスケールしない</li>\n<li>そしてReactにたどり着く</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>速いけど、最速ではない</h4>\n    <p>例えばとある配列を元に表示してるリストがあって、各アイテムを追加/削除/変更するようなシーン。</p>\n\n<ul>\n<li>[1] Backboneでそれぞれイベント貼って対応</li>\n<li>[2] Backboneでまとめてイベント貼って対応</li>\n<li>[3] Reactでまとめてイベント貼って対応(だが更新はVirtualDOMで差分だけ)</li>\n</ul><p>って場合、最速なのは[1]、次点で[2]。<br />\nというように、差分を再計算する分だけもちろん遅くなるので、<br />\nコードの煩雑さと、速さのバランスを見極めた上で選択するべきもの。</p><p>つまるところ、技術選択は適切に。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Lightning Talks [<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/css\">css</a>]</h3>\n    \n<div class=\"section\">\n    <h4>CSS3 プロパティを使ってなにか作ります</h4>\n    <p>CSS3のfilterを組み合わせたサービスの話。<br />\nPCでは割と使えて、便利よねfilter。</p>\n\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> Polyfill Preprocessor</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/segmentio/myth\" target=\"_blank\" title=\"segmentio/myth\">segmentio/myth</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A4%C9%A4%BB%A4%A4%A4%B5%A4%F3\">どせいさん</a>めっちゃ背高かったw</p>\n\n</div>\n<div class=\"section\">\n    <h4>position: fixed;を上手に飼う方法</h4>\n    <p>ちゃんと挙動知った上で使っても、環境によって変な動きするので、<br />\n注意深く使おうねっていう内容。</p><p>全くその通りやー。</p>\n\n</div>\n<div class=\"section\">\n    <h4>5分でわかるflexbox</h4>\n    \n<ul>\n<li>擬似要素もFlexItemとして扱われるので注意</li>\n<li>テキストノードしか持たないFlexContainerに注意</li>\n</ul><p>あの記事の人や！</p>\n\n    <blockquote>\n        <p><a href=\"http://developers.linecorp.com/blog/?p=2479\" target=\"_blank\" title=\"flexboxの旧仕様、改定仕様、現行仕様の一覧 « LINE Engineers&apos; Blog\">flexboxの旧仕様、改定仕様、現行仕様の一覧 « LINE Engineers&apos; Blog</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>Yet Another <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> Preprocessor</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/morishitter/YACP\" target=\"_blank\" title=\"morishitter/YACP\">morishitter/YACP</a></p>\n\n    </blockquote>\n<p>ほーって思ったけど、使うの難しそう。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Introduction to ServiceWorker [js]</h3>\n    \n<div class=\"section\">\n    <h4>ユーザー環境</h4>\n    \n<ul>\n<li>ハードウェアは順調に進化</li>\n<li>ネットワークはあと一歩足りてない</li>\n</ul><p>負荷をかけるならハードウェアのほうが、パフォーマンスにつながるのでは。</p>\n\n</div>\n<div class=\"section\">\n    <h4>オフライン向け<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>たち</h4>\n    \n<ul>\n<li>Navigator.onLine: ほぼ使える</li>\n<li>FileSystem: <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>でしか実装されてな・・</li>\n<li>WebStorage: 同期型のKVSで、5MBまでの少量向け</li>\n<li>indexedDB: 非同期型のKVSで、5MBまでの少量向けだが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B6%A5%AF%A5%B7%A5%E7%A5%F3\">トランザクション</a>やバージョニングなど</li>\n<li>ApplicationCache: 割愛</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ServiceWorker</h4>\n    \n<ul>\n<li>サーバーに代わってレスポンスを返したり</li>\n<li>クライアントに代わってリクエストしたり</li>\n<li>Fetch <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></li>\n<li>Cache <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></li>\n<li>Background Sync</li>\n<li>Web Push <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></li>\n</ul>\n    <blockquote>\n        <p><a href=\"http://d.hatena.ne.jp/jovi0608/20141204/1417697480\" target=\"_blank\" title=\"Service WorkerとHTTP/2が切り開く新しいWeb Pushの世界 - ぼちぼち日記\">Service WorkerとHTTP/2が切り開く新しいWeb Pushの世界 - ぼちぼち日記</a></p>\n\n    </blockquote>\n<p>ただ実装状況が今んトコまだまだ・・。</p><p>TODO: 時間の配分的にこのへんの内容は薄かったので、後で調べること。<br />\n<br />\n</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Evaluating <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> [<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/css\">css</a>]</h3>\n    \n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>をEvaluateする</h4>\n    <p>定期的にリファクタしても、じわじわ容量は増えていくもので、<br />\nファイル容量を継続的に監視するとわかりやすい。</p><p>効率的な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>が書きたいなら、デザインからやらないとダメ。<br />\nつまるところシステムをデザインしていくべき。</p>\n\n</div>\n<div class=\"section\">\n    <h4>StyleStats</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/t32k/stylestats\" target=\"_blank\" title=\"t32k/stylestats\">t32k/stylestats</a></p>\n\n    </blockquote>\n<p>他にもいろいろあるけど、定量的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>を評価できるのでぜひ参考にしたいところ。<br />\n知らん間にネスト深くなってたりするもんね。</p><p>こういうのを定期的にプロットしていくためのサービスとかもあるそうな。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/kaelig/moniteur\" target=\"_blank\" title=\"kaelig/moniteur\">kaelig/moniteur</a></p>\n\n    </blockquote>\n<p>他にも色々思う所あり、今日一番のセッションだったなーと思います。<br />\n同じような悩みを持ってる人がいるもんなんやなーとちょっと安心しました。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Styling <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a> (Editor)</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>はプレゼンアプリでした。<br />\nというのはさておき、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>の中でどうHTML/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>が組まれてるかを、実際にさわりながら説明してくセッション。</p>\n\n<ul>\n<li>ファイルの配置構造とか</li>\n<li>変数名とか</li>\n<li>hslでテーマ作れば値ひとつで明暗まとめて処理できるとか</li>\n<li>クラスのカスケードの考え方とか</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DE%A1%BC%A5%AF%A5%A2%A5%C3%A5%D7\">マークアップ</a>とか</li>\n<li>なんでBEMとか使ってないかとか</li>\n</ul><p>細かいとこが意外に参考になりました。</p><p>肝心の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Vim\">Vim</a>に慣れきってしまった今すぐに移行したいほどのものではないかなー。</p>\n\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>無料Coffee/紅茶にすごい質/量なプレゼンに感服する一日でした。<br />\nもちろん某社だけではないけど、<br />\nあれだけの人数があれだけの次元でWebのコト考えられる会社すげーなー。</p><p>ちがう某社にも頑張っていただきたいところやー。</p>\n\n    <blockquote>\n        <p>めも: ランチの予定いれるの忘れないようにする</p>\n\n    </blockquote>\n\n</div>"
}
