{
  "title": "Swiftに入門してみたメモ",
  "html": "<p>べ、別に鞍替えとかそういうのじゃないんだからね！<br />\n時間かけてなんかやったなら、その記録を残そうという趣旨でございます。</p>\n\n<div class=\"section\">\n    <h3>はじめに</h3>\n    <p>プログラミングというものに関する私のスキルセットは以下です。</p>\n\n<ul>\n<li>前の会社で3ヶ月<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>やってたけど忘れたしあんなもんはノーカン</li>\n<li>よって<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>からプログラミング道に入門</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>をよく書くようになってやっと2年過ぎた</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Perl\">Perl</a>を業務上わりとよく見る/ちょっとだけ書く</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/PHP\">PHP</a>ならコピペでならなんか作れる</li>\n</ul><p>というような感じなので、ことプログラミングの根源たる部分に関しては見当違いのこととか多数あると思います。<br />\nなんかあったら教えてくださいまし。</p>\n\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Swift\">Swift</a>で</h4>\n    <p>とりあえずTodoApp作りました。</p>\n\n<ul>\n<li>ヘッダとリストで構成されてて</li>\n<li>ヘッダの新規追加ボタンから新規追加ができて</li>\n<li>リストをスワイプすると編集と削除ができて</li>\n<li>データがアプリ側に保存できる</li>\n</ul><p>そういうThe TodoAppを。<br />\nてか以下のサイトのやつです。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://tech.camph.net/?p=363\" target=\"_blank\" title=\"作って学ぶSwift/iOSアプリ入門Camphor- Tech Blog | Camphor- Tech Blog\">作って学ぶSwift/iOSアプリ入門Camphor- Tech Blog | Camphor- Tech Blog</a></p>\n\n    </blockquote>\n<p>大変勉強になりました！</p><p>さて本題。<br />\n以下、むってなったものやなるほどーってなったものたち。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>let</h3>\n    <p>ES6でもletってのは使えますが、このletはまた少し違う。<br />\n厳密に同じかはわからんけど、いわゆる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/const\">const</a>と同じで「再定義しない変数」に使う。</p><p>まぎらわし・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>型付けできる</h3>\n    <pre class=\"code\" data-lang=\"\" data-unlink>var count: Int = 1\nlet name: String = &#34;Swift&#34;\nlet arr: [String] = [&#34;foo&#34;, &#34;bar&#34;]</pre><p>出ました<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>しか知らん人泣かせの概念！<br />\nとはいえそんなに難しいものじゃない + むしろありがたいと感じる今日このごろ。</p><p>指定しなくても動的に型付けしてくれるらしいけど、<br />\nこれはもう片っ端から付けるようクセにしたほうがいい気がする。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Dictionary</h3>\n    <p>オブジェクトでやりたいことをやる時に使う感じ？<br />\nでも型で縛って使うので、定数オブジェクトみたいな用途にしか使えないかも。</p><p>まあなんでもできちゃうjsが特殊なんかね・・。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>var langDict: [String:String] = [\n  &#34;ruby&#34;: &#34;るびー&#34;,\n  &#34;js&#34;:   &#34;ジャッヴァスクリプト&#34;\n]</pre><p>{} じゃなくて [] っていう！！</p>\n\n</div>\n<div class=\"section\">\n    <h3>タプル</h3>\n    <p>新たな概念や。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>let name: (first: String, last: String) = (first: &#34;Lea&#34;, last: &#34;der22&#34;)\nlet res: (min: Int, max: Int, sum: Int) = (min: 1, max: 5, sum: 20)</pre><p>こういう組み合わせの内容がくるってのを定義できるのね。</p>\n\n</div>\n<div class=\"section\">\n    <h3>シングルクオート使わない</h3>\n    <pre class=\"code\" data-lang=\"\" data-unlink>// let name = &#39;これダメ&#39;\nlet name = &#34;これOK&#34;</pre><p>これは中々に衝撃でした。<br />\nダブルクオートなんか使うんじゃねえ！って言われて育った身としては！</p>\n\n</div>\n<div class=\"section\">\n    <h3>セミコロンも括弧もいらない</h3>\n    <pre class=\"code\" data-lang=\"\" data-unlink>if hoge &gt; 10 {\n  println(&#34;Over 10!&#34;)\n}</pre><p>これも慣れの問題でしょうがだいぶ違和感が・・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>for inで配列まわせる</h3>\n    <pre class=\"code\" data-lang=\"\" data-unlink>// まわせる！\nfor word in [&#34;hoge&#34;, &#34;fuga&#34;, &#34;piyo&#34;] {}\n\n// indexほしいとき\nfor (index, word) in enumerate([&#34;hoge&#34;, &#34;fuga&#34;, &#34;piyo&#34;]) {}</pre><p>そんなことが・・。<br />\nちなみにDictionaryも回せるらしい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Optional</h3>\n    <p>型の後ろに ? つけるやつ。<br />\nこれをしないと、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/nil\">nil</a>(nullじゃない！)を代入できない。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>var num: Int? = 1\nnum = nil // ok\nnum!++ // ただし ! つけないと元の型として使えない</pre><p>そして使うときは ! つけないといけない。<br />\nいかに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>がなんでもアリの世界やったかを味わっています。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h3>巻き上げとかない</h3>\n    <p>functionとは違うのだよ！</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>// エラーになる\n// println(getA())\n\nfunc getA() -&gt; String {\n  return &#34;A&#34;\n}\nprintln(getA())</pre><p>まあ、そんな書き方する機会ないんやろけど。</p>\n\n</div>\n<div class=\"section\">\n    <h3>ArrowFunctionではない</h3>\n    <p>このペースでメモってるとキリない気がしてきた。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>// -&gt; は戻り値の型を書いてる\nfunc getA() -&gt; String {\n  return &#34;A&#34;\n}\n\n// 何も返らないやーつ\nfunc say(message: String) -&gt; Void {\n  println(message)\n}</pre>\n</div>\n<div class=\"section\">\n    <h3>newとかいらない</h3>\n    <p>いらないんですって。</p>\n\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Enum\">Enum</a></h3>\n    <p>どっかで見た・・・TypeScript？</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>enum Suit {\n  // case で定義してく\n  case Spades, Hearts, Diamonds, Clubs\n\n  func desc() -&gt; String {\n    switch self {\n    // 使うときドットつける\n    case .Spades"
}
