{
  "title": "React.js meetup #2 に行ってきたメモ",
  "html": "<p>いってきたシリーズが続いております。<br />\nつまりはメモ記事です。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>React v0.14について by @koba04</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/koba04/reactjs-v0-dot-14-changes\">Reactjs v0.14 changes // Speaker Deck</a></p>\n\n    </blockquote>\n\n<ul>\n<li>Stateless Components: stateいらずのpropだけな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>が欲しい場合に</li>\n<li>this.refs.** でDOMの参照が取れるように</li>\n<li>よりisomorphicな感じに機能が分割された</li>\n<li>addon類が個別のパッケージになった</li>\n<li>react-toolsがdepricatedになってbabel使えになった</li>\n<li>v0.15もすぐ来そう</li>\n<li><a href=\"https://github.com/chenglou/react-motion\">https://github.com/chenglou/react-motion</a>ってのが良いらしい</li>\n</ul><p>でもやっぱアニメーションとか考えるのつらそうよねー。</p>\n\n    <blockquote>\n        <p><a href=\"https://facebook.github.io/react/blog/2015/07/03/react-v0.14-beta-1.html\">React v0.14 Beta 1 | React</a></p>\n\n    </blockquote>\n<p>あと読む。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Flowtypeについて by @kelemen_viktor</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>の前は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Microsoft\">Microsoft</a>とか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Cookpad\">Cookpad</a>にいたりしたらしいですよ。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>やReactのコードベースは巨大なので、秩序を保つ仕組みが必要</li>\n<li>そこで型 -> flowだ！</li>\n<li>動機は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/PHP\">PHP</a>のためにHack作ったのと一緒で、いろいろ似せてるとこがある</li>\n<li>NullableTypeは ? を前につける</li>\n<li>MixedTypeにするとなんでも入る</li>\n<li>Void, Arrays, Tuples などなどもある</li>\n<li>Objectに一旦セットした値も型チェックしてくれる</li>\n<li>UnionTypeって言って | でどれかみたいな指定もできる -> var a: 'bar' | 'foo' = 'bar';</li>\n<li>これはFluxのAction振り分けるところとかで有用</li>\n<li>/* @flow */ と /* @flow weak */ って感じでモードを切り替えられる</li>\n<li>ただの型チェックの仕組みじゃなくて、もっと先の賢い<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB\">ツール</a>を目指してる</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>のコードでほぼflowが使われてるかというとそうではない</li>\n<li>けど新しいとこでは基本的に使うようになってる</li>\n</ul><p>型を持ち込むことに対しての云々は今まで散々語られてきたと思うけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>内でもだいたい同じ印象らしい。<br />\nだいぶ長いけど過渡期感がすごいですよねー、いま。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Introduction to Redux by @axross_</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Mac\">Mac</a>の壁紙がかっこいいｗ</p>\n\n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/axross/introduction-to-redux\">Introduction to Redux // Speaker Deck</a></p>\n\n    </blockquote>\n<p>ちなみにReduxはコレ。</p>\n\n    <blockquote>\n        <p><a href=\"https://rackt.github.io/redux/index.html\">Read Me | Redux</a></p>\n\n    </blockquote>\n\n<ul>\n<li>ReduxはオレオレFluxのひとつ</li>\n<li>Flummoxよりも最近では人気(というかもうRedux使えみたいになってるらしい)</li>\n<li>単一のツリー構造の中にすべてのデータをいれる</li>\n<li>Tree -> State -> Reducer</li>\n<li>ReducerっていうやつがStateの前に立つ</li>\n<li>expressのmiddlewareみたく、途中に噛ませる機能があったり</li>\n<li>Reactで使うなら、<a href=\"https://github.com/rackt/react-redux\">https://github.com/rackt/react-redux</a></li>\n<li>React-routerと使うなら、1.0.0-beta2以降が良いらしい</li>\n</ul><p>Reduxがいかほどのものか確かめないと！</p>\n\n</div>\n<div class=\"section\">\n    <h3>React Everywhere(仮) by @mizchi</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/mizchi/dokodemo-react-suru\">&#x3069;&#x3053;&#x3067;&#x3082; React &#x3059;&#x308B; // Speaker Deck</a></p>\n\n    </blockquote>\n\n<ul>\n<li>v0.14でレンダラーが差し替えられる</li>\n<li>なので、dom相手(ブラウザ)だけじゃなくても使える</li>\n<li>react-pixi / react-three / react-**</li>\n<li>Reactはcomponent(Will|Should)Updateの最適化が結局辛い</li>\n<li>それに容量がそれなりに重い</li>\n<li>DDD的にいうとReactはプレゼンテーション層</li>\n<li>Fluxはアプリケーション層</li>\n</ul><p>あとは自作<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>の紹介など。</p>\n\n</div>\n<div class=\"section\">\n    <h3>LTたち</h3>\n    <p>会場の懇親会化があってパソコンとじたので思い出してかく。</p>\n\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a> Closure Toolsで作った大規模サービスにReactを導入した話 by @ama_ch</h4>\n    \n<ul>\n<li>Closureの中にReactをどうやって仕込むか</li>\n<li>Closure Compilerのexternsってのに指定すれば逃がせる</li>\n<li>createClassじゃなくて、Compoentをつかってやる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Fluxとイベントソーシングの話(仮) by @amagitakayosi</h4>\n    \n<ul>\n<li>DDD的考え方にFluxをあてはめると・・・</li>\n<li>DDDの例の本むずかしそう</li>\n<li>どういったActionを発行したかを記録しておけば、いつでもその時点を再現できる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>React Componentの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%B9%A5%C8%A5%E9%A5%AF%A5%BF\">コンストラクタ</a>/コンストラクト by @jshosomichi</h4>\n    \n<ul>\n<li>createClass -> renderってやってるアレ、内部でどういうことしてるかの説明</li>\n<li>Reactやるなら一句詠めなきゃダメです</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Our wish to Flowtype by @teppeis</h4>\n    \n<ul>\n<li>Flowは言語感なくていい(!TypeScript)</li>\n<li>はやい</li>\n<li>d.tsサポートしてくれない</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OCaml\">OCaml</a>なのでコントリビュートしにくい</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>どこぞでReactは考えることを減らしてシンプルさを提供してるーみたいな話を聞いたけど、そのほかにもいろいろ考えること増えててなんだかんだプラスマイナス0ではないよねーという感想。</p><p>あれ勉強しとかないとなーって思ったまま日がたって、その頃にまた新しいの出てたりするので大変よね。<br />\nこのへんの使ってイカのやつリニューアルしようかしら・・。</p>\n\n</div>"
}
