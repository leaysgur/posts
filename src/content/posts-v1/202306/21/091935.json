{
  "title": "Solid Queryを先んじてv5にしたときのメモ",
  "html": "<p>React QueryのSolid.js版の話。</p><p>`@tanstack/solid-query`の最新のリリースバージョンは`4.x`系で、近いうちにv5が出るって感じ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"時期尚早では\">時期尚早では？</h3>\n    <p>って思うかもしれないが、実はv4のSolid Queryには、`Suspense`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>配下ではまともに動かないという（個人的には致命的な）バグがあり・・。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/TanStack/query/issues/5010\">[solid] Refetching query inside &lt;Suspense&gt; resets focus &middot; Issue #5010 &middot; TanStack/query &middot; GitHub</a></p>\n\n    </blockquote>\n<p>そういうわけで、まだリリース前ではあるものの、ほぼほぼ仕上がってるv5に移行した。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"移行ログ\">移行ログ</h3>\n    <p>まずはインストールで、`npm i @tanstack/solid-query@alpha`する。</p><p>メモっておくべきコードの書き直しポイントとしては以下。</p>\n\n<div class=\"section\">\n    <h4 id=\"基本のシグネチャ\">基本の<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B7%A5%B0%A5%CD%A5%C1%A5%E3\">シグネチャ</a></h4>\n    <p>ナイスなアプデ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// v4</span>\n<span class=\"synStatement\">const</span> query = createQuery(<span class=\"synIdentifier\">{</span>\n  queryKey: () =&gt; <span class=\"synIdentifier\">[</span><span class=\"synConstant\">'todos'</span>, tId()<span class=\"synIdentifier\">]</span>,\n  queryFn: () =&gt; fetchTodo(tId()),\n  get enabled() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> tId() !== <span class=\"synStatement\">null</span>;\n  <span class=\"synIdentifier\">}</span>,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// v5</span>\n<span class=\"synStatement\">const</span> query = createQuery(() =&gt; (<span class=\"synIdentifier\">{</span>\n  queryKey: <span class=\"synIdentifier\">[</span><span class=\"synConstant\">'todos'</span>, tId()<span class=\"synIdentifier\">]</span>,\n  queryFn: () =&gt; fetchTodo(tId()),\n  enabled: tId() !== <span class=\"synStatement\">null</span>,\n<span class=\"synIdentifier\">}</span>));\n</pre><p>というように、全体が関数でラップされるようになって、個別に関数にする必要がなくなることで、よりSolidらしくかけるようになった。</p><p>`createMutation()`も同様。</p>\n\n</div>\n<div class=\"section\">\n    <h4 id=\"statusとfetchStatus\">`status`と`fetchStatus`</h4>\n    <p>データの取得中にローディング表示を出したりするためのフラグまわりが一新された。</p><p>stale-while-revalidate的な挙動の裏には、</p>\n\n<ul>\n<li>クエリとしてのステータス</li>\n<li>fetch処理のステータス</li>\n</ul><p>この2つを区別して組み合わせる必要があるのでこうなったと。</p>\n\n<ul>\n<li>`isPending`(元`isLoading`): データの有無に関わらずロード中</li>\n<li>`isLoading`(元`isInitialLoading`): `isPending && isFetching`で、データが無い最初のロード中</li>\n</ul><p>ステータスはデータの有無に関するフラグ、fetchのステータスは、`queryFn`の実行状態に関するフラグってこと。</p>\n\n<ul>\n<li>`isFetching`: 実際にfetchしてる中</li>\n<li>`isRefetching`: refetchしてる中</li>\n</ul><p>Mutationの場合も、`isLoading`が`isPending`に変更された。</p>\n\n</div>\n<div class=\"section\">\n    <h4 id=\"ロード中も前のデータを残しておくやつ\">ロード中も前のデータを残しておくやつ</h4>\n    <p>ページングのUIなんかで使いたいアレ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// v4</span>\ncreateQuery(<span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n  keepPreviousData: <span class=\"synConstant\">true</span>,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// v5</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> keepPreviousData <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;@tanstack/solid-query&quot;</span>;\n\ncreateQuery(() =&gt; (<span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n  placeholderData: keepPreviousData,\n  <span class=\"synComment\">// or</span>\n  placeholderData: (prev) =&gt; prev,\n<span class=\"synIdentifier\">}</span>));\n</pre><p>これだけ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"まとめ\">まとめ</h3>\n    <p>他にも、`focus`イベントでrefetchしてたのが`visibilitychange`イベントに変わったので、DevToolsを行き来するたびにfetchしなくなってハッピー。</p><p><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3\">マイグレーション</a>ガイドはこちら。</p>\n\n    <blockquote>\n        <p><a href=\"https://tanstack.com/query/v5/docs/react/guides/migrating-to-v5\">Migrating to TanStack Query v5 | TanStack Query Docs</a></p>\n\n    </blockquote>\n<p>or</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/TanStack/query/discussions/4252\">v5 Roadmap &#x1F5FA; &middot; TanStack/query &middot; Discussion #4252 &middot; GitHub</a></p>\n\n    </blockquote>\n<p>基本の<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>については、Reactのページを見て類推するままやけど、そこはまあ仕方ない・・。</p><p>無事にこのままリリースされますように！</p>\n\n</div>"
}
