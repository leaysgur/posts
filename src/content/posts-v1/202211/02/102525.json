{
  "title": "最近のフロントエンドフレームワークに対する認識とお気持ちの整理",
  "html": "<p>久しぶりに、いわゆるポエムを。</p><p>新規・運用ヘルプを問わず、受託や副業でよくフロントエンドをやってるWeb屋の見解、そして手札のお悩み。<br />\nこの先、また技術選定する際なんかにも参考になるかと思ったので。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"React\">React</h3>\n    <p>「いまフロントエンドやるなら最初に覚えるべき！」は、もう過去の話かなーと個人的には思ってる。</p><p>Reactは`UI = fn(state)`なのが良い！とか言われるけど、あなたが必要としてるのは`UI = Component(props)`かもよって。</p><p>一昔前までは、たしかにあらゆる面で頭一つ抜けてる印象はあったけど、今はそうでもないか、その差はだいぶ埋まってきてると思ってる。（もちろん<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%E8%B9%D4%BC%D4\">先行者</a>利益みたいなところで、エコシステムはまだまだ優位な差があるかもしれんけど、それもあまり実感できたことはないし、いまからはじめる人はそんなんで困らんやろうし）</p><p>原初の時代からReactな案件をそれなりにこなしてきたけど、今でもReact-wayですべてを考えるのはやっぱり小難しいな〜って思うし、このEasyではなくSimpleに極振りした<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>セットを使いこなすのまじムズいな〜って思う。</p><p>いつだってMobXだったり、Reactとは直接的に接するのを避けてた身としては、HooksもSuspenseもRSCも、React大好きマンが集まったチームじゃないとワークするの無理では？とすら思ってる。（なので「ゆくゆくは内製で開発できるようにしたいので、Reactでお願いします！」って本当によく言われるけど、まぁお察しですよね）</p><p>あとは、ことWeb開発において、`react-dom`がなぜ必要なのかが本当にわからない、とずっと思ってる。サイズも許容したくないくらいデカイし、税金にしては高すぎる。</p><p>`react-native`や`react-three-fiber`や`ink`みたく、レンダラーが拡張できるのは素敵かもって思うけど、それはほんまにReact（JSXとかHooksとか）なコードである必要あるんか？（メンタルモデルが本当にマッチしてるの？っていうところ）っていうのはわからない。少なくとも`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>`とか見てる分には、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>に関しては懐疑的。</p><p>まぁそういうわけなので、自らすすんでReactを選定することは、この先ないだろうなと思ってる。</p><p>変わらずの方向性で元気にやってほしいなとは思ってるけど、個人的Tier1ではなくなったという話。（そういう意味で`useEvent()`の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RFC\">RFC</a>には少し複雑な気持ちだったので流れてよかった）</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/reactjs/rfcs/pull/220\">https://github.com/reactjs/rfcs/pull/220</a></p>\n\n    </blockquote>\n<p>そういえば、`Suspense` for data fetchingはいったいいつまでexperimentalなんやろね。</p>\n\n<div class=\"section\">\n    <h4 id=\"Nextjs-Remix\">Next.js, Remix</h4>\n    <p>となるとやはりReact単体というより、Nextが本体っていうか。Reactは単体でも使える・・みたいな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DE%A1%BC%A5%B1%A5%C6%A5%A3%A5%F3%A5%B0\">マーケティング</a>を今でもたまに見るけど、エンド開発者から見た場合に、Reactだけを単体で採用したいケースってある？いや、ない。</p><p>じゃあNextをやるべきか？って話になるけど、これについてもReact同様で、もはや第一党として選ぶ理由はないかなーと。</p><p>ファイルベースのルーティング、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>もシームレスにできる、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>もサクッと生やせてオールインワン！なんならVercelにデプロイして即完了！この体験すげー！っていうのは、もはやNextだけのお株ではないし。</p><p>Nextの`v13`に対する世間の反応と同じように、ReactはNextの中で行き永らえながら、どんどん高機能でどんどん複雑化していって、特定のケースでだけ抜擢される<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%D9%A5%F3%A5%B8%A5%E3%A1%BC%A5%BA\">アベンジャーズ</a>みたいな存在になっていくんかなーって夢想してる。相対すべき驚異がこの世に存在するのかどうかは知らんけど。</p><p>好き嫌いはさておき、RSCもReact+Nextらしい方向性と打ち出し方やなって思いました。（なんでそうなんでもかんでも難しく解決しようとするん・・）あと、Turbopackの過度な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DE%A1%BC%A5%B1%A5%C6%A5%A3%A5%F3%A5%B0\">マーケティング</a>には関心しない。</p><p>他のReact用<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>でいうと、RemixはShopifyにジョインしたことで存在感がまた出てきて、Nextの対抗馬〜みたいになったりするんだろうか？</p>\n\n    <blockquote>\n        <p><a href=\"https://shopify.engineering/remix-joins-shopify\">https://shopify.engineering/remix-joins-shopify</a><br />\n<a href=\"https://remix.run/blog/remixing-shopify\">https://remix.run/blog/remixing-shopify</a></p>\n\n    </blockquote>\n<p>個人的にピックするかでいうと、クラサバ分離な哲学には同意するけど、それをReactでやる必要はない・・って感じ。`react-dom`もやっぱいらんよな〜。</p><p>当初から<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>エッジファーストで考えられてたりとか、そういうところはNextより先を行ってるとは思うけど、`react-router`の影がやっぱちらついてな・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4 id=\"Preact\">Preact</h4>\n    <p>Reactみたくランタイム同梱系のライブラリでいくと、Vueよりもサイズが小さいというところで、今もなおその<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%A4%A5%C7%A5%F3%A5%C6%A5%A3%A5%C6%A5%A3\">アイデンティティ</a>は健在か。サイズは小さくまとめたいが、VDOMは欲しい場合の択として。（まぁそもそもWebでVDOMが欲しい場合が思いつかんのやけど）</p><p>Signalsが使えるようになって、多少は書き味のReact離れを成し遂げはしたけど、やっぱりもう、`useEffect()`書きたくね〜思考停止でメモ化したくね〜っていう気持ちが強いんよな・・。</p><p>あとは周辺機器が結局Reactしか見てなくて、そのあたりの対応がいつまでもイマイチだったり、立ち位置がずっとインディーズバンドみたいなところがあると思ってて、そこが煮え切らない。少なくとも、React互換ですっていう見方はもうやめたほうがいい気はしてる。</p><p>Shopifyつながりで、RemixのコアとしてPreactが採用された！みたいな未来はないかしら？あったらよくない？</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/remix-run/remix/issues/425\">https://github.com/remix-run/remix/issues/425</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"Vue\">Vue</h3>\n    <p>（あまり出会う機会がないので大したお気持ちがあるわけではない）</p><p>`petite-vue`みたく、`script`タグからも独立してほぼフル機能で使えるルートが残されてるのがとてもユニークだなと思ってて、Reactよりよっぽど取っつきやすいなって思ってる。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SFC\">SFC</a>のスタイルはVueの発明やったと思うし、そういうDX特化みたいなポジションをこれからも取り続けていってほしい。</p><p>そういう意味では、`v3`のComposition系の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>は、やっぱ世の流れへの対応なんかなー。当時はVueでそれやるんや？って思ったけど、まあファンがいるのはいいことよね。</p><p>Compiler-InformedなVDOMってやつの中身は気になるところではある。</p>\n\n    <blockquote>\n        <p><a href=\"https://vuejs.org/guide/extras/rendering-mechanism.html#templates-vs-render-functions\">https://vuejs.org/guide/extras/rendering-mechanism.html#templates-vs-render-functions</a></p>\n\n    </blockquote>\n<p>Nuxt3もRCになって、立派になったなあ・・って思いつつ、Contentの機能とかを見るに、アプリよりもサイト方面に舵を切っていくんかな？</p><p>そのほかだと、Nitroの汎用さはどっかでなんかに使えんかなーって見てる。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/unjs/nitro\">https://github.com/unjs/nitro</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Svelte\">Svelte</h3>\n    <p>「いまフロントエンドやるなら最初に覚えるべき！」は、個人的にはこっち。</p><p>書くべきコードが少ないってのが、本当に良い。もちろん最初は、魔法が効きすぎてて心配・・・って印象は正直あったけど。</p><p>でもライブラリってのは、本来達成したい機能をガイドするために存在するのであって、ライブラリの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を使いこなすので手一杯になってたら本末転倒なので。リアルワールドには、他にも考えるべきこと、やるべきことがいっぱいあるので。</p><p>ストアに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>にアニメーションにって、最初から全てが揃ってる状態からはじめられるのも敷居が下がってていいし、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>して最適化されたコードだけが配信されるっていう発明は、今後の主流になるよなーと思ってる。</p><p>少し前まではエディタまわりのサポートやらDXが弱かったイメージあるけど、最近は落ち着いてきてると思うし、何ら不満はないです。</p>\n\n<div class=\"section\">\n    <h4 id=\"SvelteKit\">SvelteKit</h4>\n    <p>後発なのもあってか、本当にバランスがいい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>セットやなって思う。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>エッジにももちろんデプロイできるし、ページごとに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>/SSGを切り替えられたりと、「顧客が本当に欲しかったもの」さん！って勝手に呼んでる。</p><p>`+page.js`みたいなルーティングにおけるファイル名の縛りは、最初はちょっとOpinionated過ぎでは〜？って思ってたけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>はOpinionatedであるべしって最近は思う。もちろんそれが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1\">コスパ</a>や審美眼的に許容できるならではあるけど、悩む余地は少なければ少ないほうがよい。なんかそういうラインのギリギリを攻めてくるのが上手いな・・・って。</p><p>`load()`やらForm action系のRemix感あふれる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>たちについては、それなりに挙動の理解が必要なので、そこだけは時間が必要そう。でもこれはSvelteKitの問題っていうより、モダンな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>への回帰みたいな大きなテーマへの慣れみたいな話かなーとも。</p>\n\n    <blockquote>\n        <p><a href=\"https://kit.svelte.dev/docs/load\">https://kit.svelte.dev/docs/load</a><br />\n<a href=\"https://kit.svelte.dev/docs/form-actions\">https://kit.svelte.dev/docs/form-actions</a></p>\n\n    </blockquote>\n<p>RCが取れるのも時間の問題というところで、投資しておいて損はないかと。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"Solid\">Solid</h3>\n    <p>Svelteと同じく、VDOMではなく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>時に最適化される系のライブラリ。<br />\nSvelteとの違いはその内部の最適化と程度と、やはりはその<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>か。こちらはJSXとHooksライクな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>で書けるので、SvelteよりもEverything in JSっていう書き味が好みっていう人もいるかもしれない。</p><p>ポストReact枠として個人的には期待しつつも、Svelte(Kit)で対応できない案件ってあるんかな？っていうのが目下の関心事って感じで、そこを検証していきたい気持ち。</p><p>Signalsはもちろん、`createResource()`とか`Suspense`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>まで同梱されてるけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>まわりが不在なのよな〜。もちろんCSSinJSはできるけど、それだと結局あとで最適化するのが手間でな〜、って。結局JSXである限り、この悩みはつきまとうのだなあ。</p>\n\n<div class=\"section\">\n    <h4 id=\"SolidStart\">SolidStart</h4>\n    <p>まだまだベータ。</p><p>昨今の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>はだいたいViteに載ってるので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> Modulesなんかはそのまま使えるようになる。（しかし別ファイルな書き味が好きくない・・かといってCSSinJSは・・Tailwindは・・ウッ・・）同様にVite側からアプローチできるものとして、`vanilla-extract`とかは気になるけど、別ファイルってのがな〜。</p><p>SvelteKitの`load()`相当としては、`routeData()`ってのがあったりと、まあ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>セットに関してはだいたい一緒な感じに落ち着く気がしてる。</p><p>Solidの本体で、Partial Hydrationを直接的にサポートする<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>が実装されたりもしたので、そのあたり踏まえて一味違う感じの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>になったりせんかなーって見守ってるところ。それこそ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>みたいに、自動でRSCライクな挙動をいい感じにしてくれるやつみたいにならんかな。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/solidjs/solid/releases/tag/v1.6.0\">https://github.com/solidjs/solid/releases/tag/v1.6.0</a></p>\n\n    </blockquote>\n<p>そういう意味でも、まだ少しアーリーなステージかなーという見立て。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"メタフレームワーク\">メタ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a></h3>\n    <p>特定のライブラリにとらわれない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>たち。</p>\n\n<div class=\"section\">\n    <h4 id=\"Astro\">Astro</h4>\n    <p>今季のイチオシ！</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>とPartial Hydration（以下PH）さえあれば、だいたいのWebページは作れるとさえ思ってるし、Nextがこれをやってくれてればな〜とまで思ってた。</p><p>そういう意味では、各<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>側で、PHやそれに準ずるア<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%C7%A5%A2\">イデア</a>が追加されたりすることもあるんでは？って思ったりも。Svelteくらい小さいならば、JSの遅延ロードはさておくとしても、遅延実行なプリミティブはどこでも便利なはずやし。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/kit/issues/1390\">https://github.com/sveltejs/kit/issues/1390</a></p>\n\n    </blockquote>\n<p>ともあれ、メジャーバージョンも出たところなので、SSGで攻めたい場面では安心して場に出せる手札かと。</p>\n\n</div>\n<div class=\"section\">\n    <h4 id=\"Qwik\">Qwik</h4>\n    <p>自分の中でも評価が揺れてる期待の新星ポジ。</p><p>着想は理解できるし同意もするけど、これは人類に扱いきれるのか？！みたいな難しさを孕んでるというかなんというか。（こういうとこにAngularの面影を感じｒ）あとは実用に値するのかの検証がまだまだ必要なフェーズでありつつ、検証するのも大変ね？ってところで、まあ静観かなーということにしてる。</p><p>PHでは不十分なほどに、ダイナミックな枝があるようなページ構造ってどういうUIなんやろう？っていうのがパッと出てこないのと、そこまで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%EA%A5%AB\">カリカ</a>リにLazinessを追求せざるを得ない場面に遭遇したことがないからかな・・。</p><p>こういう振り切ったアプローチ、嫌いじゃないけど。（ただRustで書かれたOptimizerのコードリーディングは挫折した）</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"まとめ\">まとめ</h3>\n    <p>無秩序データフローの神Hooks feat. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BD%BD%C6%F3%C3%B1\">十二単</a>衣ばりContextみたいなReact案件たちに疲弊し、かといって自分で書いててもなんだかしっくりこない、そんな2022年。</p><p>どんなライブラリでも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>でも、結局カオスになってしまうのなら、Write less codeこそがやはり真理なんや・・って気持ちの高まりによるポエムでした。（無闇矢鱈と追加したライブラリの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を覚える前に、捨てやすいコード分割や関心の分離や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Web%C9%B8%BD%E0\">Web標準</a>に脳内リソースを割くことを学んでくれ頼む）</p><p>React+Next以外の選択肢もあるとはいえ、</p>\n\n<ul>\n<li>やっぱりまだRCなりベータなりと微妙なラインで手が出しづらく、なんだかんだ消去法で・・・</li>\n<li>不安なのでとりあえず・・・</li>\n</ul><p>ってな感じで、しばらくも結局Nextになっちゃうのが現実なんやろうとは思いつつ。</p><p>未来のために、自分の頭で考えて己の審美眼を信じて、意志ある技術選定をしていかねばならぬ。</p><p>（なんか今年の振り返りみたいになってしまった）</p>\n\n</div>"
}
