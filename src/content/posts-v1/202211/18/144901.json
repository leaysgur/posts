{
  "title": "JSDoc TSで、ユニオン型を改行して書く場合は、括弧が必要",
  "html": "<p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">JSDoc TSの場合、ユニオンを改行して書く場合は括弧が必須・・・！ <a href=\"https://t.co/C845A6PyPw\">pic.twitter.com/C845A6PyPw</a></p>&mdash; りぃ🐧 / Yuji Sugiura (@leader22) <a href=\"https://twitter.com/leader22/status/1593480483899260928?ref_src=twsrc%5Etfw\">2022年11月18日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p><p>この画像のとおり。<br />\n<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"こういうこと\">こういうこと</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">/**</span>\n<span class=\"synComment\"> * @typedef {{ type: &quot;x&quot;, data: number }} X</span>\n<span class=\"synComment\"> * @typedef {{ type: &quot;y&quot;, data: string }} Y</span>\n<span class=\"synComment\"> *</span>\n<span class=\"synComment\"> * @typedef {X | Y} XY1</span>\n<span class=\"synComment\"> * @typedef {</span>\n<span class=\"synComment\"> *   | X</span>\n<span class=\"synComment\"> *   | Y</span>\n<span class=\"synComment\"> * } XY2</span>\n<span class=\"synComment\"> * @typedef {(</span>\n<span class=\"synComment\"> *   | X</span>\n<span class=\"synComment\"> *   | Y</span>\n<span class=\"synComment\"> * )} XY3</span>\n<span class=\"synComment\"> */</span>\n\n<span class=\"synComment\">/** @type {XY1} */</span>\n<span class=\"synStatement\">const</span> xy1 = <span class=\"synIdentifier\">{</span> type: <span class=\"synConstant\">&quot;x&quot;</span>, data: <span class=\"synConstant\">&quot;-&quot;</span> <span class=\"synIdentifier\">}</span>; <span class=\"synComment\">// 型エラー</span>\n<span class=\"synComment\">/** @type {XY2} */</span>\n<span class=\"synStatement\">const</span> xy2 = <span class=\"synIdentifier\">{</span> type: <span class=\"synConstant\">&quot;x&quot;</span>, data: <span class=\"synConstant\">&quot;-&quot;</span> <span class=\"synIdentifier\">}</span>; <span class=\"synComment\">// 型エラーにならない</span>\n<span class=\"synComment\">/** @type {XY3} */</span>\n<span class=\"synStatement\">const</span> xy3 = <span class=\"synIdentifier\">{</span> type: <span class=\"synConstant\">&quot;x&quot;</span>, data: <span class=\"synConstant\">&quot;-&quot;</span> <span class=\"synIdentifier\">}</span>; <span class=\"synComment\">// 型エラー</span>\n</pre><p>あろうことか`any`になっちゃうので注意・・・。</p>\n\n</div>"
}
