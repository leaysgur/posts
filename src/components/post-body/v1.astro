---
const { PUBLIC_SHIKI_THEME } = import.meta.env;
---

<div data-post-body data-shiki-theme={PUBLIC_SHIKI_THEME} class="v1-post-body">
  <slot />
</div>

<style>
  .v1-post-body {
    display: contents;
  }

  :global(.v1-post-body h3) {
    padding-block-start: var(--size-5);
    padding-block-end: var(--size-2);
    border-block-end: var(--size-0) solid var(--border);
  }
  :global(.v2-post-body :is(h3, h4, h5)::before) {
    color: var(--text-2);
    font-size: var(--font-size-3);
  }
  :global(.v1-post-body h3::before) {
    content: "## ";
  }
  :global(.v1-post-body h4::before) {
    content: "### ";
  }
  :global(.v1-post-body h5::before) {
    content: "#### ";
  }

  /* v1, hatena blog uses <br>... */
  :global(.v1-post-body br) {
    display: none;
  }
  /* v1-posts use h3-h5 headings, 1 lv smaller than v2-posts(h2-h4) */
  :global(.v1-post-body h3) {
    font-size: var(--font-size-4);
  }
  :global(.v1-post-body h4) {
    font-size: var(--font-size-3);
  }
  :global(.v1-post-body h5) {
    font-size: var(--font-size-2);
  }
</style>

<script>
  // Replace `word` into <code>word</code>.
  (() => {
    const replace = async (targetEl: Element) => {
      targetEl.innerHTML = targetEl.innerHTML.replaceAll(
        /`([^`]*?)`/g,
        "<code>$1</code>",
      );
    };

    const observer = new IntersectionObserver((entries, observer) => {
      for (const entry of entries) {
        if (!entry.isIntersecting) continue;
        replace(entry.target).finally(() => observer.unobserve(entry.target));
      }
    }, {});
    const $targets = document.querySelectorAll(
      "[data-post-body] :is(p, li, h3, h4, h5)",
    );
    for (const $target of $targets) observer.observe($target);
  })();

  // Apply syntax highlight to code block.
  (() => {
    const shikiTheme =
      document
        .querySelector("[data-shiki-theme]")
        ?.getAttribute("data-shiki-theme") ?? "";

    const highlight = async (targetEl: Element) => {
      // @ts-ignore: Use CDN version for faster build
      const { getHighlighter } = await import("https://esm.sh/shikiji");
      // const { getHighlighter } = await import("shikiji");
      const highlighter = await getHighlighter({ themes: [shikiTheme] });

      let options = {
        theme: shikiTheme,
        lang: "",
      };
      try {
        // @ts-expect-error: Property 'dataset' does not exist on type 'Element'.
        const lang = targetEl.dataset.lang || null;
        await highlighter.loadLanguage(lang);
        options.lang = lang;
      } catch {}

      targetEl.outerHTML = highlighter.codeToHtml(
        targetEl.textContent ?? "",
        options,
      );
    };

    const observer = new IntersectionObserver((entries, observer) => {
      for (const entry of entries) {
        if (!entry.isIntersecting) continue;
        highlight(entry.target).finally(() => observer.unobserve(entry.target));
      }
    }, {});
    const $targets = document.querySelectorAll("[data-post-body] pre");
    for (const $target of $targets) observer.observe($target);
  })();
</script>
