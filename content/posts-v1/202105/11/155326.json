{
  "title": "Cloudflare WorkersをTypeScriptで書いてesbuildでビルドする",
  "html": "<p>そのためにはこういう用意があればよいというメモです。</p><p>いちおうTSだけなら公式からもテンプレが出てるので、それを使うのが手っ取り早い。<br />\nけど、`webpack`しかないし他にもいろいろ付いてくるしな〜という。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/cloudflare/worker-typescript-template\">GitHub - cloudflare/worker-typescript-template: &#x295; &bull;&#x301;&#x608;&bull;&#x300;) TypeScript template for Cloudflare Workers</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>TypeScriptで書く</h3>\n    <p>型定義が提供されてるので、それをまずいれる。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>npm i -D @cloudflare/workers-types</pre><p>そしてそれを`tsconfig.json`で読む。</p>\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink><span class=\"synSpecial\">{</span>\n  &quot;<span class=\"synStatement\">compilerOptions</span>&quot;: <span class=\"synSpecial\">{</span>\n    &quot;<span class=\"synStatement\">lib</span>&quot;: <span class=\"synSpecial\">[</span>&quot;<span class=\"synConstant\">esnext</span>&quot;, &quot;<span class=\"synConstant\">webworker</span>&quot;<span class=\"synSpecial\">]</span>,\n    &quot;<span class=\"synStatement\">moduleResolution</span>&quot;: &quot;<span class=\"synConstant\">node</span>&quot;,\n    &quot;<span class=\"synStatement\">esModuleInterop</span>&quot;: <span class=\"synConstant\">true</span>,\n    &quot;<span class=\"synStatement\">strict</span>&quot;: <span class=\"synConstant\">true</span>,\n    &quot;<span class=\"synStatement\">noUnusedLocals</span>&quot;: <span class=\"synConstant\">true</span>,\n    &quot;<span class=\"synStatement\">noUnusedParameters</span>&quot;: <span class=\"synConstant\">true</span>,\n    &quot;<span class=\"synStatement\">sourceMap</span>&quot;: <span class=\"synConstant\">true</span>,\n    &quot;<span class=\"synStatement\">target</span>&quot;: &quot;<span class=\"synConstant\">esnext</span>&quot;,\n    &quot;<span class=\"synStatement\">types</span>&quot;: <span class=\"synSpecial\">[</span>&quot;<span class=\"synConstant\">@cloudflare/workers-types</span>&quot;<span class=\"synSpecial\">]</span>\n  <span class=\"synSpecial\">}</span>,\n  &quot;<span class=\"synStatement\">include</span>&quot;: <span class=\"synSpecial\">[</span>\n    &quot;<span class=\"synConstant\">./**/*.ts</span>&quot;,\n    &quot;<span class=\"synConstant\">./node_modules/@cloudflare/workers-types/index.d.ts</span>&quot;\n  <span class=\"synSpecial\">]</span>,\n  &quot;<span class=\"synStatement\">exclude</span>&quot;: <span class=\"synSpecial\">[</span>&quot;<span class=\"synConstant\">node_modules/**/*</span>&quot;<span class=\"synSpecial\">]</span>\n<span class=\"synSpecial\">}</span>\n</pre><p>ここまでは上述のテンプレと同じ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>esbuildでビルド</h3>\n    <p>CFWはデフォルトで`webpack`によるビルドをサポートしているので、独自の`webpack.config.js`でTS対応するというのがテンプレのやり方。</p><p>ただ今回は`esbuild`でビルドさせたい、だって速いから。</p><p>で、そのためには、「自分でビルドします！」という設定を`wrangler.toml`に書く。</p>\n<pre class=\"code toml\" data-lang=\"toml\" data-unlink># ...\n\n[build]\nupload.format = &#34;service-worker&#34;\ncommand = &#34;npm run build&#34;</pre><p>という感じ。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/cli-wrangler/configuration#build\">https://developers.cloudflare.com/workers/cli-wrangler/configuration#build</a></p>\n\n    </blockquote>\n<p>こうしておけば、`wrangler deploy`や`wrangler dev`のビルド時にこのコマンドが使われる。</p><p>CIでデプロイしてるなら、`npm i && npm run build`って書きたくなるかもしれない。</p>\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink>  &quot;<span class=\"synStatement\">main</span>&quot;: &quot;<span class=\"synConstant\">./worker.js</span>&quot;,\n  &quot;<span class=\"synStatement\">scripts</span>&quot;: <span class=\"synSpecial\">{</span>\n    &quot;<span class=\"synStatement\">build</span>&quot;: &quot;<span class=\"synConstant\">esbuild --bundle --minify ./src/main.ts &gt; worker.js</span>&quot;,\n</pre><p>ファイルの場所はどこでもいいけど、`main`でちゃんと指し示すこと。</p>\n\n</div>"
}
