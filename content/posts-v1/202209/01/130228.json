{
  "title": "Qwikでinteractiveなコンポーネントをネストしたときの挙動",
  "html": "<p>Partial Hydrationをネストできる、みたいなイメージ。<br />\n（正確には、QwikのコンテキストでいわゆるHydrationと呼ばれる処理は行われないけど）</p><p>素直にQwik-wayなコードを書くだけで、Resumableなコンポーネントがネストできるというだけ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"コード\">コード</h3>\n    <pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> useStore<span class=\"synStatement\">,</span> component$<span class=\"synStatement\">,</span> Slot <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;@builder.io/qwik&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> Tab <span class=\"synStatement\">=</span> component$<span class=\"synStatement\">&lt;</span><span class=\"synIdentifier\">{</span> triggers: <span class=\"synType\">string</span><span class=\"synIdentifier\">[]</span> <span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;((</span><span class=\"synIdentifier\">{</span> triggers <span class=\"synIdentifier\">}</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">const</span> state <span class=\"synStatement\">=</span> useStore<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span> tab: triggers<span class=\"synIdentifier\">[</span><span class=\"synConstant\">0</span><span class=\"synIdentifier\">]</span> <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n  <span class=\"synStatement\">return</span> <span class=\"synStatement\">(</span>\n    <span class=\"synStatement\">&lt;</span>div<span class=\"synStatement\">&gt;</span>\n      <span class=\"synStatement\">&lt;</span>div<span class=\"synStatement\">&gt;</span>\n        <span class=\"synIdentifier\">{</span>triggers.map<span class=\"synStatement\">((</span>id<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">(</span>\n          <span class=\"synStatement\">&lt;</span>button disabled<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>state.tab <span class=\"synStatement\">===</span> id<span class=\"synIdentifier\">}</span> onClick$<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span><span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">(</span>state.tab <span class=\"synStatement\">=</span> id<span class=\"synStatement\">)</span><span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span>\n            TAB: <span class=\"synIdentifier\">{</span>id<span class=\"synIdentifier\">}</span>\n          <span class=\"synStatement\">&lt;</span>/button<span class=\"synStatement\">&gt;</span>\n        <span class=\"synStatement\">))</span><span class=\"synIdentifier\">}</span>\n      <span class=\"synStatement\">&lt;</span>/div<span class=\"synStatement\">&gt;</span>\n      <span class=\"synStatement\">&lt;</span>div<span class=\"synStatement\">&gt;</span><span class=\"synIdentifier\">{</span>triggers.map<span class=\"synStatement\">((</span>id<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> state.tab <span class=\"synStatement\">===</span> id <span class=\"synConstant\">&amp;&amp;</span> <span class=\"synStatement\">&lt;</span>Slot name<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>id<span class=\"synIdentifier\">}</span> /<span class=\"synStatement\">&gt;)</span><span class=\"synIdentifier\">}</span><span class=\"synStatement\">&lt;</span>/div<span class=\"synStatement\">&gt;</span>\n    <span class=\"synStatement\">&lt;</span>/div<span class=\"synStatement\">&gt;</span>\n  <span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> Counter <span class=\"synStatement\">=</span> component$<span class=\"synStatement\">&lt;</span><span class=\"synIdentifier\">{</span> initialValue: <span class=\"synType\">number</span> <span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;(</span>\n  <span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span> initialValue <span class=\"synIdentifier\">}</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synType\">const</span> state <span class=\"synStatement\">=</span> useStore<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span> value: initialValue <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n    <span class=\"synStatement\">return</span> <span class=\"synStatement\">(</span>\n      <span class=\"synStatement\">&lt;&gt;</span>\n        <span class=\"synStatement\">&lt;</span>div<span class=\"synStatement\">&gt;</span>Value is: <span class=\"synIdentifier\">{</span>state.value<span class=\"synIdentifier\">}</span><span class=\"synStatement\">&lt;</span>/div<span class=\"synStatement\">&gt;</span>\n        <span class=\"synStatement\">&lt;</span>button onClick$<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span><span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> state.value<span class=\"synStatement\">++</span><span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span>+<span class=\"synConstant\">1</span><span class=\"synStatement\">&lt;</span>/button<span class=\"synStatement\">&gt;</span>\n      <span class=\"synStatement\">&lt;</span>/<span class=\"synStatement\">&gt;</span>\n    <span class=\"synStatement\">);</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synStatement\">);</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> App <span class=\"synStatement\">=</span> component$<span class=\"synStatement\">(()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">(</span>\n  <span class=\"synStatement\">&lt;&gt;</span>\n    <span class=\"synStatement\">&lt;</span>h1<span class=\"synStatement\">&gt;</span>Qwik is working<span class=\"synConstant\">!</span><span class=\"synStatement\">&lt;</span>/h1<span class=\"synStatement\">&gt;</span>\n\n    <span class=\"synStatement\">&lt;</span>Tab triggers<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{[</span><span class=\"synConstant\">&quot;A&quot;</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">&quot;B&quot;</span><span class=\"synIdentifier\">]}</span><span class=\"synStatement\">&gt;</span>\n      <span class=\"synStatement\">&lt;</span>div q:slot<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;A&quot;</span><span class=\"synStatement\">&gt;</span>\n        <span class=\"synStatement\">&lt;</span>h2<span class=\"synStatement\">&gt;</span>A<span class=\"synStatement\">&lt;</span>/h2<span class=\"synStatement\">&gt;</span>\n        <span class=\"synStatement\">&lt;</span>p<span class=\"synStatement\">&gt;</span>Hello~~<span class=\"synStatement\">&lt;</span>/p<span class=\"synStatement\">&gt;</span>\n      <span class=\"synStatement\">&lt;</span>/div<span class=\"synStatement\">&gt;</span>\n      <span class=\"synStatement\">&lt;</span>div q:slot<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;B&quot;</span><span class=\"synStatement\">&gt;</span>\n        <span class=\"synStatement\">&lt;</span>h2<span class=\"synStatement\">&gt;</span>B<span class=\"synStatement\">&lt;</span>/h2<span class=\"synStatement\">&gt;</span>\n        <span class=\"synStatement\">&lt;</span>Counter initialValue<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span><span class=\"synConstant\">10</span><span class=\"synIdentifier\">}</span> /<span class=\"synStatement\">&gt;</span>\n      <span class=\"synStatement\">&lt;</span>/div<span class=\"synStatement\">&gt;</span>\n    <span class=\"synStatement\">&lt;</span>/Tab<span class=\"synStatement\">&gt;</span>\n\n    <span class=\"synStatement\">&lt;</span>hr /<span class=\"synStatement\">&gt;</span>\n    <span class=\"synStatement\">&lt;</span>p<span class=\"synStatement\">&gt;</span>\n      Made <span class=\"synStatement\">with</span> ❤️ by<span class=\"synIdentifier\">{</span><span class=\"synConstant\">&quot; &quot;</span><span class=\"synIdentifier\">}</span>\n      <span class=\"synStatement\">&lt;</span>a target<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;_blank&quot;</span> href<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;https://www.builder.io/&quot;</span><span class=\"synStatement\">&gt;</span>\n        Builder.io\n      <span class=\"synStatement\">&lt;</span>/a<span class=\"synStatement\">&gt;</span>\n    <span class=\"synStatement\">&lt;</span>/p<span class=\"synStatement\">&gt;</span>\n  <span class=\"synStatement\">&lt;</span>/<span class=\"synStatement\">&gt;</span>\n<span class=\"synStatement\">));</span>\n</pre><p>これだけで、`Tab`が動作するようになった段階では、`Counter`がまだ動作しないようにできる。すごい。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"コンポーネントの階層構造\">コンポーネントの階層構造</h3>\n    <pre class=\"code\" data-lang=\"\" data-unlink>- App\n  - h1\n  - Tab(interactive)\n    - div(slot: A)\n      - h2\n      - p\n    - div(slot: B)\n      - h2\n      - Counter(interactive)\n  - hr\n  - p</pre><p>Astroなど、既存のPartial Hydration系のフレームワークだと、より上層のノードで1度しかその指定ができないので、`Tab`が動作するようになったら、`Counter`も動作するようになっちゃう（はず）。（手元でAstroで似たようなコードを試してみたら、そもそも`slot`内で`client:visible`とか書けなそうな挙動だった）</p>\n\n</div>"
}
