{
  "title": "Cloudflare Workersを軽く試した感想",
  "html": "\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers\">Cloudflare Workers docs</a></p>\n\n    </blockquote>\n<p>巷で話題のエッジワーカーというやつ。</p><p>お仕事で使えるかもしれないというわけで、Docsを一通り読んでみて、ちょっとしたコードをデプロイしてみたところまでの感想。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Docsを読んでの学び</h3>\n    \n<div class=\"section\">\n    <h4>コールドスタートがない</h4>\n    <p>AWSやらGCPのそれと違って、ランタイムごとにコンテナを〜という構造ではないから。</p><p>V8のIsolateなる機能を使って、基本的に立ちっぱのホストの上で、ランタイムだけを起動できるとのこと。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/learning/how-workers-works\">How Workers works &middot; Cloudflare Workers docs</a></p>\n\n    </blockquote>\n<p>なので、たまーに動かすコードでも実行が速いというわけ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>リージョン: 地球</h4>\n    <p>普通にそう書いてあってカッコいい・・ってなった。</p>\n\n</div>\n<div class=\"section\">\n    <h4>実行時間の制限がない</h4>\n    <p>時間に関する制限は、CPU時間だけ。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/platform/limits\">Limits &middot; Cloudflare Workers docs</a></p>\n\n    </blockquote>\n<p>Netlify functionsやLambdaで気軽にできなかった、</p>\n\n<ul>\n<li>Slack Botのリクエスト受付、まずはレスポンス返す</li>\n<li>からの、時間かかる本処理の結果を改めて送信</li>\n</ul><p>みたいなことが、単独でできる。</p><p>Slack Botは、チュートリアルでもカバーされててGitHubにコードもある。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/signalnerve/workers-slack-bot\">https://github.com/signalnerve/workers-slack-bot</a></p>\n\n    </blockquote>\n<p>そして実行時間で課金されるわけでもないっていうのがポイント。</p><p>用途によってはCPU時間がオーバーすることもあるかもしれんけど、ほとんどの一般人は困らない感じよね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Cronでの定期実行もできる</h4>\n    <p>さすが〜欲しい機能わかってる〜って感じ。</p><p>この場合は、`addEventListener(\"fetch\")`ではなく、`addEventListener(\"scheduled\")`でハンドラを定義する。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/platform/cron-triggers\">Cron Triggers &middot; Cloudflare Workers docs</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>HTTPしか話せない</h4>\n    <p>通信プロトコルとして。</p><p>つまり、MySQLやMongoDBやらを簡単に読みに行けないし、SMTPやらUDPやらも、もちろん使えない。</p><p>いわゆる`ServiceWorkerGlobalScope`でコード書いてるという認識がなくて、単なるFaaS代替と捉えてると、思ってるのと違う・・ってなりそう。</p><p>そういうデザインなので仕方がない気はするけど、実用性という意味では割と大きな制限かなーと思う。（DBの前段にGraphQL置くか〜〜〜ってなる）</p>\n\n</div>\n<div class=\"section\">\n    <h4>Node.jsではない</h4>\n    <p>つまり、`EventEmitter`とか`child_process`とか`Buffer`とか`crypto`とか、そういうのはない。</p><p>WHATWG Streamsとか、Web Cryptoとかそういうのはある。（これも`ServiceWorker`なので・・と思えばまあ）</p><p>`npm`から持ってきたライブラリがそのままでは動かない、みたいなのはよくありそうで、よくわかってないと誤解されそう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>FaaS代替としても使える</h4>\n    <p>まあ本来の用途ではないけど、`workers_dev`の機能とかもあるし、それなりに想定されたユースケースなんやろうなと。</p><p>上述の通りNodeで動くものが100％動くわけではないってことさえ注意すれば、ちょっとしたAPIをさくっとデプロイできるのは便利。</p><p>ただやはり本旨としての、「CDNに本来は飛ぶはずのリクエストをinterceptして、HTMLをリライトして返す」みたいなことに使ってみたいという欲がでるな・・。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/examples/rewrite-links\">Rewrite links &middot; Cloudflare Workers docs</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>（FaaS代替として）コードを書いてみて</h3>\n    \n<div class=\"section\">\n    <h4>wanglerがよくできてる</h4>\n    <p>WorkerをデプロイするためのCLIが`wrangler`というコマンドで、これがよくできてるなと思った。</p><p>`webpack`が同梱されてて、`wrangler publish`ってするだけで、自動でprodビルドしてデプロイしてくれる便利・・！<br />\n単にFaaS代替として使ううちは、自分でビルドしたい気持ちもそんなに出てこないので、`sls`の代わりに使える。</p><p>あとは`wrangler secret put MY_SECRET_KEY`ってすると、環境変数的な値を埋め込めたりするのも、GUIから設定したくない派としては嬉しいポイント。</p>\n\n</div>\n<div class=\"section\">\n    <h4>wrangler dev惜しい</h4>\n    <p>`wrangler dev`という、仮の実行環境にコードをデプロイして、それを透過的に`localhost`からアクセスする機能がある。</p><p>（実際にデプロイしてるということに気づかず、ローカルで完結してるっていう先入観があると、即リロードしても反映されてないあれ？ってなるはず）</p><p>`console.log()`でデバッグできるのはすごい便利な反面、ファイルの増減で割とカジュアルにcrashしたりする感じがある・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>シンプルゆえに</h4>\n    <p>そもそもの発端がFaaS代替ではなく、CDN前のServiceWorkerなメンタルモデルなので、そこに慣れてないといろいろハマるかなーと思った。</p>\n\n<ul>\n<li>`Response`生成したら`Request`の中身さわれなくなるとか</li>\n<li>`waitUntil()`、`passThroughOnException()` の使い方いまいちわからんとか</li>\n</ul><p>あとは、リクエストをパースするコードも用意されてないので、ルーターみたいなのが欲しくなるまでに時間はかからないと思う。</p><p>観測範囲だとやはり <a href=\"https://github.com/lukeed/worktop\">https://github.com/lukeed/worktop</a> 推しかな・・？</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>あくまでFaaS代替としては、</p>\n\n<ul>\n<li>Cons: HTTPの縛り</li>\n<li>Cons: Nodeではない</li>\n<li>Pros: コールドスタートがない</li>\n<li>Pros: リージョンの概念がなく地球のどこからでも速い</li>\n</ul><p>ってあたりが大きな差異かな？</p><p>ただロギングの仕組みすらもなかったりするので、単機能な用途ならまだしも、あれこれやる必要がある場合、Edgeでそれをやる意義を見いだせない場合は、そんなに使い勝手がいいわけではないのかなーと。</p><p>あとはCDNの手前にいることを活かした使い方と、Cache/KV/DOまわりを使った独創性のあるアーキテクチャを試してみたい。なんか丁度いい案件ないかな〜。</p>\n\n</div>"
}
