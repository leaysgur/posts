{
  "title": "EventEmitterのerrorイベントのハマりどころ",
  "html": "<p>1年に1回くらいハマる（主に人の書いたコードのデバッグで）し、毎回自分の記事検索して見つからなくて困ってるので、今度こそメモっておく。</p><p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">EventEmitterで error イベント投げるとそれだけでthrowされんのしらんかった・・・<a href=\"https://t.co/NtYwccI5BV\">https://t.co/NtYwccI5BV</a></p>&mdash; りぃ (@leader22) <a href=\"https://twitter.com/leader22/status/951325435463311360?ref_src=twsrc%5Etfw\">2018年1月11日</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><p>これは去年の様子。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>TL;DR</h3>\n    <p>`EventEmitter`継承クラス作るのはいいけど、`emit('error')`しないで！`emit('err')`とか別の名前にして！</p>\n\n</div>\n<div class=\"section\">\n    <h3>error はただの文字列ではない</h3>\n    \n    <blockquote>\n        <p><a href=\"https://nodejs.org/api/events.html#events_error_events\">Events | Node.js v11.10.0 Documentation</a></p>\n\n    </blockquote>\n<p>まあ型的にはもちろん文字列なんやけど、特別な意味を持ってる。</p><p>すごく簡単に説明すると、`emit('error', err)`は`throw err`と同じ。<br />\nなので`catch`してないならそこでプロセスが即終了する。</p><p>パターンとしては2つのハマりどころがある。</p>\n\n<ul>\n<li>`emit('error')` してるコードを書いてないのに、`on('error')`が呼ばれる</li>\n<li>`on('error')`せずに`emit('error')`して、例外エラーで落ちる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>emit('error')してないのにon('error')</h3>\n    <p>これは、その`EventEmitter`継承クラスのどっかの処理で、例外が起きてる + `catch`されてないとき。</p><p>例外処理が漏れてるせいで、意図的に発火してるであろう`error`イベントの中に、マジモンの`error`イベントが混ざってしまう。</p><p>混ぜたいなら別に良いけど、ほとんどはそんなことないはずなので、`err`とか`xxx-error`とかなんでもいいけど別のイベント名にする。</p>\n\n</div>\n<div class=\"section\">\n    <h3>on('error')せずにemit('error')</h3>\n    <p>これは、もはや自分で`throw`してるのと同じ。</p><p>SDKとかでありがちで、よかれと思って`error`イベントを通知しようとして使ったらプロセスごと落ちるやつ。</p><p>これも落としたいなら別に良いけど、そうでないなら別のイベント名にする。</p>\n\n</div>"
}
