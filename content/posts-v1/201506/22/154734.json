{
  "title": "textarea要素の文字数の扱いについて",
  "html": "<p>textareaの闇を見たような気がした。</p><p>これは、文字数のカウンターっぽいものを実装するときに気付いて調べたものです。<br />\nいわゆるmaxlengthの敷居と、jsから文字列.lengthで取れる値で、文字数のカウントが違う・・ってなったところが事の発端。</p>\n\n    <blockquote>\n        <p>20150624追記<br />\nコメントで教えていただいたのですが、この挙動はどうやらWebkitのみだそうです。<br />\nDEMOみたく適当な実装すると、現状Webkit以外で困ることになるのでご注意ください。</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>困ったこと</h3>\n    <p>Twitterみたく、いわゆる文字数をカウントしたい場合。<br />\n楽できるところは楽したいので、こういう指定をしますよね。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">textarea</span><span class=\"synIdentifier\"> </span><span class=\"synType\">maxlength</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;140&quot;</span><span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;jsTweetArea&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">textarea</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>改行せずに文字を打った場合は、きっちり140字で打ち止めになってくれます。<br />\nペーストしても、はみ出る分はばっさり切ってくれます。<br />\nこれがHTMLだけでできる時代になりました。</p><p>ただ、文字数の表示は欲しいですよね？ってことで。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> tweetArea = <span class=\"synStatement\">document</span>.getElementById(<span class=\"synConstant\">'jsTweetArea'</span>);\n\n<span class=\"synComment\">// これで文字数を表示すれば良いのでは！</span>\n<span class=\"synIdentifier\">var</span> count = tweetArea.value.length;\n</pre><p>ってなりますよね？<br />\nだがしかし。</p>\n\n<div class=\"section\">\n    <h4>改行は2文字カウントになる</h4>\n    <p>先にも書きましたが、改行してないテキストの場合は問題ないです。<br />\nおかしくなるのは改行を含む場合。</p><p>こういう文字列があったとして。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>123\n456\n78</pre><p>改行文字を1文字として、10文字です。</p><p>が、これをmaxlength=\"10\"のtextareaに打ち込んでいくと、最後まで打てません。<br />\n改行文字が2文字カウントだからです。</p>\n\n</div>\n<div class=\"section\">\n    <h4>お試しあれ</h4>\n    \n    <blockquote>\n        <p><a href=\"http://jsbin.com/teqirifake/edit?html,js,output\">JS Bin - Collaborative JavaScript Debugging</a></p>\n\n    </blockquote>\n<p>うーむ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>仕様書曰く</h3>\n    \n    <blockquote>\n        <p>For historical reasons, the element's value is normalised in three different ways for three different purposes.<br />\nThe raw value is the value as it was originally set. It is not normalized. <br />\nThe API value is the value used in the value IDL attribute. It is normalized so that line breaks use \"LF\" (U+000A) characters. <br />\nFinally, there is the form submission value. It is normalized so that line breaks use U+000D CARRIAGE RETURN \"CRLF\" (U+000A) character pairs, and in addition, if necessary given the element's wrap attribute, additional line breaks are inserted to wrap the text at the given width.</p>\n\n    </blockquote>\n<p>なんしか値には3段階あって、</p>\n\n<ul>\n<li>raw value: ユーザーが入力したそのままの値</li>\n<li>API value: (おそらく)jsから触れる値(textarea.valueと同じ)で、改行コードはLFになってる</li>\n<li>submission value: HTMLがフォームデータとして保持する値で改行コードはCR/LFになり、そのほかwrap属性も加味</li>\n</ul><p>てなわけで、文字列.lengthで取れる値と、<br />\nmaxlengthでバリデーションされる値では、改行文字の扱いが変わってるという話でした。</p>\n\n    <blockquote>\n        <p><a href=\"http://www.w3.org/TR/html5/forms.html#the-textarea-element\">4.10 Forms &mdash; HTML5</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>結論</h3>\n    <p>textareaでmaxlengthを使いたいなら、改行は2文字分として割り切る。<br />\n文字列カウントもDEMOのコードみたく2文字カウントして、表示もそれに従うように。</p><p>それができないなら、maxlength使うの諦めて自前で実装するしかないのかなーと。</p>\n\n</div>"
}
