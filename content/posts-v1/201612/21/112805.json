{
  "title": "Webでのライブ動画再生の基礎知識について",
  "html": "<p>知ってることを自分の中で整理するためのメモです。<br />\n知ってることしか知らないしそこまで使い込んでないので、間違ってる可能性は多いにありです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>動画配信とライブ配信</h3>\n    \n<ul>\n<li>Webで動画を配信するには2つのパターンがある\n<ul>\n<li>完成した動画ファイルをまるっと取得して再生するか</li>\n<li>動画ファイルの一部を「逐次」取得して再生する（ストリーミング）か</li>\n</ul></li>\n<li>クライアントサイドとしては、サーバーにあるメディアを逐次取得するだけなので、そういう意味での違いはない\n<ul>\n<li>今回の記事は後者の方法について</li>\n</ul></li>\n<li>Web = HTTPベースのストリーミング用にいくつかプロトコルがある\n<ul>\n<li>HDS(= HTTP Dynamic Streaming)</li>\n<li>HLS</li>\n<li>SS(= Smooth Streaming)</li>\n<li>MPEG-DASH</li>\n</ul></li>\n<li>このうち、HLS / MPEG-DASHが最近の主流の2つ</li>\n<li>だいたい似たような仕組みになってて、ざっくりAdaptive Streaming技術とか言ったり</li>\n<li>RTSPとかRTMPがどうのこうのは、HTTPベースじゃないので割愛</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>Adaptive Streaming</h3>\n    \n<ul>\n<li>HLS/DASHも同じような仕組み</li>\n<li>まずプレイリストもといメタデータを取得</li>\n<li>そこに書いてある最適な細切れ動画を随時取得・再生していく</li>\n<li>真の意味でAdaptiveに実装するにはjsだけではなくメディア側（サーバーサイド）でもいろいろ手を入れる必要があるし色々と大変</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>HLS</h3>\n    \n<ul>\n<li>Http Live Streamingの略で、Apple産\n<ul>\n<li>プレイリストとしての`.m3u8`（.m3uのUTF-8で.m3u8、フォーマットはただのテキスト）</li>\n<li>細切れの動画コンテナである`.ts`（MPEG-2 TS）</li>\n</ul></li>\n<li>対応環境なら、`.m3u8`をvideo.srcに突っ込むだけで後はいい感じに動画を読み込んで再生してくれる</li>\n<li><a href=\"http://caniuse.com/#feat=http-live-streaming\">http://caniuse.com/#feat=http-live-streaming</a>\n<ul>\n<li>ただしSafari(Mac/iOS) / Android(Chrome/Browser) / IE11(?) / Edgeでしか動かない</li>\n<li>それ以外の環境だと後述するMSEを通す</li>\n</ul></li>\n<li>Safariで直接使う場合、メディアによっては途中で止まったりすることがある（らしい）</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>DASH</h3>\n    \n<ul>\n<li>MPEG-DASHを略してDASH</li>\n<li>HLSはAppleの技術！標準化したい！</li>\n<li>Dynamic Adaptive Streaming over HTTPの略\n<ul>\n<li>プレイリストとしての`.mpd`（フォーマットはXML）</li>\n<li>細切れ動画コンテナの`.m4s` || `.mp4` || `.ts`</li>\n</ul></li>\n<li>HLSと違い、ネイティブで読める環境はまだない\n<ul>\n<li>これもMSEを通して再生</li>\n</ul></li>\n<li>DASHにできて他の形式にできないことが色々ある\n<ul>\n<li><a href=\"https://bitmovin.com/mpeg-dash-vs-apple-hls-vs-microsoft-smooth-streaming-vs-adobe-hds/\">MPEG-DASH vs. Apple HLS vs. Microsoft Smooth Streaming vs. Adobe HDS - Bitmovin</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>MSE</h3>\n    \n<ul>\n<li>Media Source Extensionの略</li>\n<li><a href=\"http://caniuse.com/#feat=mediasource\">http://caniuse.com/#feat=mediasource</a>\n<ul>\n<li>ざっくりいうとiOS Safari以外のモダンブラウザならOK</li>\n</ul></li>\n<li>HLSもDASHもフォーマットの構成がだいたい同じ\n<ul>\n<li>先述のとおり動画情報と細切れ動画セグメントから成る</li>\n<li>これらを使ってクライアントでStreamを組み上げて、videoのsrcにつっこめるAPI</li>\n</ul></li>\n<li>なのでHLSもDASHも原理上（！）は、これで再生できる</li>\n<li>APIはシンプル、つまり気合で頑張れ・・</li>\n<li>コードの感じは\n<ul>\n<li><a href=\"https://msdn.microsoft.com/ja-jp/library/dn551368(v=vs.85).aspx\">&#x7C21;&#x5358;&#x306A; MPEG-DASH &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30DF;&#x30F3;&#x30B0; &#x30D7;&#x30EC;&#x30FC;&#x30E4;&#x30FC;&#x306E;&#x69CB;&#x7BC9; (Windows)</a></li>\n<li><a href=\"http://ygoto3.com/posts/streaming-technology-basics-for-frontend-engineers/\">&#x30D5;&#x30ED;&#x30F3;&#x30C8;&#x30A8;&#x30F3;&#x30C9;&#x30A8;&#x30F3;&#x30B8;&#x30CB;&#x30A2;&#x306E;&#x305F;&#x3081;&#x306E;&#x52D5;&#x753B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30DF;&#x30F3;&#x30B0;&#x6280;&#x8853;&#x57FA;&#x790E; | ygoto3.com</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>コンテナとかコーデックとか</h3>\n    \n<ul>\n<li>大事なのは拡張子ではなく中身</li>\n<li>外箱（コンテナ）と内箱（コーデック）のイメージ</li>\n<li>MPEG-2 TSはコンテナ</li>\n<li>H.264/AVCはコーデック\n<ul>\n<li>H.264: 映像コーデック</li>\n<li>AAC: 音声コーデック</li>\n</ul></li>\n<li>ライセンスの問題にも注意\n<ul>\n<li><a href=\"http://www.streamingmedia.com/Articles/Editorial/Featured-Articles/MPEG-DASH-Royalties-What-We-Know-So-Far-114903.aspx\">MPEG-DASH Royalties: What We Know So Far - Streaming Media Magazine</a></li>\n<li>これはDASHやけど、そういや`.mp3`にもそんな話があったな・・</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>DRM関連</h3>\n    \n<ul>\n<li>DRM is 著作権の管理</li>\n<li>HLSがAES-128なだけ</li>\n<li>まだいろいろ厳しみがある模様\n<ul>\n<li><a href=\"http://www.slideshare.net/otachan/html5drm\">HTML5&#x3067;DRM&#x3063;&#x3066;&#x30A2;&#x30EA;&#x306A;&#x306E;&#xFF1F;&#x301C;&#x8AB0;&#x3082;&#x6559;&#x3048;&#x3066;&#x304F;&#x308C;&#x306A;&#x3044;&#x30DE;&#x30EB;&#x30C1;&#x30C7;&#x30D0;&#x30A4;&#x30B9;&#x6642;&#x4EE3;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30F3;&#x30C4;&#x4FDD;&#x8B77;&#x3002;&#x305D;&#x306E;&#x73FE;&#x72B6;&#x3068;&#x5C55;&#x671B;</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>ライブラリたち</h3>\n    \n<ul>\n<li><a href=\"https://github.com/videojs/video.js\">https://github.com/videojs/video.js</a></li>\n<li><a href=\"https://github.com/dailymotion/hls.js\">https://github.com/dailymotion/hls.js</a></li>\n<li><a href=\"https://github.com/Dash-Industry-Forum/dash.js\">https://github.com/Dash-Industry-Forum/dash.js</a></li>\n<li>ほかにも探せばいろいろある</li>\n<li>or 手書き</li>\n</ul><p>あらゆる環境（特にモバイル）で、安定的にあらゆるフォーマットをいい感じに再生したいなら、現段階では手書きするしかなさそう。<br />\nただこのへんを手書きしてるであろう人は知ってるけど、並外れたスキルと莫大な時間が必要そうで、戦場は選ぶほうが賢明かなーという気持ち。</p><p>まぁなんしかどのライブラリも銀の弾丸ではなくて、要件に応じてあれこれハマるしかないように見える。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h3>ストリーミングサーバー</h3>\n    <p>割愛。<br />\nサーバーサイドでプレイリストや動画の細切れをエンコードする仕事。<br />\nまぁWebRTC関連と顔ぶれは似てる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>先駆者たち</h3>\n    <p>これも割愛。<br />\nどこのサイトがどういう技術でアレしてコレしてるかもざっと調べたけど内緒。</p>\n\n</div>\n<div class=\"section\">\n    <h3>界隈の悩みのタネ</h3>\n    <p>想像です。</p>\n\n<ul>\n<li>再生環境によってのRenderer選び\n<ul>\n<li>どの仕様を使うのか、どの仕様なら動くのか</li>\n<li>いちおう動くけどCPU負荷がアレで長時間はままならんとか</li>\n</ul></li>\n<li>遅延との戦い\n<ul>\n<li>そもそもの配信遅延とか</li>\n<li>HTTPならではのDNS解決云々とか</li>\n<li>リアルタイム（数秒遅れないとは言ってない）とか</li>\n</ul></li>\n<li>動画ファイル自体によるトラップあれこれ\n<ul>\n<li>コンテナ詐欺とかコーデック詐欺とか</li>\n<li>`canPlayType()`は信用できるやつになったのだろうか</li>\n<li>細切れにしすぎるとリクエストかさむけど、刻まないとダウンロードに時間食うとか</li>\n</ul></li>\n<li>モバイルで自動再生とかインライン再生したい問題\n<ul>\n<li>というか横画面で固定したいよねとか</li>\n<li>雑に`transform:rotate(90deg);`してアウアウするとか</li>\n</ul></li>\n<li>video要素すらブラックボックスに見えてくる問題\n<ul>\n<li>canvasの方が楽と見せかけてやっぱキツいとか</li>\n</ul></li>\n<li>生MSEはつらい問題</li>\n</ul><p>ちょっと想像してみただけでコレなので、たぶんやってみたら他にもいーーーーーっぱいあると思う。<br />\n苦しまない程度にやっていきたい・・な・・・。</p>\n\n</div>"
}
