{
  "title": "これからMobXをはじめる人へ",
  "html": "<p>さて、 #MobX に出会ってはや半年が経ちました。<br />\n相変わらずTwitterとか見てる限り、俺くらいしか使ってないのでは感を感じてたりはするんですけど・・。</p><p>2016年の海外では割と話題になってた（と個人的には）思ってて、2017年になれば国内でもぼちぼち取り上げられ始めるのでは・・？ということで。<br />\nそしてそのときになって「Redux vs MobX」とかいうしょーもない切り口ばっかり出てこないように、今のうちに釘を。</p><p>興味を持ってもらえた場合は、0からはじめるMobXシリーズもあるのであわせてどうぞ。</p>\n\n    <blockquote>\n        <p><a href=\"http://lealog.hateblo.jp/archive/category/MobX\">MobX &#x30AB;&#x30C6;&#x30B4;&#x30EA;&#x30FC;&#x306E;&#x8A18;&#x4E8B;&#x4E00;&#x89A7; - console.lealog();</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>MobXについて</h3>\n    \n    <blockquote>\n        <p><a href=\"https://mobxjs.github.io/mobx/\">Introduction | MobX</a></p>\n\n    </blockquote>\n<p><br />\n詳しいことは過去に記事もいろいろ書いてるし、ドキュメントも充実してるので各位で調べてもらうとして。<br />\nざーっくりいうと、</p>\n\n<ul>\n<li>`Object.observe`のちゃんとしたやつ</li>\n<li>Vue.jsのvm部分のつよいやつ</li>\n</ul><p>です。</p><p>ReactiveなObservableな値を用意して、それを変更したら関連するものも全部更新されて・・と、そういういわゆるState管理の層だけをやるライブラリです。<br />\nこのObservableな値が変更されたタイミングで、しかる処理を自動的に呼んだりできます。（`autorun()`ってやつに自分で定義する）</p><p>コード見て判断するわ！という場合は、<a href=\"https://github.com/mweststrate/mobx-todomvc\">GitHub - mweststrate/mobx-todomvc: Trimmed down TodoMVC used for benchmarking</a> とかがよいかな？<br />\nPerf目的のコードであんまり綺麗じゃないけど・・</p>\n\n</div>\n<div class=\"section\">\n    <h3>先取りFAQ</h3>\n    \n<div class=\"section\">\n    <h4>Reactとセットなの？</h4>\n    <p>違います。</p><p>`mobx-react`というバインディングがあって、Observableな値を更新すると勝手にコンポーネントの`render()`が走るみたいにできます。<br />\nしかも`shouldComponentUpdate()`のチューニングまでやってくれます。<br />\nあとは、いわゆる`Provider`も付いてきます。</p><p>さっきも書いたように`autorun()`で、値の更新時に走る処理をかけばいいので、jQueryでDOMを頑張って作るやつでも、Canvasに描くでもなんでもござれです。</p><p>噂のInfernoにもバインディングありますよ！ｗ</p>\n\n</div>\n<div class=\"section\">\n    <h4>Fluxライブラリなの？</h4>\n    <p>違います。</p><p>なので今後「Redux vs MobX」ってのを見つけたら、「React vs Angular2」みたいな微妙な気分で見てください。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Reduxは死んだの？これからはMobXなの？</h4>\n    <p>いやだから関係ないです！</p>\n\n</div>\n<div class=\"section\">\n    <h4>Immutableなの？</h4>\n    <p>これも違います。<br />\nMobXがMutableだからこその、この楽さとか便利さとかです。</p><p>作者さんはImmer Mutableと表したりもしてたけど。</p>\n\n    <blockquote>\n        <p><a href=\"http://mobx-react-amsterdam.surge.sh\">The Quest For Immer Mutable State Management</a></p>\n\n    </blockquote>\n<p>Reduxとの比較もされてたりするのでご一読あれー。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Vue.jsでよくない？</h4>\n    <p>正直、同じようなことはできると思います。<br />\nただ値をReactiveに扱う点において、Vue.jsのvmにはないけどMobXにはある機能とかもあるので、そこは違いかなーと。<br />\nそもそも既存のReactコンポーネントがあるときに、Vueに移行しよう！とはならんと思うし。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Decoratorsはまだ時期尚早なのでは？</h4>\n    <p>一理あります。<br />\nそして、Decorators使う方が圧倒的に書き味は良いです。</p><p>が、全ての機能がES5な環境でも使えるようになってるので問題はないです。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>なぜMobXを使うのか</h3>\n    <p>主に、</p>\n\n<ul>\n<li>とりあえずReact使ってます・使いたい</li>\n<li>アプリ作るならまぁFluxかなー</li>\n</ul><p>みたいな認識を持ってるそこの人！なんでですか？</p>\n\n<ul>\n<li>Facebookが「MVCはスケールしない！」とかいってfacebook/fluxを出してきたから</li>\n<li>なんかみんなFlux（実装を指して）だ！とか言ってるから</li>\n</ul><p>たぶんですけど、それくらいしか考えてない人も多いのではないかなーと。</p><p>そして、そんなFluxでやってみた結果、</p>\n\n<ul>\n<li>ボイラープレート的なコードが冗長・・</li>\n<li>どこで非同期処理書いたらいいの・・</li>\n</ul><p>みたいになってるんじゃないかなーと。<br />\nそしてそれがReduxつらい・・にもつながっていってるんじゃないかなーとも。</p><p>ReactのおかげでViewはStateを食わせるただの関数になった。<br />\nであればその状態を表すStateをどう管理して、どう更新していけばいいのかってとこに意識を注げばいいはず。</p><p>なのに、どのようにFluxするかみたいな話ばっかり出てくる。<br />\nそもそもReactでなんか作るのにFlux実装はマストではないはずで、別にMVCも死んでないし規模や要件に応じた設計を用いればいいだけでは・・？</p>\n\n    <blockquote>\n        <p>まぁ何を指してFluxと呼ぶかみたいな話もあるけど・・</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>そこで、MobXという選択肢</h3>\n    <p>なので最初に言っておくと、ただの選択肢であって正解ではないです。<br />\nただ選択するからには何か理由があって。</p>\n\n    <blockquote>\n        <p>Less boilerplate, more application code.</p>\n\n    </blockquote>\n<p>というわけでこれがMobXを選択する理由の第一です。<br />\nFlux実装によくあるActionオブジェクトはいらなくて、Stateの変更がそのままViewの更新につながります。楽ちん。</p>\n\n<ul>\n<li>Storeを用意して</li>\n<li>Viewに渡す</li>\n<li>Storeの更新ハンドラだけよしなにViewから切り離せば</li>\n</ul><p>それなりの規模までは、ほんと楽に作れます。</p><p>ただその反面、こういう心構えも必要です。</p>\n\n    <blockquote>\n        <p>MobX, it's been mentioned elsewhere but I can't help but sing its praises. Writing in MobX means that using controllers/ dispatchers/ actions/ supervisors or another form of managing dataflow returns to being an architectural concern you can pattern to your application's needs, rather than being something that's required by default for anything more than a Todo app.</p>\n\n    </blockquote>\n<p>これはどこぞのHacker Newsにあった言葉です。<br />\nいわゆるOpinionatedなものではないので、使い方はあなた次第ということ。</p><p>なのできちんと足回りを精査して、ちゃんとルールを作らないとすぐ破綻するよということ。<br />\n複数人でわちゃわちゃするプロジェクトならなおさら。</p><p>公式・コミュニティとしてもこうやってアプリ作ればいいよ！って言ってるものはまだなくて、みんな試行錯誤してる感じですね。</p>\n\n</div>\n<div class=\"section\">\n    <h3>MobXの何がいいか</h3>\n    \n    <blockquote>\n        <p>Anything that can be derived from the application state, should be derived. Automatically.</p>\n\n    </blockquote>\n<p>標語みたいなやつなんですけど。<br />\n本当に意識して扱うべき値の操作に集中すればよくて、それに付随する値・副作用は宣言的に書いておけば勝手にやってくれます。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> OrderLine <span class=\"synIdentifier\">{</span>\n    @observable price = 0;\n    @observable amount = 1;\n\n    constructor(price) <span class=\"synIdentifier\">{</span>\n        <span class=\"synIdentifier\">this</span>.price = price;\n    <span class=\"synIdentifier\">}</span>\n\n    <span class=\"synComment\">// price | amount どちらか更新されると追従して更新される</span>\n    @computed get total() <span class=\"synIdentifier\">{</span>\n        <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>.price * <span class=\"synIdentifier\">this</span>.amount;\n    <span class=\"synIdentifier\">}</span>\n\n    addAmount() <span class=\"synIdentifier\">{</span>\n        <span class=\"synIdentifier\">this</span>.amount++;\n    <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>いわゆるFlux的なコードスタイルだと、ただのObjectなせいでこういう抽象化がやりにくいというか、全て関数にしないといけないというか。<br />\nそれが良いところなのかもしれんけど、冗長というのもまた事実で・・。</p><p>住所を絞り込むプルダウンのフォームみたいなのをどう実装するかってのを想像してみてください。<br />\nあんなの、てっぺんのデータが変われば「自動的に」下層のデータも導き出されればいいと思いませんか？<br />\nそれを手続き的に書くのではなく、コードスタイルとしても収まりよくできるのがMobXです。</p>\n\n</div>\n<div class=\"section\">\n    <h3>個人の感想</h3>\n    <p>個人としては、</p>\n\n<ul>\n<li>Flux（facebook/fluxやReduxの流れを汲むコードスタイル）に対する疑念を抱き始める\n<ul>\n<li>ボイラープレート的なコードおおすぎ</li>\n<li>Actionオブジェクトの存在意義がわからん</li>\n<li>別にタイムトラベルとかしない（そういう要件の仕事をすることがない</li>\n<li>I/Oしっかりしてれば別にImmutableじゃなくてよくない・・？</li>\n</ul></li>\n<li>EventEmitterだけあればいいと思うようになる\n<ul>\n<li>dispatcherだけcontextで埋めればいいのでは・・？</li>\n</ul></li>\n<li>Stateオブジェクトと、Viewをつなぐものがあれば、それだけでよかった <- イマココ</li>\n</ul><p>そしてここまでくると、`setState()`を直接使ってもそれなりになんとか立ち回ることのできる術が身についてる。<br />\nでも`shouldComponentUpdate()`のチューニングはしたくないし、`setState()`も直で触るのは地味に面倒くさい。<br />\nもちろんEventEmitterだけあれば必要十分なんやけど、あと少しなんか助けてほしい。</p><p>そこをいい感じに拾ってくれたのがMobXって感じでした。</p><p>なので、</p>\n\n<ul>\n<li>Post Reduxといえるし、いえない</li>\n<li>Fluxが向く・向かないの要件を見極めた上での選択肢にはなる</li>\n<li>設計論がもうちょい成熟すれば流行るかも</li>\n</ul><p>まぁ個人的には、割と多くの人にとっての「顧客が本当に求めていたもの」さんのポジションも狙えるのではないかなーと思ってます。</p>\n\n    <blockquote>\n        <p>最初は「Real World MobX」とかって、自分がどういう風に使ってるかを紹介するていで記事を書き始めたはずなのに、気付いたらこうなってた・・(˘ω˘ )</p>\n\n    </blockquote>\n\n</div>"
}
