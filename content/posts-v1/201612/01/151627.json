{
  "title": "Let's Encryptでサブドメインをまとめてhttpsにする",
  "html": "<p>この記事はなんたらAdventCalendarとは関係のないただのメモです。</p><p>このへんの分野はあんまり強くないものの、手探りでやってみてなんとかできたのでその学びを。<br />\n基本的にはこのリンクを参考にしたけども、内容を理解するまでにいろいろ壁があったので・・。</p>\n\n    <blockquote>\n        <p><a href=\"http://qiita.com/highdrac/items/5087375871a3e9a677f2#%E8%A4%87%E6%95%B0%E3%82%B5%E3%83%96%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%81%AE%E3%81%A8%E3%81%8D%E3%81%AE%E5%A4%89%E6%9B%B4%E7%82%B9\">Let&amp;#39;s Encrypt&#x3067;&#x8907;&#x6570;&#x30B5;&#x30D6;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x767A;&#x884C;&#x3057;&#x3066;&#x81EA;&#x52D5;&#x66F4;&#x65B0;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B; - Qiita</a></p>\n\n    </blockquote>\n<p>環境は、</p>\n\n<ul>\n<li>CentOS 6.8</li>\n<li>nginx 1.0.15</li>\n</ul><p>nginxのバージョンは後であげた。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>はじめに</h3>\n    <p>そもそも気になってたことなので改めて書いておきます。</p>\n\n<ul>\n<li>Let's EncryptってサブドメインもまとめてHTTPS化できるの？</li>\n<li>できます！\n<ul>\n<li>ワイルドカードできる証明書じゃないのでちょっと手間はかかるができる。</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>というわけでざっくり手順</h3>\n    \n<ul>\n<li>certbot いれる</li>\n<li>acme-challenge用のlocationを作る\n<ul>\n<li>既存のserver設定でそのlocationにアクセスできるようにする</li>\n</ul></li>\n<li>証明書の発行</li>\n<li>server設定\n<ul>\n<li>httpsの有効化</li>\n<li>http -> httpsにリダイレクトするように</li>\n</ul></li>\n</ul><p>こういうのは大枠からつかんでいくに限る(˘ω˘ )</p>\n\n</div>\n<div class=\"section\">\n    <h3>certbotをいれる</h3>\n    \n    <blockquote>\n        <p><a href=\"https://letsencrypt.jp/docs/using.html#installation\">https://letsencrypt.jp/docs/using.html#installation</a></p>\n\n    </blockquote>\n<p>ここにある手順に則るだけなんですが、CentOS 6.xだとこれが最初の難関です。</p><p>途中の処理でPython2.7↑が必要になるけど、CentOS 6.xだと入ってないのでそこをなんとかする必要があります。</p>\n\n    <blockquote>\n        <p><a href=\"https://letsencrypt.jp/usage/centos6-error.html\">https://letsencrypt.jp/usage/centos6-error.html</a></p>\n\n    </blockquote>\n<p>これによると、最新のcertbotだと問題ない的なことが書いてますが、ダメでした。<br />\nなので、このリンクにある旧解決策とやらを実施。</p>\n\n<ul>\n<li>SCLは、システムに入ってて簡単にアップデートできないソフトを、別途インストールして実行できる仕組み（ざっくり</li>\n<li>SCLが使えるようになると、後はいつもどおりyumでいれる</li>\n<li>いれたソフトを`enable`状態にしたシェルを起動して後のことをやる</li>\n</ul><p>って感じですかね。<br />\nちなみにPython3.3でも動いた。</p>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>certbot-auto <span class=\"synSpecial\">-h</span>\n</pre><p>でエラーでずにヘルプが見れるようになればOK。</p>\n\n</div>\n<div class=\"section\">\n    <h3>acme-challengeできるように</h3>\n    \n    <blockquote>\n        <p><a href=\"http://jxck.hatenablog.com/entry/letsencrypt-acme\">Let&#39;s Encrypt &#x3092;&#x652F;&#x3048;&#x308B; ACME &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB; - Block Rockin&rsquo; Codes</a></p>\n\n    </blockquote>\n<p>前提知識はコレ。</p><p>証明書を発行するために、Let's Encrypt氏をそのドメインで受けてるサーバーに一度お招きする感じ？</p>\n<pre class=\"code lang-nginx\" data-lang=\"nginx\" data-unlink><span class=\"synStatement\">location</span> ^~ /.well-known/acme-challenge {\n    <span class=\"synIdentifier\">default_type</span> <span class=\"synConstant\">&quot;text/plain&quot;</span>;<span class=\"synComment\"> # 念のため</span>\n    <span class=\"synType\">root</span> /var/www/letsencrypt;<span class=\"synComment\"> # 実際はどこでもいいぽい？</span>\n}\n</pre><p>こんな設定を用意する。<br />\n設定だけじゃなくて、ディレクトリもちゃんと作る。</p><p>そして、今まで通りの`server`設定の中で読む。</p>\n<pre class=\"code lang-nginx\" data-lang=\"nginx\" data-unlink><span class=\"synType\">server</span> {\n  <span class=\"synType\">listen</span> 80;\n  <span class=\"synType\">server_name</span> foo.example.com;\n\n  <span class=\"synType\">include</span> /path/to/↑のconf;\n}\n</pre><p><br />\nこれで、`<a href=\"http://foo.exampe.com/.well-known/acme-challenge/xxxxxxx\">http://foo.exampe.com/.well-known/acme-challenge/xxxxxxx</a>`に通るようになるはず。<br />\nnginxの設定をreloadするのをお忘れなく。</p><p>次の証明書をつくるステップで、実際にリクエストが飛ぶ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>証明書をつくる</h3>\n    <pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>certbot-auto certonly <span class=\"synSpecial\">--webroot</span> <span class=\"synSpecial\">-w</span> /var/www/letsencrypt <span class=\"synSpecial\">-d</span> foo.example.com <span class=\"synSpecial\">-d</span> bar.example.com\n</pre><p>`-w`に渡すパスは、さっき用意したディレクトリ。<br />\n`-d`でhttpsにしたいドメインを列挙。</p><p>↑の設定が正しくできてて、Let's Encrypt氏を無事に招くことができれば証明書ができる。<br />\n`/etc/letsencrypto/live/`配下に、ドメインごとにいろいろできあがってるはず。</p>\n\n</div>\n<div class=\"section\">\n    <h3>nginxにhttpsの設定</h3>\n    <pre class=\"code lang-nginx\" data-lang=\"nginx\" data-unlink><span class=\"synType\">server</span> {\n    <span class=\"synType\">listen</span>  80;\n    <span class=\"synType\">server_name</span> foo.example.com;\n\n<span class=\"synComment\">    # 今までの設定はまるっと移動して、リダイレクト設定だけにする</span>\n    <span class=\"synStatement\">return</span> 301 https://<span class=\"synIdentifier\">$host$request_uri</span>;\n}\n\n<span class=\"synType\">server</span> {\n    <span class=\"synType\">listen</span> 443 <span class=\"synIdentifier\">ssl</span>;\n    <span class=\"synType\">server_name</span> foo.example.com;\n\n<span class=\"synComment\">    # 今までの設定はこっちに</span>\n<span class=\"synComment\">    # さっきのacme-challenge用のincludeも忘れずに</span>\n<span class=\"synComment\">    # ssl_**の設定は、nginxのバージョンによって色々違うので割愛</span>\n}\n</pre><p>もう`http`で受ける必要がないなら80番はいらんけど、また更新する時とか、世に出回ってしまったリンクとかあると思うので残す。</p><p>各種ssl_**ディレクティブの設定は、以下の記事とかを参考に。</p>\n\n<ul>\n<li><a href=\"http://postd.cc/secure-web-deployment-with-lets-encrypt-and-nginx/\">Let&rsquo;s Encrypt&#x3068;Nginx : &#x30BB;&#x30AD;&#x30E5;&#x30A2;&#x306A;Web&#x30C7;&#x30D7;&#x30ED;&#x30A4;&#x30E1;&#x30F3;&#x30C8;&#x306E;&#x73FE;&#x72B6; | POSTD</a></li>\n<li><a href=\"http://postd.cc/https-on-nginx-from-zero-to-a-plus-part-2-configuration-ciphersuites-and-performance/\">Nginx&#x3067;HTTPS&#xFF1A;&#x30BC;&#x30ED;&#x304B;&#x3089;&#x59CB;&#x3081;&#x3066;SSL&#x306E;&#x8A55;&#x4FA1;&#x3092;A+&#x306B;&#x3059;&#x308B;&#x307E;&#x3067; Part 2 &ndash; &#x8A2D;&#x5B9A;&#x3001;Ciphersuite&#x3001;&#x30D1;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30F3;&#x30B9; | POSTD</a></li>\n</ul><p>もろもろ設定したらnginxをreloadして、無事にアクセスできればhttps化done！</p>\n\n</div>\n<div class=\"section\">\n    <h3>証明書の更新</h3>\n    <p>証明書の期限が3ヶ月なので、定期的に更新しないといけない。<br />\ncronでやってもいいし、期限が迫るとメールがくるらしいのでその都度手動でも。</p>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>certbot-auto renew\n</pre><p>その後またnginxをreloadする。</p>\n\n</div>\n<div class=\"section\">\n    <h3>新しいドメインをhttpsで作るとき</h3>\n    <p>基本的に同じ。</p>\n\n<ul>\n<li>まずはhttpでサーバーたてる</li>\n<li>証明書つくる</li>\n<li>httpsに移行する</li>\n</ul><p>これでServiceWorkerもWebRTCも試し放題じゃー</p>\n\n</div>\n<div class=\"section\">\n    <h3>はじめてのrenew</h3>\n    \n    <blockquote>\n        <p>20170216: 追記<br />\nはじめて手動でrenewしたけど一瞬だった。</p>\n\n    </blockquote>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink><span class=\"synComment\"># 久々なのでとりあえずヘルプ</span>\ncertbot-auto <span class=\"synSpecial\">-h</span>\n\n<span class=\"synComment\"># そしてらアップデートが走った</span>\n\n<span class=\"synComment\"># 問題なさそうだったので更新</span>\ncertbot-auto renew\n\n<span class=\"synComment\"># nginxの再起動もお忘れなく</span>\n</pre><p>一瞬だった。<br />\nDevToolsのSecurityペインから`View certificate`したら更新されてるのがわかる。</p>\n\n</div>"
}
