{
  "title": "Frontrend Vol.8 - 帰ってきたフロントレンド に行ってきたメモ #frontrend",
  "html": "<p>ブログ絶対に書くマン枠、結局当日まで空きあったぽいのであえて席を譲ったブログ書くマンとして微妙な悲しみを感じています( ˘ω˘)<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Design Systems as a Product プロダクトとしてのデザイン・システムについて by @cssradar</h3>\n    \n<div class=\"section\">\n    <h4>デザイン・システムとは</h4>\n    \n<ul>\n<li>プロダクトを表すすべてのもの\n<ul>\n<li>レイアウト</li>\n<li>グリッド</li>\n<li>アイコン・色</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a></li>\n<li>なんしかユーザーが触れるものすべて</li>\n</ul></li>\n<li>既に山ほど種類がある\n<ul>\n<li>Bootstrap, MaterialDesign, Origami, ...etc</li>\n</ul></li>\n<li>UIを言語化してメンテしていくためのもの\n<ul>\n<li>短い目で見ても立ち上げの足がかりに</li>\n<li>長い目で見ると、共通言語としての基盤となる</li>\n</ul></li>\n<li>利用する側も、開発する側もメリットがある\n<ul>\n<li>カオスを管理するものとも</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>どう運営していくかがカギ</h4>\n    \n<ul>\n<li>コレ自体がプロダクトである</li>\n<li>デザイナーとエンジニアをつなぐもの\n<ul>\n<li>小さなデザインの破綻はシステムにも影響を与える</li>\n<li>デザイナーがコードを学ぶのは実質不可能 </li>\n</ul></li>\n<li>デザイナーが想定するのはベストケース</li>\n<li>エンジニアは現実的な実装をしがち</li>\n<li>表現しづらいビジュアルの言語化</li>\n<li>デザインシステムを`Living`なものにするために</li>\n<li>自動化などの取り組みを\n<ul>\n<li>コードの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a></li>\n<li>テスト / E2E / <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a></li>\n<li>ドキュメント</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>チームモデル</h4>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Solitary\">Solitary</a>: 単性\n<ul>\n<li>プロダクトを作る上で、必要なUI<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を作っていくモデル</li>\n<li>Bootstrapは元は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>のUI<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>集</li>\n<li>自分たちの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>にしか関心がないとも</li>\n</ul></li>\n<li>Centralized: 中央集権\n<ul>\n<li>より多くの人のために</li>\n<li>アクティブな貢献は期待できない</li>\n</ul></li>\n<li>Federated: 連合\n<ul>\n<li>MaterialDesign</li>\n<li>各分野のエキスパートによる合議で意思決定</li>\n</ul></li>\n<li>この3つだけではないし、どれが良いかはケース<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4\">バイ</a>ケース</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>まとめ</h4>\n    \n<ul>\n<li>デザインシステムが売上に直結するわけではない\n<ul>\n<li>なぜこれを作り、運用するのかを明確に</li>\n</ul></li>\n<li>いいものを作るにはチームで！</li>\n<li>大事なのはプロダクトに関する人である</li>\n</ul>\n    <blockquote>\n        <p><a href=\"https://medium.com/eightshapes-llc/team-models-for-scaling-a-design-system-2cf9d03be6a0#.tg5im31nj\">Team Models for Scaling a Design System &ndash; EightShapes &ndash; Medium</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Solitary\">Solitary</a>って単語で思い出したけど、この記事がベースなんかね？</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Introduction to Resource Hints by @1000ch</h3>\n    \n<ul>\n<li><a href=\"https://w3c.github.io/resource-hints/\">Resource Hints</a></li>\n<li>`link`要素で、これから必要になるものを投機的に取得する\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/dns\">dns</a>-prefetch</li>\n<li>preconnect</li>\n<li>prefetch</li>\n<li>prerender</li>\n</ul></li>\n<li>それぞれコストとリターンがあるので利用ケースを見極めて</li>\n<li>今のところ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>でだけ実装されてる\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/chrome\">chrome</a>://net-internals/#prerender</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>Atomic Designで助かった人たち by @becyn</h3>\n    \n<ul>\n<li>サーバー -> フロント転向したとき助かった！</li>\n<li>Atomic Designは、デザインシステムを作っていくための考え方\n<ul>\n<li><a href=\"http://bradfrost.com/blog/post/atomic-web-design/\">Atomic Design | Brad Frost</a></li>\n<li>AbemaTVでは、Organismsまで作ってる</li>\n</ul></li>\n<li>まずは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>に分けて考えるというタスクから着手できる</li>\n<li>作りたいページは、だいたいの部品を組合せてエンジニアが先行して動ける</li>\n<li>エンジニアとデザイナーとの共通言語として</li>\n<li>デザインとしても部品から作るので統一される</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>祭りから半年たったプロジェクトにジョインしてみた by @asukaleido</h3>\n    \n<ul>\n<li>炎上ではないです祭りです</li>\n<li>ジョインして思う\n<ul>\n<li>同じものを表現してるのに別<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>とか</li>\n<li>環境起動するとなんか2回ビルド走るとか</li>\n</ul></li>\n<li>コードの品質 = サービスの品質ではない</li>\n<li>AbemaTVでは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>を導入してない</li>\n<li>タイトなスケジュールでブレる仕様の中でなんとかやりきるためには、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>に縛られない方がよいのでは・・！</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>UI実装の再考と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/a11y\">a11y</a> by @ahomu</h3>\n    \n    <blockquote>\n        <p><a href=\"http://s.aho.mu/161205-frontrend_vol8_lt/\">UI &#x5B9F;&#x88C5;&#x306E;&#x518D;&#x8003;&#x3068; a11y - Frontrend Vol.8 LT</a></p>\n\n    </blockquote>\n\n<ul>\n<li>使えないUIがあるよね\n<ul>\n<li>マウスじゃないと操作できない`:hover`</li>\n<li>キーボードで操作できない</li>\n<li>見えないアウトライン</li>\n</ul></li>\n<li>「使えない」を減らしたい\n<ul>\n<li>実装品質と閲覧品質の両輪があること前提</li>\n</ul></li>\n<li>ヒューマンリーダブル && マシンリーダブル</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BB%A5%B7%A5%D3%A5%EA%A5%C6%A5%A3\">アクセシビリティ</a>「対応」とか大層に言わない</li>\n<li>プロセスとして継続的にやっていく\n<ul>\n<li>コードレビューの観点にする</li>\n<li>ユーザーテスト</li>\n<li>lint, QA, ...etc</li>\n</ul></li>\n<li><a href=\"https://www.w3.org/WAI/intro/wcag.php\">WCAG Overview &#x25E6; Web Accessibility Initiative &#x25E6; W3C</a></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%D6%A5%ED\">アメブロ</a>フロント刷新にみる ひかりとつらみ\tby @kouhin / @herablog</h3>\n    \n<ul>\n<li><a href=\"https://developers.cyberagent.co.jp/blog/archives/636/\">&#x30A2;&#x30E1;&#x30D6;&#x30ED;2016 ~ React/Redux&#x3067;&#x3064;&#x304F;&#x308B;Isomorphic web app ~ | CyberAgent Developers Blog | &#x30B5;&#x30A4;&#x30D0;&#x30FC;&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8; &#x30C7;&#x30D9;&#x30ED;&#x30C3;&#x30D1;&#x30FC;&#x30BA;&#x30D6;&#x30ED;&#x30B0;</a></li>\n<li>PVが落ちてきて、テコ入れのために刷新</li>\n<li>調べてみると表示が遅い\n<ul>\n<li>2年前より2倍遅くなってる・・</li>\n</ul></li>\n<li>バックエンドも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>から<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>にバラしたところ</li>\n</ul>\n<div class=\"section\">\n    <h4>何からやるか</h4>\n    \n<ul>\n<li>モ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C0%A5%F3\">ダン</a>なエコシステムを使う\n<ul>\n<li>時代にあったUX = 使いやすい</li>\n</ul></li>\n<li>まず計測した\n<ul>\n<li><a href=\"https://speedcurve.com/\">SpeedCurve: Monitor front-end performance</a></li>\n<li>サーバーサイドは早いがHTMLがデカい</li>\n<li>非同期・遅延表示を取り入れるべし</li>\n</ul></li>\n<li>ブログというプロダクトはどうあるべきか\n<ul>\n<li>テキスト中心</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SEO\">SEO</a></li>\n<li>訪問者は一度に複数ページみる</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a> x SPA\n<ul>\n<li>回遊性はあがった</li>\n</ul></li>\n<li>LazyLoad\n<ul>\n<li>初期表示に関係ないものは読まない</li>\n<li>HTMLが20％くらい減量</li>\n</ul></li>\n<li>100ms以内に返したい\n<ul>\n<li>Reactの`renderToString()`が遅い問題</li>\n<li>ブログなのでCacheがよく効いた</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>わかりやすいフロントエンド構成に</h4>\n    \n<ul>\n<li>使ったのはExampleアプリみたいな顔ぶれ</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>指向\n<ul>\n<li>Reactでなくても今後も使える</li>\n</ul></li>\n<li>Reduxもあいまって純関数でわかりやすく</li>\n<li>Webpackの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> ModulesでBEMライクに</li>\n<li>Atomic Design</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>するのでIsomorphicに</li>\n<li>Babel\n<ul>\n<li>ES2015からDecoratorsまで</li>\n</ul></li>\n<li>ESLint, Stylelintをお硬く使う</li>\n<li>CI</li>\n<li>Docker\n<ul>\n<li>Node自体のアップデートも簡単</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>2016年のUX</h4>\n    \n<ul>\n<li>ガタってなるやつやめよ</li>\n<li>デザインも横100％に</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BB%A5%B7%A5%D3%A5%EA%A5%C6%A5%A3\">アクセシビリティ</a>\n<ul>\n<li>スクリーンリーダーで読ませてみて改善</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>取り組みの結果</h4>\n    \n<ul>\n<li>SpeedCurveの指標は50％くらい改善</li>\n<li>GA的な指標も向上！</li>\n<li>これからやりたい\n<ul>\n<li>Desktop ver</li>\n<li>Markup / <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/a11y\">a11y</a>の改善</li>\n<li>デザインシステム</li>\n<li>http/2, ServiceWorker, ..etc</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>つらみ</h4>\n    \n<ul>\n<li>Reduxが難しい\n<ul>\n<li>学習コストが高い（2ヶ月くらいかかる</li>\n</ul></li>\n<li>Lintがスパルタ仕様だった</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%D6%A5%ED\">アメブロ</a>はモジュールが多すぎる・・</li>\n<li>モ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C0%A5%F3\">ダン</a>にしたけど周辺技術多すぎ</li>\n</ul><p>みんながんばりましょう！</p>\n\n</div>\n</div>"
}
