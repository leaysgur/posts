{
  "title": "AWSのLambdaのNodeのバージョンアップでハマったこと",
  "html": "<p>だいぶ前ですが、Nodeのバージョンがv0.10.42からv4.3になりました。<br />\n現時点ではもうv0.xの関数は作れなくなってて、ほとんどの人は知る必要ないですが、今更移行して久しぶりにLambdaさわったらハマったというメモ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>コードベースが中途半端にES2015になる</h3>\n    <p>中途半端に、というところが重要。</p>\n\n<ul>\n<li>`Class`とか`Promise`は使える</li>\n<li>Arrow functionも書ける</li>\n<li>Destructuringはできない</li>\n</ul><p>みたいな。<br />\n詳細は、 <a href=\"http://kangax.github.io/compat-table/es2016plus/#node4\">http://kangax.github.io/compat-table/es2016plus/#node4</a><br />\n</p>\n\n    <blockquote>\n        <p>NodeのLTSでさえv6.xなので、はよバージョン上げて欲しい・・・</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>`context.succeed()`じゃなくなる</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// いままで</span>\nexports.handler = <span class=\"synIdentifier\">function</span>(<span class=\"synStatement\">event</span>, context) <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// do something...</span>\n\n  <span class=\"synComment\">// OK</span>\n  context.succeed();\n  <span class=\"synComment\">// or</span>\n  context.done();\n\n  <span class=\"synComment\">// NG</span>\n  context.fail(err);\n  <span class=\"synComment\">// or</span>\n  context.done(err);\n<span class=\"synIdentifier\">}</span>;\n\n<span class=\"synComment\">// これから</span>\nexports.handler = (<span class=\"synStatement\">event</span>, context, callback) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// do something...</span>\n\n  <span class=\"synComment\">// OK</span>\n  callback();\n\n  <span class=\"synComment\">// NG</span>\n  callback(err);\n<span class=\"synIdentifier\">}</span>;\n</pre><p><a href=\"https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/nodejs-prog-model-using-old-runtime.html#transition-to-new-nodejs-runtime\">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/nodejs-prog-model-using-old-runtime.html#transition-to-new-nodejs-runtime</a></p><p>しばらくは古い記法でも動くっぽいけど、ハンドラの実行結果としてはfailしまくりに。</p>\n\n<div class=\"section\">\n    <h4>ちなみに1</h4>\n    <p>移行ドキュメントにあるこの謎の1行。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>context.callbackWaitsForEmptyEventLoop = <span class=\"synConstant\">false</span>;\ncallback();\n</pre><p>`callback()`でイベントループに貯まってる処理を待たずに即おしまい！ってしたい場合に、`false`にするんだそうな。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ちなみに2</h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gateway\">Gateway</a>とか使ってて、クライアント側で楽するために、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// OK</span>\ncallback(<span class=\"synStatement\">null</span>, <span class=\"synIdentifier\">{</span> errorMessage: <span class=\"synStatement\">null</span> <span class=\"synIdentifier\">}</span>)\n</pre><p>として、fail時と同じようなインターフェースを返す、ただし`errorMessage`は`null`ってしようとしても、Lambdaのハンドラ的にfail扱いにされます。<br />\nこれバグなのか仕様なのか謎です。解せぬ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4\">環境変数</a>が使えるように</h3>\n    <p>これは最近できるようになったらしい。<br />\nLambdaのコンソールの画面にそれらしいフィールドが増えてて、keyとvalueを入れて保存すると使える。</p><p>Nodeのコードからは、このように。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// FOOって環境変数</span>\nprocess.env.FOO;\n</pre>\n</div>"
}
