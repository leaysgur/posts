{
  "title": "2016年の振り返り",
  "html": "<p>今年も終わりですね！<br />\n気付いたら終わりですね！！</p><p>というわけで恒例の振り返りです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>仕事まわり</h3>\n    <p>思い返すと、コードを書かない仕事をしてる期間も長かったな・・。</p>\n\n<div class=\"section\">\n    <h4>Angular1.x</h4>\n    <p>去年の暮から年明け過ぎくらいまでやってました。<br />\nそれまでまったくAngularには縁がなかったので、どうなることかと思いつつ。</p><p>まぁそこはAngularなので「お作法にいかに則るかだけを考えれば良い」くて、それはもういい感じにでき・・ませんでしたねー。<br />\nService1つ作るにしてもいろいろやりかたがあるし、結局コードスタイルは書いてる人に依存するので、なんでコレがディレクティブになってるのにコレは違うんだとかいろいろありました。</p><p>フレームワークなのであればもうちょっと厳しく色々縛ってくれてもいいのになーとか思いつつ、まあそこはプロジェクトとしての礎をうまく作っていけるかどうかの問題なので、今後の勉強になりましたということで。<br />\nAngular2になっても別にそこは変わらない印象。</p><p>個人的には出来る限り何にも依存したくないし、本当に必要になるまで何も使いたくない派なので、いまの豪華絢爛Angular2？3？4？ワールドには2017年も立ち入ることはなさそう。（仕事でやるならやるかもやけど）</p>\n\n</div>\n<div class=\"section\">\n    <h4>AWS</h4>\n    <p>サーバーレスの波！<br />\nってなわけでAPI GatewayとかLambdaとかさわってました。</p><p>さくっと何かやるには確かに便利なんやけど、ヘビーに使っていくにはそれ相応の慣れと経験が必要で、あくまでフロントエンドエンジニアの領域からするとそんなに頑張って使うものか・・？って感想。<br />\nただこうしてサーバーサイドがどんどん薄くなっていって、ただJSONの永続化だけをするようになって、フロントエンドに全てのロジックが寄ってくる・・みたいな流れは、仕事が増えるので良いのかもなーという。</p><p>もう少し本腰いれてクライアントサイドからまるっとサービスを設計していくアプローチを取って何かやってみたら、また新たな視点が得られるような気もする。<br />\n単純なサーバーサイドとして見ると、そこまで何かが変わるわけではない。</p><p>あとAWSのページでいろいろポチポチするの、設定項目が多すぎてほんと辛い。</p><p>いわゆるサーバーサイドエンジニアの人たちってこのへんどういう感じで見てるんやろうか。</p>\n\n</div>\n<div class=\"section\">\n    <h4>パフォーマンスチューニング</h4>\n    <p>人様が作ったサイトのソースコードを解析したり、DevToolsであれこれ計測したりするのを仕事でやりました。</p><p>感想としてはただひとつ。<br />\nこのハードウェアのパフォーマンスが上がりまくったご時世、ましてや最近のPC・タブレットでパフォーマンスが問題になるなら、それは間違いなくクソコードであり弁明の余地はないです。</p><p>まぁ、3Dゴリゴリとか派手な演出が飛び交うゲームであるとかなら話は別として、一般的なWebでできた業務アプリなら・・ね・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>React</h4>\n    <p>数ページの小さいアプリと、それなりの規模のアプリと、仕事では2つやってました。（手元の個人ワークだと他にもたくさんあるけど<br />\n規模のデカいほうは年明けもちょっと引きずりそう。</p><p>Reactは本当にViewの薄い層しかカバーしてくれないただのライブラリなので、それをどう活かすかがエンジニアとしての腕の見せ所ですねー。<br />\n世の流れ的にはいきなりFluxというかReduxなんでしょうけど、個人的にはまったくおすすめしないというか、ちゃんと順を追って欲しいなと思います。</p><p>そういうライブラリを使うなというのではなくて、</p>\n\n<ul>\n<li>生Reactで厳しくなるまで頑張る</li>\n<li>現状のつらみが何で、それを解決できるライブラリを採用するかしないかしっかり検討する</li>\n</ul><p>という手順をちゃんと経て欲しい。<br />\n何も考えずに思考停止いきなりReduxとか、まじエンジニアとして職務怠慢なのでやめた方がいいと思います。<br />\nそんで熟考せずに手を出したくせして使いにくいとかわかりにくいとか言うの、誰も幸せにならんと思うし。</p><p>MVCはダメでFluxならいける！って言ったの誰か覚えてますか？Facebookですね。<br />\nあなたが作ってるのはFacebook並の規模のものですか？たぶん違うよね？本当に必要？って唱えながら、世間の喧騒に心揺さぶられないようにしたいですね。</p><p>とはいえReactが薄いので、アプリ作るための骨子的なやつがないと辛いのは確か。<br />\nここにきてReact版のBackboneみたいな手軽いのがあればいいけどそれがないので、みんな右往左往しながら「誰かが導いてくれるのを待ってる」のが2016年だった気がします。</p><p>そういうReactでどう設計したらいいかわからない系のエンジニア（仮）な人には、Vueとかのほうが刺さると思うので、2017年はそっちもかじってみればいいのではーと適当なことを書いておく。</p>\n\n</div>\n<div class=\"section\">\n    <h4>受託むずかしい</h4>\n    <p>弊社が受託の会社なので受託なのはまあいいんですけど、そんな受託にもいろいろあって、</p>\n\n<ul>\n<li>納品したらそれで終わりパターン</li>\n<li>納品してその後もこっちで運用するパターン</li>\n<li>納品しても先方が運用していくパターン</li>\n</ul><p><br />\n最後の場合、運用する人が作れない（0 -> 1にするスキルを保有してない）からうちに依頼がくるんやけど、でも納品後はその人たちが運用せざるを得ないわけで。<br />\nこの構造に個人的にはすごく難しさを感じていて、どうしたもんかと悩む年でした。</p><p>他人が書いたコードって、どれだけ綺麗に書いたとしても（どれだけドキュメントを整備してこじゃれた設計にしてたとしても）他人のコードなわけで。<br />\n運用がはじまって自分たちの手に馴染むまで、思い通りに扱えるようになるまでどうしても時間がかかるし、やっぱり最終的には使い手のスキルに依存する。</p><p>なのでむちゃくちゃがんばって思いやりを総動員して設計してコード書いても100点は取れないので、それよりも、運用開始後のフォローアップに厚めに力を入れるとか、立ち上げる力がないにしても一緒に設計するなり、一緒に手を動かすなりする方向で考えた方が良かったかもなーと思ったり。</p><p>Fluxだから破綻しない保証はどこにもないし、Fluxでも破綻させることはできるし、結局プロダクトがスケールするかは、立ち上げた人間よりもメンテする人間にかかってるので、そこをどうにか・・ということを悶々と考えていた今日このごろでした。</p><p>だからといって手を抜いて適当に作って投げて後はがんばれという話ではなく、せめて明確な意志をもってブレずに設計する・コードを書く力を養いたいなあという反省。</p><p>とはいえ自分で運用しないから納品したものの設計がどれくらいイケてて、どうしたのが良かった・あれは悪かったの判断ができないんですよね。<br />\n多少の気付きとか、今度似たようなのがあったらこうしようとかはあっても、総じて良し悪しが測れない。</p><p>顧客満足度という意味で、どうやって己の成長を感じれば良いのかなーと悩んでます。自己満足の100点を納品し続けるマンになってしまってないか？と。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>業務外</h3>\n    \n<div class=\"section\">\n    <h4>登壇</h4>\n    <p>なんとまあそんな日が来たか・・って感じですが、あちらこちらの勉強会で発表したりすることが増えました。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/slides\">GitHub - leader22/slides: &#x767A;&#x8868;&#x8CC7;&#x6599;&#x3068;&#x304B;</a></p>\n\n    </blockquote>\n<p>2ヶ月に1度あるかないかぐらいしかやってないですけど、それでも着実に。<br />\n2017年もぼちぼちやっていければなーと思ってるので、無いとは思いますが聞きたいことがあればお声がけください！</p><p>一方で、ブログ書くマンとして色んな勉強会に行ってはブログを書く日々を続けました。<br />\nいま調べてみたら2016年は20回くらい書いてるっぽいので、月に1回くらいはどこぞに出没してたことになります・・ｗ</p><p>たぶん飽きたらやめると思うけど、まぁ飽きるまでは続きます。</p><p>Nodefestもスタッフ枠として2回目。<br />\nローカルのツールとしてしか相変わらずNodeにはお世話にはなってないけど・・。</p><p>毎年サイト作ったりするのは大変やしスタッフ業もセッションぜんぜん聞けなかったりで大変なんやけど、こっちもまあ会長が会長であるうちは続けてると思います、たぶん。</p>\n\n</div>\n<div class=\"section\">\n    <h4>スーパーイカメーカー</h4>\n    <p>今年の2月にリリースして、サーバーが落ちるか心配になったのは初めてのことでした。<br />\n未だに結構なアクセス数があって、エンジニアのはしくれとしても割と貴重な経験ができたのではという感じ。</p><p>こういう身近な道具でさくっとコンテンツを作ることができるっていうのは自分の強みとしても持っていきたいので、また何かネタがあればやりたいですね。</p><p>それにしてもSplatoonは本当に神ゲーやので、Switchでの新作を心待ちに。</p>\n\n</div>\n<div class=\"section\">\n    <h4>React Native</h4>\n    <p>もとい、Swift含めのネイティブアプリですね。</p><p>過去に感想をまとめた記事を書いたので多くは書かないけども、ReactNativeやるならSwiftやったほうがいいな・・。<br />\nコンポーネント指向という意味でのReact Nativeの設計思想は中々参考になった。</p>\n\n</div>\n<div class=\"section\">\n    <h4>WebAudio / WebRTC</h4>\n    <p>これは個人的に追ってたものです。</p><p>ただ追い続けるにつれ、今のWeb屋をやってるうちは仕事にならないなという実感が増していってます。<br />\nWebAudioはともかくとして、WebRTCはもうちょっと仕様が落ち着いて、もっと低レイヤーなところのアレコレが解決したりすごい人達がいい感じにしてくれた後に、何かやれることがくるかも？くらい。<br />\nWebRTCの1.0(というかORTC)とかが来たとしても、結局ボトルネックはそこじゃない通信レイヤーやらハードウェアやったりするし、フロントエンドで何ができるだろうか・・っていう。</p><p>それでもせめてiOSのSafariにのってくれたらなーーやりたいこといっぱいあるのになーーー</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>2017年は</h3>\n    <p>WebのクライアントサイドでSPAを頑張って作ったり、マークアップしてちょっとした動きをつけたり・・っていうのをいわゆるフロントエンドだったとすると。<br />\n2016年はReactNativeとかElectronから、WebGLにLive動画配信にVRにと、一気にフロントエンド裾野が広がった感じがありますね。</p><p>ただこれらはどれも今までの技術スタックとは一線を介すので、簡単にピボットできるものではなく、前もって準備してきた勢 or 仕事でエイヤでやることになった勢だけが流れに乗れてる気がします。<br />\nまあだからといって仕事がなくなるわけではないんですけど・・。</p><p>> 心の声「フロントエンド is 何」</p><p>むしろReactとかVueとかは結構広まったので、収拾つかなくなった案件とかが燃えだす年な気もしてます。<br />\nつまり仕事がくるということやね！</p><p>というわけで2017年にやっていきたいことは、</p>\n\n<ul>\n<li>引き続き登壇できるときに登壇する</li>\n<li>SPAやらアプリケーション設計まわりで着実に仕事をこなす</li>\n<li>けど本腰は、Live動画とかWebRTCとかServiceWorkerとかの人口の少ないおもしろそうなことを追う</li>\n</ul><p>って感じかなー。<br />\nまあ年初に目標を立ててもころころ地盤が変わる業界なので、あくまで今この瞬間に思ってたことということで。</p><p>良いお年を！</p>\n\n</div>"
}
