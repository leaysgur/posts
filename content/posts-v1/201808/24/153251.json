{
  "title": "Face Detection APIを試したメモ",
  "html": "<p>なんと、ブラウザで顔認識ができる時代になりました。</p><p>試したのはChrome 70.0.3530.0（Official Build）canary （64 ビット）で。</p>\n\n<div class=\"section\">\n    <h3>仕様</h3>\n    \n    <blockquote>\n        <p><a href=\"https://wicg.github.io/shape-detection-api/\">Accelerated Shape Detection in Images</a></p>\n\n    </blockquote>\n<p>Accelerated Shape Detection in Images なる仕様らしく、大きく2つのAPIが定義されてる。</p>\n\n<ul>\n<li>Face Detection API</li>\n<li>Barcode Detection API</li>\n</ul><p>顔認識と、バーコードの認識ができる。</p><p>今回の記事で試したのは、顔認識のほう。</p>\n\n</div>\n<div class=\"section\">\n    <h3>FaceDetector</h3>\n    <p>APIとしてはシンプルで、このように。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> faceDetector = <span class=\"synStatement\">new</span> <span class=\"synStatement\">window</span>.FaceDetector(options);\n</pre><p>オプションで指定できるのは2つ。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">interface</span> FaceDetectorOptions <span class=\"synIdentifier\">{</span>\n  fastMode: <span class=\"synType\">boolean</span><span class=\"synStatement\">;</span>\n  maxDetectedFaces: <span class=\"synType\">number</span><span class=\"synStatement\">;</span>  \n<span class=\"synIdentifier\">}</span>\n</pre><p>`fastMode`は速度優先なら`true`、精度優先なら`false`にする。<br />\n手元で試した感じだと実行速度が倍くらい変わる・・！</p><p>`maxDetectedFaces`は、検出する顔の数のMAXを決められる風なことが書いてあるけど、`1`に設定してもいっぱい検出するし、逆に大きい値を指定しても最大で8しか検出できなかった。</p><p>FaceDetectorが持ってるのは`detect()`のみ。<br />\nこの`detect()`に`ImageBitmapSource`を渡すとPromiseで認識結果が返ってくる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>async <span class=\"synIdentifier\">function</span> main() <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> faceDetector = <span class=\"synStatement\">new</span> <span class=\"synStatement\">window</span>.FaceDetector();\n  <span class=\"synStatement\">const</span> $img = <span class=\"synStatement\">document</span>.querySelector(<span class=\"synConstant\">'img'</span>);\n  \n  <span class=\"synStatement\">const</span> faces = await faceDetector.detect($img).<span class=\"synStatement\">catch</span>(console.error);\n  <span class=\"synStatement\">for</span> (<span class=\"synStatement\">const</span> face of faces) <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// face: DetectedFace</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3>DetectedFace</h3>\n    <p>認識された結果は配列で返ってくる（1つだけでも）ので、それをよしなに使う。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">interface</span> DetectedFace <span class=\"synIdentifier\">{</span>\n  boundingBox: DOMRectReadOnly<span class=\"synStatement\">;</span>\n  landmarks: Landmark<span class=\"synIdentifier\">[]</span><span class=\"synStatement\">;</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>`boundingBox`は、`getBoundingClientRect()`で得られるのと同じで、矩形の情報が入ってる。<br />\n`x`, `y`, `top`, `left`, `witdh`などなど。</p><p>`landmarks`は、`landmarks<span data-unlink>.type`で目・鼻・口がどこにあったかが返ってくる。<br />\n今は`landmarks</span>.locations`が単一座標になってて中心点だけが取れるけど、仕様には周囲を囲う座標的なことも書いてあるので、そのうち変わりそう。</p>\n\n</div>\n<div class=\"section\">\n    <h3>デモつくった</h3>\n    \n<div class=\"section\">\n    <h4>任意の画像から顔を検出</h4>\n    \n    <blockquote>\n        <p><a href=\"https://leader22.github.io/face-detection-api-example/image/index.html\">https://leader22.github.io/face-detection-api-example/image/index.html</a></p>\n\n    </blockquote>\n<p>画像をアップするか、ダミーの（仕様にくっついてたデモに入ってた）画像に対して、顔認識できる。</p>\n\n</div>\n<div class=\"section\">\n    <h4>カメラからリアルタイムに検出</h4>\n    \n    <blockquote>\n        <p><a href=\"https://leader22.github.io/face-detection-api-example/stream/index.html\">https://leader22.github.io/face-detection-api-example/stream/index.html</a></p>\n\n    </blockquote>\n<p>`getUserMedia()`したストリームに対して、顔認識してみるデモ。</p><p>メインのとこだけコード抜粋。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> options = getFaceDetectorOptions($radio, $number);\n<span class=\"synStatement\">const</span> faceDetector = <span class=\"synStatement\">new</span> <span class=\"synStatement\">window</span>.FaceDetector(options);\n<span class=\"synStatement\">const</span> imageCapture = <span class=\"synStatement\">new</span> <span class=\"synStatement\">window</span>.ImageCapture($video.srcObject.getVideoTracks()<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>);\n\ndetect();\nasync <span class=\"synIdentifier\">function</span> detect() <span class=\"synIdentifier\">{</span>\n  requestAnimationFrame(detect);\n\n  <span class=\"synIdentifier\">let</span> img;\n  <span class=\"synStatement\">try</span> <span class=\"synIdentifier\">{</span>\n    img = await imageCapture.grabFrame();\n  <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">catch</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// Sometimes this throws with message `undefined`...</span>\n    <span class=\"synStatement\">return</span>;\n  <span class=\"synIdentifier\">}</span>\n  <span class=\"synStatement\">const</span> faces = await faceDetector.detect(img).<span class=\"synStatement\">catch</span>(console.error);\n  drawImageToCanvas(img, $canvas);\n  drawFaceRectToCanvas(faces, $canvas);\n<span class=\"synIdentifier\">}</span>\n</pre><p>`video`から画像を切り出すの、最近ではImageCapture APIが使える環境だとそれが一番楽ですね。<br />\nrAFで回すとなんか謎のエラーを吐くタイミングがあって謎やったけど・・。<br />\n<br />\n</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>多数の顔を正確に検出する方面での用途としてはまだ微妙な感じ。<br />\nなぜか8コまでしか検出できなかったので。</p><p>ただ1つだけをトラッキングするのは十分に使い物になる感じがあった。<br />\nブラウザだけでVTuberしてWebRTCで配信！みたいなの簡単に作れる気がする。</p>\n\n</div>"
}
