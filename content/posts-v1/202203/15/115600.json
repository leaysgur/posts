{
  "title": "Cloudflare WorkersでWebフォントの配信を最適化する",
  "html": "<p>ということをやってる公式のサンプルを見つけたので、なるほど？って思いながら見てた。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/cloudflare/worker-examples/tree/master/examples/fast-google-fonts\">https://github.com/cloudflare/worker-examples/tree/master/examples/fast-google-fonts</a></p>\n\n    </blockquote>\n<p>あと、そのままは流用できなかったけど、似たようなことを手元の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a> Fontsを使ってるプロジェクトで試してもみた。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>やってること</h3>\n    <p>このサンプルでやってたのは、</p>\n\n<ul>\n<li>オリジンありでWorkerを使う</li>\n<li>HTML/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>へのリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トを仲介して、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a> Fontsの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>をインライン化してしまう\n<ul>\n<li>`link rel=\"stylesheet\" href=\"<a href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap\">https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap</a>\"`みたいなやつ</li>\n<li>処理は`TransformStream`でストリーミングしながら返す</li>\n<li>サブセットのURLは、自身のWorkerへ書き換え</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>自体はキャッシュ</li>\n</ul></li>\n<li>サブセットへのリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トを仲介して、Workerからリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トして返す\n<ul>\n<li>フォントのキャッシュはしてなかった</li>\n</ul></li>\n</ul><p>ということ。</p><p>これによって、</p>\n\n<ul>\n<li>インライン化によって、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>のロードとパースのステップが減る</li>\n<li>同じ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>から返すことで、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>とのコネクションまわりの無駄が減る</li>\n</ul><p>つまりWebフォントが速くなるぜ！ってことだった。</p>\n\n</div>\n<div class=\"section\">\n    <h3>やってみた</h3>\n    <p>オリジンありでWorkerを利用してるプロジェクトがなかったので、代わりにCloudflare Pagesで静的にビルドしてるやつで試した。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a> Fontsの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>は、ビルド時にインライン化してしまう\n<ul>\n<li>サブセットのURLは、自身のWorkerへ書き換える</li>\n</ul></li>\n<li>サブセットへのリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トは、同じ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>のWorkerからリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トして返す</li>\n</ul><p>というように、結果的なアウトプットは同じになるようにした。</p><p>前提条件も数値も載せてないので信憑性がないかもしれないけど、手元のLighthouseで適当に見てみた感じ、</p>\n\n<ul>\n<li>ちょっとだけ速くなった\n<ul>\n<li>最大で0.5sとかそういうレベル</li>\n</ul></li>\n<li>インライン化は効いてそう\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AD%A5%F3%A5%B0\">ブロッキング</a>な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>のロードをスキップした分</li>\n</ul></li>\n<li>サブセットをWorker経由にするのはそこまで効いてなさそう\n<ul>\n<li>もともとのネットワークが速い（家<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wi-Fi\">Wi-Fi</a>）と、直接<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>から取っても誤差っぽい</li>\n<li>ネットワークが遅い場合は、それなりに効果がありそう</li>\n<li>サブセット自体もセルフホストして、同じ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>で（もちろん<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>で）返すとかすると、もう少しだけ攻めれそうではある</li>\n</ul></li>\n</ul><p>Edge Workerでネットワーキングまわりをなんとかする系の作戦、狭くて回線の良い日本だとあんま効果出ませんな・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>そもそも</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>をインライン化するだけなら、別にWorkerなくてもできる。ビルド時に動的にやらんでも、普通にブラウザで開いてコピペすればいい。</p><p>ただし<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>をインライン化するにしても、埋め込まれる容量の問題は変わらない。日本語フォントの場合、1つのファミリーの1つのウェイトってだけでも、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gzip\">gzip</a>されてて約30KBの文字列っていう。</p><p>結局のところ、Webフォント（日本語）の問題点である、</p>\n\n<ul>\n<li>ファイルサイズのデカさ\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DE%A5%CB%A5%D5%A5%A7%A5%B9%A5%C8\">マニフェスト</a>は元より、必要になるサブセットの数も</li>\n<li>`rel=\"preload\"`したくても対象が読めない</li>\n</ul></li>\n<li>レイアウトシフトが不可避\n<ul>\n<li>`font-display: swap`しても画面中の文字がチラつく</li>\n</ul></li>\n</ul><p>っていうのを解決できない限り、一見さん向けのファーストビューはチューニングしようがないんよね。</p><p>というわけで、引き続き†覚悟†のある人だけが日本語Webフォントを使ってくださいってとこは変わらないかなー。</p><p>いや、気持ちはわかりますよ、気持ちは。</p>\n\n</div>"
}
