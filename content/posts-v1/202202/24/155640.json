{
  "title": "Cloudflare WorkersをRust(WASM)で書くと速いのか",
  "html": "<p>なんとなく察しはついてるけど、いちおう確かめておこうかと。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/workers-benchmark\">GitHub - leader22/workers-benchmark</a></p>\n\n    </blockquote>\n<p>詳細はこのリポジトリに。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Rustで書くには</h3>\n    <p>ドキュメントなどあらゆる情報は、Cloudflare公式のこのリポジトリにある内容がすべて。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/cloudflare/workers-rs\">GitHub - cloudflare/workers-rs: Write Cloudflare Workers in 100% Rust via WebAssembly</a></p>\n\n    </blockquote>\n<p>Workerグローバルのコードがそれ用のcrateになってて、それを使ってRustでコードを書く。RequestやらKVやらだけでなく、いわゆるRouterやちょっとした便利関数まで実装されてた。</p><p>READMEにあるコード例をそのまま貼るとこんな雰囲気で。</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">use</span> <span class=\"synPreProc\">worker</span><span class=\"synSpecial\">::</span><span class=\"synType\">*</span>;\n\n<span class=\"synPreProc\">#[event(fetch)]</span>\n<span class=\"synStatement\">pub</span> <span class=\"synStatement\">async</span> <span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">main</span>(req: Request, env: Env, _ctx: <span class=\"synPreProc\">worker</span><span class=\"synSpecial\">::</span>Context) <span class=\"synStatement\">-&gt;</span> <span class=\"synType\">Result</span><span class=\"synStatement\">&lt;</span>Response<span class=\"synStatement\">&gt;</span> {\n\n    <span class=\"synComment\">// Create an instance of the Router, which can use paramaters (/user/:name) or wildcard values</span>\n    <span class=\"synComment\">// (/file/*pathname). Alternatively, use `Router::with_data(D)` and pass in arbitrary data for</span>\n    <span class=\"synComment\">// routes to access and share using the `ctx.data()` method.</span>\n    <span class=\"synStatement\">let</span> router <span class=\"synStatement\">=</span> <span class=\"synPreProc\">Router</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">new</span>();\n\n    <span class=\"synComment\">// useful for JSON APIs</span>\n    <span class=\"synPreProc\">#[derive(Deserialize, Serialize)]</span>\n    <span class=\"synStatement\">struct</span> <span class=\"synIdentifier\">Account</span> {\n        id: <span class=\"synType\">u64</span>,\n        <span class=\"synComment\">// ...</span>\n    }\n    router\n        .<span class=\"synIdentifier\">get_async</span>(<span class=\"synConstant\">&quot;/account/:id&quot;</span>, <span class=\"synStatement\">|</span>_req, ctx<span class=\"synStatement\">|</span> <span class=\"synStatement\">async</span> <span class=\"synType\">move</span> {\n            <span class=\"synStatement\">if</span> <span class=\"synStatement\">let</span> <span class=\"synConstant\">Some</span>(id) <span class=\"synStatement\">=</span> ctx.<span class=\"synIdentifier\">param</span>(<span class=\"synConstant\">&quot;id&quot;</span>) {\n                <span class=\"synStatement\">let</span> accounts <span class=\"synStatement\">=</span> ctx.<span class=\"synIdentifier\">kv</span>(<span class=\"synConstant\">&quot;ACCOUNTS&quot;</span>)<span class=\"synSpecial\">?</span>;\n                <span class=\"synStatement\">return</span> <span class=\"synStatement\">match</span> accounts.<span class=\"synIdentifier\">get</span>(id).<span class=\"synIdentifier\">json</span><span class=\"synSpecial\">::</span><span class=\"synStatement\">&lt;</span>Account<span class=\"synStatement\">&gt;</span>().<span class=\"synStatement\">await</span><span class=\"synSpecial\">?</span> {\n                    <span class=\"synConstant\">Some</span>(account) <span class=\"synStatement\">=&gt;</span> <span class=\"synPreProc\">Response</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">from_json</span>(<span class=\"synType\">&amp;</span>account),\n                    <span class=\"synConstant\">None</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synPreProc\">Response</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">error</span>(<span class=\"synConstant\">&quot;Not found&quot;</span>, <span class=\"synConstant\">404</span>),\n                };\n            }\n\n            <span class=\"synPreProc\">Response</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">error</span>(<span class=\"synConstant\">&quot;Bad Request&quot;</span>, <span class=\"synConstant\">400</span>)\n        })\n        <span class=\"synComment\">// handle files and fields from multipart/form-data requests</span>\n        .<span class=\"synIdentifier\">post_async</span>(<span class=\"synConstant\">&quot;/upload&quot;</span>, <span class=\"synStatement\">|</span><span class=\"synType\">mut</span> req, _ctx<span class=\"synStatement\">|</span> <span class=\"synStatement\">async</span> <span class=\"synType\">move</span> {\n            <span class=\"synStatement\">let</span> form <span class=\"synStatement\">=</span> req.<span class=\"synIdentifier\">form_data</span>().<span class=\"synStatement\">await</span><span class=\"synSpecial\">?</span>;\n            <span class=\"synStatement\">if</span> <span class=\"synStatement\">let</span> <span class=\"synConstant\">Some</span>(entry) <span class=\"synStatement\">=</span> form.<span class=\"synIdentifier\">get</span>(<span class=\"synConstant\">&quot;file&quot;</span>) {\n                <span class=\"synStatement\">match</span> entry {\n                    <span class=\"synPreProc\">FormEntry</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">File</span>(file) <span class=\"synStatement\">=&gt;</span> {\n                        <span class=\"synStatement\">let</span> bytes <span class=\"synStatement\">=</span> file.<span class=\"synIdentifier\">bytes</span>().<span class=\"synStatement\">await</span><span class=\"synSpecial\">?</span>;\n                    }\n                    <span class=\"synPreProc\">FormEntry</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">Field</span>(_) <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">return</span> <span class=\"synPreProc\">Response</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">error</span>(<span class=\"synConstant\">&quot;Bad Request&quot;</span>, <span class=\"synConstant\">400</span>),\n                }\n                <span class=\"synComment\">// ...</span>\n\n                <span class=\"synStatement\">if</span> <span class=\"synStatement\">let</span> <span class=\"synConstant\">Some</span>(permissions) <span class=\"synStatement\">=</span> form.<span class=\"synIdentifier\">get</span>(<span class=\"synConstant\">&quot;permissions&quot;</span>) {\n                    <span class=\"synComment\">// permissions == &quot;a,b,c,d&quot;</span>\n                }\n                <span class=\"synComment\">// or call `form.get_all(&quot;permissions&quot;)` if using multiple entries per field</span>\n            }\n\n            <span class=\"synPreProc\">Response</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">error</span>(<span class=\"synConstant\">&quot;Bad Request&quot;</span>, <span class=\"synConstant\">400</span>)\n        })\n        <span class=\"synComment\">// read/write binary data</span>\n        .<span class=\"synIdentifier\">post_async</span>(<span class=\"synConstant\">&quot;/echo-bytes&quot;</span>, <span class=\"synStatement\">|</span><span class=\"synType\">mut</span> req, _ctx<span class=\"synStatement\">|</span> <span class=\"synStatement\">async</span> <span class=\"synType\">move</span> {\n            <span class=\"synStatement\">let</span> data <span class=\"synStatement\">=</span> req.<span class=\"synIdentifier\">bytes</span>().<span class=\"synStatement\">await</span><span class=\"synSpecial\">?</span>;\n            <span class=\"synStatement\">if</span> data.<span class=\"synIdentifier\">len</span>() <span class=\"synStatement\">&lt;</span> <span class=\"synConstant\">1024</span> {\n                <span class=\"synStatement\">return</span> <span class=\"synPreProc\">Response</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">error</span>(<span class=\"synConstant\">&quot;Bad Request&quot;</span>, <span class=\"synConstant\">400</span>);\n            }\n\n            <span class=\"synPreProc\">Response</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">from_bytes</span>(data)\n        })\n        .<span class=\"synIdentifier\">run</span>(req, env)\n        .<span class=\"synStatement\">await</span>\n}\n</pre><p>だいたいイメージどおりだった。非同期なコードを書くけど、`tokio`とか`async-std`とかのそれではない。</p><p>実行時は`wasm32-unknown-unknown`でコンパイルするので、そこで動かないものは動かないとのこと。</p>\n\n</div>\n<div class=\"section\">\n    <h3>気になる比較結果</h3>\n    \n<ul>\n<li>リクエストにとりあえずレスポンスするだけのコードを書いて</li>\n<li>JavaScriptとRust(WASM)でそれぞれデプロイして</li>\n<li>そのビルドされたサイズを見比べて</li>\n<li>速度を`autocannon`で計測した</li>\n</ul><p>のが冒頭のリポジトリであるコレ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/workers-benchmark\">GitHub - leader22/workers-benchmark</a></p>\n\n    </blockquote>\n<p>結果としてはまぁ大方の予想通り。</p>\n\n<ul>\n<li>速度: 大差ないけど、Rust(WASM)のほうが微妙に遅い</li>\n<li>サイズ: Rust(WASM)のほうが明らかにデカい</li>\n</ul><p>もっと遅くなるかと思ってたけど、意外にこんなもんで済むのか〜ってなったのは収穫だった。</p><p>サイズに関してはもうどうしようもなさそう・・・？このガイドに従ってもう少し頑張れるって書いてあった。</p>\n\n    <blockquote>\n        <p><a href=\"https://rustwasm.github.io/book/reference/code-size.html#optimizing-builds-for-code-size\">Shrinking .wasm Size - Rust and WebAssembly</a></p>\n\n    </blockquote>\n<p>`opt-level`を`s`から`z`にしたら、16KBくらい減ったけど誤差っぽい。`gzip`するとか`brotli`するとかはやってない。</p>\n\n</div>\n<div class=\"section\">\n    <h3>というわけで</h3>\n    <p>もう少し踏み込んだ処理をする内容だったらば、パフォーマンスに差が出てきたりするんか・・・？って思いつつ、それはでも結局JSでやるべきか vs WASMでやるべきかの話でしかなく、WorkerのコードとしてRustを選ぶ理由にはならんかな・・？</p><p>そもそも、Rustで書いたプロジェクトもビルドするとこういう構成になる。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>build\n├── README.md\n├── index.js\n├── package.json\n└── worker\n    ├── index_bg.mjs\n    ├── index_bg.wasm\n    └── shim.mjs</pre><p>つまり実行環境としては処理の大部分がWASMに寄るってだけで、実質はJavaScriptのそれなのでは・・。</p><p>わざわざ全部Rustで書きたい強い気持ちがないなら、JavaScript(TypeScript)でいいし、WASMのモジュールが必要ならそのときに`import`すればいいはず。</p><p>あとRustで書くとき、ファイル開いてからCOC経由で`rust-analyzer`が仕事するようになるまで30秒くらい待つのが地味に不便で、在りし日のTSCの遅さを思い出した。</p>\n\n</div>"
}
