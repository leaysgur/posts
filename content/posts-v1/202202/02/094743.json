{
  "title": "Cloudflare WorkersでSSRできるフレームワークを求めて",
  "html": "<p>2022年現在に、Cloudflare Workersで（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>エッジでWorkerで）<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>する方法は2つある。</p>\n\n<ul>\n<li>Cloudflare Pages(w/ Functions)</li>\n<li>Cloudflare Workers(w/ Workers Sites)</li>\n</ul><p>静的サイト<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%B9%A5%C6%A5%A3%A5%F3%A5%B0\">ホスティング</a>サービスであるPages + Functionsで動的な部分を追加するというアプローチか、動的なWorkers + 静的なアセットを配信するためのWorkers Sitesという機能を使うかの2択。</p><p>で、この記事で調べたいのは、どっちのアプローチでもいいけどこの動的な部分でいわゆる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>ができる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>たち。</p><p>誰だってある日突然、エッジで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>したい気持ちに駆られることってあるじゃないですか。というわけで、独断と偏見で調べたものをまとめた。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>SvelteKit</h3>\n    \n    <blockquote>\n        <p>Repo: <a href=\"https://github.com/sveltejs/kit\">https://github.com/sveltejs/kit</a><br />\nDocs: <a href=\"https://kit.svelte.dev/docs\">https://kit.svelte.dev/docs</a></p>\n\n    </blockquote>\n\n<ul>\n<li>アダプタなる層によって、どこにデプロイするかを選べる\n<ul>\n<li>Cloudflare用としては、冒頭で書いた2通りどっちでも選べる</li>\n<li><a href=\"https://github.com/sveltejs/kit/tree/master/packages/adapter-cloudflare\">https://github.com/sveltejs/kit/tree/master/packages/adapter-cloudflare</a></li>\n<li><a href=\"https://github.com/sveltejs/kit/tree/master/packages/adapter-cloudflare-workers\">https://github.com/sveltejs/kit/tree/master/packages/adapter-cloudflare-workers</a></li>\n</ul></li>\n<li>SvelteKitは、そのまま使うと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>+<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSR\">CSR</a>という挙動になる\n<ul>\n<li>初回ロードは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>（+ハイドレーション）</li>\n<li>以降の回遊は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSR\">CSR</a></li>\n</ul></li>\n<li>`router`と`hydrate`の2つのフラグを、ページ単位/グローバルで指定して調整できる</li>\n<li>`router: false`にすると、クライアント<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC\">ルーター</a>を使わずページ遷移が発生するようになりフル<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>できる\n<ul>\n<li>`Link`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>みたいなものはなく、`a`要素を自動で拡張してくれる</li>\n</ul></li>\n<li>`hydrate: false`にすると、そのページでJSを使わないようになる\n<ul>\n<li>`false`にしない場合、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>で初期データを取得していたとしても、ハイドレーション時に再取得しようとするデザイン</li>\n<li>`fetch`の結果はインライン化されてるのでネットワークアクセスなしで返るけど</li>\n</ul></li>\n<li>`router: false` + `hydrate: false`にすると、0JSにできる\n<ul>\n<li>ちょっとでもJSが欲しい場合、`hydrate: false`を諦めてハイドレーションするしかない</li>\n<li>もしくは、`script`を動的に後から挿入するとか・・</li>\n</ul></li>\n<li>ハイドレーションの単位はページごと</li>\n<li>ローカルでの開発\n<ul>\n<li>Pagesのアダプタの場合、`miniflare`を使うには、それ用のコマンドを自作する必要がある</li>\n<li>例: <a href=\"https://github.com/lukeed/pages-fullstack/commit/6e53dce1a638f128e86614b4d1e37c2fa95179b6\">https://github.com/lukeed/pages-fullstack/commit/6e53dce1a638f128e86614b4d1e37c2fa95179b6</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>Remix</h3>\n    \n    <blockquote>\n        <p>Repo: <a href=\"https://github.com/remix-run/remix\">https://github.com/remix-run/remix</a><br />\nDocs: <a href=\"https://remix.run/docs\">https://remix.run/docs</a></p>\n\n    </blockquote>\n\n<ul>\n<li>おなじくアダプタなる層でデプロイ先を選べる\n<ul>\n<li>Workers/Pagesを選べる</li>\n<li><a href=\"https://github.com/remix-run/remix/tree/main/packages/remix-cloudflare-pages\">https://github.com/remix-run/remix/tree/main/packages/remix-cloudflare-pages</a></li>\n<li><a href=\"https://github.com/remix-run/remix/tree/main/packages/remix-cloudflare-workers\">https://github.com/remix-run/remix/tree/main/packages/remix-cloudflare-workers</a></li>\n<li>`remix`コマンドの拡張といった立ち位置で、デプロイしたいプラットフォーム用に自分でバンドルしろというスタイル</li>\n</ul></li>\n<li>`Link`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>でリンクすると、クライアント<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC\">ルーター</a>が仕事するようになる\n<ul>\n<li>これを使わず`a`要素にした場合は、フル<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>できる</li>\n<li>このへんはReact Routerがそのまま頑張ってるらしい</li>\n</ul></li>\n<li>ページ単位で設定して、0JSにすることもできる\n<ul>\n<li>各Routeで`const handle = { hydrate };`というフラグを返して、`root`の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>で`script`を挿入しないように分岐させる</li>\n<li><a href=\"https://remix.run/docs/en/v1/guides/disabling-javascript\">https://remix.run/docs/en/v1/guides/disabling-javascript</a></li>\n</ul></li>\n<li>ハイドレーションの単位はページごと\n<ul>\n<li>ただしNested routesというページ内の一部だけをルーティングする機能があるので、その限りではなさそう</li>\n</ul></li>\n<li>ローカルでの開発\n<ul>\n<li>Pagesのアダプタの場合: `<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>@beta pages dev`を使う（ただし未だベータ）</li>\n<li>Workersのアダプタの場合: `remix <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/watch\">watch</a>` + `miniflare -w`のセットで</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>Qwik</h3>\n    \n    <blockquote>\n        <p>Repo: <a href=\"https://github.com/BuilderIO/qwik\">https://github.com/BuilderIO/qwik</a><br />\nDocs: <a href=\"https://github.com/BuilderIO/qwik/tree/main/docs\">https://github.com/BuilderIO/qwik/tree/main/docs</a></p>\n\n    </blockquote>\n\n<ul>\n<li>Workers Sitesのみ\n<ul>\n<li><a href=\"https://github.com/BuilderIO/qwik/tree/main/starters/servers/cloudflare\">https://github.com/BuilderIO/qwik/tree/main/starters/servers/cloudflare</a></li>\n<li>スターターで選べば、Cloudflare Workers用のエントリーとそれをビルドする一式が作られる</li>\n</ul></li>\n<li>基本的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>\n<ul>\n<li>というか、現時点では<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC\">ルーター</a>どころか複数のページに分ける方法すらも未定という感じ</li>\n<li>デモは単ページのものしかない</li>\n<li>自分で`req.url`をパースして、それぞれ`renderToString()`して返すなりする</li>\n</ul></li>\n<li>ハイドレーションの単位はあらゆるパーシャルで遅延される\n<ul>\n<li><a href=\"https://lealog.hateblo.jp/entry/2022/01/11/142734\">https://lealog.hateblo.jp/entry/2022/01/11/142734</a></li>\n</ul></li>\n<li>ローカルでの開発は、スターター通りなら`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a> dev`\n<ul>\n<li>`miniflare`を使いたいなら自分でコマンドを指定する</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a></h3>\n    \n    <blockquote>\n        <p>Repo: <a href=\"https://github.com/marko-js/marko\">https://github.com/marko-js/marko</a><br />\nDocs: <a href=\"https://markojs.com/docs\">https://markojs.com/docs</a></p>\n\n    </blockquote>\n\n<ul>\n<li>Workers Sitesのみ\n<ul>\n<li><a href=\"https://markojs.com/docs/cloudflare-workers/\">https://markojs.com/docs/cloudflare-workers/</a></li>\n<li>これもアダプタが用意されてるというか、環境に依存しないのでよしなにやれというスタンス</li>\n<li><a href=\"https://github.com/marko-js/examples/tree/master/examples/vite-cloudflare\">https://github.com/marko-js/examples/tree/master/examples/vite-cloudflare</a></li>\n<li>ここを見るに、自分で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC\">ルーター</a>書いて好きなように<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>して返せという感じ</li>\n</ul></li>\n<li>基本的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MPA\">MPA</a>を作るための<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>なので</li>\n<li>クライアントの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC\">ルーター</a>なんかなくても、チューニングされた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>で速いという触れ込み</li>\n<li>同期の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>以外に`stream()`という<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>もあって、レスポンスを`ReadableStream`で返せる</li>\n</ul></li>\n<li>ハイドレーションの単位は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>らしい\n<ul>\n<li><a href=\"https://medium.com/@mlrawlings/maybe-you-dont-need-that-spa-f2c659bc7fec\">https://medium.com/@mlrawlings/maybe-you-dont-need-that-spa-f2c659bc7fec</a></li>\n</ul></li>\n<li>ローカルでの開発は、スターター通りなら`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a> dev`\n<ul>\n<li>`miniflare`を使いたいなら自分でコマンドを指定する</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>Nuxt3</h3>\n    <p>なんかうまく動かせなくてちゃんと試せなかった。</p>\n\n    <blockquote>\n        <p>Repo: <a href=\"https://github.com/nuxt/framework\">https://github.com/nuxt/framework</a><br />\nDocs: <a href=\"https://v3.nuxtjs.org/docs/usage/data-fetching\">https://v3.nuxtjs.org/docs/usage/data-fetching</a></p>\n\n    </blockquote>\n\n<ul>\n<li>デプロイ先は、Nitroというサーバーエンジンがよしなにするらしい\n<ul>\n<li>その中に、Cloudflare（PagesではなくWorkers(Sites)）のプリセットがある</li>\n<li><a href=\"https://github.com/nuxt/framework/blob/main/packages/nitro/src/presets/cloudflare.ts\">https://github.com/nuxt/framework/blob/main/packages/nitro/src/presets/cloudflare.ts</a></li>\n<li><a href=\"https://v3.nuxtjs.org/docs/deployment/cloudflare/\">https://v3.nuxtjs.org/docs/deployment/cloudflare/</a></li>\n</ul></li>\n<li>`NuxtLink`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>でリンクすると、クライアント<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC\">ルーター</a>が動き出す</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    \n<div class=\"section\">\n    <h4>どれがいいか</h4>\n    <p>ただの感想コーナーです。</p>\n\n<ul>\n<li>SvelteKit\n<ul>\n<li>Svelteなのはいい</li>\n<li>`load()`などデータ取得まわりが小難しい印象</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>メインというよりか、やはり`#TransitionalApps`を目指してるのだなあ</li>\n</ul></li>\n<li>Remix\n<ul>\n<li>クラサバにばっさり分ける思想は好き</li>\n<li>ただしReactとReactRouter・・</li>\n<li>Reactである必要はないみたいな発言があった気がするけど、実際無理では？とも思う</li>\n</ul></li>\n<li>Qwik\n<ul>\n<li>他と比較するようなものではないかもしれないが、期待してる</li>\n<li>今の時点では発展途上すぎるので、もう少し様子見</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>\n<ul>\n<li>（伏兵だったが）すごく良くできてると思う</li>\n<li>なんで流行ってないの？時代はまだSPAを求めてるんか？</li>\n<li>独自<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>の敷居が高いのは気になるけど、Svelteも同じようなもんやしな</li>\n<li>TypeScriptは半ば諦めモードかもしれない？</li>\n</ul></li>\n</ul><p>みんな違ってみんな良いので単純な比較は難しいな〜。書き味の他にも、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>自体のパフォーマンスとか、バンドルサイズとか、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%EC\">プログレ</a>ッシブエンハンスメントな具合とか、気にすべきポイントはいろいろあるし。</p><p>やっぱり技術選定の段階になったら、あらゆる選択肢でPoCを作ってみて最終選別するのが妥当かなーと。特定のどれかの熱狂的なファンでないなら。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Pages or Workers?</h4>\n    <p>PagesかWorkersか？って比較になると、だいたいのケースでPagesを使いたいはず。</p><p>しかしその場合、未だベータな`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a> pages dev`を使う必要があるという・・。</p>\n\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2021/12/21/132735\">Cloudflare Pages Functions&#x3092;&#x8A66;&#x3059; - console.lealog();</a></p>\n\n    </blockquote>\n<p>他にも、</p>\n\n<ul>\n<li>Workersで見れたメトリクスが見れなかったり</li>\n<li>管理画面でしか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4\">環境変数</a>が設定できなかったり</li>\n<li>デプロイ環境のセットアップが2分くらいかかったり</li>\n</ul><p>現状のPagesのイケてないところはちらちらある。</p><p>Workersの場合は、ブランチプレビューがないことと、KV依存なところ以外は文句ないかなーといった感じ。</p><p>ローカルでの開発を`miniflare`でいい感じにやるための<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF\">ボトルネック</a>になるのは、各<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>とどう協調させるかの部分。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>側の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>が遅かったりするとDXが良くない・・。</p><p>かといって`miniflare`を使わない場合、KVやDOにつなげなかったり不便に感じるかもしれない。まあ割り切ってエッジWorkerにはデプロイしたいけど、Cloudflare特有の機能は使わない！っていう割り切りも、ロックイン回避としてはアリかなって気はする。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>は既存のやつがありますんで・・ってパターンも普通にあると思うし。</p>\n\n</div>\n</div>"
}
