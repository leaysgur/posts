{
  "title": "RemixをCloudflare Pages w/ FunctionsでデプロイしてKVも使う",
  "html": "<p>ということがなんとかできたので、その記念に。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/remix-cloudflare-pages-kv\">https://github.com/leader22/remix-cloudflare-pages-kv</a></p>\n\n    </blockquote>\n<p>Remixのバージョンが`1.2.1`の話。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>基本の流れ</h3>\n    <p>といっても、`create-remix`で`Cloudflare Pages`をデプロイ先に選んでプロジェクトを作るだけ。</p><p>ローカルでの開発にもちゃんと`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>@beta pages dev`コマンドを使ってくれるので、何も意識しなくていい。<br />\n（余談ですが、この`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>@beta`が本当にベータで〜すって感じで、その中でも安牌な使い方を選び取って使ってるRemixまじ偉いなって思った。）</p><p>Cloudflare Pagesへは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>を連携すれば自動デプロイできるので、デプロイ用のコマンドがあるわけではない。</p>\n\n<ul>\n<li>Pagesの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C0%A5%C3%A5%B7%A5%E5\">ダッシュ</a>ボードにログインする</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>選ぶ</li>\n<li>ビルドの設定をする（Remixのプリセットを選ぶ）\n<ul>\n<li>Build command: npm run build</li>\n<li>Build output directory: /public</li>\n</ul></li>\n</ul><p>以上。</p>\n\n</div>\n<div class=\"section\">\n    <h3>KVを使う</h3>\n    <p>ここだけちょっと罠だった。</p>\n\n<div class=\"section\">\n    <h4>コード</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">export</span> <span class=\"synStatement\">const</span> loader = async (<span class=\"synIdentifier\">{</span> context <span class=\"synIdentifier\">}</span>) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n\n  <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> keys <span class=\"synIdentifier\">}</span> = await context.NAMESPACE.list();\n\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>;\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">const</span> action = async (<span class=\"synIdentifier\">{</span> request, context <span class=\"synIdentifier\">}</span>) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n\n  await context.NAMESPACE.put(name, desc);\n\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>;\n</pre><p>このように、`context`オブジェクトからアクセスする必要がある。</p>\n\n    <blockquote>\n        <p><a href=\"https://remix.run/docs/en/v1/guides/data-loading#cloudflare-kv\">Remix | Data Loading</a></p>\n\n    </blockquote>\n<p>ドキュメントのこのページに書いてあるようなグローバルからアクセスする方法は、Pagesの場合は（module-syntaxなので）使えない。</p><p>Workersのテンプレを使った場合は（service-worker-syntaxなので）使える。</p>\n\n</div>\n<div class=\"section\">\n    <h4>開発環境</h4>\n    <p>`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>@beta pages dev`は、我らが`miniflare`を内包してるので、KVもエミュレートされたのが使える。</p><p>既に設定されてる`package.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>`の`dev:<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>`で、KVを使うことを`--kv NAMASPACE`で明示すればよい。</p><p>NAMESPACEのところは、コードの中で`context.`でアクセスしてたのと同じ名前。</p>\n<pre class=\"code lang-diff\" data-lang=\"diff\" data-unlink><span class=\"synSpecial\">- &quot;dev:wrangler&quot;: &quot;cross-env NODE_ENV=development wrangler pages dev ./public&quot;,</span>\n<span class=\"synIdentifier\">+ &quot;dev:wrangler&quot;: &quot;cross-env NODE_ENV=development wrangler pages dev ./public --kv NAMESPACE&quot;,</span>\n</pre><p>Pagesのデプロイには`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>.toml`の概念はないので、ひたすら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>引数で足していくしかない風。`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>`コマンド自体はそれを解釈してる風ではあるが、`pages`サブコマンドがその設定をそもそも読んでないっぽいし。</p><p>これも、Workersのテンプレを使った場合は、`miniflare`を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>としてそのまま使ってるので`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>.toml`から読んでくれるはず。</p>\n\n</div>\n<div class=\"section\">\n    <h4>本番環境</h4>\n    \n<ul>\n<li>Workersの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C0%A5%C3%A5%B7%A5%E5\">ダッシュ</a>ボードにログイン\n<ul>\n<li>Pagesではない</li>\n</ul></li>\n<li>その中のKVのメニューから、新たなネームスペースを作成</li>\n<li>Pagesの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C0%A5%C3%A5%B7%A5%E5\">ダッシュ</a>ボードに戻る</li>\n<li>先に一度プロジェクトをビルドしてデプロイ</li>\n<li>すると出現する設定タブの中のFunctionsってメニューへ</li>\n<li>さっき作ったネームスペースを連携</li>\n<li>リビルド</li>\n</ul><p>最後のリビルドが重要。</p><p>一番最初にプロジェクトを作るためのデプロイ時は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0\">バインディング</a>を追加することは（なぜか）できないので、必ず壊れたビルドがデプロイされる・・！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>というわけで</h3>\n    <p>Remixは割とよくできてて、基本的にはCloudflare Pagesのベータ的なあれこれにとにかく引っかかるという感じ。</p>\n\n</div>"
}
