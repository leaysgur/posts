{
  "title": "ブラウザでもMQTTでメッセージングしたい！",
  "html": "<p>調べたついでにメモを書き残します。</p>\n\n    <blockquote>\n        <p>結局ブラウザでしか動かさないもののために、あえてMQTTを使う理由は私にはわかりません・・。</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>そもそもMQTTとは</h3>\n    <p>これは調べたほうがはやいです。</p>\n\n    <blockquote>\n        <p><a href=\"https://gist.github.com/voluntas/8238751\">MQTT &#x30B3;&#x30C8;&#x30CF;&#x30B8;&#x30E1; &middot; GitHub</a><br />\n<a href=\"http://tdoc.info/blog/2014/01/27/mqtt.html\">MQTT&#x306B;&#x3064;&#x3044;&#x3066;&#x306E;&#x307E;&#x3068;&#x3081; &mdash; &#x305D;&#x3053;&#x306F;&#x304B;&#x3068;&#x306A;&#x304F;&#x66F8;&#x304F;&#x3088;&#x3093;&#x3002;</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>WebSocket</h4>\n    <p>唐突に出しましたが、ブラウザに直接MQTTを扱う仕組みがないので、WebSocketに乗せてメッセージングするのが今のとこ常套手段ぽい。<br />\nまぁI/Oの話なので知っておく程度で良いのでは。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>サーバーサイド</h3>\n    <p>いわゆるBrokerサーバーです。</p>\n\n<div class=\"section\">\n    <h4>外部サーバーを利用する</h4>\n    <p>商用サービスとかOSSとかいろいろありますが、さくっと試すならこれが良さげ。</p>\n\n    <blockquote>\n        <p><a href=\"http://test.mosquitto.org/\">test.mosquitto.org</a></p>\n\n    </blockquote>\n\n<ul>\n<li>mqtt://test.mosquitto.org:1883</li>\n<li>ws://test.mosquitto.org:8080</li>\n</ul><p>ありがたや・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>自分でサーバーを立てる</h4>\n    <p>もちろん自分でサーバーを用意することもできます。</p><p>いろいろ調べたのですが、最終的に行き着いたのがコレ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/mcollina/mosca\">mcollina/mosca &middot; GitHub</a></p>\n\n    </blockquote>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> mosca = require(<span class=\"synConstant\">'mosca'</span>);\n<span class=\"synIdentifier\">var</span> http  = require(<span class=\"synConstant\">'http'</span>);\n\n<span class=\"synComment\">// WebSocket用</span>\n<span class=\"synIdentifier\">var</span> httpServ = http.createServer();\n<span class=\"synComment\">// MQTT用</span>\n<span class=\"synIdentifier\">var</span> mqttServ = <span class=\"synStatement\">new</span> mosca.Server();\n\nmqttServ.attachHttpServer(httpServ);\nhttpServ.listen(3000);\n\n<span class=\"synComment\">// あとはお好きに</span>\nmqttServ.on(<span class=\"synConstant\">'clientConnected'</span>, fn);\nmqttServ.on(<span class=\"synConstant\">'published'</span>, fn);\nmqttServ.on(<span class=\"synConstant\">'subscribed'</span>, fn);\n</pre><p>この例では別で用意したサーバーをattachしてますが、Mosca内サーバーを使うことも可能。<br />\nコードを書かなくても、ワンライナーでコマンドラインからサクッと立てることもできます。</p>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>npm <span class=\"synStatement\">install</span> mosca bunyan <span class=\"synSpecial\">-g</span>\nmosca <span class=\"synSpecial\">-v</span> <span class=\"synSpecial\">--http-port</span> <span class=\"synConstant\">3000</span> <span class=\"synSpecial\">--http-bundle</span> <span class=\"synSpecial\">--http-static</span> ./ | bunyan\n</pre><p>便利な世の中だわ・・。</p><p>ちなみにサーバーAPIのドキュメントはコレ。</p>\n\n    <blockquote>\n        <p><a href=\"http://mcollina.github.io/mosca/docs/lib/server.js.html#Server\">Mosca</a></p>\n\n    </blockquote>\n<p>サーバーが動いてるかどうかは、wscatとかでチェックすると良いと思います。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>クライアントサイド</h3>\n    <p>サーバーが用意できたところでクライアントです。<br />\nMQTT.jsというのを使います。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/mqttjs/MQTT.js\">mqttjs/MQTT.js &middot; GitHub</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>MOWS</h4>\n    <p>ちなみに、\"MQTT WebSocket\"とかで検索するとちょいちょい出てくるMOWSってライブラリですが・・。<br />\nコレ、MQTT.jsがメジャーアップデートされたタイミングで、WebSocketのサポートもMQTT.js側でやるようになって、depricatedになったそうですよ。</p><p>途中まで気付かなかったのでいちおう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>browserMqtt.js</h4>\n    <p>さて、このMQTT.jsはNode向けに書かれてるので、ブラウザで使うためには一手間必要です。<br />\nそう、みんな大好きBrowserifyで変換しないといけません。</p><p>そのためにcloneしてinstallして・・めんどくせーって人のために、バージョン1.3.5の出力結果をGistにご用意しました。</p>\n\n    <blockquote>\n        <p><a href=\"https://gist.github.com/leader22/87350894dbe552f4c94a\">https://gist.github.com/leader22/87350894dbe552f4c94a</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>あとはコードを</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// &lt;script src=&quot;browserMqtt.js&quot;&gt;&lt;/script&gt;</span>\n\n<span class=\"synComment\">// 接続(WebSocketなBrokerへのURL)</span>\n<span class=\"synIdentifier\">var</span> client = mqtt.connect(<span class=\"synConstant\">'ws://test.mosquitto.org:8080'</span>);\n\n<span class=\"synComment\">// 購読するTopicを指定</span>\nclient.subscribe(<span class=\"synConstant\">'mqtt/demo'</span>);\n\nclient.on(<span class=\"synConstant\">'message'</span>, <span class=\"synIdentifier\">function</span>(topic, payload) <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synIdentifier\">[</span>topic, payload<span class=\"synIdentifier\">]</span>.join(<span class=\"synConstant\">': '</span>));\n  <span class=\"synComment\">// 切断</span>\n  client.end();\n<span class=\"synIdentifier\">}</span>);\n\nclient.publish(<span class=\"synConstant\">'mqtt/demo'</span>, <span class=\"synConstant\">'hello world!'</span>);\n</pre><p>簡単！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>コード書いててハマったところ</h3>\n    \n<div class=\"section\">\n    <h4>server.on(clientConnected)でpublish</h4>\n    <p>しても届いてくれない。<br />\nこのconnectの瞬間では早すぎで、その後のsubscribedとかでpublishしてあげないとダメ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>packet.payloadは</h4>\n    <p>toStringして使うべし。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>商用でやるならメッセージの暗号化とかQoSがどうとかいろいろ気にしないといけないんでしょうが、さっくり試す場合や気軽に使える状況ならこんなもんでも良さそうです。<br />\n書いた感じはSocket.IOとかとほぼ一緒で、すぐわかると思います。</p><p>ただ、結局ブラウザでしか動かさないもののために、あえてMQTTを使う理由ってなんかあるんやろうか・・。</p>\n\n</div>"
}
