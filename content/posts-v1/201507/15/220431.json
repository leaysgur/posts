{
  "title": "jQuery 3.0 and jQuery Compat 3.0 Alpha Versions Releasedの概要",
  "html": "<p>まだアルファですが、みんな大好きjQueryのバージョンがついに`3`に！<br />\n公式からリリースノートが出てたので、いわゆるメジャーな変更の部分をかいつまんで訳しておきます。</p><p>ちなみに、</p>\n\n<ul>\n<li>jquery@3.0.0-alpha1: IE9以降などモダンブラウザ向け</li>\n<li>jquery-compat@3.0.0-alpha1: IE8をサポート</li>\n</ul><p>だそうです。</p>\n\n    <blockquote>\n        <p><a href=\"http://blog.jquery.com/2015/07/13/jquery-3-0-and-jquery-compat-3-0-alpha-versions-released/\">jQuery 3.0 and jQuery Compat 3.0 Alpha Versions Released | Official jQuery Blog</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>もくじ</h3>\n    \n<ul>\n<li>Simplified .show() and .hide() methods</li>\n<li>Special case with .data() names</li>\n<li>jQuery.Deferred is now Promises/A+ compatible</li>\n<li>Removed special-case Deferred methods in jQuery.ajax</li>\n<li>Error cases don’t silently fail</li>\n<li>.width(), .height(), .css(“width”), and .css(“height”) to return decimal values (whenever the browser does)</li>\n<li>Removed deprecated event aliases</li>\n<li>jQuery.swap, jQuery.buildFragment, and jQuery.domManip are no longer accessible on the jQuery object</li>\n<li>Animations now use requestAnimationFrame</li>\n<li>.unwrap( selector )</li>\n<li>Massive speedups for some jQuery custom selectors</li>\n</ul><p>なかなかに多い・・ので、ほんとかいつまんでいきます。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Major changes</h3>\n    \n<div class=\"section\">\n    <h4>Simplified .show() and .hide() methods</h4>\n    <p>多くの人があれは`display: block`と`display: none`を切り替える単純なメソッドだと思ってるかもしれない。<br />\nけどそれはダウトで、それはそれはもー長きに渡り積もり積もった色んなケースへの対応が入ってる、と。</p><p>で、この度その色々の対応をやめて、シンプルな実装に戻すそうです。</p><p>何か変わるかというと、<br />\nCSSで`display: none`が指定されてる要素に対しては、<br />\n`show()`しても要素が`display: none`のままになります。(今まではstyle属性で`display:block`にしてた)</p><p>jQuery 3.0に移行する上で守るべきルールは以下。</p>\n\n<ul>\n<li>初期状態を`display: none`にしたい場合に、CSSは使わない</li>\n<li>そしてそれをあとから`show()`しようとしない</li>\n<li>`slideDown()`も`fadeIn()`も同じ</li>\n<li>やるなら`.hidden`みたいなクラスを作って`addClass()`</li>\n<li>もしくは`ready()`のタイミングで`hide()`する</li>\n</ul><p>まぁ言われなくともって感じではある・・。</p>\n\n<div class=\"section\">\n    <h5>ソース見るなら</h5>\n    <p>もとより触る寸前に、`display`の値を保存しておいて、戻すときはそれを使うって感じになってますね。</p>\n\n<ul>\n<li>2系: <a href=\"https://github.com/jquery/jquery/blob/2.1-stable/src/css.js\">https://github.com/jquery/jquery/blob/2.1-stable/src/css.js</a></li>\n<li>3系: <a href=\"https://github.com/jquery/jquery/blob/master/src/css/showHide.js\">https://github.com/jquery/jquery/blob/master/src/css/showHide.js</a></li>\n</ul><p>ちょっとコードが短くなった感じ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>Special case with .data() names</h4>\n    <p>「数字を含むキー」でセットした場合に、`$(el).data()`で取得できる結果がちょっと変わるそうです。</p><p>2系では区別されなかった`.data('foo42', 'foo')`と`.data('foo-42', 'foo')`が、3系では区別されるようになるそうな。</p>\n\n    <blockquote>\n        <p>まぁ、この機能使ったことないんですけど・・</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>jQuery.Deferred is now Promises/A+ compatible</h4>\n    <p>あのjQuery.DeferredがついにPromise/A+互換に！<br />\nこれでいままでラップして使ったりしてたのがいらなくなりますね。</p><p>`.catch()`が使えるようになって、`.then()`の挙動が変わります。<br />\n今までと同じ挙動にしたい場合は、`.then()`ではなく`.pipe()`を使ってねとのこと。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Removed special-case Deferred methods in jQuery.ajax</h4>\n    <p>`jqXHR`も`Promise`なオブジェクトでありつつ、`.abort()`みたいな特別なメソッドを持ってます。</p><p>で、今まで`.success()`, `.error()`, `.complete()`ってのがあったけどそれが無くなります。<br />\n同じことしたいなら、`.done()`, `.fail()`, `.always()`を使ってねとのこと。</p><p>非同期やるなら時代はPromiseですねー。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Error cases don’t silently fail</h4>\n    <p>いままでjQueryが丸めて無視してたエラーが、3系からはちゃんと投げられるようになるそうです。<br />\n具体的には、`window`に対して`offset`を求めようとしたりしたときとか。</p><p>ノートには3系からは`{ top: 0, left: 0}`が返るって書いてありますが、実際に試してみると、</p>\n\n<ul>\n<li>2系: undefinedが返ってくる</li>\n<li>3系: TypeError: elem.getClientRects is not a functionってエラー</li>\n</ul><p>見出しが正しいのか記述が正しいのか・・。</p>\n\n    <blockquote>\n        <p>・・・これは普通にバグな気がしますね。</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>.width(), .height(), .css(“width”), and .css(“height”) to return decimal values (whenever the browser does)</h4>\n    <p>例えば`width: 1000px`の親要素の中に、`width: 33%`の子要素があって、その子要素の幅を取得した時。</p>\n\n<ul>\n<li>2系: 325</li>\n<li>3系: 324.71875</li>\n</ul><p>このように、小数点以下まで返してくれるようになります。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Removed deprecated event aliases</h4>\n    <p>`.load`, `.unload`, `.error`のイベントハンドラがなくなります。<br />\nもう`.on`使えとのこと。</p>\n\n</div>\n<div class=\"section\">\n    <h4>jQuery.swap, jQuery.buildFragment, and jQuery.domManip are no longer accessible on the jQuery object</h4>\n    <p>今までもドキュメントには書いてないけど、</p>\n\n<ul>\n<li>jQuery.swap()</li>\n<li>jQuery.buildFragment()</li>\n<li>jQuery.domManip()</li>\n</ul><p>っていうメソッドが実は公開されてた。<br />\nけどそれが隠蔽されて見えなくなりますとのこと。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Animations now use requestAnimationFrame</h4>\n    <p>帰ってきたrAF！<br />\n1.6.0で追加されて1.6.3で消えたrAF！</p><p>Page Visibility APIとか使えるようになってきたし、いろいろ実装側も安定してると判断されたのかね？<br />\nもちろん実装がない環境では、ただの`setInterval`です。</p>\n\n</div>\n<div class=\"section\">\n    <h4>.unwrap( selector )</h4>\n    <p>引数を取ってなかったのが、セレクタを取ってunwrapしたい要素を指定できるように。</p>\n\n    <blockquote>\n        <p>そもそも何かと重そうなAPIなので、使わないで欲しい感はあるけど。</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>Massive speedups for some jQuery custom selectors</h4>\n    <p>あのjQueryのカスタムセレクタが高速化したそうです！<br />\n最大で17倍早くなったやつもあるそうです！！</p><p>ってもまぁ公式にも書いてありますが、早くなったとはいえ処理が重いことには変わりないので、ゆめゆめご利用は計画的に。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Changes</h3>\n    <p>Majorではない変更からも、気になったのものをいくつかご紹介。</p>\n\n<div class=\"section\">\n    <h4>update Sizzle to 2.0.0</h4>\n    <p>Sizzleが1系から2系に！<br />\nっても実際は何も変わってません。</p><p>jQueryがIE8を切って先へ進んでる反面、Sizzleが依然としてIE6をサポートしてるライブラリって、なんだかなーという感じです。</p>\n\n</div>\n<div class=\"section\">\n    <h4>drop bower; use npm for front-end deps</h4>\n    <p>依存ライブラリをbowerで管理してたのをやめて、npmに寄せてます。<br />\nやはりそういう時代の流れなんですかね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>add support to tag-hyphenated elements</h4>\n    <p>`$('foo-bar')`みたいなタグを扱えるように。<br />\nAngular臭がしますね。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>巷でSwissArmyKnifeとか揶揄されてたりするらしいですが、まだまだjQueryに助けられてる人はいるし今後も減らないと思うので、続報は常にチェックしていきたいですねー。</p>\n\n</div>"
}
