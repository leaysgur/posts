{
  "title": "Firefox 68から空文字列のcandidateが発行されるように",
  "html": "<p>なります。</p>\n\n<ul>\n<li>つまりどういうことで</li>\n<li>どういう場合に困るか</li>\n<li>そもそもどういうことか</li>\n</ul><p>みたいなのをまとめておきます。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>空文字列のcandidate</h3>\n    <p>WebRTCのRTCPeerConnectionで、通信に使う経路の候補が見つかったときの話です。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> pc = <span class=\"synStatement\">new</span> RTCPeerConnection();\n\npc.addEventListener(<span class=\"synConstant\">'icecandidate'</span>, ev =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// コレ</span>\n  ev.candidate;\n<span class=\"synIdentifier\">}</span>);\n</pre><p>この`ev.candidate`に候補情報が入ってて、基本的にはコレをシグナリングする。<br />\n受け取った側は、`addIceCandidate()`でそれをセットする。</p><p>で、現状のFirefox 67や、Chrome/Safariなどなどは、`icecandidate`イベントで2パターンの`candidate`を発行してました。</p><p>つまり`ev.candidate`が、</p>\n\n<ul>\n<li>`RTCIceCandidate`のインスタンスで、各種プロパティが詰まったもの</li>\n<li>`null`</li>\n</ul><p>の2パターンだった。</p><p>そこに今回、</p>\n\n<ul>\n<li>`RTCIceCandidate`のインスタンスで、`candidate`プロパティが空文字列のもの</li>\n</ul><p>という3パターン目が追加されるというわけ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">{</span>\n  candidate: <span class=\"synConstant\">&quot;&quot;</span>, <span class=\"synComment\">// 👀</span>\n  sdpMLineIndex: 0,\n  sdpMid: <span class=\"synConstant\">&quot;0&quot;</span>,\n  usernameFragment: <span class=\"synConstant\">&quot;26d84f30&quot;</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>こういうやつ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>どういう場合に困るか</h3>\n    <p>今までは`null`か`RTCIceCandidate`かどっちかだったので、こういうコードを書いてたはず。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> pc = <span class=\"synStatement\">new</span> RTCPeerConnection();\n\npc.addEventListener(<span class=\"synConstant\">'icecandidate'</span>, ev =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// null でないならシグナリングして addIceCandidate() する</span>\n  <span class=\"synStatement\">if</span> (ev.candidate !== <span class=\"synStatement\">null</span>) <span class=\"synIdentifier\">{</span>\n    signaling.send(<span class=\"synConstant\">'candidate'</span>, ev.candidate);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>こうしてた理由は、そもそも不要な上に`addIceCandidate(null)`がどのブラウザでもエラーになってたから。</p><p>で、今回の問題は、今回追加されるやつがこの条件をくぐり抜けてくる + Firefox 68以外では動かない。</p>\n\n    <blockquote>\n        <p>978582 - addIceCandidate({candidate: \"\", sdpMLineIndex: 0 })) throws an error - chromium - Monorail - <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=978582\">https://bugs.chromium.org/p/chromium/issues/detail?id=978582</a></p>\n\n    </blockquote>\n<p>これがChrome側に寄せられたバグ報告で、こっちはFirefox側のお気持ち。</p>\n\n    <blockquote>\n        <p>1562281 - Interop: Chrome/Safari rejects the RTCIceCandidate (>=68) with the empty candidate string. - <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1562281\">https://bugzilla.mozilla.org/show_bug.cgi?id=1562281</a></p>\n\n    </blockquote>\n<p>同Safari。</p>\n\n    <blockquote>\n        <p>199316 – addIceCandidate({candidate: \"\", sdpMLineIndex: 0 })) throws an error - <a href=\"https://bugs.webkit.org/show_bug.cgi?id=199316\">https://bugs.webkit.org/show_bug.cgi?id=199316</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>どうすればいいか</h3>\n    <p>端的には、`null`と一緒で無視すればいい。</p><p>実際の動作には影響ないし。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> pc = <span class=\"synStatement\">new</span> RTCPeerConnection();\n\npc.addEventListener(<span class=\"synConstant\">'icecandidate'</span>, ev =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">if</span> (ev.candidate &amp;&amp; ev.candidate.candidate !== <span class=\"synConstant\">''</span>) <span class=\"synIdentifier\">{</span>\n    signaling.send(<span class=\"synConstant\">'candidate'</span>, ev.candidate);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// or 受け取り側で addIceCandidate() 前にチェックするでも</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3>nullとの違い</h3>\n    <p>ここからおさらいコーナー。</p><p>`null`と空文字列の違いって何？なぜ今こんな修正を？という人向け。<br />\n答えはSpecに。</p>\n\n    <blockquote>\n        <p>WebRTC 1.0: Real-time Communication Between Browsers - <a href=\"https://www.w3.org/TR/webrtc/#dom-rtcicecandidate-candidate\">https://www.w3.org/TR/webrtc/#dom-rtcicecandidate-candidate</a></p>\n\n    </blockquote>\n<p>ざっくり訳しておく。</p>\n\n    <blockquote>\n        <p>The icecandidate event is used for three different types of indications:</p>\n\n    </blockquote>\n<p>icecandidateイベントには、3パターンの意味がある。</p>\n\n    <blockquote>\n        <p>A candidate has been gathered. The candidate member of the event will be populated normally. It should be signaled to the remote peer and passed into addIceCandidate.</p>\n\n    </blockquote>\n<p>通常通り`candidate`が収集されたとき。 リモートにシグナリングされて、`addIceCandidate()`される。</p>\n\n    <blockquote>\n        <p>An RTCIceTransport has finished gathering a generation of candidates, and is providing an end-of-candidates indication as defined by Section 8.2 of [TRICKLE-ICE]. This is indicated by candidate.candidate being set to an empty string. The candidate object should be signaled to the remote peer and passed into addIceCandidate like a typical ICE candidate, in order to provide the end-of-candidates indication to the remote peer.</p>\n\n    </blockquote>\n<p>その`RTCIceTransport`が候補収集を終えて、TrickleICEの仕様にあるように`end-of-candidates`の意を表明するとき。<br />\nこのとき、`candidate.candidate`が空文字列になり、シグナリングされて`addIceCandidate()される。`</p>\n\n    <blockquote>\n        <p>All RTCIceTransports have finished gathering candidates, and the RTCPeerConnection's RTCIceGatheringState has transitioned to \"complete\". This is indicated by the candidate member of the event being set to null. This only exists for backwards compatibility, and this event does not need to be signaled to the remote peer. It's equivalent to an \"icegatheringstatechange\" event with the \"complete\" state.</p>\n\n    </blockquote>\n<p>すべての`RTCIceTransport`で候補収集が終わって、`RTCPeerConnection`の`iceGatheringState`が`complete`になるとき。<br />\nこのとき、`null`が発行される。<br />\nこれはシグナリングする必要はなく、`icegatheringstatechange`イベントがあるなら不要ではあるが、後方互換性のために残ってる。</p><p>空文字列のパターンで、`sdpMid`とか`sdpMLineIndex`がちゃんとついてるのはそういうワケでしたとさ。</p><p>まぁ昨今のトレンドとしては、基本的にすべてを1つにBUNDLEするし、`end-of-candidates`なんて待ってないんやけど・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>おまけ</h3>\n    <p>蛇足ですが、Firefox 68なら `addIceCandidate(null)` もできるようになります！</p>\n\n</div>"
}
