{
  "title": "0からはじめるpower-assert",
  "html": "\n    <blockquote>\n        <p>テスト書いてないとかお前そ(ry</p>\n\n    </blockquote>\n<p>すみません、言ってみたかっただけです。</p><p>そして本記事は、巷で話題のAdvent Calendarとも何の関係もありません。<br />\n来年こそは書いてみたい！<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>そもそも</h3>\n    \n    <blockquote>\n        <p>こんなたいそうなタイトルの記事ですが、<br />\n書いてる人がそもそもテストに関してぺーぺーなので、なんか変なコト言ってたら教えてください。</p>\n\n    </blockquote>\n<p>まず、根本的に勘違いしてたことがあるので、まずそれを記しておきます。<br />\n※今思えば個人の勝手な勘違いです。</p><p>巷で話題のpower-assertですが、これだけ使えばもうテスト全ておっけー！ってものではないです。<br />\nそして、サクッと入れてサクッと使えるってものでもないです。</p><p>よーわからんけどテスト書いた方が良いって最近よく聞くし、<br />\npower-assertってのがとりあえずイケてるらしいから、それ使ってテストデビューしてみようかな・・って人。</p><p>それなりに前提知識がないと辛いです、もとい、辛かったです。<br />\nただ、そんな人でもなんとか使えるようにってのが本記事の趣旨でございます。</p>\n\n    <blockquote>\n        <p>決してpower-assertというツールが難しいのではなくて、<br />\nそもそもツールを使うための予備知識がないと、ありがたみがわからないまま挫折しちゃうかも？ってことです。</p>\n\n    </blockquote>\n<p>最低限、テストって何かとかどんな風にやるかをなんとなーく知ってれば、なんとかなります。</p>\n\n</div>\n<div class=\"section\">\n    <h3>というわけで予備知識</h3>\n    \n<div class=\"section\">\n    <h4>power-assertってなんぞ</h4>\n    <p>ご存知テスト界の神様と謳われる<a href=\"https://twitter.com/t_wada\" target=\"_blank\" title=\"Takuto Wada(@t_wada)さん | Twitter\">@t_wadaさん</a>作の、JavaScript版 Power Assert ライブラリです。<br />\nありがたやありがたや。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/twada/power-assert\" target=\"_blank\" title=\"twada/power-assert\">twada/power-assert</a></p>\n\n    </blockquote>\n<p>READMEはひと通り目を通したいところですが、割と長いので、Descriptionから2点だけ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>provides descriptive assertion messages through standard assert interface.</h4>\n    <p>\"Standard assert interface\" ってのが重要なポイント。<br />\nNode.jsにはAssertってAPIがあって、それをより強化したものが提供されます。</p>\n\n    <blockquote>\n        <p><a href=\"http://nodejs.org/api/assert.html\" target=\"_blank\" title=\"Assert Node.js v0.10.33 Manual &amp; Documentation\">Assert Node.js v0.10.33 Manual &amp; Documentation</a></p>\n\n    </blockquote>\n<p>assert自体は改めて後述しますが、まずはコレの存在と、使い方を知るべし。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h4>to use power-assert, you need to transform your test code for power-assert output.</h4>\n    <p><s>というように、power-assertを使って書いたテストコードは、そのままでは実行できません。</s></p><p>と、勝手に思ってたのですが、<blockquote class=\"twitter-tweet\" lang=\"HASH(0x8916180)\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/leader22\">@leader22</a> すばらしいエントリをありがとうございます! &quot;power-assertを使って書いたテストコードは、そのままでは実行できません&quot; のところですが、本当は実行はできて、あの派手な結果表示が出ずに通常の表示が出るだけなんです。派手な出力のために変換が必要なのです。</p>&mdash; Takuto Wada (@t_wada) <a href=\"https://twitter.com/t_wada/status/539268603833376768\">December 1, 2014</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><p>いやはやすみません！</p><p>なにはともあれ、<br />\nこれはpower-assertがテスト失敗時に詳細なメッセージを表示するために必要な過程で、<br />\n何かを得るためには、それと同等の代価が必要になるのです。</p><br />\n<p>詳しくは以下の資料を参照ですが、読み飛ばしてもだいじょぶです。</p>\n\n    <blockquote>\n        <p><a href=\"http://www.slideshare.net/t_wada/powerassert-in-javascript\" target=\"_blank\" title=\"テスト用ライブラリ power-assert\">テスト用ライブラリ power-assert</a></p>\n\n    </blockquote>\n<p>Power Assertって既存の概念やったんねー。</p>\n\n</div>\n<div class=\"section\">\n    <h4>mochaってなんぞ</h4>\n    <p>いきなり何の話やねんって感じですが、大事ですコレ。<br />\n個人的にはコレが一番最初に知っておくべき知識でした。</p><p>jsのテストのサンプルを探すと、だいたいしれっとmochaが使われてます。<br />\n何の前置きもなく、さぞテスト書くならmochaだろうみたいな空気です。</p>\n\n    <blockquote>\n        <p>あの頃は、そもそもmochaってなんやねん！ってなってました。<br />\npower-assertの前にそもそも知っとけって感じですね。</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h5>0からはじめるmocha</h5>\n    <p>mochaはいわゆるテストランナーってやつです。<br />\nこのmochaのお作法にそって、テストコードを書いてくと幸せになれるよってやつです。</p><p>究極的にはこんなの使わずとも、ベタにテストケースをif文とconsole.logで延々と書けば良いですが、<br />\nそこはまぁ先人の偉業に身を任せましょう。</p><p>アウトプットもわかりやすくなるし、テストケースも体系だって書けます。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// test.js</span>\n<span class=\"synConstant\">'use strict'</span>;\n\n<span class=\"synIdentifier\">var</span> assert = require(<span class=\"synConstant\">'assert'</span>); <span class=\"synComment\">// さっきのAssert奴</span>\n\ndescribe(<span class=\"synConstant\">'ここは見出し'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  it(<span class=\"synConstant\">'ここがテスト項目の名前'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    assert(1 + 1, 2); <span class=\"synComment\">// これがテストしたい項目</span>\n  <span class=\"synIdentifier\">}</span>);\n  it(<span class=\"synConstant\">'ここがテスト項目の名前そのに'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    assert.notDeepEqual(<span class=\"synIdentifier\">{</span> a: 1 <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span> a: 1, b: 2 <span class=\"synIdentifier\">}</span>); <span class=\"synComment\">// これがテストしたい項目そのに</span>\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>という感じです。<br />\nほらわかりやすい！</p>\n\n<ul>\n<li>describe</li>\n<li>it</li>\n</ul><p>とりあえずこの2つさえ知ってればテストは書けます。<br />\nってどっかの偉人が言ってました。</p>\n\n    <blockquote>\n        <p><a href=\"http://d.hatena.ne.jp/hokaccha/20111202/1322840375\" target=\"_blank\" title=\"テストフレームワーク mocha - hokaccha.hamalog v2\">テストフレームワーク mocha - hokaccha.hamalog v2</a></p>\n\n    </blockquote>\n<p>すーぱーありがたい記事があったので、こちらも参考に。<br />\n<br />\n</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>Assert</h4>\n    <p>さて、全体像の書き方はわかったところで、細かいテストコードについて。</p><p>さっき出てきたNodeのAssertには、以下のメソッドがあります。<br />\nこれを使い分けていくことになります。</p>\n\n<ul>\n<li>assert.fail(actual, expected, message, operator)</li>\n<li>assert(value, message), assert.ok(value, [message])</li>\n<li>assert.equal(actual, expected, [message])</li>\n<li>assert.notEqual(actual, expected, [message])</li>\n<li>assert.deepEqual(actual, expected, [message])</li>\n<li>assert.notDeepEqual(actual, expected, [message])</li>\n<li>assert.strictEqual(actual, expected, [message])</li>\n<li>assert.notStrictEqual(actual, expected, [message])</li>\n<li>assert.throws(block, [error], [message])</li>\n<li>assert.doesNotThrow(block, [message])</li>\n<li>assert.ifError(value)</li>\n</ul><p>・・・( ﾟдﾟ)多い。</p><p>もちろん必要に応じて使い分ければよいのですが、最初は何のことやらです。<br />\nちゃんと使い分けた方がいいのか・・そもそもコレなんや・・テスト辛い・・やめとこかな・・。</p><p>ってなりそうなそこのあなた！<br />\nここで満を持して登場するのがpower-assertです。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>power-assert！</h3>\n    <p>アサーションのメソッドはいっぱいあるけど、迷ったらとりあえずassertで書いとけ！<br />\nコケたら理由はちゃんと教えたるから！</p><p>的な気概で、jsテスト道への第一歩を後押ししてくれるのがpower-assertだと私は思いました。</p><p>では、いよいよ詳細な使い方です。</p>\n\n<div class=\"section\">\n    <h4>gulp</h4>\n    <p>おそらくコレが一番簡単で実用的だと思ったので、今回はgulpを使います。</p><p>最終的に、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>gulp test</pre><p>ってすると、テスト実行してくれるようにしたいですね。</p>\n\n<div class=\"section\">\n    <h5>インストール</h5>\n    <pre class=\"code\" data-lang=\"\" data-unlink>npm install --save-dev gulp gulp-espower gulp-mocha power-assert</pre><p>必要に応じてグローバルなgulpも。</p>\n\n</div>\n<div class=\"section\">\n    <h5>タスク書く</h5>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// gulpfile.js</span>\n<span class=\"synConstant\">'use strict'</span>;\n\n<span class=\"synIdentifier\">var</span> gulp    = require(<span class=\"synConstant\">'gulp'</span>);\n<span class=\"synIdentifier\">var</span> espower = require(<span class=\"synConstant\">'gulp-espower'</span>);\n<span class=\"synIdentifier\">var</span> mocha   = require(<span class=\"synConstant\">'gulp-mocha'</span>);\n\ngulp.task(<span class=\"synConstant\">'test:make'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    gulp.src(<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'test/*.js'</span><span class=\"synIdentifier\">]</span>)\n        .pipe(espower())\n        .pipe(gulp.dest(<span class=\"synConstant\">'test/espowered'</span>));\n<span class=\"synIdentifier\">}</span>);\n\ngulp.task(<span class=\"synConstant\">'test:exec'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    gulp.src(<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'test/espowered/*.js'</span><span class=\"synIdentifier\">]</span>)\n        .pipe(mocha());\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// or 中間ファイルが不要であればコレで実行だけできる</span>\ngulp.task(<span class=\"synConstant\">'test'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    gulp.src(<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'test/*.js'</span><span class=\"synIdentifier\">]</span>)\n        .pipe(espower())\n        .pipe(mocha());\n<span class=\"synIdentifier\">}</span>);\n</pre><p>おどろきの短さ！</p><p>最初のほうにpower-assertを使って書いたテストコードは、そのままでは実行できないと書きました。<br />\nその変換処理をやってるのがespowerです。</p><p>この例でいうところのtest:makeの処理ですね。</p>\n\n</div>\n<div class=\"section\">\n    <h5>モジュールを書く</h5>\n    <p>詳しくは割愛しますが、テストしたい対象であるモジュールを書きます。<br />\nてか書いたからテストしようって思ったのでは！</p><p>注意があるとすれば、Nodeでテストする以上、ちゃんとmodule.exportsしておくくらい？</p>\n\n</div>\n<div class=\"section\">\n    <h5>テスト書く</h5>\n    <p>さっきのmochaのとこで紹介したのが、ほぼそのまま使えます。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// test.js</span>\n<span class=\"synConstant\">'use strict'</span>;\n<span class=\"synIdentifier\">var</span> assert = require(<span class=\"synConstant\">'power-assert'</span>); <span class=\"synComment\">// &lt;- assert を power-assertにしただけ</span>\n\ndescribe(<span class=\"synConstant\">'サンプルテスト'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    it(<span class=\"synConstant\">'テスト項目: 1'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n        assert(1 + 1, 2);\n    <span class=\"synIdentifier\">}</span>);\n    it(<span class=\"synConstant\">'テスト項目: 2'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n        assert.notDeepEqual(<span class=\"synIdentifier\">{</span> a: 1 <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span> a: 1, b: 2 <span class=\"synIdentifier\">}</span>);\n    <span class=\"synIdentifier\">}</span>);\n    it(<span class=\"synConstant\">'テスト項目: 3'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n        <span class=\"synIdentifier\">var</span> zero = 0, two = 2;\n        <span class=\"synIdentifier\">var</span> arr = <span class=\"synIdentifier\">[</span>1, 2, 3<span class=\"synIdentifier\">]</span>;\n        assert(arr.indexOf(zero) === two);\n    <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// ...</span>\n</pre><p>楽ちんですねー。</p><p>あとは実行するだけ！</p>\n\n</div>\n<div class=\"section\">\n    <h5>テスト実行</h5>\n    <p>このサンプルだと、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>gulp test:make &amp;&amp; gulp test:exec</pre><p>ですが、package.jsonに定義しちゃえば、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>npm test</pre><p>ってできますね。</p><p>3つ目のテストはわざと落ちるようにしてあるので、power-assertの親切さ具合を味わいましょう。<br />\n数多の解説記事で見かけた親切丁寧なメッセージが見えてるはずです。</p><p>これで晴れてあのAAに怯える必要はなくなりました！</p>\n\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3>さいごに</h3>\n    <p>というわけでざっくりまとめると、</p>\n\n<ul>\n<li>power-assertだけではテストは書けない</li>\n<li>いまテスト書くならmochaを知っとくと良さげ</li>\n<li>assertメソッドの使い分けに気を病むくらいなら、power-assertでassertすべし</li>\n<li>なによりテストは書いてみることに意義がある！</li>\n</ul><p>今回のサンプルは、以下のリポジトリに置いてあります。<br />\n必要ならどうぞ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/hello-power-assert\" target=\"_blank\" title=\"leader22/hello-power-assert\">leader22/hello-power-assert</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>いま知りたいこと</h4>\n    <p>とりあえずテストという存在に対してはある程度前向きになれましたが、<br />\n次なる壁はすぐに立ちはだかるもので・・・。</p>\n\n<ul>\n<li>テストコードからのrequireのパスのうまいやり方</li>\n<li>テストケースの考え方(粒度など)とは</li>\n<li>テストコードそれ自体の良い書き方とは</li>\n<li>ブラウザのDOMまわりのテスト</li>\n<li>てかUIのテストとは</li>\n</ul><p>こういうのが最近気になるトピックです。</p><p>特にDOMまわりは気になるところで、世間にはSeleniumとかKarmaとかPhantomJSとかなんやか色々あるようですが、<br />\n結局のところAndroidのよくわからん挙動とか拾えんし、アニメーションとかわからんしなーとか考えてしまいます。</p><p>とりあえず、UIが絡まない + I/Oが疎なロジック関連だけは積極的にテスト書いてこうと思ってる今日このごろです。</p>\n\n</div>\n</div>"
}
