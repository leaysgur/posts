{
  "title": "TypeScriptでEventEmitterのイベントに型をつけたい",
  "html": "<p>毎回なぜか忘れて毎回調べてるので・・。</p><p>いろんなパターンがあるはず。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>d.tsを手書きする場合</h3>\n    <p>既存のコードが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>で完成していて、TypeScriptで書き直せない場合。</p><p>こんな風に`d.ts`を手書きすればいい。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">/// &lt;reference types=&quot;node&quot; /&gt;</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> EventEmitter <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;events&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">declare</span> <span class=\"synStatement\">class</span> Foo <span class=\"synStatement\">extends</span> EventEmitter <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n  \n  on<span class=\"synStatement\">(</span><span class=\"synConstant\">event</span>: <span class=\"synConstant\">&quot;open&quot;</span><span class=\"synStatement\">,</span> listener: <span class=\"synStatement\">(</span>id: <span class=\"synType\">string</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synType\">void</span><span class=\"synStatement\">)</span>: <span class=\"synIdentifier\">this</span><span class=\"synStatement\">;</span>\n  on<span class=\"synStatement\">(</span><span class=\"synConstant\">event</span>: <span class=\"synConstant\">&quot;close&quot;</span><span class=\"synStatement\">,</span> listener: <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synType\">void</span><span class=\"synStatement\">)</span>: <span class=\"synIdentifier\">this</span><span class=\"synStatement\">;</span>\n  on<span class=\"synStatement\">(</span><span class=\"synConstant\">event</span>: <span class=\"synConstant\">&quot;error&quot;</span><span class=\"synStatement\">,</span> listener: <span class=\"synStatement\">(</span>err: <span class=\"synSpecial\">Error</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synType\">void</span><span class=\"synStatement\">)</span>: <span class=\"synIdentifier\">this</span><span class=\"synStatement\">;</span>\n  on<span class=\"synStatement\">(</span><span class=\"synConstant\">event</span>: <span class=\"synType\">string</span><span class=\"synStatement\">,</span> listener: <span class=\"synSpecial\">Function</span><span class=\"synStatement\">)</span>: <span class=\"synIdentifier\">this</span><span class=\"synStatement\">;</span>\n\n  once<span class=\"synStatement\">(</span><span class=\"synConstant\">event</span>: <span class=\"synConstant\">&quot;open&quot;</span><span class=\"synStatement\">,</span> listener: <span class=\"synStatement\">(</span>id: <span class=\"synType\">string</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synType\">void</span><span class=\"synStatement\">)</span>: <span class=\"synIdentifier\">this</span><span class=\"synStatement\">;</span>\n  once<span class=\"synStatement\">(</span><span class=\"synConstant\">event</span>: <span class=\"synConstant\">&quot;close&quot;</span><span class=\"synStatement\">,</span> listener: <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synType\">void</span><span class=\"synStatement\">)</span>: <span class=\"synIdentifier\">this</span><span class=\"synStatement\">;</span>\n  once<span class=\"synStatement\">(</span><span class=\"synConstant\">event</span>: <span class=\"synConstant\">&quot;error&quot;</span><span class=\"synStatement\">,</span> listener: <span class=\"synStatement\">(</span>err: <span class=\"synSpecial\">Error</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synType\">void</span><span class=\"synStatement\">)</span>: <span class=\"synIdentifier\">this</span><span class=\"synStatement\">;</span>\n  once<span class=\"synStatement\">(</span><span class=\"synConstant\">event</span>: <span class=\"synType\">string</span><span class=\"synStatement\">,</span> listener: <span class=\"synSpecial\">Function</span><span class=\"synStatement\">)</span>: <span class=\"synIdentifier\">this</span><span class=\"synStatement\">;</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> Foo<span class=\"synStatement\">;</span>\n</pre><p><br />\n最後の行にフォールバックの雑なやつを追加するのが重要。</p><p>これらの定義をサボると、ぜんぶ`any`ないつものやつに自動的になる。<br />\n普通に`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/tsc\">tsc</a>`とかでビルドしたときもそうなる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>型を上書きして使う</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/bterlson/strict-event-emitter-types\">GitHub - bterlson/strict-event-emitter-types: A type-only library for strongly typing any event emitter</a></p>\n\n    </blockquote>\n<p>このアプローチは割と見かける。<br />\nこのライブラリだとこういうイメージで使う。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> StrictEventEmitter <span class=\"synStatement\">from</span> <span class=\"synConstant\">'strict-event-emitter-types'</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> EventEmitter <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">'events'</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">interface</span> MyEvents <span class=\"synIdentifier\">{</span>\n  request: <span class=\"synStatement\">(</span>request: Request<span class=\"synStatement\">,</span> response: Response<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synType\">void</span><span class=\"synStatement\">;</span>\n  done: <span class=\"synType\">void</span><span class=\"synStatement\">;</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">const</span> ee: StrictEventEmitter<span class=\"synStatement\">&lt;</span>EventEmitter<span class=\"synStatement\">,</span> MyEvents<span class=\"synStatement\">&gt;</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">new</span> EventEmitter<span class=\"synStatement\">();</span>\n</pre><p>型を上書きするので、厳密には、元のコードと異なる可能性があるけど。</p><p>その他で見つけたやつ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/andywer/typed-emitter\">GitHub - andywer/typed-emitter: &#x1F529; Type-safe event emitter interface for TypeScript 3</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>そういうTSのモジュールを使う</h3>\n    <p>もしくは作る。</p>\n\n    <blockquote>\n        <p><a href=\"https://basarat.gitbooks.io/typescript/content/docs/tips/typed-event.html\">Typesafe Event Emitter &middot; TypeScript Deep Dive</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が変わるので、そこを許容できるかどうかが焦点かな？</p><p>他にもなにかあったら教えてください！</p>\n\n</div>"
}
