{
  "title": "Web API: The Good Parts 読んだ",
  "html": "<p>某氏にいわれて下書きまで書いてたのを思い出したので、要約ほどではないけど感想文として提出。</p><p>個人的には第3章が良かったです。</p><p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873116864/hatena-blog-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51GHwTNJgSL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"Web API: The Good Parts\" title=\"Web API: The Good Parts\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873116864/hatena-blog-22/\">Web API: The Good Parts</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> 水野貴明</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> オライリージャパン</li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2014/11/21</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 大型本</li><li><a href=\"http://d.hatena.ne.jp/asin/4873116864/hatena-blog-22\" target=\"_blank\">この商品を含むブログ (3件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p><p></p>\n\n<div class=\"section\">\n    <h3>はじめに</h3>\n    <p>これを読んで一番トクするのは、もちろんサーバーサイドで実際にAPIを実装する人かなとは思います。</p><p>とはいえ、<br />\nクライアントサイドからどういうデータ形式が欲しいかって話ができないと、<br />\n今の時代のクライアントのコードは書けませんよね？</p><p>そういう意味では、xhrでデータの取得をしたことがあるって人みんなにとって、<br />\n一見の価値ありなのではとも思います。</p>\n\n</div>\n<div class=\"section\">\n    <h3>第3章: レスポンスデータの設計</h3>\n    <p>この章は実際にエンドポイントを叩いたときのレスポンスについての章です。<br />\nここがオススメな章なので、特にここだけ書き残しておきます。</p>\n\n<div class=\"section\">\n    <h4>汎用的と思って不要なデータをつけるのはやめよう</h4>\n    <p>レスポンスを以下みたいなデータ形式で統一して返す必要は、本当にあるか？って話。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// okなとき</span>\n<span class=\"synIdentifier\">{</span>\n  header: <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">status</span>: <span class=\"synConstant\">'ok'</span>,\n    code: 0\n  <span class=\"synIdentifier\">}</span>,\n  body: <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// ...</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// ngなとき</span>\n<span class=\"synIdentifier\">{</span>\n  header: <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">status</span>: <span class=\"synConstant\">'ng'</span>,\n    code: 1\n  <span class=\"synIdentifier\">}</span>,\n  body: <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// ...</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>そういうのはHTTPヘッダにさせれば良い。<br />\nステータスコードは200やけど、でもAPI的にはエラーみたいなのはありがちやけどやめましょうっていう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>データ構造はまずはフラットに作って、必要であれば構造化</h4>\n    <p>まあデータ量にもよると思うけど・・。</p><p>とはいえ、方針としてなるべくフラットに作っておけば、<br />\nデータが増えてきたとしてもクッション構造の部分の量は少なくとも制限できてるので、<br />\n最初からきっちり構造化する必要はないですよという指針。</p>\n\n</div>\n<div class=\"section\">\n    <h4>配列ではなくオブジェクトを返そう</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// こんなデータより</span>\n<span class=\"synIdentifier\">[</span>1001, 1002, 1003<span class=\"synIdentifier\">]</span>\n\n<span class=\"synComment\">// こっちのがわかりやすいよね</span>\n<span class=\"synIdentifier\">{</span>\n  user_ids: <span class=\"synIdentifier\">[</span>1001, 1002, 1003<span class=\"synIdentifier\">]</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n<ul>\n<li>レスポンスのデータだけを見たときに、何のデータかわかりやすい</li>\n<li>配列に統一はできないがオブジェクトに統一はできる</li>\n<li>JSONハイジャック対策にもなるよ</li>\n</ul><p>Backboneとかさわってると、Modelにデータつっこむ都合でオブジェクトの方が嬉しいとかありますよね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>プロパティ名の考え方</h4>\n    \n<ul>\n<li>そもそも命名規則に関してや</li>\n<li>多様化しがちな日付のフォーマット</li>\n<li>4294967295を超えるIDどうするよとか</li>\n</ul><p>知っ得知識がそこにはありました。</p>\n\n</div>\n<div class=\"section\">\n    <h4>エラーについて</h4>\n    <p>エラー時に返すデータの構造について。</p>\n\n<ul>\n<li>適切なステータスコードを返す</li>\n<li>エラーに限っては構造を統一してわかりやすく示すべき</li>\n<li>エラーページのHTMLとか返さないように注意</li>\n<li>ログインエラーでID or PWどっちか間違ってるみたいにぼかすのはセキュリティのため</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>APIを設計・実装しないにしても、<br />\n単純にサーバーサイドテンプレートに値を渡す部分でも使える知識。</p><p>クライアント側の普段のコードでも、何かのメソッドでオブジェクトを返すシーンはあるはずで、<br />\nそういう場所でも参考にできる部分は多々あるなーと。</p><p>URLの設計からHTTPの仕様からセキュリティの話から割と体系的にまとまってて、<br />\n読んでよかったなーと思います。</p>\n\n<div class=\"section\">\n    <h4>もひとつおわりに</h4>\n    <p>サーバーサイドエンジニアではない身からすると良かったんですけど、<br />\nただ実際に設計・実装したことがあるサーバーサイドのエンジニアさんが見ると、いまさら感満載なんやろうなーとは思います。(Amazonのレビューとか)</p><p>まあ経験に勝る知識はないよって話か。</p>\n\n</div>\n</div>"
}
