{
  "title": "Reactでちょっとしたサービスを作りました",
  "html": "<p>みなさんマリオカート8やってますか？<br />\n200ccは速すぎて難しすぎるので、結局オンラインなGWですどうも。</p><p>春になりDLCも増え、そろそろカスタマイズを一新したいとか考えてま・・すよね？<br />\nそんなあなたのために、WiiUを起動しなくてもカスタマイズを考えられるサービスを作りました！</p><p>特にReactである優位性はないんですけど、流行ってるので触っておきたかったんです！</p>\n\n<div class=\"section\">\n    <h3>はじめに</h3>\n    <p>ReactとReactRouter x Require.jsだけのシンプル構成です。<br />\nES6でJSXです。</p><p>ソースコードも置いておきます！</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/mk8-kart-customizer\">GitHub - leader22/mk8-kart-customizer: Mario kart eighhhhhhhhhhhhhhhht!</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>ごめんなさい案件</h4>\n    \n<ul>\n<li>サーバーサイドレンダリングまわりは興味がないのでやってません。</li>\n<li>パフォーマンス最適化も実機検証もほぼやってません。</li>\n<li>Fluxなる考え方も高尚すぎたので一旦スルーしてます。</li>\n</ul><p>根本的に間違ってるーとか、こうしたほうがいいのではーとか、あればこっそり教えてください！<br />\nもしくはForkしていい感じにしてください！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ざっくり所感</h3>\n    \n<div class=\"section\">\n    <h4>ES6</h4>\n    <p>DestructuringとかTemplateStringとかもう楽過ぎて日々の業務に支障をきたしそうです。<br />\nあとBabelがJSXを解釈してくれるのに感動しました。</p><p>class作る汎用関数みたいなのがコンパイルするとclassの数だけ吐かれるとかは気になるけど、<br />\nそんな容量を気にするよりも、日々の精神衛生のために導入しちゃっても良い気はしました。</p>\n\n    <blockquote>\n        <p>さすがにiOS5.xとかAndroid4.xで動かないAPIとかないよね・・？<br />\nES5がだいたい動けばいけるよね・・？</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>React</h4>\n    <p>最初は「一体何者なんだー」感があったんですが、今となっては全然薄っぺらいViewまわりのライブラリやなーと思えてます。</p><p>JSXも最初は抵抗あったんですけど、コードの見通しが全然違うので使う場合は必須な気がしてます。<br />\nというか、JSXの記法を制するものがReactを制する気がしてます。</p>\n\n</div>\n<div class=\"section\">\n    <h4>React Router</h4>\n    <p>まぁ仕方ないというかなんというか、初見の取っ付きにくさがすごかったです。<br />\nルーターのくせになんでJSXやねんってきっと思うはず。</p><p>でもまぁ使ってみるとなるほどねーとなり、だんだん好きになっていくと思いますｗ</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>思うところ</h3>\n    \n<div class=\"section\">\n    <h4>コンポーネント化の功罪</h4>\n    <p>js内にHTMLを書くってのはやっぱりどうにもこうに抵抗があります。<br />\nというのも、文言修正するだけでビルドしなおしてキャッシュを破棄させるってどうなんだってのがあり。</p><p>バックエンド向けとかPCとかなら気にしなくて良いと思うんですけど・・。</p><p>こうなるともはや差分更新は大変というか無理で、<br />\n一周回ってAMDにせめてワンチャンな気がしてhttp2はよっていう気持ちになりますが結局リクエスト数減らすにこしたことはないのでやっぱり辛い気がしています。</p>\n\n</div>\n<div class=\"section\">\n    <h4>CSSどうするんだ問題</h4>\n    <p>jsの世界にHTMLを持ってくるとこまでは達成され、次はCSSだってフェーズなんでしょうか。<br />\nでもこれボタンの色変えただけでビルドしなおし(ry</p><p>ちなみに今回、<a href=\"http://projects.formidablelabs.com/radium/\" target=\"_blank\" title=\"Radium - A React Component Styling Library\">Radium</a>ってのを使ってみようかと思ったのですが、読み込むだけで何故か全部動かなくなったのでやめました。</p><p>あとそもそもコレ系のものはbefore/after疑似要素に対応しないぽく、そもそも使えないコなのではというのが正直な気持ち。<br />\nベンダープレフィックスの対応もまだ追いついてないっぽいし、色々まだまだですねー。</p>\n\n</div>\n<div class=\"section\">\n    <h4>コンポーネントってなんなんだ問題</h4>\n    <p>Marionetteの時もそうでした。<br />\nいわゆるRootなコンポーネントだったり、他の部品を内包するMarionette.Region的なコンポーネントをどう分類すべきか。<br />\nちなみに今回は、Routerから叩かれるものをControllerView、その他をただのViewって扱いにしました。</p><p>あとは仕事なくてもList -> ListItem とするべきか、もうListだけでええやんってするか問題も相変わらず。<br />\nコンポーネントっていう言葉の響き的には、ひたすらに正規化して細分化すべきなんでしょうけどねー。</p>\n\n</div>\n<div class=\"section\">\n    <h4>renderごちゃごちゃする問題</h4>\n    <p>上記の件もあり、こみ入ってくるといわゆるView変数を用意するコードが増えてきてどんどん行数が・・！<br />\nでも別ファイルに切り出してもどうせ必要なのはstate/propsであってその定義は本体側のファイルにあるわけで、となるといっそ一つに固まってる方がわかりやすいがしかしうーんっていう。</p><p>コンポーネント専属のprops/stateをもらってView変数だけ返すマンを作るとかしたら良いのかな？</p>\n\n</div>\n<div class=\"section\">\n    <h4>そのstateは誰のものなんだ問題</h4>\n    <p>どっか1つで全てのstateを管理して、Rootからぜーんぶpropsで渡す。<br />\n例外は認めない！みたいな構成にすればよかったのではと今さら思ったりしている。<br />\nそしてそうなると中継イベントprops祭りになるのは目に見えてるから、一旦グローバルに返すようにしてまたRootからデータ流して・・ってのがFlux？</p><p>でももしそうならReactとしてもComponentとRootComponentみたいな役割を分けた実装になってても良い気がするし、<br />\nやはり適当なレイヤーで適当なstateを持つべしっていう示唆があるのではと深読みしてみたりして結局よーわからんです。<br />\n誰か筋の良い設計指針を教えてください。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ハマったところ</h3>\n    \n<div class=\"section\">\n    <h4>JSXでコメント</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>render() <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> (\n    <span class=\"synIdentifier\">{</span><span class=\"synComment\">/* こうしないとコメントにならない */</span><span class=\"synIdentifier\">}</span>\n  );\n<span class=\"synIdentifier\">}</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h4>Numberなprops</h4>\n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>Counter<span class=\"synIdentifier\"> initCount=</span><span class=\"synConstant\">{5}</span><span class=\"synIdentifier\"> /&gt;</span>\n</pre><p>\"\" でクオートされた文字列か、{} で表現したものしか渡せないので、数値だけでも{}で囲む必要あり。<br />\n違和感は慣れ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>onClickしたいaタグにはhrefを</h4>\n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">a</span><span class=\"synIdentifier\"> </span><span class=\"synType\">href</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;&quot;</span><span class=\"synIdentifier\"> onClick=</span><span class=\"synConstant\">{this._onClickHandler}</span><span class=\"synIdentifier\">&gt;</span><span class=\"synUnderlined\">属性ないと動かない</span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">a</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>html5的には良かったはずですが・・。</p><p>空でも良いのでhrefがないと、iOSで動かなかったです。<br />\nprevDefするのお忘れなく。</p>\n\n</div>\n<div class=\"section\">\n    <h4>インラインリンク</h4>\n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">p</span><span class=\"synIdentifier\">&gt;</span>こういう文字の中に、こんな<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">a</span><span class=\"synIdentifier\"> </span><span class=\"synType\">href</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;/top&quot;</span><span class=\"synIdentifier\">&gt;</span><span class=\"synUnderlined\">リンク</span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">a</span><span class=\"synIdentifier\">&gt;</span>があったら<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">p</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>どうコンパイルされるかというと、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">p</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>こういう文字の中に、こんな<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">a</span><span class=\"synIdentifier\"> </span><span class=\"synType\">href</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;/top&quot;</span><span class=\"synIdentifier\">&gt;</span><span class=\"synUnderlined\">リンク</span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">a</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>があったら<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">p</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>こうなるんですが、このおかげでリンクの前後に謎のスペースが・・・。<br />\nPCのSafariでだけ起きてたので無視した。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Reactなのかreactなのか</h4>\n    <p>ライブラリによっては\"React\"って呼んでたり\"react\"って呼んでたり。<br />\nRequireのパス解決でなんとかなるけども、統一してほしいなーという愚痴。</p>\n\n</div>\n<div class=\"section\">\n    <h4>JSXで無理やりif文</h4>\n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink>render() {\n  return (\n    { isFoo ?\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>Foo<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>\n    : '' }\n  );\n}\n</pre><p>renderの外で変数にJSX詰めるの嫌いなだけです。<br />\nサボり癖ですね。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>作ってみたは良いものの、いわゆるベストプラクティスやら真意やらを押さえた構造にはなってないなーと一晩寝かして思う今日このごろです。<br />\nま、流れてくる記事だけ読んでできたつもりになるよりかはマシだと思うので、良しとしましょう。</p><p>諸先輩方のもうちょっと規模の大きいものを作る場合のファイル構成とかデザパタとか、<br />\nそういう知見のシェアを待ってます。(マリオカートしながら</p>\n\n</div>"
}
