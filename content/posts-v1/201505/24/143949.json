{
  "title": "SPAのキホンのキ",
  "html": "<p>SPAとはなにかをざっくり説明する記事です。</p><p>対象読者は、</p>\n\n<ul>\n<li>SPAってよく聞くけど実際どういう仕組みかわかってない</li>\n<li>SPAってのをつくろうと思うけどどこから手を付ければいいかわかってない</li>\n<li>いわゆるサーバーサイドエンジニアで、クライアントのことを少し知っておきたい</li>\n</ul><p>みたいな人へ。<br />\n知ってる人にとっては今さら過ぎる内容ですが、知らない人にとってはこういうのすら知らないらしいので。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>SPAとは</h3>\n    <p>SinglePageAppの略です。<br />\nWebサイトの構築手法のことで、比較されるものとしては従来通りページ遷移するものがあります。</p>\n\n<ul>\n<li>トップページ</li>\n<li>詳細ページA</li>\n<li>詳細ページB</li>\n</ul><p>ってな構成だった場合に、<br />\nSPAで作る場合はhtmlが1つあれば良くて、ページのURLも1つでOK。<br />\nページ遷移する場合はhtmlが3つ、ページのURLも3つになります。</p>\n\n<div class=\"section\">\n    <h4>正確には</h4>\n    <p>URLが1つで良い代わりに、URLの代わりに \"#\" を付けてページそれぞれを区別する必要があります。</p>\n\n<table>\n    <tr>\n    <th>ページ名</th>\n    <td>ページ遷移</td>\n    <td>SPA</td>\n    </tr>\n    <tr>\n    <td>トップページ</td>\n    <td><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/example.com\">example.com</a>/top</td>\n    <td><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/example.com\">example.com</a>#!/top</td>\n    </tr>\n    <tr>\n    <td>詳細ページA</td>\n    <td><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/example.com\">example.com</a>/item/a</td>\n    <td><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/example.com\">example.com</a>#!/item/a</td>\n    </tr>\n    <tr>\n    <td>詳細ページB</td>\n    <td><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/example.com\">example.com</a>/item/b</td>\n    <td><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/example.com\">example.com</a>#!/item/b</td>\n    </tr>\n</table><p>最近ではHistoryAPIなる仕様があり、 \"#\" なんか付けず綺麗なURLで同じことができるのですが、<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>が元気なうちは大人しく \"#\" でやるのがベターです・・。</p>\n\n    <blockquote>\n        <p>ようは、URLを変えず\"#\"を操作することで擬似的にページ遷移を表す仕組みがSPAのキモです。<br />\nそれ以外は、今までと一緒です。</p>\n\n    </blockquote>\n<p>\"#\"の横の\"!\"なんやねんって思う人もいるかもしれませんが、特に意味は無いです。<br />\nなんかSPAですよってことを表すために使う通例だとかいう説が。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>hashchangeを拾う</h3>\n    <p>というわけで、URLに対してHTMLをサーバーから返す要領で、\"#\"が変わったタイミングを捕捉してページの表示を変更します。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">window</span>.addEventListener(<span class=\"synConstant\">'hashchange'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span> <span class=\"synComment\">/* ハッシュが変わったら発火する */</span> <span class=\"synIdentifier\">}</span>);\n</pre><p>このイベントをさばくRouterと、さばいた結果動くControllerを用意すれば良いってことですね。</p>\n\n</div>\n<div class=\"section\">\n    <h3>hash駆動なController</h3>\n    <p>そしてざっくり書いたのがこちら。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>(<span class=\"synIdentifier\">function</span>(global) <span class=\"synIdentifier\">{</span>\n    <span class=\"synConstant\">'use strict'</span>;\n\n    <span class=\"synIdentifier\">var</span> Router = <span class=\"synIdentifier\">function</span>(options) <span class=\"synIdentifier\">{</span>\n        <span class=\"synIdentifier\">this</span>.controller = options.controller;\n        global.addEventListener(<span class=\"synConstant\">'hashchange'</span>, <span class=\"synIdentifier\">this</span>);\n    <span class=\"synIdentifier\">}</span>;\n    Router.prototype = <span class=\"synIdentifier\">{</span>\n        <span class=\"synComment\">/**</span>\n<span class=\"synComment\">         * あくまで考え方の例で、ほんとはもっとちゃんとする</span>\n<span class=\"synComment\">         * - 今のままでは深い階層のルートに対応してないし</span>\n<span class=\"synComment\">         * - パラメータも1つしか受けてないし</span>\n<span class=\"synComment\">         *</span>\n<span class=\"synComment\">         */</span>\n        handleEvent: <span class=\"synIdentifier\">function</span>(ev) <span class=\"synIdentifier\">{</span>\n            <span class=\"synComment\">// #!/item/2 の場合</span>\n            <span class=\"synIdentifier\">var</span> hash = ev.newURL.split(<span class=\"synConstant\">'#'</span>)<span class=\"synIdentifier\">[</span>1<span class=\"synIdentifier\">]</span>; <span class=\"synComment\">// '!/item/2'</span>\n            <span class=\"synIdentifier\">var</span> hashArr = hash.split(<span class=\"synConstant\">'/'</span>);      <span class=\"synComment\">// ['!', 'item', '2']</span>\n            <span class=\"synIdentifier\">var</span> routeFuncName = hashArr<span class=\"synIdentifier\">[</span>1<span class=\"synIdentifier\">]</span>;     <span class=\"synComment\">// 'item'</span>\n            <span class=\"synIdentifier\">var</span> param = hashArr<span class=\"synIdentifier\">[</span>2<span class=\"synIdentifier\">]</span>;             <span class=\"synComment\">// '2'</span>\n\n            <span class=\"synComment\">// コントローラーにあればそれを</span>\n            <span class=\"synStatement\">if</span> (routeFuncName <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">this</span>.controller) <span class=\"synIdentifier\">{</span>\n                <span class=\"synIdentifier\">this</span>.controller<span class=\"synIdentifier\">[</span>routeFuncName<span class=\"synIdentifier\">]</span>(param);\n            <span class=\"synIdentifier\">}</span>\n            <span class=\"synComment\">// なければerrorってやつを</span>\n            <span class=\"synStatement\">else</span> <span class=\"synIdentifier\">{</span>\n                <span class=\"synIdentifier\">this</span>.controller<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'error'</span><span class=\"synIdentifier\">]</span>();\n            <span class=\"synIdentifier\">}</span>\n        <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">}</span>;\n\n    <span class=\"synIdentifier\">var</span> Controller = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{}</span>;\n    Controller.prototype = <span class=\"synIdentifier\">{</span>\n        <span class=\"synStatement\">top</span>: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n            console.log(<span class=\"synConstant\">'top'</span>);\n        <span class=\"synIdentifier\">}</span>,\n        item: <span class=\"synIdentifier\">function</span>(itemId) <span class=\"synIdentifier\">{</span>\n            console.log(<span class=\"synConstant\">'item'</span>, itemId);\n        <span class=\"synIdentifier\">}</span>,\n        error: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n            console.log(<span class=\"synConstant\">'error'</span>);\n        <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">}</span>;\n\n    <span class=\"synStatement\">new</span> Router(<span class=\"synIdentifier\">{</span> controller: <span class=\"synStatement\">new</span> Controller() <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>(<span class=\"synStatement\">window</span>));\n</pre><p>コメントにもありますが、いわゆるRouterはもっとちゃんとしてますｗ</p>\n\n<ul>\n<li>historyAPIが動く環境ならそっち使うとか</li>\n<li>ページがロードされた時に既に\"#\"が付いてたら動くようにするとか</li>\n<li>ネストしたルートでも動くとか</li>\n<li>引数を個別にいっぱい渡せるとか</li>\n</ul><p>大事なのはイメージ！</p>\n\n</div>\n<div class=\"section\">\n    <h3>データを取ってきてViewを組む</h3>\n    <p>これはもはやSPAとか関係ないですね。<br />\n上述したControllerのそれぞれの関数内で、必要なデータを取ってきて画面を表示すれば完成。</p><p>View用のイケイケなライブラリ使ったり、テンプレートのライブラリ使ったり。<br />\nデータの処理を分離するためにModel的な概念を用意したりするわけです。</p><p>データはサーバーサイドからHTMLに埋めて返すもよし、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を用意して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ajax\">Ajax</a>するもよし。</p>\n\n</div>\n<div class=\"section\">\n    <h3>これだけ？</h3>\n    <p>そうです、これだけです。<br />\nキホンのキとしては本当にこれだけです。</p><p>そこに、</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>にインデックスしてほしいとか</li>\n<li>ローディング表示とか</li>\n<li>ネストするViewや共通するViewをどうするのとか</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ajax\">Ajax</a>でリクエストしたデータで云々とか</li>\n<li>画面スクロール位置とか</li>\n<li>etc</li>\n</ul><p>みたいな混み合った処理が必要になってきて面倒になってくるのがお約束ですが、<br />\nそれはまぁ追って覚えていけば良いと思います。</p><p>というわけでざっくりですが、これであなたも今日からSPA実装経験者です！</p>\n\n</div>"
}
