{
  "title": "「はてな教科書」のJavaScriptの課題をやってみた・・けど",
  "html": "<p>こんなエントリがありまして。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://developer.hatenastaff.com/entry/2012/04/11/104325\" target=\"_blank\" title=\"「はてな教科書」をgithub上に公開しました - Hatena Developer Blog\">「はてな教科書」をgithub上に公開しました - Hatena Developer Blog</a></p>\n\n    </blockquote>\n<p>せっかくなので、JavaScriptの章にあった課題をやってみました。<br />\nけど・・・。</p><p>JavaScript力 が たりない ！</p><p>一応動きはするものの、なんかこうしっくりこないというか・・。<br />\nどなたか添削・アドバイスいただけると非常に助かりますです。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>お題</h3>\n    \n    <blockquote>\n        <p>タイマーを管理する Timer クラスをつくれ。</p>\n\n<ul>\n<li>コールバックを概念を理解する jQuery、Ten といったフレームワークを使ってはいけない</li>\n</ul>\n    </blockquote>\n\n<div class=\"section\">\n    <h4>仕様</h4>\n    \n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>var timer = new Timer(time);\n    //=&gt; time ミリ秒のタイマーを作る\ntimer.addListener(callback1);\n    //=&gt; タイマーが完了したときに呼ばれる関数を追加する\n    //=&gt;  callback : Function =&gt; タイマーが完了したときに呼ばれる関数\ntimer.addListener(callback2);\n    //=&gt; タイマーが完了したときに呼ばれる関数は、複数指定できる\ntimer.start();\n    //=&gt; タイマーをスタートさせる。\n    //=&gt; start() してからコンストラクタに指定したミリ秒後に addListener に指定したコールバックが呼ばれる\ntimer.stop();\n    //=&gt; タイマーをストップさせる。</pre>\n\n</div>\n<div class=\"section\">\n    <h4>例</h4>\n    \n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>var timer = new Timer(1000);\ntimer.addListener(function (e) {\n  alert(e.realElapsed); //=&gt; start() 時から実際に経過した時間\n  timer.start(); //=&gt; 再度スタートできる\n});\ntimer.start();\n\ndocument.body.addEventListener(&#39;click&#39;, function () {\n  timer.stop(); //=&gt; クリックで止まる。\n}, false);</pre>\n<p>この例ですが、2行目の意味がわからなかったのでやってません。<br />\n定義したaddListener関数にまたstart関数で再度スタート？うーん、わからん。</p><p>なので、仕様の項に書かれた内容のみを実装してみました。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>書いてみた</h3>\n    \n<div class=\"section\">\n    <h4>Html</h4>\n    \n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink>&lt;button id=&#34;start&#34;&gt;Start!&lt;/button&gt;\n&lt;button id=&#34;stop&#34;&gt;Stop!&lt;/button&gt;</pre>\n\n</div>\n<div class=\"section\">\n    <h4>JavaScript</h4>\n    \n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>(function(){\n\t/* 呼び出し用ダミー関数 */\n\tfunction myFunc1(){console.log(&#39;Func1&#39;);}\n\tfunction myFunc2(){console.log(&#39;Func2&#39;);}\n\t\n\t/* Timerクラス */\n\tvar Timer = function(time){\n\t\t// 設定用のプロパティ\n\t\tthis.settings = {\n\t\t\ttimerCount:time,// 何秒後に動かすか\n\t\t\ttimerVal:[],// タイマー変数入れ\n\t\t\ttimerFunc:[],// 各タイマー変数に対応する、関数入れ\n\t\t\tqueueFunc:0// 一括スタート・ストップ用のショートカット\n\t\t};\n\t\t\n\t\t// タイマーにセットする関数を受ける\n\t\tthis.addListener = function(func){\n\t\t\tthis.settings.timerFunc.push(func);\n\t\t\tthis.settings.queueFunc = this.settings.timerFunc.length;\n\t\t};\n\t\t\n\t\t// タイマーをスタート\n\t\tthis.start = function(){\n\t\t\tfor(var i = 0; i &lt; this.settings.queueFunc; i++){\n\t\t\t\tthis.settings.timerVal[i] = setTimeout(this.settings.timerFunc[i], this.settings.timerCount);\n\t\t\t}\n\t\t};\n\t\t\n\t\t// タイマーをストップ\n\t\tthis.stop = function(){\n\t\t\tfor(var i = 0; i &lt; this.settings.queueFunc; i++){\n\t\t\t\tclearTimeout(this.settings.timerVal[i]);\n\t\t\t}\n\t\t};\n\t};\n\t\n\t/* 3秒後に動くタイマーをセット */\n\tvar timer = new Timer(3000);\n\ttimer.addListener(myFunc1);\n\ttimer.addListener(myFunc2);\n\t\n\t/* スタートとストップボタンの設置と、イベント設定 */\n\tvar bt = {\n\t\tstart:document.getElementById(&#39;start&#39;),\n\t\tstop:document.getElementById(&#39;stop&#39;)\n\t}\n\t\n\tbt.start.addEventListener(&#39;click&#39;, function () {\n\t\ttimer.start();\n\t}, false);\n\t\t\n\tbt.stop.addEventListener(&#39;click&#39;, function () {\n\t\ttimer.stop();\n\t}, false);\n})();</pre>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おもったこと</h3>\n    \n<div class=\"section\">\n    <h4>そもそも課題の内容と違うはず・・</h4>\n    <p>再スタートできる・・みたいな文言もあるので、おそらくDateで時間も持たせてstop()されたら差分取るとか、それ用のプロパティとか必要なはず。<br />\n「コールバックを理解する」とのことなので、もっと複雑になるけどシンプルに記述するやり方が答えに近いはず。(今回のコレほとんどコールバックしてな・・)</p>\n\n</div>\n<div class=\"section\">\n    <h4>removeListener</h4>\n    <p>完全に見落としてて配慮してないです・・。<br />\nremoveする＝タイマーをクリアなはずなので、セットした関数名を引いてきてクリアすれば良いんかな？<br />\nでもその為にはArrayじゃなくてObjectでタイマー関数とか持たせた方が良かったかも？</p><p>でもそうするとlengthとかpushとかつかえなくなるような。<br />\nここで、Array.prototype.push.apply(this, elem);ってやつか！</p>\n\n</div>\n<div class=\"section\">\n    <h4>Prototype？</h4>\n    <p>それらしく書いたつもりではいるものの、1つのオブジェクトとして作るより、メソッドとしてTimer.prototype.addListenerとかってした方が効率が良いのでは？と、今読んでる本を見てて感じたりも。<br />\n新しく newする度に変わる可能性のあるもの(今回はタイマーの秒数とか)と、そうじゃないものを使い分けるべきなんかな？</p>\n\n</div>\n<div class=\"section\">\n    <h4>答えあわせ</h4>\n    <p>やりたいものの、それらしきものが見当たらない！<br />\n答え合わせしたところで、「なるほど・・・」としか言えないんやろうけどｗ</p><p>うん、精進します・・。<br />\nこういうのは勉強になるなぁとは思うものの、やっぱり独学で踏み込むには若干きつくなってきたなぁ、とも。</p>\n\n</div>\n</div>\n</div>"
}
