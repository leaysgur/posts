{
  "title": "PhantomJSのメモいろいろ",
  "html": "<p>ハマったとこ、先人の知恵のまとめ。</p>\n\n<div class=\"section\">\n    <h3>提供されるモジュール群は5つ</h3>\n    \n<ul>\n<li>phantom: そのもの</li>\n<li>FileSystem: ファイルに出力したり、依存ファイルの存在確認したり</li>\n<li>System: コマンドラインから引数取りたいなら</li>\n<li>WebPage: きっと主役なrequire('webpage').create()するやつ</li>\n<li>WebServer: まだ使わない方がよさそう</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>おおまかな使い方は2パターン</h3>\n    \n<div class=\"section\">\n    <h4>pageを使いまわす</h4>\n    <p>オーソドックスなやつかと。<br />\nPhantomJSのサンプルといえば！的な。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> page = require(<span class=\"synConstant\">'webpage'</span>).create();\n\npage.open(<span class=\"synConstant\">'http://example.com'</span>, <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// do something..</span>\n  page.evaluate(<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// do something...</span>\n  <span class=\"synIdentifier\">}</span>);\n  phantom.exit();\n<span class=\"synIdentifier\">}</span>);\n</pre>\n</div>\n<div class=\"section\">\n    <h4>コールバックに載せまくる</h4>\n    <p>ネットワークの監視とか。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> page = require(<span class=\"synConstant\">'webpage'</span>).create();\n\npage.onResourceRequested = <span class=\"synIdentifier\">function</span> (request) <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">'Request '</span> + JSON.stringify(request, <span class=\"synStatement\">undefined</span>, 4));\n<span class=\"synIdentifier\">}</span>;\npage.onResourceReceived = <span class=\"synIdentifier\">function</span> (response) <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">'Receive '</span> + JSON.stringify(response, <span class=\"synStatement\">undefined</span>, 4));\n<span class=\"synIdentifier\">}</span>;\npage.open(url);\n</pre><p>とにかくいろいろサンプルあるので、先に見るとイメージがつかめるかもです。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/ariya/phantomjs/tree/master/examples\" target=\"_blank\" title=\"phantomjs/examples at master · ariya/phantomjs · GitHub\">phantomjs/examples at master · ariya/phantomjs · GitHub</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>page.evaluate()に任意の引数を与えたい</h3>\n    \n    <blockquote>\n        <p>Evaluates the given function in the context of the web page. The execution is sandboxed, the web page has no access to the phantom object and it can't probe its own setting.</p>\n\n    </blockquote>\n<p>それは困った。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// NG!</span>\n<span class=\"synIdentifier\">var</span> url = <span class=\"synConstant\">'http://example.com'</span>,\n  idPw = <span class=\"synIdentifier\">{</span>\n    id: <span class=\"synConstant\">'hoge'</span>,\n    pw: <span class=\"synConstant\">'piyo'</span>\n  <span class=\"synIdentifier\">}</span>;\n\npage.open(url, <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n  page.evaluate(<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">document</span>.getElementById(<span class=\"synConstant\">'login-name'</span>).value = idPw.id; <span class=\"synComment\">// Undefined!!</span>\n    <span class=\"synStatement\">document</span>.getElementById(<span class=\"synConstant\">'pass-word'</span>).value = idPw.pw; <span class=\"synComment\">// Undefined!!</span>\n    <span class=\"synStatement\">document</span>.getElementById(<span class=\"synConstant\">'myForm'</span>).submit();\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>これは困った・・。</p>\n\n<div class=\"section\">\n    <h4>evaluate(function, arg1, arg2, ...)</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// OK!</span>\n<span class=\"synIdentifier\">var</span> url = <span class=\"synConstant\">'http://example.com'</span>,\n  idPw = <span class=\"synIdentifier\">{</span>\n    id: <span class=\"synConstant\">'hoge'</span>,\n    pw: <span class=\"synConstant\">'piyo'</span>\n  <span class=\"synIdentifier\">}</span>;\n\npage.open(url, <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n  page.evaluate(<span class=\"synIdentifier\">function</span>(idPw)<span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">document</span>.getElementById(<span class=\"synConstant\">'login-name'</span>).value = idPw.id;\n    <span class=\"synStatement\">document</span>.getElementById(<span class=\"synConstant\">'pass-word'</span>).value = idPw.pw;\n    <span class=\"synStatement\">document</span>.getElementById(<span class=\"synConstant\">'myForm'</span>).submit();\n  <span class=\"synIdentifier\">}</span>, idPw); <span class=\"synComment\">// 渡せた！</span>\n<span class=\"synIdentifier\">}</span>);\n</pre>\n</div>\n</div>\n<div class=\"section\">\n    <h3>UserAgentを偽装する</h3>\n    <p>やり方は2通り。<br />\n推奨されてるのは最初のやつだそうな。</p>\n\n<div class=\"section\">\n    <h4>page.settingsに設定</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// var page …</span>\n\npage.settings = <span class=\"synIdentifier\">{</span>\n  userAgent: <span class=\"synConstant\">'Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A403 Safari/8536.25'</span>\n<span class=\"synIdentifier\">}</span>;\n\n<span class=\"synComment\">// page.open(…</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h4>page.customHeadersに設定</h4>\n    <pre class=\"code lang-\" data-lang=\"\" data-unlink>// var page …\n\npage.customHeaders = {\n  User-Agent: &#39;Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A403 Safari/8536.25&#39;\n};\n\n// page.open(…</pre><p>この方法で設定すると、最初の方法を上書きしてしまうそうです。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ログイン処理するならライブラリ併用が無難</h3>\n    \n    <blockquote>\n        <p>参考：<a href=\"http://blog.uu59.org/2012-04-15-phantomjs-adplanner.html\" target=\"_blank\" title=\"uu59のメモ | phantomjsでadplannerの表示を見る\">uu59のメモ | phantomjsでadplannerの表示を見る</a></p>\n\n    </blockquote>\n<p>ログインした後のリダイレクト待ちとか、そもそも重いページとか、単純なコールバックで上手くいかない時とか。<br />\nここに書かれてる内容で、やりたいことのほとんどはできるのではないでしょうか。</p><p>あとはflow.jsとか。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/uupaa/flow.js\" target=\"_blank\" title=\"uupaa/flow.js · GitHub\">uupaa/flow.js · GitHub</a></p>\n\n    </blockquote>\n<p>ページへは、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">if</span>(!phantom.injectJs(<span class=\"synConstant\">'./utils/jsdeferred.js'</span>))<span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">'This script requierd jsdefferred.js!'</span>);\n  phantom.exit(1);\n<span class=\"synIdentifier\">}</span>\n</pre><p>という具合で差し込めば使えます。</p>\n\n<div class=\"section\">\n    <h4>書式やスタイルはNode.jsと同じ</h4>\n    <p>まぁ当たり前ですが・・。<br />\nコールバックの嵐になりがちなあたりや、CommonJSスタイルでのモジュール読み込みとか。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>というかCasperJS</h3>\n    <p>PhantomJSのAPIをいろいろ調べるとか、するより先に、コレ使ったほうが早いし楽です。<br />\nおそらくスクレイピング絡みのほとんどのことは、難なく実現できちゃいます。</p><p>CasperJSのメモとか、作ったサンプルはまた個別の記事で載せようと思います。</p>\n\n</div>"
}
