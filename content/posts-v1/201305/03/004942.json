{
  "title": "JavaScriptに慣れた頭で初めてPerlを勉強すると Part.1",
  "html": "<p>こういうとこで戸惑ったよ、っていうメモ。<br />\n同じ境遇の方がいれば、参考になればと思って。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>からプログラミングに入っただけで、たいして<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>が書けるわけではないので、そのあたりはご留意とご容赦を・・。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://www.oreilly.co.jp/books/9784873115672/\" target=\"_blank\" title=\"O&apos;Reilly Japan - 初めてのPerl 第6版\">O&apos;Reilly Japan - 初めてのPerl 第6版</a></p>\n\n    </blockquote>\n<p>この本なので基本記法くらいしか書かないかも。</p>\n\n<div class=\"section\">\n    <h3>関数呼び出しに()がいらない(こともある</h3>\n    <pre class=\"code lang-perl\" data-lang=\"perl\" data-unlink><span class=\"synComment\"># なにこれきもちわるい</span>\n<span class=\"synStatement\">print</span> <span class=\"synConstant\">&quot;Hello, world!</span><span class=\"synSpecial\">\\n</span><span class=\"synConstant\">&quot;</span>; <span class=\"synComment\"># Hello, world![改行]</span>\n<span class=\"synStatement\">print</span> <span class=\"synConstant\">2</span> * <span class=\"synConstant\">10</span>; <span class=\"synComment\"># 20</span>\n\n<span class=\"synComment\"># なにこれきもちわｒ</span>\n<span class=\"synStatement\">print</span> (<span class=\"synConstant\">10</span> + <span class=\"synConstant\">5</span>) * <span class=\"synConstant\">4</span>; <span class=\"synComment\"># print(10 + 5)が解釈されて、あとの * 4 はいりませんとエラー</span>\n<span class=\"synStatement\">print</span>((<span class=\"synConstant\">10</span> + <span class=\"synConstant\">5</span>) * <span class=\"synConstant\">4</span>); <span class=\"synComment\"># 60 ってちゃんと動く</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3>\" と ' が違う動作</h3>\n    <pre class=\"code lang-perl\" data-lang=\"perl\" data-unlink><span class=\"synStatement\">print</span> <span class=\"synConstant\">'あいうえお\\n'</span>;\n<span class=\"synComment\"># あいうえお\\n がそのまま出る</span>\n\n<span class=\"synStatement\">print</span> <span class=\"synConstant\">&quot;あいうえお</span><span class=\"synSpecial\">\\n</span><span class=\"synConstant\">&quot;</span>;\n<span class=\"synComment\"># あおいえお[改行] と解釈される。</span>\n<span class=\"synComment\"># ダブルクオートだと、変数も展開される。</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3>変数宣言に種類がある＋中身が左側に寄る</h3>\n    <pre class=\"code lang-perl\" data-lang=\"perl\" data-unlink><span class=\"synComment\"># 宣言</span>\n<span class=\"synIdentifier\">$str1</span> = <span class=\"synConstant\">'hoge'</span>;\n<span class=\"synIdentifier\">@arr1</span> = (<span class=\"synConstant\">1</span>,<span class=\"synConstant\">2</span>,<span class=\"synConstant\">3</span>,<span class=\"synConstant\">4</span>);\n<span class=\"synIdentifier\">@arr2</span> = <span class=\"synConstant\">qw/1 2 3 4/</span>; <span class=\"synComment\"># これはなかなか・・</span>\n<span class=\"synIdentifier\">%hsh1</span> = (<span class=\"synConstant\">'name'</span>, <span class=\"synConstant\">'hoge'</span>, <span class=\"synConstant\">'age'</span>, <span class=\"synConstant\">10</span>); <span class=\"synComment\"># なにこれきもちわるい</span>\n<span class=\"synIdentifier\">%hsh2</span> = (<span class=\"synConstant\">name</span> =&gt; <span class=\"synConstant\">'hoge'</span>, <span class=\"synConstant\">age</span> =&gt; <span class=\"synConstant\">10</span>); <span class=\"synComment\"># まだマシやけど{}じゃないのね</span>\n\n<span class=\"synComment\"># 左側に寄るというか</span>\n<span class=\"synStatement\">print</span>(<span class=\"synIdentifier\">$arr1[</span><span class=\"synConstant\">2</span><span class=\"synIdentifier\">]</span>); <span class=\"synComment\"># @arr1[2]じゃないのね</span>\n<span class=\"synStatement\">print</span>(<span class=\"synIdentifier\">$hsh2{</span><span class=\"synConstant\">name</span><span class=\"synIdentifier\">}</span>); <span class=\"synComment\"># %hsh2.nameじゃないのね</span>\n</pre><p>こういうのをコンテキスト・・っていうの？</p>\n\n</div>\n<div class=\"section\">\n    <h3>文字列の比較</h3>\n    <pre class=\"code lang-perl\" data-lang=\"perl\" data-unlink><span class=\"synComment\"># if($str == 'hoge'); 文字列の比較がしたいなら</span>\n  <span class=\"synStatement\">if</span>(<span class=\"synIdentifier\">$str</span> <span class=\"synStatement\">eq</span> <span class=\"synConstant\">'hoge'</span>); <span class=\"synComment\"># それ用の演算子を使う</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3>chomp()</h3>\n    <p>末尾の改行(\\n)を取ってくれる用途(最初は謎だった)の関数があって。</p>\n<pre class=\"code lang-perl\" data-lang=\"perl\" data-unlink><span class=\"synComment\"># $str = chomp(&lt;STDIN&gt;); こう書くとエラーになるので</span>\n<span class=\"synStatement\">chomp</span>(<span class=\"synIdentifier\">$str</span> = <span class=\"synIdentifier\">&lt;STDIN&gt;</span>); <span class=\"synComment\"># こう書く</span>\n</pre><p>というかこれに限らず変数への代入ってこう書かないといかん。</p>\n\n</div>\n<div class=\"section\">\n    <h3>改行したりしなかったり</h3>\n    <pre class=\"code lang-perl\" data-lang=\"perl\" data-unlink><span class=\"synStatement\">print</span> <span class=\"synConstant\">&quot;hoge&quot;</span>;\n<span class=\"synStatement\">print</span> <span class=\"synConstant\">&quot;fuga&quot;</span>;\n\n<span class=\"synComment\"># hogefuga って出る！さっきはchomp()せなあかんかったのに！</span>\n</pre><p>もうちょっと読んだらPart.2を書きます・・。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Perl\">Perl</a>むずかしー。</p>\n\n</div>"
}
