{
  "title": "CasperJSを使ってHARファイルを作る",
  "html": "<p>かわいいよおばけ。</p><p>でも、ものすごくぱわふる。</p>\n\n<div class=\"section\">\n    <h3>HARをつくる</h3>\n    <p>PhantomJSにはnetsniff.jsというサンプルが同梱されており、それをベースにCasperJSで動くように移植します。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/ariya/phantomjs/blob/master/examples/netsniff.js\" target=\"_blank\" title=\"phantomjs/examples/netsniff.js at master · ariya/phantomjs · GitHub\">phantomjs/examples/netsniff.js at master · ariya/phantomjs · GitHub</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>HARって？</h4>\n    <p>HttpARchive のことです。<br />\nFire bugやChrome Dev toolsのネットワークのパネルを開いて、右クリックで保存できたりもするアレです。<br />\nページ容量やらリクエスト数、ロード時間などなどWebページのパフォーマンスを調べることができます。</p><p>詳しくは、このリンクがよさげ。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://www.igvita.com/2012/08/28/web-performance-power-tool-http-archive-har/\" target=\"_blank\" title=\"Web Performance Power Tool: HTTP Archive (HAR) - igvita.com\">Web Performance Power Tool: HTTP Archive (HAR) - igvita.com</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ディレクトリ構成</h3>\n    <p>さてさて、構成はこんな感じで。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>app.js\nmodules/\n  createHAR.js\nhar/</pre><p>実行は普通に。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>casperjs app.js</pre><p>すると、harディレクトリ配下にHARファイルが出力されます。</p><p>以下ソース。</p>\n\n</div>\n<div class=\"section\">\n    <h3>ソース</h3>\n    \n<div class=\"section\">\n    <h4>メイン実行ファイル</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// app.js</span>\n<span class=\"synComment\">// Initialize.</span>\n<span class=\"synComment\">//////////////////////////////////////////////////////</span>\n<span class=\"synIdentifier\">var</span> fs = require(<span class=\"synConstant\">'fs'</span>),\n  createHAR = require(<span class=\"synConstant\">'./utils/createHAR'</span>).createHAR;\n\n\n<span class=\"synComment\">// For create HAR file.</span>\n<span class=\"synComment\">//////////////////////////////////////////////////////</span>\n<span class=\"synIdentifier\">var</span> harResources = <span class=\"synIdentifier\">[]</span>,\n  harAddress = <span class=\"synStatement\">null</span>,\n  harStartTime = <span class=\"synStatement\">null</span>,\n  harEndTime = <span class=\"synStatement\">null</span>,\n  harBody = <span class=\"synStatement\">null</span>,\n\n  initHarVars = <span class=\"synIdentifier\">function</span>(url) <span class=\"synIdentifier\">{</span>\n    harResources = <span class=\"synIdentifier\">[]</span>;\n    harAddress = url;\n    harStartTime = <span class=\"synStatement\">new</span> <span class=\"synType\">Date</span>();\n    harEndTime = <span class=\"synStatement\">null</span>;\n    harBody = <span class=\"synStatement\">null</span>;\n  <span class=\"synIdentifier\">}</span>;\n\n\n<span class=\"synComment\">// CasperJS and PhantomJS settings.</span>\n<span class=\"synComment\">//////////////////////////////////////////////////////</span>\n<span class=\"synIdentifier\">var</span> casper = require(<span class=\"synConstant\">'casper'</span>).create(<span class=\"synIdentifier\">{</span>\n  viewportSize: <span class=\"synIdentifier\">{</span>\n    width: 320,\n    height: 410\n  <span class=\"synIdentifier\">}</span>,\n  pageSettings: <span class=\"synIdentifier\">{</span>\n    userAgent: <span class=\"synConstant\">'Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A403 Safari/8536.25'</span>\n  <span class=\"synIdentifier\">}</span>,\n  onPageInitialized: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    harStartTime = <span class=\"synStatement\">new</span> <span class=\"synType\">Date</span>();\n  <span class=\"synIdentifier\">}</span>,\n  onResourceRequested: <span class=\"synIdentifier\">function</span>(<span class=\"synStatement\">self</span>, req) <span class=\"synIdentifier\">{</span>\n    harResources<span class=\"synIdentifier\">[</span>req.id<span class=\"synIdentifier\">]</span> = <span class=\"synIdentifier\">{</span>\n      request: req,\n      startReply: <span class=\"synStatement\">null</span>,\n      endReply: <span class=\"synStatement\">null</span>\n    <span class=\"synIdentifier\">}</span>;\n  <span class=\"synIdentifier\">}</span>,\n  onResourceReceived: <span class=\"synIdentifier\">function</span>(<span class=\"synStatement\">self</span>, res) <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">if</span> (res.stage === <span class=\"synConstant\">'start'</span>) <span class=\"synIdentifier\">{</span>\n      harResources<span class=\"synIdentifier\">[</span>res.id<span class=\"synIdentifier\">]</span>.startReply = res;\n    <span class=\"synIdentifier\">}</span>\n    <span class=\"synStatement\">if</span> (res.stage === <span class=\"synConstant\">'end'</span>) <span class=\"synIdentifier\">{</span>\n      harResources<span class=\"synIdentifier\">[</span>res.id<span class=\"synIdentifier\">]</span>.endReply = res;\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n\n\n<span class=\"synComment\">// Get target urls and start to create HAR.</span>\n<span class=\"synComment\">//////////////////////////////////////////////////////</span>\n<span class=\"synIdentifier\">var</span> urls = <span class=\"synIdentifier\">{</span>\n  lealog: <span class=\"synConstant\">'http://lealog.hateblo.jp/'</span>,\n  google: <span class=\"synConstant\">'http://www.google.co.jp/'</span>,\n  amazon: <span class=\"synConstant\">'http://www.amazon.co.jp/gp/aw/h.html'</span>\n  <span class=\"synIdentifier\">}</span>,\n  targets = <span class=\"synType\">Object</span>.keys(urls),\n\n  createHar = <span class=\"synIdentifier\">function</span>(<span class=\"synStatement\">self</span>, target)<span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">self</span>.then(<span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">self</span>.echo(<span class=\"synConstant\">'Create HAR for '</span> + target, <span class=\"synConstant\">'INFO'</span>);\n      <span class=\"synComment\">// Reset previous data.</span>\n      initHarVars(urls<span class=\"synIdentifier\">[</span>target<span class=\"synIdentifier\">]</span>);\n    <span class=\"synIdentifier\">}</span>).thenOpen(urls<span class=\"synIdentifier\">[</span>target<span class=\"synIdentifier\">]</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      harEndTime = <span class=\"synStatement\">new</span> <span class=\"synType\">Date</span>();\n      harBody = createHAR(harAddress, <span class=\"synIdentifier\">this</span>.getTitle(), harStartTime, harResources);\n      fs.write(<span class=\"synConstant\">'har/'</span> + target + <span class=\"synConstant\">'.har'</span>, JSON.stringify(harBody, <span class=\"synStatement\">undefined</span>, 4), <span class=\"synConstant\">'w'</span>);\n      <span class=\"synStatement\">self</span>.echo(target + <span class=\"synConstant\">'.har created!'</span>, <span class=\"synConstant\">'INFO'</span>);\n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>;\n\n\n<span class=\"synComment\">// Construct scripts.</span>\n<span class=\"synComment\">//////////////////////////////////////////////////////</span>\ncasper.start(<span class=\"synConstant\">'http://lealog.hateblo.jp/'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span><span class=\"synComment\">// Dummy url.</span>\n  <span class=\"synIdentifier\">this</span>.echo(<span class=\"synConstant\">'Start script!'</span>, <span class=\"synConstant\">'GREEN_BAR'</span>);\n<span class=\"synIdentifier\">}</span>);\n\ncasper.each(targets, createHar);\n\n\n<span class=\"synComment\">// Execute CasperJS and exit.</span>\n<span class=\"synComment\">//////////////////////////////////////////////////////</span>\ncasper.run(<span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">this</span>.echo(<span class=\"synConstant\">'End script!'</span>, <span class=\"synConstant\">'GREEN_BAR'</span>);\n  <span class=\"synIdentifier\">this</span>.exit();\n<span class=\"synIdentifier\">}</span>);\n</pre>\n</div>\n<div class=\"section\">\n    <h4>createHARモジュール</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// modules/createHAR.js</span>\n<span class=\"synComment\">// See https://github.com/ariya/phantomjs/blob/master/examples/netsniff.js</span>\nexports.createHAR = <span class=\"synIdentifier\">function</span>(address, title, startTime, resources)<span class=\"synIdentifier\">{</span>\n\n  <span class=\"synStatement\">if</span> (!<span class=\"synType\">Date</span>.prototype.toISOString) <span class=\"synIdentifier\">{</span>\n    <span class=\"synType\">Date</span>.prototype.toISOString = <span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">function</span> pad(n) <span class=\"synIdentifier\">{</span> <span class=\"synStatement\">return</span> n &lt; 10 ? <span class=\"synConstant\">'0'</span> + n : n; <span class=\"synIdentifier\">}</span>\n      <span class=\"synIdentifier\">function</span> ms(n) <span class=\"synIdentifier\">{</span> <span class=\"synStatement\">return</span> n &lt; 10 ? <span class=\"synConstant\">'00'</span>+ n : n &lt; 100 ? <span class=\"synConstant\">'0'</span> + n : n <span class=\"synIdentifier\">}</span>\n      <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>.getFullYear() + <span class=\"synConstant\">'-'</span> +\n        pad(<span class=\"synIdentifier\">this</span>.getMonth() + 1) + <span class=\"synConstant\">'-'</span> +\n        pad(<span class=\"synIdentifier\">this</span>.getDate()) + <span class=\"synConstant\">'T'</span> +\n        pad(<span class=\"synIdentifier\">this</span>.getHours()) + <span class=\"synConstant\">':'</span> +\n        pad(<span class=\"synIdentifier\">this</span>.getMinutes()) + <span class=\"synConstant\">':'</span> +\n        pad(<span class=\"synIdentifier\">this</span>.getSeconds()) + <span class=\"synConstant\">'.'</span> +\n        ms(<span class=\"synIdentifier\">this</span>.getMilliseconds()) + <span class=\"synConstant\">'Z'</span>;\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synIdentifier\">var</span> entries = <span class=\"synIdentifier\">[]</span>;\n\n  resources.forEach(<span class=\"synIdentifier\">function</span> (resource) <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">var</span> request = resource.request,\n      startReply = resource.startReply,\n      endReply = resource.endReply;\n\n    <span class=\"synStatement\">if</span> (!request || !startReply || !endReply) <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">return</span>;\n    <span class=\"synIdentifier\">}</span>\n\n    <span class=\"synComment\">// Exclude Data URI from HAR file because</span>\n    <span class=\"synComment\">// they aren't included in specification</span>\n    <span class=\"synStatement\">if</span> (request.url.match(<span class=\"synConstant\">/(^data:image¥/</span>.*)/i)) <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">return</span>;\n  <span class=\"synIdentifier\">}</span>\n\n    entries.push(<span class=\"synIdentifier\">{</span>\n      startedDateTime: request.time.toISOString(),\n      time: endReply.time - request.time,\n      request: <span class=\"synIdentifier\">{</span>\n        method: request.method,\n        url: request.url,\n        httpVersion: <span class=\"synConstant\">&quot;HTTP/1.1&quot;</span>,\n        cookies: <span class=\"synIdentifier\">[]</span>,\n        headers: request.headers,\n        queryString: <span class=\"synIdentifier\">[]</span>,\n        headersSize: -1,\n        bodySize: -1\n      <span class=\"synIdentifier\">}</span>,\n      response: <span class=\"synIdentifier\">{</span>\n        <span class=\"synStatement\">status</span>: endReply.<span class=\"synStatement\">status</span>,\n        statusText: endReply.statusText,\n        httpVersion: <span class=\"synConstant\">&quot;HTTP/1.1&quot;</span>,\n        cookies: <span class=\"synIdentifier\">[]</span>,\n        headers: endReply.headers,\n        redirectURL: <span class=\"synConstant\">&quot;&quot;</span>,\n        headersSize: -1,\n        bodySize: startReply.bodySize,\n        content: <span class=\"synIdentifier\">{</span>\n          size: startReply.bodySize,\n          mimeType: endReply.contentType\n        <span class=\"synIdentifier\">}</span>\n      <span class=\"synIdentifier\">}</span>,\n      cache: <span class=\"synIdentifier\">{}</span>,\n      timings: <span class=\"synIdentifier\">{</span>\n        blocked: 0,\n        dns: -1,\n        connect: -1,\n        send: 0,\n        wait: startReply.time - request.time,\n        receive: endReply.time - startReply.time,\n        ssl: -1\n      <span class=\"synIdentifier\">}</span>,\n      pageref: address\n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>);\n\n  <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">{</span>\n    log: <span class=\"synIdentifier\">{</span>\n      version: <span class=\"synConstant\">'1.2'</span>,\n      creator: <span class=\"synIdentifier\">{</span>\n        name: <span class=\"synConstant\">&quot;PhantomJS&quot;</span>,\n        version: phantom.version.major + <span class=\"synConstant\">'.'</span> + phantom.version.minor +\n          <span class=\"synConstant\">'.'</span> + phantom.version.patch\n      <span class=\"synIdentifier\">}</span>,\n      pages: <span class=\"synIdentifier\">[{</span>\n        startedDateTime: startTime.toISOString(),\n        id: address,\n        title: title,\n        pageTimings: <span class=\"synIdentifier\">{</span>\n          onLoad: harEndTime - harStartTime\n        <span class=\"synIdentifier\">}</span>\n      <span class=\"synIdentifier\">}]</span>,\n      entries: entries\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>;\n<span class=\"synIdentifier\">}</span>;\n</pre><p>toISOStringの関数を中に入れたのと、ページonLoadの差分を取る変数名を合わせただけ。<br />\n<br />\n</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>YSlowに通す</h3>\n    <p>HARの解析といえばYSlow。<br />\nコマンドラインからの利用には、npmでのインストールが必要です。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>npm install -g yslow</pre><p>そこからの、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink> $ yslow lealog.har \n{&#34;w&#34;:112690,&#34;o&#34;:84,&#34;u&#34;:&#34;http%3A%2F%2Flealog.hateblo.jp%2F&#34;,&#34;r&#34;:21,&#34;i&#34;:&#34;ydefault&#34;,&#34;lt&#34;:1655}\n $ yslow google.har \n{&#34;w&#34;:368265,&#34;o&#34;:91,&#34;u&#34;:&#34;http%3A%2F%2Fwww.google.co.jp%2F&#34;,&#34;r&#34;:10,&#34;i&#34;:&#34;ydefault&#34;,&#34;lt&#34;:419}\n $ yslow amazon.har \n{&#34;w&#34;:218248,&#34;o&#34;:88,&#34;u&#34;:&#34;http%3A%2F%2Fwww.amazon.co.jp%2Fgp%2Faw%2Fh.html&#34;,&#34;r&#34;:15,&#34;i&#34;:&#34;ydefault&#34;,&#34;lt&#34;:1110}</pre><p>たしかcacheは効かない設定で収集したはず。<br />\nページ容量デカいくせに早い！さすがGoogleさまですね・・。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h3>CasperJSさまさま・・・！</h3>\n    \n    <blockquote>\n        <p>参考：<a href=\"http://casperjs.org/\" target=\"_blank\" title=\"CasperJS, a navigation scripting and testing utility for PhantomJS | CasperJS 1.0.2\">CasperJS, a navigation scripting and testing utility for PhantomJS | CasperJS 1.0.2</a></p>\n\n    </blockquote>\n<p>スクレイピングするのにはこれ以上なくわかりやすい。<br />\nURLひらいて、処理やって、違うページいって、あれやって、みたいな処理が直感的に書ける！素敵！</p><p>そしてAPIのドキュメントがすごくちゃんとしてる！ｗ</p>\n\n    <blockquote>\n        <p>なんでもできちゃいますが、くれぐれも悪用厳禁でお願いします！</p>\n\n    </blockquote>\n\n</div>"
}
