{
  "title": "0からはじめるBackbone.js Part.1",
  "html": "<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B7%A5%E3%A5%EB%A5%B2%A1%BC%A5%E0\">ソーシャルゲーム</a>含め、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A1%BC%A5%C8%A5%D5%A5%A9%A5%F3\">スマートフォン</a>サイトの急速なWebアプリ化に伴って、ちょっとね。<br />\n確かに細かい機能追加がどんどん重なってくると、いくら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>が凄かろうと1ページ1コードのその場しのぎの積み重ねじゃ、にっちもさっちもいかないラインがあるということ最近知り・・。</p><p>そういう意味でも、こういう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>をクライアントサイドで操れるってのは、この先なにかと便利なのではないかと思って。<br />\nあと概念的な意味で、保守しやすいコード体系の思想とかも知っておきたいし。<br />\nお高い壁なのは100も承知ですが、やらなきゃなにもはじまらない！ということで。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MVC\">MVC</a>だのMVPだのそういう概念ちっくなものはまだまだ疎いですが、まずはコレから見ていきます。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://backbonetutorials.com/\" target=\"_blank\" title=\"Backbone.js Tutorials\">Backbone.js Tutorials</a></p>\n\n    </blockquote>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>はじめに</h3>\n    <p>自分なりにまとめた考え方的なもの。<br />\nデータそのものをModelやCollectionという概念で分けたり、画面の部品はView、画面遷移系はRouterなどなど、それぞれきっちり役目を分けることによって複雑に絡み合うコードではなく、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C2%B7%EB%B9%E7\">疎結合</a>なコードで幸せになりましょうというのが発端。<br />\nそのせいで多少コード量は多くなるので、作りたいものの規模やその先の機能追加の可能性など踏まえて採用するかどうかは決めるべし、と。</p>\n\n    <blockquote>\n        <p>With Backbone, you represent your data as Models, which can be created, validated, destroyed, and saved to the server. Whenever a UI action causes an attribute of a model to change, the model triggers a \"change\" event; all the Views that display the model's state can be notified of the change, so that they are able to respond accordingly, re-rendering themselves with the new information. In a finished Backbone app, you don't have to write the glue code that looks into the DOM to find an element with a specific id, and update the HTML manually — when the model changes, the views simply update themselves.</p>\n\n    </blockquote>\n<p>以下、意訳。</p>\n\n    <blockquote>\n        <p>Backboneでは、扱うデータをModelと称し、生成したりバリデーションをかけたり削除したり、サーバーサイドに保存したりします。<br />\nユーザーの操作によってModelに変更があった場合、Modelはchangeイベントを発火します。Modelを表示するViewはそれらを即座に検知することができ、新しいデータによって自身を最新化することができます。<br />\nBackboneを使えば、IDでもってDOMを走査して値を当て込む・・といった面倒なことをする必要はなく、「Modelが変わればViewが書き換わる」という流れでシンプルにアプリケーションを作成できます。</p>\n\n    </blockquote>\n<p>なるほどー。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Backbone.js</h3>\n    \n    <blockquote>\n        <p>参考：<a href=\"http://backbonejs.org/\" target=\"_blank\" title=\"Backbone.js\">Backbone.js</a></p>\n\n    </blockquote>\n<p>困ったときの本家さま。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>的には、</p>\n\n<ul>\n<li>Events</li>\n<li>Model</li>\n<li>Collection</li>\n<li>Router</li>\n<li>History</li>\n<li>Sync</li>\n<li>View</li>\n<li>Utility</li>\n</ul><p>と結構な種類があるようで。</p><p>いかに効率よくViewに対してModelを紐付けて、Eventsをバインド→キャッチしていくかっていうところに実装スキルが試される感じ。<br />\n「だいたいこういう感じ」ってのを掴むのがまずは最初の一歩っぽいなぁ。</p><p>以上、いろんな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>はあるようですが、まずは上記チュートリアルにあるように、</p>\n\n<ul>\n<li>Model/Collection</li>\n<li>View</li>\n<li>Router</li>\n</ul><p>というわけかたで見ていこうかと。</p>\n\n</div>\n</div>"
}
