{
  "title": "0からはじめるBackbone.js Part.2",
  "html": "<p>まずはModel編。<br />\n公式にあるModelの部分を読む。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>Modelとはなんぞ</h3>\n    <p>取り扱うデータの最小単位って覚えることにした。<br />\nCDアルバムなら曲、学校なら(学年・クラスがあって)生徒、とか。</p><p>で、ただのデータ構造そのものではなくそのデータを変更するとか状態を取得するとか、自分に関することはなんでも。<br />\n上手く言葉にできないのですが、そういうものらしい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Backbone.jsのModel</h3>\n    <p>だいたいあってる！（たぶん</p>\n\n    <blockquote>\n        <p>Models are the heart of any JavaScript application, containing the interactive data as well as a large part of the logic surrounding it: conversions, validations, computed properties, and access control.</p>\n\n    </blockquote>\n<p>さて。<br />\n公式によると、Modelに定義されてるのは以下。<br />\n多いｗ</p>\n\n<ul>\n<li>extend</li>\n<li>constructor / initialize</li>\n<li>get</li>\n<li>set</li>\n<li>escape</li>\n<li>has</li>\n<li>unset</li>\n<li>clear</li>\n<li>id</li>\n<li>idAttribute</li>\n<li>cid</li>\n<li>attributes</li>\n<li>changed</li>\n<li>defaults</li>\n<li>toJSON</li>\n<li>sync</li>\n<li>fetch</li>\n<li>save</li>\n<li>destroy</li>\n<li>validate</li>\n<li>validationError</li>\n<li>url</li>\n<li>urlRoot</li>\n<li>parse</li>\n<li>clone</li>\n<li>isNew</li>\n<li>hasChanged</li>\n<li>changedAttributes</li>\n<li>previous</li>\n<li>previousAttributes</li>\n</ul><p>まぁ暗記する必要はないと思うので流す。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Modelを作る</h3>\n    \n<ul>\n<li>extend</li>\n<li>constructor / initialize</li>\n</ul><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> Song = Backbone.Model.extend(<span class=\"synIdentifier\">{</span>\n\tinitialize: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synComment\">// Model has created!</span>\n\t<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synIdentifier\">var</span> mySong = <span class=\"synStatement\">new</span> Song(<span class=\"synIdentifier\">{</span>\n\ttitle: <span class=\"synConstant\">'My first song'</span>,\n\tauthor: <span class=\"synConstant\">'leader22'</span>,\n\tdescription: <span class=\"synConstant\">'&lt;em&gt;Awesome!&lt;/em&gt;'</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>extendでModelを作る。<br />\ninitializeで初期化処理。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Modelの値を取得、変更する</h3>\n    \n<ul>\n<li>get</li>\n<li>set</li>\n<li>escape</li>\n<li>has</li>\n</ul><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>mySong.get(<span class=\"synConstant\">'title'</span>);<span class=\"synComment\">// 'My first song'</span>\n\nmySong.set(<span class=\"synConstant\">'title'</span>, <span class=\"synConstant\">'My very first song'</span>);\n\nmySong.<span class=\"synStatement\">escape</span>(<span class=\"synConstant\">'description'</span>);<span class=\"synComment\">// '&amp;lt;em&amp;gt;Awesome!&amp;lt;&amp;#x2F;em&amp;gt;'</span>\n\nmySong.has(<span class=\"synConstant\">'author'</span>);<span class=\"synComment\">// true</span>\n</pre><p>ちなみにset時には、Modelのchangeイベントが発火(正確にはModelのchangeとModelの変更があったAttrのchange)。<br />\n発火させたくないときは、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>mySong.set(<span class=\"synConstant\">'title'</span>, <span class=\"synConstant\">'My very first song'</span>, <span class=\"synIdentifier\">{</span>silent: <span class=\"synConstant\">true</span><span class=\"synIdentifier\">}</span>);\n</pre><p>のようにオプションを指定。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Modelの値を削除する</h3>\n    \n<ul>\n<li>unset</li>\n<li>clear</li>\n</ul><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>mySong.unset(<span class=\"synConstant\">'title'</span>);\n\nmySong.clear();\n</pre><p>clear()してもインスタンスが消えるわけではないみたい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Modelのもつ情報(識別子系)</h3>\n    \n<ul>\n<li>id</li>\n<li>idAttribute</li>\n<li>cid</li>\n</ul>\n<div class=\"section\">\n    <h4>id</h4>\n    <p>なにしたら付与できるんかと思ったら、後述のsave()した結果のレスポンスがあって初めて付くそうな。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://stackoverflow.com/questions/10790637/how-to-generate-model-ids-with-backbone-js\" target=\"_blank\" title=\"How to generate model id&apos;s with Backbone.js - Stack Overflow\">How to generate model id&apos;s with Backbone.js - Stack Overflow</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>idAttribute</h4>\n    <p>上記idとは別に、一意な識別子が欲しい場合に使うそうな。</p>\n\n</div>\n<div class=\"section\">\n    <h4>cid</h4>\n    <p>Modelのインスタンスができる度に増える一意の値。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> song1 = <span class=\"synStatement\">new</span> Song();<span class=\"synComment\">// cid = &quot;c1&quot;</span>\n<span class=\"synIdentifier\">var</span> song2 = <span class=\"synStatement\">new</span> Song();<span class=\"synComment\">// cid = &quot;c2&quot;</span>\n<span class=\"synIdentifier\">var</span> song3 = <span class=\"synStatement\">new</span> Song();<span class=\"synComment\">// cid = &quot;c3&quot;</span>\n</pre><p>「上記idがあるやつ＝サーバーに保存済み」のように判別する時に使えるとのこと。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Modelのもつ情報(そのもの系)</h3>\n    \n<ul>\n<li>attributes</li>\n<li>changed</li>\n<li>defaults</li>\n<li>toJSON</li>\n</ul><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>mySong.attributes;\n<span class=\"synComment\">/*</span>\n<span class=\"synComment\">{</span>\n<span class=\"synComment\">\ttitle: &quot;My first song&quot;,</span>\n<span class=\"synComment\">\tauthor: &quot;leader22&quot;,</span>\n<span class=\"synComment\">\tdescription: &quot;&lt;em&gt;Awesome!&lt;/em&gt;&quot;</span>\n<span class=\"synComment\">}</span>\n<span class=\"synComment\">*/</span>\n\nmySong.set(<span class=\"synConstant\">'title'</span>,<span class=\"synConstant\">'Wahoo'</span>);\nmySong.changed;\n<span class=\"synComment\">/*</span>\n<span class=\"synComment\">{</span>\n<span class=\"synComment\">\ttitle: 'Wahoo'</span>\n<span class=\"synComment\">}</span>\n<span class=\"synComment\">*/</span>\n</pre><p>今さらですがModelには初期値を設定可能。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> Song = Backbone.Model.extend(<span class=\"synIdentifier\">{</span>\n\tinitialize: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synComment\">// Model has created!</span>\n\t<span class=\"synIdentifier\">}</span>,\n\tdefaults: <span class=\"synIdentifier\">{</span>\n\t\ttitle: <span class=\"synConstant\">'No name'</span>,\n\t\tauthor: <span class=\"synConstant\">'Various artists'</span>,\n\t\tdescription: <span class=\"synConstant\">'Some text...'</span>\n\t<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>上記attributesを一気に取りたいときは、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>mySong.toJSON();\n<span class=\"synComment\">/*</span>\n<span class=\"synComment\">{</span>\n<span class=\"synComment\">\ttitle: &quot;My first song&quot;,</span>\n<span class=\"synComment\">\tauthor: &quot;leader22&quot;,</span>\n<span class=\"synComment\">\tdescription: &quot;&lt;em&gt;Awesome!&lt;/em&gt;&quot;</span>\n<span class=\"synComment\">}</span>\n\n<span class=\"synComment\">実際にはJavaScriptのオブジェクト(≠json)が取得できちゃう。</span>\n<span class=\"synComment\">きちんとしたjsonが欲しい場合は、</span>\n<span class=\"synComment\">*/</span>\nJSON.stringify(mySong);\n</pre>\n</div>\n<div class=\"section\">\n    <h3>Modelの値をサーバーとやり取りする</h3>\n    \n<ul>\n<li>sync</li>\n<li>fetch</li>\n<li>save</li>\n<li>destroy</li>\n</ul><p>ここをきっちりやらんとダメな気がするものの、まだ全然試せてないので箇条書きで・・。</p>\n\n<div class=\"section\">\n    <h4>sync</h4>\n    <p>手元のModelの状態を、サーバー側と同期する。<br />\nBackbone.syncと同じで、コレはサーバーサイドと値をやり取りすると必ず実行されてるやつ。<br />\nここに処理を書いて、データの保存時を監視・・とかできる。</p>\n\n</div>\n<div class=\"section\">\n    <h4>fetch</h4>\n    <p>手元のModelの状態を、サーバー側のもので最新化する。</p>\n\n</div>\n<div class=\"section\">\n    <h4>save</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>mySong.save();<span class=\"synComment\">// まるっと</span>\nmySong.save(<span class=\"synIdentifier\">{</span><span class=\"synConstant\">'title'</span>, <span class=\"synConstant\">'My new song'</span><span class=\"synIdentifier\">}</span>,<span class=\"synIdentifier\">{</span>patch: <span class=\"synConstant\">true</span><span class=\"synIdentifier\">}</span>);<span class=\"synComment\">// 一部だけ</span>\n</pre><p>手元のModelの状態を、まるまるサーバー側にPushする。<br />\nまるっとしたくないときは、patchにする。</p><p>Modelにvalidateのロジックが書かれていれば処理される。<br />\nバリデーションに失敗すると、データの保存は実行されない。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>mySong.save(<span class=\"synIdentifier\">{</span>\n\tsuccess: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{}</span>,<span class=\"synComment\">// 成功時のコールバック</span>\n\terror: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{}</span><span class=\"synComment\">// 失敗時のコールバック</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>コールバックも指定可能。</p>\n\n</div>\n<div class=\"section\">\n    <h4>destroy</h4>\n    <p>Modelの削除をする。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>mySong.destroy(<span class=\"synIdentifier\">{</span>\n\tsuccess: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{}</span>,<span class=\"synComment\">// 成功時のコールバック</span>\n\terror: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{}</span>,<span class=\"synComment\">// 失敗時のコールバック</span>\n\twait: <span class=\"synConstant\">true</span><span class=\"synComment\">// サーバー側からのレスポンスを待って、上記コールバックを実行したい場合にtrue</span>\n<span class=\"synIdentifier\">}</span>);\n</pre>\n</div>\n</div>\n<div class=\"section\">\n    <h3>Modelの値のバリデーション</h3>\n    \n<ul>\n<li>validate</li>\n<li>validationError</li>\n</ul><p>バリデーションには、2段階のステップが必要。<br />\n1. validateのロジックを書く<br />\n2. invalidイベントを拾う</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> Song = Backbone.Model.extend(<span class=\"synIdentifier\">{</span>\n\tinitialize: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{}</span>,\n\tvalidate: <span class=\"synIdentifier\">function</span>(attrs, options) <span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synStatement\">if</span> (attrs.title === <span class=\"synConstant\">''</span>) <span class=\"synIdentifier\">{</span>\n\t\t\t<span class=\"synStatement\">return</span> <span class=\"synConstant\">'No title!'</span>;\n\t\t<span class=\"synIdentifier\">}</span>\n\t<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synIdentifier\">var</span> mySong = <span class=\"synStatement\">new</span> Song();\nmySong.on(<span class=\"synConstant\">'invalid'</span>, <span class=\"synIdentifier\">function</span>(model, error)<span class=\"synIdentifier\">{</span>\n\t<span class=\"synStatement\">alert</span>(error);\n<span class=\"synIdentifier\">}</span>);\n\nmySong.save(<span class=\"synIdentifier\">{</span>title, <span class=\"synConstant\">''</span><span class=\"synIdentifier\">}</span>);<span class=\"synComment\">// 'No title!'</span>\n</pre><p>単純に文字列を返せばエラー認定になる。<br />\nちなみにこのバリデーションはsave()の時には呼ばれるけど、set()の時には呼ばれない。<br />\nset()時にも使いたいなら、{validate: true}をオプションで渡す。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>mySong.set(<span class=\"synIdentifier\">{</span>title, <span class=\"synConstant\">''</span><span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>validate: <span class=\"synConstant\">true</span><span class=\"synIdentifier\">}</span>);<span class=\"synComment\">// 'No title!'</span>\n</pre>\n<div class=\"section\">\n    <h5>簡単なパターン表</h5>\n    \n<table>\n    <tr>\n    <th>method</th>\n    <th>addValidateOption?</th>\n    <th>invalidEventFired?</th>\n    <th>dataSaved?</th>\n    </tr>\n    <tr>\n    <td>set()</td>\n    <td>false</td>\n    <td>no</td>\n    <td>yes</td>\n    </tr>\n    <tr>\n    <td>set()</td>\n    <td>true</td>\n    <td>fire</td>\n    <td>no</td>\n    </tr>\n    <tr>\n    <td>save()</td>\n    <td>false</td>\n    <td>fire</td>\n    <td>yes</td>\n    </tr>\n    <tr>\n    <td>save()</td>\n    <td>true</td>\n    <td>fire</td>\n    <td>no</td>\n    </tr>\n</table>\n</div>\n</div>\n<div class=\"section\">\n    <h3>データの所在系</h3>\n    \n<ul>\n<li>url</li>\n<li>urlRoot</li>\n<li>parse</li>\n</ul>\n<div class=\"section\">\n    <h4>url / urlRoot</h4>\n    <p>本来Modelはサーバー側に保存されるデータ。<br />\nよって、URIとしてどこにあるのかを扱うメソッドがこれら。</p>\n\n</div>\n<div class=\"section\">\n    <h4>parse</h4>\n    <p>save()やfetch()など、サーバー側からデータを取得した際に実行される。</p>\n\n    <blockquote>\n        <p>使ってみないとわからない系ですね。</p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>その他のユーティリティそのいち</h3>\n    \n<ul>\n<li>clone</li>\n<li>isNew</li>\n</ul>\n<div class=\"section\">\n    <h4>clone</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> myCopy = mySong.clone()\n</pre><p>そのまんま。</p>\n\n</div>\n<div class=\"section\">\n    <h4>isNew</h4>\n    <p>上記の通り、Modelのidはサーバー側に保存したら付与されるもの。<br />\nそのidの有無でもって、true/falseを返す。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>その他のユーティリティそのに</h3>\n    \n<ul>\n<li>hasChanged</li>\n<li>changedAttributes</li>\n</ul><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>mySong.on(<span class=\"synConstant\">&quot;change&quot;</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">if</span> (mySong.hasChanged(<span class=\"synConstant\">&quot;title&quot;</span>)) <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// ...</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>前回のchangeイベントから、何か変更があったかどうかを捕捉する。<br />\nchangeイベントが起こって、その中でさらに処理を分岐したい場合に使うらしい。<br />\nchangedAttributesはその名の通り、変更のあったAttrを取得できる。</p>\n\n<ul>\n<li>previous</li>\n<li>previousAttributes</li>\n</ul><p>こちらも同じくchangeイベントが起こって、その中でさらに処理を分岐したい場合に。<br />\nこれはchangeされたAttrのchangeされる前を取得できる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>所感</h3>\n    <p>なんというか、できることはスッキリしていてわかりやすいと思う。<br />\nやっぱり試されるのは設計力ってやつか・・。</p>\n\n</div>\n</div>"
}
