{
  "title": "Twitter Streaming APIについてのメモ",
  "html": "<p>ついにコレを試すときが！<br />\nREST APIについては今まで何度か使ってたけど、こっちは初。</p><br />\n<p>わくわくですね。</p>\n\n<div class=\"section\">\n    <h3>Streaming API</h3>\n    <p>REST APIと同じく、Developer登録すれば使えるようになります。</p><p>こっちからどういうものが欲しいかを決めて、そのエンドポイントへそれぞれリクエストして初めて結果が得られるRESTと違って、なんでもかんでも流しこまれるのがコチラ。</p><p>どんなデータが混じってくるのか、取得できるデータは下記リンク参照です。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://dev.twitter.com/docs/streaming-apis/messages\" target=\"_blank\" title=\"Streaming message types | Twitter Developers\">Streaming message types | Twitter Developers</a></p>\n\n    </blockquote>\n<p>そのほか、</p>\n\n<ul>\n<li>レートのリミットがないので、利用出来るならREST APIより優先的に利用せよ</li>\n<li>ただし、十分に帯域のある環境(モバイルは・・)で使いなさい</li>\n<li>再接続の仕組みをしっかり組んだりしてください</li>\n</ul><p>などなどドキュメントは一回読んでおくべきですね。</p><p>大きく3種類あって、</p>\n\n<ul>\n<li>Public streams</li>\n<li>User streams</li>\n<li>Sites streams</li>\n</ul><p>以下、お世話にならなさそうな順に。</p>\n\n<div class=\"section\">\n    <h4>User streams</h4>\n    <p>単一ユーザーのTweets/Timelineを取得できるAPI。<br />\n個人的に使わなさそうなのであまり調べてません。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Site streams</h4>\n    \n    <blockquote>\n        <p>Site Streams is currently in a limited beta. Access is restricted to whitelisted accounts.</p>\n\n    </blockquote>\n<p>というわけで、これも庶民には関係なさそう・・。</p><p>User streamsは単一ユーザー、こっちは複数ユーザーだそうな。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Public streams</h4>\n    <p>Twitterの流れる全てのデータをいただけます。<br />\nそうそう、これこれ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Public streams</h3>\n    <p>これが使いたかったので、ここはきっちり調べます。</p><p>エンドポイントは以下3種類。</p>\n\n<ul>\n<li>statuses/filter</li>\n<li>statuses/sample</li>\n<li>statuses/firehose</li>\n</ul><p>以下、またもお世話にならない順に。</p>\n\n<div class=\"section\">\n    <h4>statuses/firehose</h4>\n    <p>Twitterの全タイムラインをリアルタイムに取得できるAPI。<br />\nというか、Twitterそのもの？</p>\n\n    <blockquote>\n        <p>This endpoint requires special permission to access.</p>\n\n    </blockquote>\n<p>というわけで、一般人には縁のないAPIかな？<br />\n今はなきGoogleリアルタイム検索とかは、コレを使ってたそうな。</p>\n\n</div>\n<div class=\"section\">\n    <h4>statuses/sample</h4>\n    \n    <blockquote>\n        <p>Returns a small random sample of all public statuses.</p>\n\n    </blockquote>\n<p>上記のfirehoseの軽量版で、私たちでも使えます。<br />\nただ、注意したいのがsmall random sampleとか書いてるけど、実際ぜんぜんsmallじゃないです。<br />\nTwitterの全Tweets規模からしたらsmallかもしれませんが、個人で扱うには十分すぎる量です。</p><p>試しにコールしてみてログ確認用のコンソールが大変なことになって焦りました。<br />\nNode.jsでやってたんですが、Ctrl+C入れても10秒くらい応答ナシになるくらい。</p><p>これを張りまくれば擬似的にfirehoseじゃね？っていうのはなくて、どこから繋いでも一緒の内容になるそうです。</p>\n\n</div>\n<div class=\"section\">\n    <h4>statuses/filter</h4>\n    <p>というわけで、お世話になりそうなのがこの方。<br />\nパラメータを何か絶対付与して、ふるいにかけたTweetsを取得するAPIです。</p><p>以下、オプション含め詳しく。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>statuses/filterのオプション</h3>\n    <p>以下は概要＋意訳なので、正式なものは以下リンクから。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://dev.twitter.com/docs/streaming-apis/parameters#track\" target=\"_blank\" title=\"Streaming API request parameters | Twitter Developers\">Streaming API request parameters | Twitter Developers</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>follow</h4>\n    <p>ユーザーIDをカンマ区切りで指定すると、そのユーザーIDでフィルタができます。</p>\n\n</div>\n<div class=\"section\">\n    <h4>track</h4>\n    <p>これが一番使いそう。<br />\nフィルターにかけたいキーワードを設定できます。<br />\nこれもカンマ区切り。</p>\n\n<ul>\n<li>キーワードは60バイトまで</li>\n<li>英語に関しては色々解釈に補完が入るがUTF-8の日本語とかはそのまんま</li>\n<li>言うまでもないですが、カンマの後ろに半角スペースとかすると、そのまま通ります</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>locations</h4>\n    <p>位置情報つきTweetsの場合、それらを指定した経緯で絞込んで取得できます。</p>\n\n</div>\n<div class=\"section\">\n    <h4>delimited</h4>\n    <p>delimited: 'length' として指定します。<br />\nそうすると、まず最初にTweetのバイト数だけがデータとして送られて、その後に本体が送られるようになります。<br />\nいまいち使いドコロがわかんない。</p>\n\n</div>\n<div class=\"section\">\n    <h4>stall_warnings</h4>\n    <p>stall_warnings: 'true' として指定。<br />\nWaningsをデータとして取得するかどうか。</p>\n\n</div>\n<div class=\"section\">\n    <h4>count</h4>\n    \n    <blockquote>\n        <p>This parameter requires elevated access to use.</p>\n\n    </blockquote>\n<p>というわけでスルー。<br />\nどうやら接続が切れて、再接続したときにどれくらい取りこぼしを防ぐかみたいな値ぽい。</p>\n\n</div>\n<div class=\"section\">\n    <h4>with</h4>\n    <p>with: 'user' もしくは with: 'followings'と指定。<br />\nUser streamsかSite streamsを使用する際に指定するもので、そのユーザー単体か、フォロワーも含めるかの違いだそう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>replies</h4>\n    <p>replies: 'all' と指定。<br />\n詳しくは書かないけども、相互フォローじゃない時のリプの扱い方が特殊らしく、そのふるまいに関するパラメータだそうです。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>その他知っておきたい</h3>\n    \n<div class=\"section\">\n    <h4>過去は遡れない</h4>\n    <p>あくまで「いま」どんなTweetがされているかをリアルタイムに取得するAPIなので、過去のTweetsは含まれません。<br />\nニッチなワードとかで取得すると、まったく音沙汰なかったりもします。</p>\n\n</div>\n<div class=\"section\">\n    <h4>複数接続できない</h4>\n    <p>1つのアプリ登録につき、1接続しかできません。<br />\n複数接続しようとすると、古いのが切られます。</p>\n\n</div>\n<div class=\"section\">\n    <h4>sampleかfilterか</h4>\n    <p>何かを作る時に悩むのがココかなーと思います。<br />\n1接続しかできないとなると、最終的なフィルターはこちらでかけないといけないわけで。<br />\nそうなると母体となるサンプルは大いにこしたことがないんだけども、多すぎるのも非効率やし、うーん。</p><p>開発するときにどっちを使うべきか、どっちも試して決めなきゃですね。<br />\n<br />\n</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>ざーっと知りたい場合は、以下の記事を。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://www.slideshare.net/yusukey/3twitter-api-api\" target=\"_blank\" title=\"第3回Twitter API勉強会 - ストリーミングAPI #twtr_hack\">第3回Twitter API勉強会 - ストリーミングAPI #twtr_hack</a></p>\n\n    </blockquote>\n<p>とてもわかりやすく、正直いろいろ調べてこの記事を書く前に読みたかった・・。</p><br />\n<p>今度は実際になんか作ってみての記事を書きますです。</p>\n\n</div>"
}
