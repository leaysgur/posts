{
  "title": "半角・全角カナを相互置換するCoda2のプラグインをつくった",
  "html": "<p>Coda 2ってば実はプラグインで機能の拡張ができます。</p><p>そしてそして、</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://panic.com/jp/coda/plugins.php\" target=\"_blank\" title=\"パニック - Coda 2 - プラグイン\">パニック - Coda 2 - プラグイン</a></p>\n\n    </blockquote>\n<p>割とたくさんのプラグインが公開されてたりもします。</p><p>個人的にお世話になってるのは、</p>\n\n<ul>\n<li><a href=\"http://www.chipwreck.de/blog/software/coda-php/\" target=\"_blank\" title=\"Coda PHP &amp; Web Toolkit // chipwreck\">Coda PHP &amp; Web Toolkit // chipwreck</a></li>\n<li><a href=\"https://github.com/miripiruni/CSScomb/downloads/\" target=\"_blank\" title=\"Downloads · miripiruni/CSScomb · GitHub\">Downloads · miripiruni/CSScomb · GitHub</a></li>\n<li><a href=\"http://onecrayon.com/tea/coda/\" target=\"_blank\" title=\"TEA for Coda | One Crayon\">TEA for Coda | One Crayon</a></li>\n</ul><p>くらいですが、他にも探せば便利なのがありそう。</p><p>で、今回は自分でプラグインを作るお話。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>プラグインを作るには</h3>\n    <p>やり方は2通りです。</p>\n\n<div class=\"section\">\n    <h4>Cocoa書いてAPIを使う</h4>\n    <p>すみません、できません。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Coda Plug-in Creatorで書く</h4>\n    <p>Cocoaなんてさっぱりなので、こちらのやり方を。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://panic.com/jp/coda/plugins-dev.html\" target=\"_blank\" title=\"Coda 2\">Coda 2</a></p>\n\n    </blockquote>\n<p>ここからCoda Plug-in CreatorをDLして、プラグインを開発します。<br />\nこっちのやり方なら、PHPでもRubyでもPerlでもだいたい使えます。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>全角・半角カナを相互に置換するプラグイン</h3>\n    <p>今回作ったのはコレです。<br />\n仕事上、こういうシーンがよくあるんです・・・。</p>\n\n<div class=\"section\">\n    <h4>使い方</h4>\n    <p>範囲選択して、プラグインから選択すると！<br />\n選択範囲の文字が置換されます。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ソース</h4>\n    <p>PHPです。<br />\n半角カタカナ混じりの文字を、全角カタカナにします。</p>\n<pre class=\"code lang-php\" data-lang=\"php\" data-unlink>mb_language(&quot;Japanese&quot;);\nmb_internal_encoding(&quot;UTF-8&quot;);\n\n$originalEncoding = mb_detect_encoding ($_ENV[&quot;CODA_SELECTED_TEXT&quot;]);\n$targetString = iconv(&quot;UTF-8-MAC&quot;, &quot;UTF-8&quot;, mb_convert_encoding($_ENV[&quot;CODA_SELECTED_TEXT&quot;], &quot;UTF-8&quot;));\n$targetString = mb_convert_kana(mb_convert_encoding($targetString, &quot;UTF-8&quot;),&quot;aKnrsV&quot;,&quot;UTF-8&quot;);\n\nfunction hankaku($replaced){\n  $pattern1 = array(\n    '/\\x{3001}/u', // 、\n    '/\\x{3002}/u', // 。\n    '/\\x{30FB}/u', // ・\n    '/\\x{300C}/u', // 「\n    '/\\x{300D}/u', // 」\n    '/\\x{FF08}/u', // （\n    '/\\x{FF09}/u'  // ）\n  );\n  $pattern2 = array(\n    '､',\n    '｡',\n    '･',\n    '｢',\n    '｣',\n    '(',\n    ')'\n  );\n  return preg_replace($pattern1, $pattern2, $replaced);\n}\n\n$targetString = hankaku($targetString);\n\necho(mb_convert_encoding($targetString, $originalEncoding));\n</pre><p>mb_convert_kana関数へ渡す引数を変えれば、簡単に全角→半角も簡単に出来ます。<br />\n定義してるhankaku関数は、mb_convert_kanaの置換仕様から逃したいものを定義します。<br />\nこんな変なシソーラスでなければ、もっと単純な関数で書けたはず・・。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://php.net/manual/ja/function.mb-convert-kana.php\" target=\"_blank\" title=\"PHP: mb_convert_kana - Manual\">PHP: mb_convert_kana - Manual</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>Coda Plug-in Creator自体の使い方は公式のマニュアルで十分解説されてるので、書かなくても忘れないかなぁ。<br />\nコマンドメニューの階層のとことか、入出力の設定のとことか、書き出しのとことか。</p><p>こういうのサッと作れるようになりたい。</p>\n\n</div>\n</div>"
}
