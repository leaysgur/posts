{
  "title": "これからNodeやるならnodebrew！あとforeverも。",
  "html": "<p>nvmやらnaveやらいろいろありますが、一番わかりやすかったので。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/hokaccha/nodebrew\" target=\"_blank\" title=\"hokaccha/nodebrew · GitHub\">hokaccha/nodebrew · GitHub</a></p>\n\n    </blockquote>\n<p>お世話になります！<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>なにこれ？</h3>\n    <p>Node.jsのバージョンマネジャーです。<br />\n複数バージョンのNodeをインストールできたり、切り替えて使用したり。</p><p>Nodeみたいなまだまだこれから！なプロジェクトは、早々のバージョンアップも考えられる。<br />\nその度に一からインストールするのは大変やし気持ち悪い・・。</p><p>そんな悩みを解決してくれるのが表向きなパッケージマネジャーの仕事です。<br />\nにわかDeveloper的には、アレコレ難しいことを考えずにあっさりNodeのインストールができるってところが嬉しいです。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Nodeを動かすまでの手順</h3>\n    <p>ほとんど上記リンクに書いてますが、一応。</p>\n\n<div class=\"section\">\n    <h4>nodebrewのインストール</h4>\n    <p>まずはこのコマンド。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>curl https://raw.github.com/hokaccha/nodebrew/master/nodebrew | perl - setup</pre><p>メッセージの示す通り、これでホームディレクトリ以下に.nodebrewというディレクトリができたはずです。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>ls -la ~\n# ってするときっと見える</pre>\n</div>\n<div class=\"section\">\n    <h4>パスを通す</h4>\n    <p>これやんないと動きません。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>vi ~/.bashrc</pre><p>とやって、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>export PATH=$HOME/.nodebrew/current/bin:$PATH</pre><p>追記。</p><p>ちなみに私はこう書きました。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink># Export path for nodebrew\nif [[ -f ~/.nodebrew/nodebrew ]]; then\n    export PATH=$HOME/.nodebrew/current/bin:$PATH\n    nodebrew use v0.8.16\nfi</pre><p>最新版で勉強するためにNode入れなおしたので。</p><p>.bashrcにpathを追記したらば再読み込み。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>source ~/.bashrc</pre><p>これで準備完了！</p>\n\n</div>\n<div class=\"section\">\n    <h4>インストールできたか確認</h4>\n    <pre class=\"code\" data-lang=\"\" data-unlink>nodebrew help</pre><p>ってすると、ヘルプが見れます。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Nodeのインストール</h4>\n    <p>こないだのNode学園祭でも聞いた通り、ソースよりバイナリから入れたほうが良いらしいので・・。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>nodebrew install-binary v0.8.16</pre><p>今日時点の最新版は0.8.16です。</p>\n\n</div>\n<div class=\"section\">\n    <h4>インストールしたNodeを使うように設定</h4>\n    <pre class=\"code\" data-lang=\"\" data-unlink>nodebrew use v0.8.16</pre><p>これでNodeもインストールできました。</p><p>アンインストールも簡単で、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>nodebrew uninstall v0.8.16</pre><p>バージョン指定するだけ！便利！</p>\n\n</div>\n<div class=\"section\">\n    <h4>Nodeを動かす</h4>\n    <p>ここまでくれば！</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>node -v\n# v0.8.16</pre><p>よしよし。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>これでバージョンアップしてもサクッと切り替えできますね。<br />\nconfigureとかmakeとかインストールディレクトリとか、そういうの考えなくていいのはすごく助かります。</p>\n\n<div class=\"section\">\n    <h4>foreverのインストール</h4>\n    <p>ここまで来たら＠一息やっとくと良いかも？</p><p>書いたNode.jsのスクリプトを実行するには、コマンドで実行する必要があります。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>node sample.js</pre><p>という感じでやるのはわかるけども、これしちゃうと他のことできないし、実際にサービスとして公開したりするにはどうすれば？<br />\nって・・ならないためのforeverです。</p><p>Nodeをインストールするとnpmというパッケージマネジャーがついてきます。<br />\nそのnpmコマンドで、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>npm install -g forever</pre><p>グローバルインストールがダメな場合は、gオプションはナシで。<br />\n(ただ、グローバルにしないとうまくいかなかった</p><p>そうすると、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>forever sample.js</pre><p>という具合にNodeのスクリプトを起動できます。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>forever list</pre><p>とすることでforeverで実行してるスクリプトの確認ができます。</p><p>スクリプトを止めたい場合は、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink># listで確認して、[0]で登録されたスクリプトを止めたい場合\nforever stop 0</pre><p>今度こそ、Node三昧できそうです。</p>\n\n</div>\n</div>"
}
