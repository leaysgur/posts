{
  "title": "最低限の知識でGitの運用をする",
  "html": "<p>仕事で前向きにGit運用していくことになりました。<br />\nあくまでGitを使いこなす！とかではなく、最低限の運用ができるようになることを目標として。<br />\nCUIすらちんぷんかんぷんの素人に、Gitコマンド叩けっていうのは乱暴すぎると思うの・・。</p><p>というわけでそんな中、一通りこれだけ覚えてればどうにかなるやね、っていうコマンドのメモ。<br />\nこういう時どうすれば？みたいなのも、遭遇した限りメモ。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>前提</h3>\n    <p>特定の単一branchでの作業を想定。<br />\nbranchの切り替えを含めた運用や他のbranchによって伸びたmasterの取り込みとかは無視。<br />\nそういう難しそうなところは、最低限の範囲外として見てます。</p>\n\n</div>\n<div class=\"section\">\n    <h3>基本の流れ</h3>\n    \n<ul>\n<li>git status</li>\n<li>git add</li>\n<li>git commit</li>\n<li>git pull --rebase</li>\n<li>git push</li>\n</ul><p>正確なコマンドは後述するけど、流れとしてはたったコレだけ。</p>\n\n<div class=\"section\">\n    <h4>status</h4>\n    <pre class=\"code\" data-unlink>git status</pre><p>何回叩いても何も起こらない初心者にも優しいコマンド。<br />\n管理下のファイルの状況を知らせてくれます。</p><p>割と頻繁に叩いて、commitする単位をこまめに把握したいところ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>add</h4>\n    <p>修正したファイルを、Git管理するためにステージングするコマンド。</p>\n<pre class=\"code\" data-unlink># ファイル単品\ngit add hoge.html\n\n# ディレクトリごと\ngit add example\n\n# ディレクトリごと(しかも複数)\ngit add example sample test\n\n# 拡張子で\ngit add *.html\n\n# 修正されたファイル全部\ngit add -A</pre><p>ここで注意すべきは、自分が修正した覚えのないファイル。<br />\nよってディレクトリごとやファイルごと、きっちりstatusをチェックしながらaddすべし。</p>\n\n</div>\n<div class=\"section\">\n    <h4>commit</h4>\n    <p>ステージングしたならば、それらを記録！commmit！</p>\n<pre class=\"code\" data-unlink># 普通のパターン(叩くとエディタが起動)\ngit commit\n\n# エディタを起動せず、1行で済ませたいならこっち\ngit commit -m &#39;Commit message.&#39;\n\n# addしなくても、修正したファイル全部commitしたいならコレ\ngit commit -a</pre><p>何を修正したかの差分をオマケで見れるvオプション付きが個人的に好きです。</p>\n\n</div>\n<div class=\"section\">\n    <h4>pull rebase</h4>\n    <p>ここがちょっとややこしいかも。</p><p>自分の環境：リポジトリで変更した内容を、他の環境でも取り込めるよう一旦送りたい。<br />\nそのためには、今このタイミングで、自分の環境とpush先の環境は同じ状態である方がすっきりするよね。</p>\n<pre class=\"code\" data-unlink>---自　分---\n□□■　←　いま変更したやつ\n\n□□□　←　なんだかpush先のがちょっと更新されてるぽい\n---push先---</pre><p>じゃあまず、push先の変更を取り込もう！</p>\n<pre class=\"code\" data-unlink># push先の変更点をまずは取り込む\ngit pull --rebase origin hoge</pre><p>hogeは作業してるbranch名で。<br />\nそうすると、</p>\n<pre class=\"code\" data-unlink>---自　分---\n□□☆■　←　いま変更したやつをpushする前に\n　↑ pulして同期\n□□☆\n---push先---</pre><p>あとはもう、</p>\n<pre class=\"code\" data-unlink>---自　分---\n□□□■　←　いま変更したやつを\n　↓ pushしたら\n□□□■　←　すっきり更新完了！\n---push先---</pre><p>なんかスマート！</p>\n\n</div>\n<div class=\"section\">\n    <h4>push</h4>\n    <p>というわけでpushのコマンド。</p>\n<pre class=\"code\" data-unlink># 何事もなかったかのように、hogeブランチにpush\ngit push origin hoge</pre><p>これだけで最低限の運用はできるんじゃなかろうか。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>その他覚えてて得するコマンドたち</h3>\n    \n<div class=\"section\">\n    <h4>pullしたらなんかコンフリクトした</h4>\n    \n<ul>\n<li>statusでコンフリクトしたファイル特定</li>\n<li>ファイル修正</li>\n<li>もっかいadd</li>\n<li>rebase続きから</li>\n</ul><p>これだからGitとかイヤ！ってなる代名詞のコンフリクトさん。<br />\nさくっと直しましょう。</p>\n\n<div class=\"section\">\n    <h5>コンフリクトするわけ</h5>\n    \n<ul>\n<li>pull = 他の環境での変更を取り込む</li>\n<li>自分が変更してたやつが、他の環境でも変更されてた</li>\n<li>Gitさんが上手いこと折り合いをつけようとしてくれる(いいひと！</li>\n<li>互いの変更が被ってなければセーフ、被ってたらコンフリクト</li>\n</ul><p>というわけ。</p><p>どのファイルがコンフリクトしてるかは、安心コマンドでわかります。</p>\n<pre class=\"code\" data-unlink># 困ったらコレ！\ngit status\n\n# both modified:      test.html\n# ↑こんな表示のがあるはず</pre><p>そのファイルを開いて、おかしなところを修正。<br />\nそしたら再度addします。<br />\nやり方はいつもと一緒。</p><p>それが済んだら、</p>\n<pre class=\"code\" data-unlink># やりかけのrebaseをこんてにゅー\ngit rebase --continue</pre><p>あとは上記の手順と同じでpushできるはずです。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>pull --rebaseしようとしたらおこられた</h4>\n    <p>複数人で作業してる場合、よくあります。</p><p>pull --rebaseするためには、自分の環境がクリーン(全部commitされてるなど)である必要があります。</p>\n\n<ul>\n<li>一旦commit</li>\n<li>だれかがファイル修正しちゃった</li>\n<li>commitされてないファイルあるからpull --rebaseできません！　←　(´；ω；｀)</li>\n</ul><p>そんな時はすみやかにaddからの再commitしてやりましょう。<br />\n従来通り普通にcommitしても良いですが、直前のcommitに含める方が良い気がしますよね。<br />\nその場合のコマンドがコレ。</p>\n<pre class=\"code\" data-unlink># いまaddした漏れファイルをさっきのcommitに含める\ngit commit --amend</pre>\n</div>\n<div class=\"section\">\n    <h4>普通にpullする</h4>\n    <p>pushするためにはpull --rebaseで綺麗にしてからというのが理想です。<br />\nただちょっとした変更をサクッと取り込みたい場合、いちいちcommitするのはなぁ・・ってなります。</p>\n<pre class=\"code\" data-unlink># 普通に変更点を取り込み\ngit pull origin hoge</pre><p>まぁ別にこれが悪いことではないので、臨機応変にいきたいところ。<br />\nコンフリクトしたファイルがあるようなら、次にcommitする時までに修正するだけです。</p>\n\n</div>\n<div class=\"section\">\n    <h4>緊急回避コマンド</h4>\n    <p>ちょっと緊急でpushして欲しいやつがある！って言われた場合にどうするか。</p>\n\n<ul>\n<li>急いでadd/commit/pull/push　もしくは、</li>\n<li>緊急回避してpush</li>\n</ul><p>そんなコマンドがありますのよ。</p>\n<pre class=\"code\" data-unlink># いまの状態を一旦脇に避けて、何事もなかったかのように\ngit stash save</pre><p>そしたらpushしてあげて、</p>\n<pre class=\"code\" data-unlink># さっきまでの状態に戻す\ngit stash pop</pre><p>何事もなかったかのように作業再開です。</p>\n\n</div>\n<div class=\"section\">\n    <h4>変更したくないファイルを変更して保存してもーた</h4>\n    <pre class=\"code\" data-unlink># 最後にcommitした時には戻れる\ngit checkout HEAD test.html\n\n# ディレクトリごと戻す\ngit checkout HEAD example</pre>\n</div>\n<div class=\"section\">\n    <h4>なんか間違えたファイルをadd/commitしてもーた</h4>\n    <pre class=\"code\" data-unlink># addし間違えたのを取り消したい(addと同じように指定\n# git rm --cached test.html しちゃうとファイルは残るがGit管理下から外れるので\ngit reset HEAD test.html\n\n# commitをなかったことにしたい(ファイルは編集されたまま\ngit reset --soft HEAD^\n\n# commitをなかったことにしたい(ファイルも元に戻す\ngit reset --hard HEAD^</pre>\n</div>\n</div>\n<div class=\"section\">\n    <h3>おまけ</h3>\n    <p>CUIでコマンドを叩くにあたっての便利機能、入力補完をGitでも。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/git/git/tree/master/contrib/completion\" target=\"_blank\" title=\"git/contrib/completion at master · git/git · GitHub\">git/contrib/completion at master · git/git · GitHub</a></p>\n\n    </blockquote>\n<p>※使ってるGitのバージョンと、↑のバージョンは合わせないとエラーになる場合があります。</p><p>bashならgit-completion.bashです。<br />\nこいつだけでダメな場合は、git-prompt.shも読み込んでください。</p><p>そしたらば入力補完ができるようになる上に、bashの環境変数PS1で、(__git_ps1)が使えるようになります！<br />\nようは、</p>\n<pre class=\"code\" data-unlink># git-completion.bashをsource\n# git-promptをsource\n# すると、プロンプトにブランチ名の表示が出るように！\nPS1=&#39;\\[\\033[32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[34m\\]\\w\\[\\033[31m\\]$(__git_ps1)\\[\\033[00m\\]\\$ &#39;</pre><p>とりあえずはここまで。<br />\n意外に長くなったけど良いメモになった気がするｗ</p>\n\n</div>\n</div>"
}
