{
  "title": "2023年のCSSは0ランタイムにしたい",
  "html": "<p>したいよね？</p><p>事の経緯としては、</p>\n\n<ul>\n<li>とある新規プロジェクトで、技術選定をすることに</li>\n<li>開発の土台はViteで、フレームワークはJSXが使えるやつに決まった</li>\n<li>さてCSSはどうやって書こうかとなる</li>\n<li>あれこれ考えて、とある方法に決めた</li>\n</ul><p>というのをまとめた、まあポエムの域を出ないメモです。</p><p>CSS ModulesやらTailwindやらCSS-in-JSやら手法はいろいろあれど、どれが今の推しかっていう。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"求めるもの\">求めるもの</h3>\n    <p>個人的に、CSSつまりはブラウザで表示されるUIをスタイリングするためのツールセットに求めるもの。</p>\n\n<ul>\n<li>0ランタイムである\n<ul>\n<li>最終的に`.css`ファイルとしてブラウザで読み込まれる</li>\n<li>なんでもJSにしない</li>\n</ul></li>\n<li>CSSの書き味を損なわない\n<ul>\n<li>だいたいのCSSセレクタが問題・制約なく動作する</li>\n</ul></li>\n<li>マークアップ部と1ファイルにコロケーションできる\n<ul>\n<li>HTMLとCSSは同居させたい</li>\n</ul></li>\n<li>非同期にロードできる\n<ul>\n<li>JSと同じく、いま表示していないUIに関するCSSは読み込まない</li>\n</ul></li>\n<li>Tree shakingできる\n<ul>\n<li>JSと同じく、無駄なものをバンドルしない</li>\n</ul></li>\n<li>DXを損なわない\n<ul>\n<li>エディタのサポートなど選択肢が広い、ニッチでない</li>\n</ul></li>\n</ul><p>こうやって見るとハードル高い？って自分でも思うけど、理想として求めるラインという意味ではこんなもん。</p><p>で、これをできる限り満たすソリューションを求めた。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"落選-Tailwind\">落選: Tailwind</h3>\n    \n<ul>\n<li>まず、HTMLが汚れるのが個人的に好きじゃない</li>\n<li>あれはCSSではない\n<ul>\n<li>`border-radius`ってなんて表現するんやっけ・・とか毎回なる</li>\n<li>`grid-template`とか素直に書けない</li>\n</ul></li>\n<li>非同期ロードができない（たいへん）\n<ul>\n<li><a href=\"https://lealog.hateblo.jp/entry/2021/08/24/114324\">Tailwind CSS&#x306F;&#x3001;Vite&#x306E;MPA&#x3067;&#x6700;&#x9069;&#x5316;&#x3067;&#x304D;&#x306A;&#x3044; - console.lealog();</a></li>\n</ul></li>\n<li>`tailwind.config.js`すぐカオスになる</li>\n</ul><p>なんか流行ってるし、輝くシーンもきっとあるとは思うけど、未だにその場面に出会ったことはない。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"落選-CSS-Modules\">落選: CSS Modules</h3>\n    \n<ul>\n<li>1ファイルにコロケーションができない\n<ul>\n<li>`.module.css`ファイルとして存在する必要があるのが嫌</li>\n<li>コンポーネントをすべてディレクトリで表現し、`index.jsx`+`styles.module.css`のセットにする必要がある</li>\n</ul></li>\n<li>Tree-shakingできない\n<ul>\n<li><a href=\"https://lealog.hateblo.jp/entry/2023/03/15/121053\">Vite&#x306E;CSS Modules&#x306F;&#x3001;JS&#x306E;&#x3088;&#x3046;&#x306B;Tree shaking&#x3067;&#x304D;&#x306A;&#x3044; - console.lealog();</a></li>\n<li>これに該当するケースはそんなに多くはないと思うけど</li>\n</ul></li>\n</ul><p>`.css`ファイルなのでエディタまわりの心配もないし、ツールのセットアップや依存の少なさという意味でもかなり優秀な択。</p><p>ただ、DXまわりにはやや懸念があるなという印象。</p><p>たとえばクラス名を`class={styles.xxx}`って入力するときに、LSPから補完すらされないので、別途ツールが必要とか。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/mrmckeb/typescript-plugin-css-modules\">GitHub - mrmckeb/typescript-plugin-css-modules: A TypeScript language service plugin providing support for CSS Modules.</a></p>\n\n    </blockquote>\n<p>ただTypeScriptのプラグインはコンパイルに介入できないので、突き詰めるとCLIツールを常駐させないと不便だとか。</p><p>先駆者たちがこのあたりは熱心に取り組んではいるものの、どれも一長一短だな〜と。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.mizdra.net/entry/2022/11/14/102506\">&#x30B3;&#x30FC;&#x30C9;&#x30B8;&#x30E3;&#x30F3;&#x30D7;&#x53EF;&#x80FD;&#x306A; CSS Modules &#x3092;&#x5B9F;&#x73FE;&#x3059;&#x308B; happy-css-modules &#x306E;&#x7D39;&#x4ECB; - mizdra&#39;s blog</a></p>\n\n    </blockquote>\n<p>個人的にはクラス名の補完さえあれば満足できるけど、プロジェクトの規模によっては欲しくなるよなというのもわかる。</p><p>なので、コロケーションの問題さえ飲めれば手堅い選択肢・・・やったけど、いつの時代もあと一歩が惜しい位置にいるイメージ。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"落選-Svelte-Astro\">落選: Svelte(/ Astro)</h3>\n    <p>今回は落選。というのも、フレームワークは別で決まっていたから・・・！</p><p>そうでなければ、求める要件をすべてクリアしてるので、別の機会では間違いなく選出される。</p><p>1つ気になるとすれば、`.svelte`ファイルは独自のCSSコンパイラを通すので、たとえば`@container`みたいな最新の記法に未対応だったりする。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/issues/6969\">CSS container queries &quot;@container&quot; breaks parser &middot; Issue #6969 &middot; sveltejs/svelte &middot; GitHub</a></p>\n\n    </blockquote>\n<p>まあこれは時間の問題ではあるけど。</p><p>ただこのコンパイラのおかげで、そのテンプレにおいて存在しないセレクタを書いただけで`Unused CSS selector`って警告してくれたりと手厚い。</p><p>もちろんそれを支えるツール群（`svelte-check`とかLSP）は必要になるものの、Svelteやるならもう揃ってるという敷居の低さがさすがやなって感じ。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"当選-CSS-in-JS\">当選: CSS-in-JS</h3>\n    <p>そしてやはりJSエコシステムに帰ってくるのか〜〜って我ながら思った。</p><p>が、2023年のCSS-in-JSは一味違ってて。<br />\n有名どころだと`vanilla-extract`とか`linaria`とか、あの頃にはなかった0ランタイムCSSできる選択肢が増えてる。</p><p>最終的に`.css`ファイルになるなら、別にJSで書いても何の気負いもないし、JSなので非同期ロードもTree-shakingもなんでもござれ、コロケーションももちろん可能という夢の選択肢に見える。<br />\n0ランタイムにするために、今までのように`props`から動的な定義ができないとか特別な記法が必要とかはあるものの、なんとでもなる範囲かと。</p><p>で、このCSS-in−JSにはいくつか書き方があって、その中のどれでやるかを選ぶ必要がある。（ライブラリによって対応してたりしてなかったりする）</p>\n\n<ul>\n<li>いわゆるstyled-componentsのスタイル</li>\n<li>Scopedなクラス名だけ使うスタイル</li>\n</ul><p>前者は`styled.div()`みたいな書き方で、装飾つきDOM要素をコンポーネントとして定義するやつ。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synType\">const</span> Title <span class=\"synStatement\">=</span> styled.h1<span class=\"synConstant\">`</span>\n<span class=\"synConstant\">  font-family: &quot;Noto Sans&quot;;</span>\n<span class=\"synConstant\">`</span><span class=\"synStatement\">;</span>\n</pre><p>こういうやつ。<br />\nただこっちはそのフレームワーク用のインテグレーションが必要だったり、`ref`の取り回しに毎回苦労したりするので、個人的には推してない。</p><p>つまりは後者のクラス名だけ扱えるスタイルでよいけど、こっちはさらに記法が2パターンある。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">// 1. オブジェクト</span>\n<span class=\"synType\">const</span> myButton1 <span class=\"synStatement\">=</span> css<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n  color: <span class=\"synConstant\">&quot;orange&quot;</span><span class=\"synStatement\">,</span>\n  fontSize: <span class=\"synConstant\">&quot;13px&quot;</span><span class=\"synStatement\">,</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n<span class=\"synComment\">// 2. テンプレートリテラル</span>\n<span class=\"synType\">const</span> myButton2 <span class=\"synStatement\">=</span> css<span class=\"synConstant\">`</span>\n<span class=\"synConstant\">  color: orange;</span>\n<span class=\"synConstant\">  font-size: 13px;</span>\n<span class=\"synConstant\">`</span><span class=\"synStatement\">;</span>\n</pre><p>ここは少し迷った。</p>\n\n<div class=\"section\">\n    <h4 id=\"オブジェクトの場合\">オブジェクトの場合</h4>\n    <p>こっちのメリットは、完全にJavaScriptであるがゆえDXを助けるツールなどが一切必要ないこと。</p><p>シンタックスハイライトも、LSPの補完も、JS(TS)を書くための仕組みがあればそれで揃う。シュッとしてる！</p><p>デメリットとしては、やはりCSSっぽさが薄れること。キャメルケースで書くだけと思いきや、メンタルモデルとしてやはり引っかかるものがある。<br />\n`Record&lt;string, string&gt;`な型に対していまいち安心感がないのに似てる。中途半端っていうか。</p><p>あとは、0ランタイムでこの記法ができるライブラリが世にあまりないこと。自分の調べでは、1つだけ。</p>\n\n<ul>\n<li><a href=\"https://github.com/macaron-css/macaron/\">https://github.com/macaron-css/macaron/</a></li>\n</ul><p>`macaron`（powered by `vanilla-extract`らしい）は割と多機能で便利そうではありつつ、ちょっと身に余るな〜という感じと、記法のクセが許容できなかった。</p><p>まず、`&`や`[data-xxx]`みたいな自身を対象とする特殊なセレクタを書くために、`selectors`という層が必要なところ。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synType\">const</span> linkStyle <span class=\"synStatement\">=</span> style<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n  color: <span class=\"synConstant\">&quot;red&quot;</span><span class=\"synStatement\">,</span>\n  <span class=\"synConstant\">&quot;:hover&quot;</span>: <span class=\"synIdentifier\">{</span>\n    color: <span class=\"synConstant\">&quot;tomato&quot;</span><span class=\"synStatement\">,</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">,</span>\n  <span class=\"synComment\">// コレ</span>\n  selectors: <span class=\"synIdentifier\">{</span>\n    <span class=\"synConstant\">&quot;&amp;.-active&quot;</span> <span class=\"synIdentifier\">{</span>\n      color: <span class=\"synConstant\">&quot;tomato&quot;</span><span class=\"synStatement\">,</span>\n    <span class=\"synIdentifier\">}</span><span class=\"synStatement\">,</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">,</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n</pre><p>また、そのスタイル定義において、自身ではないセレクタを対象に取れないところ。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synType\">const</span> containerStyle <span class=\"synStatement\">=</span> style<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n  display: <span class=\"synConstant\">&quot;flex&quot;</span><span class=\"synStatement\">,</span>\n  \n  <span class=\"synComment\">// ここで子に対する指定を書きたいが書けない</span>\n  <span class=\"synComment\">// &quot;&gt; main&quot;: {</span>\n  <span class=\"synComment\">//   flex: &quot;1 1 auto&quot;;</span>\n  <span class=\"synComment\">// }</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n<span class=\"synComment\">// 書けないので、別のクラスを用意して割り当てる必要がある</span>\n<span class=\"synType\">const</span> itemStyle <span class=\"synStatement\">=</span> style<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n  flex: <span class=\"synConstant\">&quot;1 1 auto&quot;</span><span class=\"synStatement\">;</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n</pre><p>というあたりがCSSっぽい書き味から遠くて不便だった。<br />\nコンポーネントを小さくしてScopedでCSSを書く一番のメリットは、クラス名をいちいち振らなくても雑にスタイリングできるところだと思ってるので。</p><p>あとはクラス定義が増えると、テンプレに書かれるクラス名も増えることになり、JS（JSX）のサイズにも多少影響するのが気になる。</p>\n\n</div>\n<div class=\"section\">\n    <h4 id=\"テンプレートリテラルの場合\">テンプレートリテラルの場合</h4>\n    <p>というわけで、最終的にたどり着いたのがこの方法だった。</p><p>こっちの記法が0ランタイムで使えるライブラリとしては、この2つを見つけた。</p>\n\n<ul>\n<li><a href=\"https://github.com/callstack/linaria\">https://github.com/callstack/linaria</a></li>\n<li><a href=\"https://github.com/mayank99/ecsstatic\">https://github.com/mayank99/ecsstatic</a></li>\n</ul><p>`linaria`は0ランタイム界隈の先駆けみたいなとこもあるし、割と有名なはず。<br />\n`ecsstatic`は後発でViteのみ対応だが、小さくて必要最低限な感じが自分好みどストライクって感じ。（今回採用したのはコレ）</p><p>この方式は、最初に書いた求める要件はほぼクリアしているものの、DXまわりだけ少し懸念あり（VSCodeを使わない場合）という選択肢だった。</p><p>VSCodeを使う場合は、この拡張さえあればすべてうまくいく。</p>\n\n    <blockquote>\n        <p><a href=\"https://marketplace.visualstudio.com/items?itemName=styled-components.vscode-styled-components\">vscode-styled-components - Visual Studio Marketplace</a></p>\n\n    </blockquote>\n<p>当方NeoVimユーザーなので、`nvim-treesitter`によるハイライトと、LSP補完のためにTypeScriptの拡張を導入しないといけなかった。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/styled-components/typescript-styled-plugin\">GitHub - styled-components/typescript-styled-plugin: TypeScript server plugin that adds intellisense to styled component css strings</a></p>\n\n    </blockquote>\n<p>あとはエディタに関係なく、CSS文字列に対するチェック（typoとか、CSS定義の不備とか）はビルド時や型チェック時に行うことはできないので、そこは妥協点といった感じ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/microsoft/TypeScript/issues/16607\">Allow &quot;Compiler Plugins&quot; &middot; Issue #16607 &middot; microsoft/TypeScript &middot; GitHub</a></p>\n\n    </blockquote>\n<p>これが問題になるなら、オブジェクト方式にするしかないけど、もともとCSSってそういうもんかっていう話でもあるかと。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"というわけで\">というわけで</h3>\n    <p>2023年のCSSは0ランタイムにしたいので、</p>\n\n<ul>\n<li>JSXなフレームワークなら`ecsstatic` or `linaria`</li>\n<li>そうでないならSvelte</li>\n</ul><p>というのが個人的な手札ですという記事でした。</p><p>あとこれはおまけ情報で、CSS-in−JSなライブラリを探してたときに見つけたこのリスト、網羅性がすごかった。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/solidjs/solid-styled-components/issues/40#issuecomment-1281513764\">https://github.com/solidjs/solid-styled-components/issues/40#issuecomment-1281513764</a></p>\n\n    </blockquote>\n<p>Generationの話はあんまり関係ない。</p>\n\n</div>"
}
