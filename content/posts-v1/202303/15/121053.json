{
  "title": "ViteのCSS Modulesは、JSのようにTree shakingできない",
  "html": "<p>なんとなしにビルド後の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>ファイルを眺めてて、なんで使ってないUIパーツの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>定義が含まれてるの・・？って思ったのがきっかけ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"こういうこと\">こういうこと</h3>\n    <p>たとえば、こういう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リ構成で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を書いてたとする。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>- components\n  - action-buttons\n    - index.jsx\n    - styles.module.css\n- page.jsx</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の実装はこのように。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">// index.jsx</span>\n<span class=\"synStatement\">import</span> styles <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;./styles.module.css&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> ButtonA <span class=\"synStatement\">=</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">&lt;</span>button <span class=\"synStatement\">class=</span><span class=\"synIdentifier\">{</span>styles.buttonA<span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span>A<span class=\"synStatement\">&lt;</span>/button<span class=\"synStatement\">&gt;</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> ButtonB <span class=\"synStatement\">=</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">&lt;</span>button <span class=\"synStatement\">class=</span><span class=\"synIdentifier\">{</span>styles.buttonB<span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span>B<span class=\"synStatement\">&lt;</span>/button<span class=\"synStatement\">&gt;</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> ButtonC <span class=\"synStatement\">=</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">&lt;</span>button <span class=\"synStatement\">class=</span><span class=\"synIdentifier\">{</span>styles.buttonC<span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span>C<span class=\"synStatement\">&lt;</span>/button<span class=\"synStatement\">&gt;</span>\n</pre><p>+</p>\n<pre class=\"code lang-css\" data-lang=\"css\" data-unlink><span class=\"synComment\">/* styles.module.css */</span>\n<span class=\"synIdentifier\">.buttonA</span> <span class=\"synIdentifier\">{</span> <span class=\"synComment\">/* ... */</span> <span class=\"synIdentifier\">}</span>\n\n<span class=\"synIdentifier\">.buttonB</span> <span class=\"synIdentifier\">{</span> <span class=\"synComment\">/* ... */</span> <span class=\"synIdentifier\">}</span>\n\n<span class=\"synIdentifier\">.buttonC</span> <span class=\"synIdentifier\">{</span> <span class=\"synComment\">/* ... */</span> <span class=\"synIdentifier\">}</span>\n</pre><p>で、使う側はこう。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">// page.jsx</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> ButtonA <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;@/components/action-buttons&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> Page <span class=\"synStatement\">=</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">(</span>\n  <span class=\"synStatement\">&lt;&gt;</span>\n    <span class=\"synStatement\">&lt;</span>ButtonA /<span class=\"synStatement\">&gt;</span>\n  <span class=\"synStatement\">&lt;</span>/<span class=\"synStatement\">&gt;</span>\n<span class=\"synStatement\">);</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3 id=\"想定していた挙動と実際の挙動\">想定していた挙動と実際の挙動</h3>\n    \n<ul>\n<li>JS: `ButtonA`のみバンドルされる</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>: `.buttonA`の定義のみバンドルされる</li>\n</ul><p>という挙動を想定していたけど、実際は、</p>\n\n<ul>\n<li>JS: `ButtonA`のみバンドルされる</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>: `.buttonA`だけでなく、`.buttonB`も`.buttonC`もバンドルされる</li>\n</ul><p>という少し残念な感じになってしまう。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"仕様らしい\">仕様らしい</h3>\n    <p>（そこまで自信と確証はないけど）自分の理解では、どうやら現状のViteの仕様らしい。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/vitejs/vite/issues/4389\">CSS files cannot be treeshaken with side effects &middot; Issue #4389 &middot; vitejs/vite &middot; GitHub</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>ファイルはすべて副作用あり（グローバルに作用する可能性あり）と判断されるので、そうなっちゃうと。</p><p>そして現状では、JSの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>定義ごとに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> Modulesのファイルも分けてやるのが一番実直かつ簡単な方法そう。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>- components\n  - action-buttons\n    - index.jsx\n    - button-a.jsx\n    - button-a.module.css\n    - button-b.jsx\n    - button-b.module.css\n    - button-c.jsx\n    - button-c.module.css\n- page.jsx</pre><p>う〜む、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5\">トレードオフ</a>・・。</p><p>PurgeCSSとかそういう方向性も考えたけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> Modulesと相性よくないことは目に見えてる。</p>\n\n    <blockquote>\n        <p><a href=\"https://purgecss.com/css_modules.html\">CSS modules | PurgeCSS</a></p>\n\n    </blockquote>\n<p>ViteじゃなくてWebpackなら、頑張ればできるという感じ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/markmur/webpack-css-tree-shaking-example\">GitHub - markmur/webpack-css-tree-shaking-example: Working example of tree shaking CSS modules</a></p>\n\n    </blockquote>\n<p>ローダーまみれ。</p><p>個人的にはこうなってくると<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> Modulesやめたくなってくるし、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>を書きたい気持ちがあるときはおとなしくSvelte一択っていう話になっちゃう。</p>\n\n</div>"
}
