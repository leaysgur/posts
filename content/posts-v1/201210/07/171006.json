{
  "title": "Socket.IOのその他できること",
  "html": "<p>前回の<a href=\"http://lealog.hateblo.jp/entry/2012/10/04/005326\" target=\"_blank\" title=\"最小構成でSocket.IOを試すサンプル - console.lealog();\">最小構成でSocket.IOを試すサンプル - console.lealog();</a>の続きです。<br />\n最小構成でそれらしさを体験した後は、その他にどんなものが使えるのかを。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/LearnBoost/socket.io\" target=\"_blank\" title=\"LearnBoost/socket.io · GitHub\">LearnBoost/socket.io · GitHub</a></p>\n\n    </blockquote>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>set/get</h3>\n    <p>接続してるクライアントに対して、データをset/getする機能。</p><p>ソースは必要なところだけ抜粋です。</p>\n\n<div class=\"section\">\n    <h4>Server side</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>io.sockets.on(<span class=\"synConstant\">'connection'</span>, <span class=\"synIdentifier\">function</span> (socket) <span class=\"synIdentifier\">{</span>\n\n  <span class=\"synComment\">// [2]送信されたnicknameをset</span>\n  socket.on(<span class=\"synConstant\">'set nickname'</span>, <span class=\"synIdentifier\">function</span> (name) <span class=\"synIdentifier\">{</span>\n    socket.set(<span class=\"synConstant\">'nickname'</span>, name);\n  <span class=\"synIdentifier\">}</span>);\n\n  <span class=\"synComment\">// [4]送られるたびに・・</span>\n  socket.on(<span class=\"synConstant\">'msg'</span>, <span class=\"synIdentifier\">function</span> (data) <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// [5]nicknameをgetすることが可能！</span>\n    socket.get(<span class=\"synConstant\">'nickname'</span>, <span class=\"synIdentifier\">function</span> (err, name) <span class=\"synIdentifier\">{</span>\n      console.log(name + <span class=\"synConstant\">' says: '</span> + data);\n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre>\n</div>\n<div class=\"section\">\n    <h4>Client side</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// [1]最初に接続したとき、nicknameを送信</span>\nsocket.on(<span class=\"synConstant\">'connect'</span>, <span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n  socket.emit(<span class=\"synConstant\">'set nickname'</span>, <span class=\"synStatement\">prompt</span>(<span class=\"synConstant\">'What is your nickname?'</span>));\n<span class=\"synIdentifier\">}</span>);\n\n\n<span class=\"synComment\">// [3]そうすると以後なにか送るたびに</span>\nsocket.emit(<span class=\"synConstant\">'msg'</span>, <span class=\"synConstant\">'Sending something...'</span>)\n</pre><p>[5]で変数に入れちゃわずコールバックに渡してるのは、それがNodeっぽい使い方だからってやつかな。<br />\nこの程度の軽い処理なら大丈夫そうやけど、お作法としてやらない感じ。</p><p>セットするのも1つのオブジェクトにしちゃって、プロパティで追加していく方がよさそう。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>broadcast</h3>\n    <p>待ってました！<br />\n今までも散々使ったけどｗ</p>\n\n<div class=\"section\">\n    <h4>Server side</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>io.sockets.on(<span class=\"synConstant\">'connection'</span>, <span class=\"synIdentifier\">function</span> (socket) <span class=\"synIdentifier\">{</span>\n  socket.on(<span class=\"synConstant\">'message'</span>, <span class=\"synIdentifier\">function</span> (data) <span class=\"synIdentifier\">{</span>\n    socket.broadcast.emit(<span class=\"synConstant\">'msg'</span>, data);\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre>\n</div>\n<div class=\"section\">\n    <h4>Client side</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>socket.emit(<span class=\"synConstant\">'message'</span>, <span class=\"synConstant\">'Msg1'</span>);\n</pre><p>これぞリアルタイムWebな感が出て楽しいですねｗ<br />\nちなみにbroadcastされるのは、自分以外のソケットに対してです。</p><p></p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>名前空間とか部屋とか</h3>\n    \n<div class=\"section\">\n    <h4>of('/hoge')</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// Server side</span>\n<span class=\"synIdentifier\">var</span> io = require(<span class=\"synConstant\">'socket.io'</span>).listen(80);\n\nio.of(<span class=\"synConstant\">'/speakers'</span>).on(<span class=\"synConstant\">'connection'</span>, <span class=\"synIdentifier\">function</span>(socket) <span class=\"synIdentifier\">{</span>\n  socket.on(<span class=\"synConstant\">'location'</span>, <span class=\"synIdentifier\">function</span>(data) <span class=\"synIdentifier\">{</span>\n    data.id = socket.id;\n    socket.broadcast.emit(<span class=\"synConstant\">'location'</span>, data);\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n\n\nio.of(<span class=\"synConstant\">'/sponsors'</span>).on(<span class=\"synConstant\">'connection'</span>, <span class=\"synIdentifier\">function</span>(socket) <span class=\"synIdentifier\">{</span>\n  socket.on(<span class=\"synConstant\">'location'</span>, <span class=\"synIdentifier\">function</span>(data) <span class=\"synIdentifier\">{</span>\n    data.id = socket.id;\n    socket.broadcast.emit(<span class=\"synConstant\">'location'</span>, data);\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">/*</span>\n<span class=\"synComment\">of使わない時はsockets</span>\n<span class=\"synComment\">io.sockets.on('connection', function(socket) {</span>\n<span class=\"synComment\">  socket.on('location', function(data) {</span>\n<span class=\"synComment\">    data.id = socket.id;</span>\n<span class=\"synComment\">    socket.broadcast.emit('location', data);</span>\n<span class=\"synComment\">  });</span>\n<span class=\"synComment\">});</span>\n<span class=\"synComment\">*/</span>\n</pre><p>　　</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// Client side</span>\n<span class=\"synIdentifier\">var</span> socket = io.connect(<span class=\"synConstant\">'http://219.94.254.115/speakers'</span>),\n<span class=\"synComment\">// ....</span>\n<span class=\"synComment\">/*</span>\n<span class=\"synComment\">// もしくは</span>\n<span class=\"synComment\">var socket = io.connect('http://219.94.254.115/sponsors'),</span>\n<span class=\"synComment\">// ....</span>\n<span class=\"synComment\">*/</span>\n</pre><p>1つのソケット＝単一のプロセスでもって、処理系を分けたい場合に使うのがof('/hoge')らしい。<br />\n普段のofをつけないやりとりは、暗黙の内にof('/')ってなってるとのこと。<br />\nクライアント側できっちりパス切らないとハマります。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://meso.hatenablog.com/entry/20120226/1330226179\" target=\"_blank\" title=\"Socket.IOを用いたマウスカーソルの共有 - 自分の感受性くらい\">Socket.IOを用いたマウスカーソルの共有 - 自分の感受性くらい</a></p>\n\n    </blockquote>\n<p>各ページというあたりがキモ。<br />\n全ページに同じ記述書いてあれ・・？ってなるのは俺だけで良いです。</p><p>どっちかというとルーティングのが面倒くさい。</p>\n\n</div>\n<div class=\"section\">\n    <h4>JoinとLeave</h4>\n    <p>これで楽々ルーム機能つきチャットが。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// Server side</span>\n<span class=\"synIdentifier\">var</span> io = require(<span class=\"synConstant\">'socket.io'</span>).listen(80);\n\nio.sockets.on(<span class=\"synConstant\">'connection'</span>, <span class=\"synIdentifier\">function</span> (socket) <span class=\"synIdentifier\">{</span>\n\n  socket.join(<span class=\"synConstant\">'justin bieber fans'</span>);\n  socket.broadcast.to(<span class=\"synConstant\">'justin bieber fans'</span>).emit(<span class=\"synConstant\">'new fan'</span>);\n\n  io.sockets.<span class=\"synStatement\">in</span>(<span class=\"synConstant\">'rammstein fans'</span>).emit(<span class=\"synConstant\">'new non-fan'</span>);\n\n<span class=\"synIdentifier\">}</span>);\n</pre><p>join('hoge')に対応してleave('hoge')も使えます。</p><p>クライアント側はいつもと同じように受けるだけでOK。</p>\n\n    <blockquote>\n        <p>たぶんこのサンプル、記述を間違えてるような？（他にもちょいちょい間違いあったし。<br />\nこのサンプルにあるように、文字列で識別させようとしても上手くいかなかったのよね・・。<br />\n代わりに最初に紹介したset/getでサーバー側で保持してるオブジェクトを参照させれば上手くいきました。</p>\n\n    </blockquote>\n<p>joinとleaveはソケットは子供(各クライアントを表す)のメソッドやけど、toとinは親(io自身)のメソッドらしい。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> socket = io.sockets.on(<span class=\"synConstant\">'connection'</span>, <span class=\"synIdentifier\">function</span>(client) <span class=\"synIdentifier\">{</span>\n\n\tclient.on(<span class=\"synConstant\">'init'</span>, <span class=\"synIdentifier\">function</span>(req) <span class=\"synIdentifier\">{</span>\n\t\tclient.set(<span class=\"synConstant\">'room'</span>, req.room);\n\t\tclient.set(<span class=\"synConstant\">'name'</span>, req.name);\n\n\t\tsocket.to(req.room).emit(<span class=\"synConstant\">'System'</span>, <span class=\"synConstant\">'['</span> + req.name + <span class=\"synConstant\">'] has come.'</span>);\n\t\tclient.emit(<span class=\"synConstant\">'System'</span>, <span class=\"synConstant\">'Join ['</span> + req.room + <span class=\"synConstant\">'] as ['</span> + req.name + <span class=\"synConstant\">']. Enjoy!'</span>);\n\t\tclient.join(req.room);\n\t<span class=\"synIdentifier\">}</span>);\n\n\tclient.on(<span class=\"synConstant\">'leave'</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synIdentifier\">var</span> obj = <span class=\"synIdentifier\">{}</span>;\n\t\tgetRoomAndNameObj(client, obj);\n\t\t<span class=\"synStatement\">if</span> (obj.name) <span class=\"synIdentifier\">{</span>\n\t\t\tsocket.to(obj.room).emit(<span class=\"synConstant\">'System'</span>, <span class=\"synConstant\">'['</span> + obj.name + <span class=\"synConstant\">'] has left..'</span>);\n\t\t<span class=\"synIdentifier\">}</span>\n\t\tclient.leave(obj.room);\n\t<span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>broadcast.emit()よりも、こっちのto().emit()のセットを使う気がする。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>その他</h3>\n    \n<div class=\"section\">\n    <h4>他にもまだ機能がある</h4>\n    \n    <blockquote>\n        <p>参考：<a href=\"https://github.com/LearnBoost/socket.io\" target=\"_blank\" title=\"LearnBoost/socket.io · GitHub\">LearnBoost/socket.io · GitHub</a></p>\n\n    </blockquote>\n<p>今回触れてないことも少しだけこの記事には書いてあります。<br />\n個人的にあんまり使わなさそう・・って思ったのでスルーしました。</p><p></p>\n\n</div>\n<div class=\"section\">\n    <h4>send()とemit()</h4>\n    <p>時折これらがごっちゃになってたけど解決！</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://kajiken.hatenablog.com/entry/2011/11/23/134141\" target=\"_blank\" title=\"socket.ioのsendとemitについてのめも - ぎんがてつどうのよる　ぼくはもうそらのむこう\">socket.ioのsendとemitについてのめも - ぎんがてつどうのよる　ぼくはもうそらのむこう</a></p>\n\n    </blockquote>\n<p>なるほどねー、send(hoge)とemit('message', hoge)は一緒なのね。</p>\n\n<ul>\n<li>connected</li>\n<li>message</li>\n<li>disconnected</li>\n</ul><p>は接続しただけで自動的に受けれる(サーバー側にemitのロジック書かなくても)・・と。</p>\n\n</div>\n<div class=\"section\">\n    <h4>json形式でやり取りもできる</h4>\n    <p>↑と内容が若干かぶるような気もしないでもないけど。</p>\n\n<ul>\n<li>チャットみたいに送受信するメッセージに色んなパターンがあったり、あれこれしたい場合には、emitでやる。</li>\n<li>単にデータのやり取りをしたいだけなら、sendでシンプルに。</li>\n</ul><p>そう理解しておこう・・。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// チャットとか、いろいろやるパターン</span>\nsocket.emit(<span class=\"synConstant\">'myFirstEvent'</span>, <span class=\"synConstant\">'Hihi!'</span>);\nsocket.emit(<span class=\"synConstant\">'mySecondEvent'</span>, <span class=\"synConstant\">'How r u?'</span>);\nsocket.broadcast.emit(<span class=\"synConstant\">'globalEvent'</span>, <span class=\"synConstant\">'Hello everyone.'</span>);\n\n\n<span class=\"synComment\">// RESTのAPIのエンドポイントみたくシンプルに使うパターン</span>\nsocket.json.send(<span class=\"synIdentifier\">{</span>obj: <span class=\"synConstant\">'Hello!'</span><span class=\"synIdentifier\">}</span>);\nsocket.broadcast.json.send(<span class=\"synIdentifier\">{</span>obj: <span class=\"synConstant\">'Hello!'</span>, time: <span class=\"synConstant\">'20121006'</span><span class=\"synIdentifier\">}</span>);\n</pre><p><br />\nうーん、いろいろ作れそうやけど、この分野はテストするの大変そうやね。</p>\n\n</div>\n</div>\n</div>"
}
