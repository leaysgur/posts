{
  "title": "いまさらrequestAnimationFrameを理解する",
  "html": "<p>理解できたらいいな・・。<br />\nだいぶ今さら感はあるのですが、改めて知っておきたいタイミングなので。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://developer.mozilla.org/ja/docs/Web/API/window.requestAnimationFrame\" target=\"_blank\" title=\"window.requestAnimationFrame - Web API リファレンス | MDN\">window.requestAnimationFrame - Web API リファレンス | MDN</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>一定間隔で処理を繰り返す</h3>\n    <p>CanvasでもCssアニメーションでも、「描画処理を繰り返し実行する」ところは一緒。<br />\nそこをどうやって実装するかという話で、今まではsetIntervalやsetTimeoutを再帰で呼んだりしてました。</p>\n\n<div class=\"section\">\n    <h4>setInterval</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> anim = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span> console.log(<span class=\"synConstant\">'Animations here.'</span>); <span class=\"synIdentifier\">}</span>;\n\n<span class=\"synStatement\">window</span>.setInterval(anim, 1000);\n</pre><p>一番わかりやすいし手軽です。<br />\nだいたいいつもコレなんじゃないでしょうか。</p>\n\n</div>\n<div class=\"section\">\n    <h4>setTimeout</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> anim = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span> console.log(<span class=\"synConstant\">'Animations here.'</span>); <span class=\"synIdentifier\">}</span>;\n\n(<span class=\"synIdentifier\">function</span> animLoop()<span class=\"synIdentifier\">{</span>\n  anim();\n  <span class=\"synStatement\">window</span>.setTimeout(animLoop, 1000);\n<span class=\"synIdentifier\">}</span>());\n</pre><p>setTimeoutだけでも一定間隔での実行は可能です。<br />\nただちょっとわかりにくいですね・・。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>requestAnimationFrame</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> anim = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span> console.log(<span class=\"synConstant\">'Animations here.'</span>); <span class=\"synIdentifier\">}</span>;\n\n(<span class=\"synIdentifier\">function</span> animloop()<span class=\"synIdentifier\">{</span>\n  anim();\n  <span class=\"synStatement\">window</span>.requestAnimationFrame(animloop);\n<span class=\"synIdentifier\">}</span>());\n</pre><p>記述としては、setTimeoutとほぼ同じです。<br />\n違うところは、実行間隔を指定する引数がないところ。</p><p>記述は似ているものの、全然違うところがあります。<br />\n実行間隔が指定できないあたり、もうピンときてるかもですが・・。</p>\n\n<div class=\"section\">\n    <h4>実行間隔はブラウザまかせ</h4>\n    <p>そうなんです。</p><p>MDNによると、</p>\n\n    <blockquote>\n        <p>この再描画はフォアグラウンドのタブでおよそ毎秒60回行われるとされています。<br />\nしかし、バックグラウンドのタブではより少ない割合に減らされるでしょう。</p>\n\n    </blockquote>\n<p>ようは、厳密な実行間隔は指定できないものの、</p>\n\n<ul>\n<li>毎秒\"およそ\"60回(60FPSで)実行される</li>\n<li>ブラウザの負荷にあわせて、描画準備ができ次第、適宜実行される</li>\n<li>ブラウザがアクティブでない間は、実行回数が自動で低下されメモリ節約</li>\n</ul><p>あらためてコードを並べて載せておくと、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> anim = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span> console.log(<span class=\"synConstant\">'Animations here.'</span>); <span class=\"synIdentifier\">}</span>;\n\n<span class=\"synComment\">// 1. setInterval</span>\n<span class=\"synStatement\">window</span>.setInterval(anim, 1000 / 60);\n\n<span class=\"synComment\">// 2. setTimeout</span>\n(<span class=\"synIdentifier\">function</span> animLoop()<span class=\"synIdentifier\">{</span>\n  anim();\n  <span class=\"synStatement\">window</span>.setTimeout(animLoop, 1000 / 60);\n<span class=\"synIdentifier\">}</span>());\n\n<span class=\"synComment\">//3. requestAnimationFrame</span>\n(<span class=\"synIdentifier\">function</span> animloop()<span class=\"synIdentifier\">{</span>\n  anim();\n  <span class=\"synStatement\">window</span>.requestAnimationFrame(animloop);\n<span class=\"synIdentifier\">}</span>());\n</pre><p><br />\n以上の3つは、だいたい同じ結果になるということ。<br />\nだいたい。</p><p></p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>実用的なのか</h3>\n    <p>まずは世間の状況を。</p>\n\n<div class=\"section\">\n    <h4>ブラウザの対応状況</h4>\n    \n    <blockquote>\n        <p>参考：<a href=\"http://caniuse.com/#feat=requestanimationframe\" target=\"_blank\" title=\"Can I use... Support tables for HTML5, CSS3, etc\">Can I use... Support tables for HTML5, CSS3, etc</a></p>\n\n    </blockquote>\n<p>私めの主戦場、スマートフォンという名のモバイル環境はと言いますと、</p>\n\n<ul>\n<li>Androidは4.xだろうとお構いなく全滅</li>\n<li>iOSは6.x以降は対応(6.xは要プレフィックス)</li>\n</ul><p>iPhone5sさまのおかげでiOS7がどばっと増えることが予想できるので、まぁナシではないかな・・。<br />\nにしてもAndroidはもう・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>というわけで</h4>\n    <p>個人の意見にはなりますが、全然使えるところでは使って良いと思ってます。<br />\n\"そこまで厳密に実行間隔を意識しなくてもよい\"のであれば、setIntervalやsetTimeoutの代わりに使うべきなのかなーと。</p><p>もちろん、コードを書く上での制約も生まれます。</p>\n\n<ul>\n<li>setIntervalは記述が若干異なるため使えない</li>\n<li>iOS6以降しか恩恵を受けられない</li>\n</ul><p>ここは事前のお約束なのかなーとも。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おまけ</h3>\n    <p>実際に使う場合のコードサンプルとかメモとかそういうの。</p>\n\n<div class=\"section\">\n    <h4>定義するとこ</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>(<span class=\"synIdentifier\">function</span> (w, r) <span class=\"synIdentifier\">{</span>\n\tw<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'r'</span>+r<span class=\"synIdentifier\">]</span> = w<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'r'</span>+r<span class=\"synIdentifier\">]</span> || w<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'webkitR'</span>+r<span class=\"synIdentifier\">]</span> || w<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'mozR'</span>+r<span class=\"synIdentifier\">]</span> || w<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'msR'</span>+r<span class=\"synIdentifier\">]</span> || w<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'oR'</span>+r<span class=\"synIdentifier\">]</span> || <span class=\"synIdentifier\">function</span>(c)<span class=\"synIdentifier\">{</span> w.setTimeout(c, 1000 / 60); <span class=\"synIdentifier\">}</span>;\n<span class=\"synIdentifier\">}</span>)(<span class=\"synStatement\">window</span>, <span class=\"synConstant\">'equestAnimationFrame'</span>);\n</pre><p>これはこちらのスライドから拝借したスニペットですが、スッキリ書けて良いですね。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://0-9.sakura.ne.jp/pub/lt/modest/start.html\" target=\"_blank\" title=\"jQueryで破棄されたrequestAnimationFrameとJSでのアニメーション実装で注意すること\">jQueryで破棄されたrequestAnimationFrameとJSでのアニメーション実装で注意すること</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>アニメーションのとこ</h4>\n    <p>2秒に一回実行したい処理の場合は、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> interval = 2000,\nanim = (<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n\n  <span class=\"synIdentifier\">var</span> i = 0,\n  timing = interval / 1000 * 60;\n\n  <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">if</span> (i % timing === 0) <span class=\"synIdentifier\">{</span>\n    console.log(<span class=\"synConstant\">'Animations here.'</span> + i);\n    <span class=\"synIdentifier\">}</span>\n    i++; \n  <span class=\"synIdentifier\">}</span>;\n<span class=\"synIdentifier\">}</span>());\n\n(<span class=\"synIdentifier\">function</span> animloop()<span class=\"synIdentifier\">{</span>\n  anim();\n  <span class=\"synStatement\">window</span>.requestAnimationFrame(animloop);\n<span class=\"synIdentifier\">}</span>());\n</pre><p>FPS前提に慣れてない身としては、こういう風にしないと使えないのです・・。</p><p>もっとも、正確にやる必要のある場合は、以下リンクみたくするのがいいのかしら。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://yomotsu.net/blog/2013/01/05/fps.html\" target=\"_blank\" title=\"requestAnimationFrame でフレームと再描画更新を制御する\">requestAnimationFrame でフレームと再描画更新を制御する</a></p>\n\n    </blockquote>\n<p>この分野の最前と自分との差が半年以上ってところがグッとくるわねー。</p>\n\n</div>\n</div>"
}
