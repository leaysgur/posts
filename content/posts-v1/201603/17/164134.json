{
  "title": "videoやaudioを扱う場合は、本番と同等のサーバーで開発すべし",
  "html": "<p>とある案件で動画を`video`要素で表示するっていうごくごく普通なことをしてました。</p><p>ただ、特定の条件が重なると動画がうまく再生されないことがあって、その原因を突き止めたうえでの学びをメモ(˘ω˘ )<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Range Requests</h3>\n    <p>開発中のサーバーは、pythonで立ててました。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>python -m SimpleHTTPServer 8888</pre><p>便利ですよね。<br />\nってなわけでコレで開発してました。</p><p>するとどうでしょう。<br />\n特定の動画だけうまく再生されません。</p><p>というのも、このSimpleHTTPServerはいわゆるHTTPのRangeヘッダに対応していない模様。<br />\nvideoやaudioはその性質上、1リクエストで全てを取得するのではなく、再生するのに必要な部分を区切ってリクエストするようになってます。</p><p>もちろん、1リクエストで取得できるような短いものであれば問題なし。</p><p>そのため、ちょっと長い動画の場合にRangeリクエストがさばけなくて動画が再生されなかったというわけ。</p>\n\n<div class=\"section\">\n    <h4>localhostとfile://</h4>\n    <p>外部ネットワークに依存しないサイトだったので、localhostの1オリジンで開発してました。</p><p>てことはそもそも、file:// でアクセスしても動くのでは・・ということで試した。</p><p>そしたら全部動いた！</p><p>まぁ file:// ということで、http関係ないからRangeリクエストも何も関係なかったってわけですかね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Chrome DevTools</h4>\n    <p>DevToolsを開いてるとダメで、閉じると再生されるっていう意味不明な状況にも遭遇しました。<br />\nただこれも結果がわかるとまぁ納得で・・。</p><p>DevTools開いてるときって、たいていSettingで`Disable cache (while DevTools is open)`にしてません？<br />\n犯人コレです。</p><p>DevTools閉じててキャッシュが効いてるうちは、Rangeリクエストに対応してないサーバーでもなんかの拍子に動画がキャッシュされてしまうと、そっから読まれてしまう。</p><p>デバッグしててあれやこれやと試すうちに、本来ありえない経路でキャッシュに貯めてたりするよねーっていう。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>さようなら python こんにちは Node.js</h3>\n    <p>上述の学びを得て、pythonでサーバー立てるのをやめました。<br />\n代わりに使ったのが  <a href=\"https://github.com/cloudhead/node-static\">https://github.com/cloudhead/node-static</a> です。</p><p>RFC 2616準拠！ってことでRangeリクエストも安心の対応！これで怖いものなし！</p>\n\n    <blockquote>\n        <p>さくっと立てたり落としたりしたかったので、この時点ではローカルにNginx立てたりっていう発想には至りませんでした。</p>\n\n    </blockquote>\n<p>まぁPCでさっきまで見れなかったやつが、全部見れるようになった！よかった！</p>\n\n</div>\n<div class=\"section\">\n    <h3>iOSだとまた微妙に違う？</h3>\n    <p>ここまでは良かったんですが、まだiPadで見るとダメなんですねー。<br />\nというわけで以下のことを検証しました。</p>\n\n<ul>\n<li>`autoplay`とか`preload=\"auto\"`とか、モバイルで無効な設定のせいではないか</li>\n<li>動画ファイル自体が非対応のフォーマットではないか</li>\n</ul><p>Dropboxに動画を置いてチェックしたところ、ちゃんと再生されたので動画自体は悪く無いことがわかった。<br />\n属性値についても特に問題はなさそう。(もちろん`autoplay`は効かないけども。)</p><p>ここでピンとくる、またサーバーのせいでは・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>ローカルにNginxを立てる</h3>\n    <p>DropboxのPublicなファイルを返してたのはNginxだったので、それを模してローカルにNginxを立てる。<br />\n普通にhomebrewで入れたやつ。</p><p>そしたら・・ちゃんと再生されたー！</p><p>どういう仕組かわかりませんが、node-staticがiOSからの動画に関するリクエストがうまくさばけてなかった・・？</p>\n\n</div>\n<div class=\"section\">\n    <h3>というわけで</h3>\n    <p>ApacheならApache、NginxならNginxと、最初から本番環境と同等のサーバーを使って開発してればこんな沼にハマる必要はなかったのにねーという話でした。<br />\nもちろん動画やら音声を扱うケースには限るけども。</p>\n\n    <blockquote>\n        <p>もう調べる気ないけど、Nodeでちゃんと動画を返せてるサーバー実装ってあるのかしら？</p>\n\n    </blockquote>\n\n</div>"
}
