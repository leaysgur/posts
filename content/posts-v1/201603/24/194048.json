{
  "title": "フロントの奥深さに触れる〜Frontend Meetup Tokyo vol.1 #frontendmt に行ってきたメモ",
  "html": "<p>いってきたよ！<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>small画面でも、BIG画面でも、今すぐ使えるレスポンシブ活用術</h3>\n    <p>by @ourmaninjapan</p>\n\n<ul>\n<li>オニール(O'NEILL)のサイトをレスポンシブにしたらコンバージョンがUPした例</li>\n<li>モバイル対応はモバイルのためだけではない\n<ul>\n<li>PCでもウィンドウせばめて見たりするよね</li>\n</ul></li>\n<li>モバイル専用にするか、レスポンシブにするか\n<ul>\n<li>もはやモバイル = iPhoneではない</li>\n</ul></li>\n<li>画面解像度もユーザー層によって違う\n<ul>\n<li>ギークな人たちの画面解像度はw1200↑がほぼ</li>\n<li>そうでない人たちはw1200以下が多く、w400あたりが最も多い</li>\n</ul></li>\n<li>そしてモバイル = 小さい画面でもない\n<ul>\n<li>表示を最適化することが真のレスポンシブ</li>\n</ul></li>\n<li>レスポンシブで気をつける点\n<ul>\n<li>入力デバイスを考慮</li>\n<li>タップできる領域・余白</li>\n<li>ロールオーバーとか</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>おすすめレスポンシブ実装10</h4>\n    \n<ul>\n<li>meta[name=viewport]\n<ul>\n<li>scalable=noはだめ！ぜったい！！</li>\n</ul></li>\n<li>CSS MediaQuery\n<ul>\n<li>ブレークポイントは具体的な端末を想定して決めるのではなく、あくまでサイズで</li>\n<li>実際にウィンドウ幅せばめてみて、確認・調整するのが良い</li>\n</ul></li>\n<li>ページはシングルカラムにしよう</li>\n<li>img { max-width: 100%; } にしよう</li>\n<li>不要なものを非表示にしてても、表示できる術も残す</li>\n<li>input[type=number|email] / autofocusなどなどHTML5</li>\n<li>:hoverのスタイルは、:focusにも</li>\n<li>エフェクトもできればjsではなくcssで</li>\n<li>モバイル端末の情報を抜けるAPI\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/WebAPI/Battery_Status\">Battery Status API - WebAPI | MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/WebAPI/Network_Information\">Network Information API - WebAPI | MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/WebAPI/Using_Light_Events\">Ambient Light Events - WebAPI | MDN</a></li>\n</ul></li>\n<li>画像はpicture要素で\n<ul>\n<li>srcsetでwebpとかいいよね</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>Building a reusable web component system at the FT</h3>\n    <p>by @triblondon</p><p><a href=\"http://www.ft.com/\">http://www.ft.com/</a> におけるコンポーネントシステムについて</p>\n\n<ul>\n<li>HTMLの上にコンポーネントという抽象化レイヤーをつくる</li>\n<li>英語圏では敬称があって、(しかも1000くらい)それがselect > optionになってた例\n<ul>\n<li>一番簡単な実装は、ユーザーにとって最も難しいUIになった</li>\n</ul></li>\n<li>サイトのブランドを保ちながらもスムーズに開発を続けたいなら、コンポーネントに切り出すのがベター</li>\n</ul>\n<div class=\"section\">\n    <h4>Origami というコンポーネントシステム</h4>\n    \n<ul>\n<li><a href=\"https://github.com/Financial-Times/ft-origami\">GitHub - Financial-Times/ft-origami: Universal front end component standards for FT web products</a></li>\n<li><a href=\"http://registry.origami.ft.com/components\">Components - Origami registry</a></li>\n<li>bower / gulp / sass / Browserify\n<ul>\n<li>最近webpackにした</li>\n<li>Reactとか特定のライブラリは、支持しない開発者がいたら困るので使ってない</li>\n</ul></li>\n<li>Progressive Enhancement(cuts the mustard)な考え方</li>\n<li>scriptタグにクエリで欲しいモジュール書くだけで、CDNが返してくれる仕組みもある</li>\n<li>これで開発速度も上がって、視覚障害者向けの対応など細かいこともできるようになった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>質疑</h4>\n    \n<ul>\n<li>FT社以外で使われた実績は？\n<ul>\n<li>今のところ知らない</li>\n<li>別のサイトで使えるようなコンポーネント集ってわけではない</li>\n<li>似たようなシステムを作ったであろう会社はありそう</li>\n</ul></li>\n<li>動的にモジュールをCDNから持ってくるのにかかるコストは？\n<ul>\n<li>20−30秒</li>\n<li>賢いキャッシュシステムがあるので最初はまぁ・・</li>\n<li>このビルドシステムはOSSになってるよ</li>\n</ul></li>\n<li>これ作るのにどれくらいかかった？何人？\n<ul>\n<li>3人で1年くらいかけた</li>\n</ul></li>\n<li>FTのサイトのどれくらい適用されてる？\n<ul>\n<li>FTにはサイトがたくさんあって、そのうちの少しでしか使ってない</li>\n<li>古いアクティブでないサイト・そもそも不要なサイトも多いので</li>\n</ul></li>\n<li>WebComponentsにしないの？\n<ul>\n<li>チームにWebComponents好きも多いし、そのうちするかも</li>\n<li>今はまだブラウザサポートがアレなので・・</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>次回は5/18の予定だそうです。</p><p>貴重な話は聞けたかなーとは思う、思いますよ。</p>\n\n</div>"
}
