{
  "title": "React NativeでNative機能をSwiftで書いて使うには",
  "html": "<p>React Nativeの対応が追いついてないNative機能を使うには、自分でブリッジを実装する必要がある。</p><p>ただ公式のDocsはほぼObj-Cのことしか書いてなくて、Swiftでもできるよ！って一言くらいしかない。<br />\nもちろん調べてもろくな例が出てこない！</p><p>かといってObj-CよりSwiftの方が親しみやすい気がするなーということで・・・、四苦八苦しながらやり遂げたことをメモ。</p>\n\n    <blockquote>\n        <p>アプリエンジニアではないので、非効率なコードや勘違いしてることを書いてる可能性もありです！</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>必要なファイル</h3>\n    <p>いちおうドキュメントはコレ。</p>\n\n    <blockquote>\n        <p><a href=\"http://facebook.github.io/react-native/docs/native-modules-ios.html\">Native Modules</a></p>\n\n    </blockquote>\n<p>基本的な流れはココに書いてあるけど、Swift版の端折られ感よ！<br />\n要約すると、</p>\n\n<ul>\n<li>`XXX.swift`で実装する</li>\n<li>`XXX.m`でエクスポートする</li>\n<li>それらを認識させる`MyProject-Bridging-Header.h`を用意する</li>\n</ul><p>この3つが必要。</p>\n\n</div>\n<div class=\"section\">\n    <h3>サンプルコード</h3>\n    <p>端末内に同期してある音楽ファイルから、アルバムの一覧を取得するやつ。<br />\nそれぞれのファイルを用意していく。</p><p>以下は`MyProject`というプロジェクトで、`XXX`というブリッジモジュールを作る前提です。</p>\n\n<div class=\"section\">\n    <h4>MyProject-Bridging-Header.h</h4>\n    <p>`.swift`のファイルを追加したら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Xcode\">Xcode</a>が勝手に追加してくれるけど、してくれないなら自分で作る。</p>\n<pre class=\"code lang-objc\" data-lang=\"objc\" data-unlink><span class=\"synPreProc\">#ifndef MyProject_Bridging_Header_h</span>\n<span class=\"synPreProc\">#define MyProject_Bridging_Header_h</span>\n\n<span class=\"synPreProc\">#import </span><span class=\"synConstant\">&quot;RCTBridgeModule.h&quot;</span>\n\n<span class=\"synPreProc\">#endif</span>\n</pre><p>`RCTBridgeModule.h`をインポートしてるのが重要。</p>\n\n</div>\n<div class=\"section\">\n    <h4>XXX.m</h4>\n    <pre class=\"code lang-objc\" data-lang=\"objc\" data-unlink><span class=\"synPreProc\">#import </span><span class=\"synConstant\">&lt;Foundation/Foundation.h&gt;</span>\n<span class=\"synPreProc\">#import </span><span class=\"synConstant\">&quot;RCTBridgeModule.h&quot;</span>\n\n<span class=\"synStatement\">@interface</span> RCT_EXTERN_MODULE(XXX, NSObject)\n\nRCT_EXTERN_METHOD(getAlbums: (RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)\n\n<span class=\"synStatement\">@end</span>\n</pre><p>`.swift`側で実装したものをエクスポートする記述たち。</p><p>`XXX`ってクラスと`getAlbums()`ってメソッドを定義してて、これは`Promise`を返すようになってる。<br />\nこのObj-Cの文法はさっぱりわからん（なぜ第二引数からラベルがいるのかとか）けど、こう書けば動く。</p><p>さて次が本丸のSwift実装。</p>\n\n</div>\n<div class=\"section\">\n    <h4>XXX.swift</h4>\n    <pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">import</span> Foundation\n<span class=\"synPreProc\">import</span> MediaPlayer\n\n<span class=\"synType\">@objc</span>(XXX)\n<span class=\"synPreProc\">class</span> <span class=\"synType\">XXX</span><span class=\"synSpecial\">:</span> <span class=\"synType\">NSObject</span> {\n\n  <span class=\"synType\">@objc</span> <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">getAlbums</span>(resolve<span class=\"synSpecial\">:</span> <span class=\"synType\">RCTPromiseResolveBlock</span>, reject<span class=\"synSpecial\">:</span> <span class=\"synType\">RCTPromiseRejectBlock</span>) {\n    <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">albumsQuery</span><span class=\"synSpecial\">:</span> <span class=\"synType\">MPMediaQuery</span> <span class=\"synIdentifier\">=</span> MPMediaQuery.albumsQuery()\n    <span class=\"synComment\">// 略すが↑を使って必要なものを↓で`resolve`する</span>\n    resolve([])\n  }\n\n}\n</pre><p>`@objc`ってのが重要らしい。<br />\nここはただのSwiftなので、あれこれ調べながら頑張って実装する。<br />\nもちろんさっきエクスポートする時に指定したものと同じ名前じゃないと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーになる。</p><p>ハマりポイントとしては、React Native側に渡せる値の型。<br />\nようはプリミティブな値しか渡せないのでstructの配列とか返しちゃうと盛大にエラーになるので注意。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>jsで使う</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span>\n  NativeModules,\n<span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'react-native'</span>;\n<span class=\"synStatement\">const</span> XXX = NativeModules.XXX;\n\nXXX.getAlbums().then((albums) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// なんやかんや</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>お疲れ様でした！<br />\n今回は`Promise`を返すように実装したけど、普通にコールバックのスタイルでも実装はできる。</p><p>ちなみに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>ではなくてネイティブの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を呼び出す仕組みもあるけど、そっちをSwiftでやる方法をまだ見いだせてないのでまたいつか・・。</p>\n\n</div>"
}
