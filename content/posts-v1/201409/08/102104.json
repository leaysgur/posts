{
  "title": "JavaScript Memory Management Masterclass with Addy Osmaniの要点まとめ",
  "html": "<p>最近こういうことよくやらなきゃなのでまとめました。</p><p>以下のリンクにある動画とスライドのまとめみたいなものです！<br />\n自分用なので、細かいことは書いてませんが。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://www.youtube.com/watch?v=LaxbdIyBkL0\" target=\"_blank\" title=\"Memory Management Masterclass with Addy Osmani - YouTube\">Memory Management Masterclass with Addy Osmani - YouTube</a><br />\n参考：<a href=\"https://speakerdeck.com/addyosmani/javascript-memory-management-masterclass\" target=\"_blank\" title=\"JavaScript Memory Management Masterclass // Speaker Deck\">JavaScript Memory Management Masterclass // Speaker Deck</a></p>\n\n    </blockquote>\n<p>動画のがわかりやすいので、時間のある人はぜひぜひ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>0. はじめに</h3>\n    \n<ul>\n<li>パフォーマンスチェックには、DevToolsのTimelineとProfileが便利</li>\n<li>Chromeのタスクマネージャでもメモリの使用量とかはわかるけど、DevTools使ったほうがわかりやすいし使うべき</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>1. DevToolsを使ったDEMO</h3>\n    \n<div class=\"section\">\n    <h4>Sawtooth Curve</h4>\n    \n<ul>\n<li>DevToolsのTimelineで、所謂ノコギリ型にメモリの使用量が推移してたら、オブジェクトが頻繁に生成・破棄されてる</li>\n<li>つまりGCが頻繁に走ってるので、パフォーマンスがよろしくない</li>\n<li>他にもGCのタイミングでDOMノード・メモリが減らないとかあれば、リークしてる可能性が高い</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>V8's Hidden Classes</h4>\n    \n<ul>\n<li>V8は処理速度向上のために、内部的に最適化したオブジェクトの情報を保持してる(Fast object)</li>\n<li>不要になったからといって、deleteでオブジェクトのプロパティを削除したりすると、最適化が解かれてしまう(Slow object)</li>\n<li>Slow objectは、Fast objectの15倍メモリを食う</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>そのほか気にすべきもの</h4>\n    \n<ul>\n<li>クロージャ内で外側のスコープへの参照持ちっぱにしないように</li>\n<li>DOMで子ノードの参照が生き続けて、親ノードがGCされないあるあるに注意</li>\n<li>clearTimeout忘れで参照が残り続けてて、親オブジェクトがGCされないあるあるにも注意</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ES6 WeakMaps</h4>\n    \n<ul>\n<li>キーに使ってるオブジェクトがGCされた時、WeakMap側のキーも消えてくれる</li>\n</ul><p>用途がイマイチぱっとしない人は、以下の参考リンクがわかりやすかったです。</p>\n\n    <blockquote>\n        <p><a href=\"http://constellation.hatenablog.com/entry/20111002/1317561215\" target=\"_blank\" title=\"Let&apos;s WeakMap - 枕を欹てて聴く\">Let&apos;s WeakMap - 枕を欹てて聴く</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>2. チートシート</h3>\n    \n<div class=\"section\">\n    <h4>プロファイリングの前に</h4>\n    \n    <blockquote>\n        <p>Design fitst.<br />\nCode from the design.<br />\nThen profile the result.</p>\n\n    </blockquote>\n<p>最適化に着手するのは、然るべきタイミングで、ってことですね。<br />\n肝に銘じておきます・・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>メモリまわりのチェック項目</h4>\n    \n<div class=\"section\">\n    <h5>まず、使いすぎてないかメモリの動きを見る</h5>\n    \n<ul>\n<li>タスクマネージャでもいいし</li>\n<li>TimelineのMemoryビューでもいい</li>\n<li>MemoryビューならDOMノードの数とかイベントリスナーの数とかも見れるよ</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>その後でリークを疑う</h5>\n    \n<ul>\n<li>DevToolsのProfileのObject allocation trackerが便利</li>\n<li>Heap profilerでSnapshot取って比較するのもよい</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>GCの頻度はどうか</h5>\n    \n<ul>\n<li>GCが頻繁に走ってたら要注意</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4>普段から気にすべき項目</h4>\n    \n<ul>\n<li>DOMへの参照まわりは特に注意</li>\n<li>循環参照は避けよう</li>\n<li>スコープは適切に</li>\n<li>イベントはちゃんと剥がそう</li>\n<li>キャッシュは消すことも踏まえて、貯めっぱなしにしないように</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>3. メモリマネジメントの基礎</h3>\n    <p>先にコレを読んでおくとしっくりくるはず。</p>\n\n    <blockquote>\n        <p><a href=\"http://www.html5rocks.com/ja/tutorials/memory/effectivemanagement/\" target=\"_blank\" title=\"Gmail スケールの効率的メモリ管理 - HTML5 Rocks\">Gmail スケールの効率的メモリ管理 - HTML5 Rocks</a></p>\n\n    </blockquote>\n\n<ul>\n<li>WindowオブジェクトやGlobalオブジェクト等、すべてはRootのノードからはじまる</li>\n<li>Rootノード -> Objectノード -> Scalarノード</li>\n<li>Rootノードから辿れなくなったノードが、GCの対象になる</li>\n<li>ゆえに、Rootから深いところでノードが生き続けると、その根本まで全てGCされない</li>\n<li>Retained path(s)とは、自身とそのノードから辿れるノードの範囲のこと</li>\n<li>Retained size(s)とは、自身とそのノードから辿れるノードの総サイズのこと</li>\n</ul>\n<div class=\"section\">\n    <h4>メモリリークとは</h4>\n    <p>使えるメモリが徐々に少なくなって(やがて足りなくなる)いくこと。</p>\n\n<ul>\n<li>メモリプールがいっぱいになると、GCが走る</li>\n<li>だいたいはmsレベルではあるものの、時間がかかる処理</li>\n<li>この間、本体アプリの処理も止まる</li>\n<li>GCされることを踏まえてメモリは使うこと</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>4. V8のメモリ管理</h3>\n    <p>ここも先にさっきのリンク読んだ方がわかりやすいかも・・。</p>\n\n<ul>\n<li>V8は世代別GC</li>\n<li>Young -> Oldというようにわけられる</li>\n<li>GCの度に生き残ってたものが、よりOldになっていく</li>\n<li>TimelineでGCイベントとして見れるのは、Youngの方</li>\n<li>OldなGCは、他の処理と平行して行われてる</li>\n<li>＼Triggering a collection pauses your app!／</li>\n</ul>\n<div class=\"section\">\n    <h4>performance.memory</h4>\n    \n<ul>\n<li>jsHeapSizeLimit: 使用可能なJavaScriptヒープのメモリサイズ(bytes)</li>\n<li>totalJSHeapSize: その内、既に割り当てられたメモリサイズ(bytes)</li>\n<li>usedJSHeapSize:  その内、現在使用中のメモリサイズ(bytes)</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>5. Chrome DevToolsおさらい</h3>\n    \n<div class=\"section\">\n    <h4>Timeline</h4>\n    \n<ul>\n<li>やはりTimeline便利</li>\n<li>ゴミ箱のアイコンで、強制的にGCできるので、計測する前にやるといいかも</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Profile</h4>\n    \n<ul>\n<li>SnapshotをComparisonビューで見るのおすすめ</li>\n<li>背景が黄のノードは参照されてる</li>\n<li>背景が赤のノードは単一のノードから参照されてるやつなので要注意</li>\n<li>DistanceはRootノードからの距離なので、極端に深いやつは要注意</li>\n<li>Shallow Sizeが小さくとも、ノードである限りGCを阻害することができるので注意</li>\n<li>クロージャにも名前つけとくと、後から調べやすくて良い</li>\n</ul>\n<div class=\"section\">\n    <h5>Snapshotを撮るテク</h5>\n    \n<ul>\n<li>怪しい箇所を予想する</li>\n<li>まず撮る</li>\n<li>怪しいと思われる動きをしてみる</li>\n<li>もっかい撮る</li>\n<li>見比べる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>Object allocation tracker</h5>\n    <p>(何回も出てきてるけど)DevTools -> Profile -> Record Heap Allocationsで使う。</p>\n\n<ul>\n<li>Timelineみたくリアルタイムに見れる</li>\n<li>青のバーの高さはメモリの使用量の目安に</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>Allocation Stack Traces</h5>\n    <p>Devtools Setting -> General -> Profiler -> Record heap allocation traces でONに。<br />\nどこでメモリが使われたかまで追えるように！</p>\n\n</div>\n<div class=\"section\">\n    <h5>CPU ProfileのChartビュー</h5>\n    \n<ul>\n<li>CPUがどのJavaScriptコードを実行したかが時系列でわかる</li>\n<li>積み上がるのはFunctionCall</li>\n<li>それより実行に時間くってる横幅デカいやつを要チェックすべし</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3>6. おわりに</h3>\n    <p>なんて濃ゆいセッションなんや・・・。<br />\n(●･̆⍛･̆●) < Webフロントエンド大変過ぎて生きるのがつらい</p><p>@addyosmani++<br />\nありがたやー。</p>\n\n<div class=\"section\">\n    <h4>その他参考リンク</h4>\n    \n    <blockquote>\n        <p><a href=\"http://www.html5rocks.com/ja/tutorials/speed/static-mem-pools/\" target=\"_blank\" title=\"Static Memory Javascript with Object Pools - HTML5 Rocks\">Static Memory Javascript with Object Pools - HTML5 Rocks</a><br />\n<a href=\"http://blog.h13i32maru.jp/entry/2014/01/04/104013\" target=\"_blank\" title=\"Heap Snapshotを使った時のsetIntervalの罠\">Heap Snapshotを使った時のsetIntervalの罠</a></p>\n\n    </blockquote>\n\n</div>\n</div>"
}
