{
  "title": "jQuery, GSAP, Velocity.jsのfadeIn/fadeOutの記法を比べる",
  "html": "<p>fadeInって聞くと、あぁjQueryねってなるくらいには浸透してると思うのですが、<br />\nあれはパフォーマンスがよろしくないとのこと。</p><p>であれば代替に何があるの？ってことで、<br />\nその代替ライブラリたちとその書き方のご紹介。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>書き比べ</h3>\n    \n<div class=\"section\">\n    <h4>No.0: jQuery</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>$div.fadeIn(500, onFadeIn);\n$div.fadeOut(500, onFadeOut);\n</pre><p>みじかい。さすが。</p>\n\n</div>\n<div class=\"section\">\n    <h4>No1: TweenMax</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>TweenMax.to($div, 0.5, <span class=\"synIdentifier\">{</span> alpha: 1, display: <span class=\"synConstant\">'block'</span>, onComplete: onFadeIn <span class=\"synIdentifier\">}</span>);\nTweenMax.to($div, 0.5, <span class=\"synIdentifier\">{</span> alpha: 0, display: <span class=\"synConstant\">'none'</span>, onComplete: onFadeOut <span class=\"synIdentifier\">}</span>);\n</pre><p>ふむ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>No2: TweenLite</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>TweenLite.to($div, 0.5, <span class=\"synIdentifier\">{</span> alpha: 1, display: <span class=\"synConstant\">'block'</span>, onComplete: onFadeIn <span class=\"synIdentifier\">}</span>);\nTweenLite.to($div, 0.5, <span class=\"synIdentifier\">{</span> alpha: 0, display: <span class=\"synConstant\">'none'</span>, onComplete: onFadeOut <span class=\"synIdentifier\">}</span>);\n</pre><p>ちなみにMaxとLiteの違いは、</p>\n\n    <blockquote>\n        <p>TweenMax extends TweenLite, adding many useful (but non-essential) features like  repeat(), repeatDelay(), yoyo(), updateTo(), and more. </p>\n\n    </blockquote>\n<p>らしいので、このtoメソッドに関しては同等なんやろなーと。</p>\n\n</div>\n<div class=\"section\">\n    <h4>No3: Velocity.js</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>Velocity($div, <span class=\"synIdentifier\">{</span> opacity: 1 <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span> duration: 500, display: <span class=\"synConstant\">'block'</span>, complete: onFadeIn <span class=\"synIdentifier\">}</span>);\nVelocity($div, <span class=\"synIdentifier\">{</span> opacity: 0 <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span> duration: 500, display: <span class=\"synConstant\">'none'</span>, complete: onFadeOut <span class=\"synIdentifier\">}</span>);\n<span class=\"synComment\">// ちなみにこうも書ける</span>\nVelocity($div, <span class=\"synConstant\">'fadeIn'</span>, <span class=\"synIdentifier\">{</span> duration: 500, display: <span class=\"synConstant\">'block'</span>, complete: onFadeIn <span class=\"synIdentifier\">}</span>);\n<span class=\"synComment\">// ちなみにjQueryいればこうも</span>\n$div.velocity(<span class=\"synConstant\">'fadeIn'</span>, <span class=\"synIdentifier\">{</span> duration: 500, display: <span class=\"synConstant\">'block'</span>, complete: onFadeIn <span class=\"synIdentifier\">}</span>);\n</pre><p>元よりjQueryの記法互換で作られてるらしいので、受け入れやすさは一番やと思います。<br />\njQueryに依存してるわけではないです。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>肝心のパフォーマンス</h3>\n    <p>jsperfにサンプル作って上げたはいいものの、毎回途中で止まっちゃって、定量的な結果はわからず。<br />\nただ手元のAndroidちゃんで見る限り、jQueryよりVelocityのが圧倒的にスムーズでした。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Velocity.js</h3>\n    \n<div class=\"section\">\n    <h4>ちょっとした注意</h4>\n    \n<div class=\"section\">\n    <h5>display</h5>\n    <p>上記の例でも書いてますが、displayを指定しないと、opacityしか変わりません。<br />\njQueryはshow/hideの拡張的な感じなので、displayも変わります。</p>\n\n</div>\n<div class=\"section\">\n    <h5>style=\"opacity:0\"が残る</h5>\n    <p>どういうことかというと、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// コレやると</span>\n$div.velocity(<span class=\"synConstant\">'fadeOut'</span>).show();\n\n<span class=\"synComment\">// &lt;div style=&quot;opacity: 0; display: block;&quot; /&gt; になるので</span>\n<span class=\"synComment\">// opacity: 0のままなので見えない</span>\n</pre><p>こんな具合にjQueryと共生する感じにいきたいなら、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>$.fn.show = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span> <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>.css(<span class=\"synIdentifier\">{</span>opacity: <span class=\"synConstant\">''</span>, display: <span class=\"synConstant\">'block'</span><span class=\"synIdentifier\">}</span>); <span class=\"synIdentifier\">}</span>;\n</pre><p>くらいやる気概が必要です。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>参考</h4>\n    <p>いいスライドあったので載せておきます。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://www.slideshare.net/yoheiminami/velocityjs\" target=\"_blank\" title=\"Velocity.js is next generation animation engine.\">Velocity.js is next generation animation engine.</a></p>\n\n    </blockquote>\n<p>記法もそこまで変わらないので、今後animateやらfadeInやら書くことあれば、迷わず投入しようと思ってます。<br />\n<br />\n</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>あとがき</h3>\n    <p>jQuery先輩には本当に助けてもらってるんですけど、パフォーマンス絡みの話になるとすぐ槍玉に挙げられるのが・・。<br />\nそろそろ我々は親離れならぬjQuery離れをせねばならんのかね。(今に始まった話ではないか。)</p><p>あとこういう良い代替ライブラリ見つけても、だいたいソースみると if (IE) とか書いてあってげんなりするんですよね。<br />\nモバイル特化のそういうライブラリ群、あったら需要あると思うんやけどなー。</p>\n\n</div>"
}
