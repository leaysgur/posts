{
  "title": "Astro のコードを読む Part.2",
  "html": "\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2022/04/14/093306\">Astro &#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x8AAD;&#x3080; Part.1 - console.lealog();</a></p>\n\n    </blockquote>\n<p>この続き。</p><p>概況について把握できたので、次はCLIのコマンドを読んでいく。</p><p>一ヶ月でバージョンが`1.0.0-beta.9`から、`1.0.0-beta.27`になっており・・・、この時点でのハッシュは`9ef92e0a3d604c479bb325eab073e7d3c896d388`でした。</p><p>さて、CLIで利用できる主なサブコマンドは次のとおり。</p>\n\n<ul>\n<li>`add`</li>\n<li>`docs`</li>\n<li>`dev`</li>\n<li>`build`</li>\n<li>`preview`</li>\n<li>`check`</li>\n<li>`telemetry`</li>\n</ul><p>`check`と`dev`と`build`以外は、自明なので割愛。`telemetry`は匿名での利用状況を集める設定をするやつで、現状ではどのコマンドが使われてるかだけを収集してるとのこと。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>astro check</h3>\n    <p>ビルドの前に実行すると、間違いやエラーに気づけて便利という立ち位置のコマンド。CIなんかでやるといいよとのこと。</p><p>やってることは単純で、</p>\n\n<ul>\n<li>プロジェクト内の`.astro`ファイルをすべて探す</li>\n<li>`@astrojs/language-server`をローカルに立てて、全部読ませてみる</li>\n<li>なんらかのエラーが検知されてれば、それを表示</li>\n</ul><p>ってだけ。</p><p>ちなみに、`@astrojs/language-server`は別のリポジトリになってる。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/withastro/language-tools\">GitHub - withastro/language-tools: Language tools for Astro</a></p>\n\n    </blockquote>\n<p>LSP方面のコードはまたいずれ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>astro dev</h3>\n    <p>ローカルに開発用のサーバーを建てるコマンド。</p><p>やってることは、</p>\n\n<ul>\n<li>Viteの設定をまとめる\n<ul>\n<li>初期設定 + ユーザーの設定 + CLIでの設定</li>\n</ul></li>\n<li>Viteのサーバーを建てる</li>\n</ul><p>なんとこれだけ。</p><p>その都度で各フックを呼んだりして挙動を調整できるようになってるけど、基本的にはViteに丸投げしていくスタイル。</p><p>その分、Viteの自作プラグインなんかが仕事をしてるので、そういう意味でNodeのコンテキストと、ViteSSRのコンテキストは区別して考えないとハマる。</p><p>ということが、`CONTRIBUTING.md`にも書いてあった。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/CONTRIBUTING.md#code-structure\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/CONTRIBUTING.md#code-structure</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Viteプラグインの山</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/core/create-vite.ts\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/core/create-vite.ts</a></p>\n\n    </blockquote>\n<p>`dev`コマンドで使われるViteの自作プラグインは以下の通り。</p>\n\n<ul>\n<li>`vite-plugin-astro-server`</li>\n<li>`vite-plugin-astro`</li>\n<li>`vite-plugin-astro-postprocess`</li>\n<li>`vite-plugin-config-alias`</li>\n<li>`vite-plugin-env`</li>\n<li>`vite-plugin-integrations-container`</li>\n<li>`vite-plugin-jsx`</li>\n<li>`vite-plugin-markdown`</li>\n<li>`vite-plugin-scripts`</li>\n</ul><p>そういうわけで、ViteのプラグインおよびRollupのプラグイン機構について多少なりとも理解がないと、この先を進むのは相当に辛いものになりそう。</p>\n\n    <blockquote>\n        <p><a href=\"https://rollupjs.org/guide/en/#plugin-development\">https://rollupjs.org/guide/en/#plugin-development</a><br />\n<a href=\"https://vitejs.dev/guide/api-plugin.html\">https://vitejs.dev/guide/api-plugin.html</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>vite-plugin-astro-server</h4>\n    <p>`dev`コマンドでだけ使用されるプラグイン。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/vite-plugin-astro-server/index.ts\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/vite-plugin-astro-server/index.ts</a></p>\n\n    </blockquote>\n<p>Viteの`configureServer`を使って、ローカルに建てる開発サーバーの挙動を変えるプラグイン。</p><p>大まかには、</p>\n\n<ul>\n<li>`RouteManifest`と呼ばれるプロジェクト構造を、ソースの更新にあわせて更新</li>\n<li>Viteのローカルサーバーへミドルウェアを追加して、リクエストをさばく</li>\n<li>その際、さっきのマニフェストを使って実際の処理へルーティング</li>\n<li>ファイルの更新時に、マニフェストを再生成</li>\n</ul><p>ってことをやってる。</p><p>Viteのデフォルトのミドルウェアを潰してたりもしてて、なかなか生々しい感じ。</p>\n\n<div class=\"section\">\n    <h5>createRouteManifest()</h5>\n    <p>プロジェクトのページ構造を抽象化したマニフェスト。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/core/routing/manifest/create.ts#L168-L169\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/core/routing/manifest/create.ts#L168-L169</a></p>\n\n    </blockquote>\n<p>この`RouteManifest`を作るために、`/pages`ディレクトリ中のファイルを走査していって、</p>\n\n<ul>\n<li>`.astro`と`.md`のファイルを見つけてページ判定</li>\n<li>`.js`と`.ts`のファイルを見つけてAPIのエンドポイント判定</li>\n<li>パスの`[...slug]`みたいなダイナミックなものも判断</li>\n</ul><p>ちなみにこのマニフェストは、serialize/deserialize可能になってた。</p>\n\n</div>\n<div class=\"section\">\n    <h5>handleRequest()</h5>\n    <p>ローカルサーバーに対するリクエストをさばく処理。</p>\n\n<ul>\n<li>SSR用のアダプタを利用してるかチェック</li>\n<li>Nodeの`http.IncomingMessage`を、Fetch APIの`Request`に変換\n<ul>\n<li>ここで冒頭の`webapi`のポリフィルが効いてくる</li>\n</ul></li>\n<li>マニフェストからマッチするルートを探す</li>\n<li>見つからなければ404を返す\n<ul>\n<li>独自の`404.astro`があれば、それを返す</li>\n</ul></li>\n<li>該当するルートを表すコンポーネントを、SSRするために事前ロード（というかコンパイル）</li>\n<li>ルートがエンドポイント（`route.type = endpoint`）なら呼んでみて\n<ul>\n<li>`Response`が返る（`res.type: response`）なら、それはAPIなので、そのままレスポンスを返す</li>\n<li>そうでない場合（`res.type: simple`）は、生成されるファイルを返す</li>\n</ul></li>\n<li>エンドポイントでないならページなので、SSRした結果を返す\n<ul>\n<li>さっき事前ロードしたコンポーネントを使う</li>\n</ul></li>\n<li>ここまでで例外が出たら、500を返す</li>\n</ul><p>リクエストに対し、事前にパースしたマニフェストから対応するものを探し、レスポンスするのが仕事。</p><p>レスポンスしたいコンポーネントがわかったら、事前ロードするあたりの流れは、</p>\n\n<ul>\n<li>まずは`preload()`\n<ul>\n<li><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/core/render/dev/index.ts#L74\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/core/render/dev/index.ts#L74</a></li>\n<li>先にViteでコンポーネント自体をSSRする</li>\n<li>`viteServer.ssrLoadModule()`すると、対応するローダーが呼ばれる（つまり後述の`vite-plugin-astro`）</li>\n</ul></li>\n<li>そして`ssr()`\n<ul>\n<li><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/core/render/dev/index.ts#L88\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/core/render/dev/index.ts#L88</a></li>\n<li>コンポーネントではなく、リクエストされたページそのものをSSRするという意味</li>\n<li>HMR用の`script`要素を埋め込んだり</li>\n<li>SFCで書かれたCSSなどを`link`要素で埋め込んだり</li>\n<li>`coreRender()`したものをレスポンスとして返す</li>\n<li><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/core/render/core.ts#L85\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/core/render/core.ts#L85</a></li>\n<li>`renderPage(result, Component, pageProps, null)`がキモ</li>\n<li>この`Component`が、後述のプラグインで`.astro`を`.ts`にしてあるやつ</li>\n<li>Astroコンポーネントのfrontmatterで使えるグローバルスコープとかもこのへんで定義される</li>\n<li><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/runtime/server/index.ts#L541\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/runtime/server/index.ts#L541</a></li>\n</ul></li>\n<li>ページであればHTMLが得られたはずなので、`Response`に載せて返す</li>\n</ul><p>と、ここまでが開発用のサーバーでリクエストをレスポンスする一連の流れ。</p><p>次は、`.astro`みたいなファイル自体を処理するローダープラグインを読む。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>vite-plugin-astro</h4>\n    <p>`.astro`ファイルを処理するプラグイン。Goで書かれたコンパイラを使ったりしてるのもココ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/vite-plugin-astro/index.ts\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/vite-plugin-astro/index.ts</a></p>\n\n    </blockquote>\n<p>プラグイン作法に則り、`load()`でやってる処理が本体。</p>\n\n<ul>\n<li>`style`と`script`はここで判別されて先に処理\n<ul>\n<li>`.astro`内で定義されてるscoped-styleとか</li>\n</ul></li>\n<li>HTMLとして生成すべきもののコンパイルは2段構え\n<ul>\n<li>`cachedCompilation()`: `.astro` > `.ts`</li>\n<li>`esbuild.transform()`: `.ts` > `.js`</li>\n</ul></li>\n<li>`cachedCompilation()`\n<ul>\n<li>キャッシュしつつコンパイルするそのまんまのやつ</li>\n<li>`compile()`の本体はこっち</li>\n<li><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/vite-plugin-astro/compile.ts#L37\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/vite-plugin-astro/compile.ts#L37</a></li>\n</ul></li>\n<li>`compile()`\n<ul>\n<li>CSSは、そのままViteの`vite:css`プラグインに渡す前に、なんか一手間かけたりしてる</li>\n<li>`@astrojs/compiler`の`transform()`</li>\n</ul></li>\n<li><a href=\"https://github.com/withastro/compiler\">https://github.com/withastro/compiler</a>\n<ul>\n<li>このリポジトリの、`packages/compiler`以下にあるJSの実装を通して、WASMを呼ぶ</li>\n<li>WASMはTinyGoで変換したもの</li>\n</ul></li>\n<li>Go(WASM)でやるコンパイルは3段構え\n<ul>\n<li>Tokenize > Scan > Print</li>\n<li>ASTのパースには、 <a href=\"https://github.com/tdewolff/parse\">https://github.com/tdewolff/parse</a> を使ってる</li>\n<li>`.astro`ファイルを、HTML文字列を返す`.ts`のコードに変換する</li>\n</ul></li>\n<li>Printでは、`$$renderComponent`みたいな中間コードがいっぱい埋め込まれる\n<ul>\n<li>Svelteのコンパイル結果みたいな、別のところで定義してあるモジュールを後から使うやつ</li>\n<li><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/runtime/server/index.ts\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/runtime/server/index.ts</a></li>\n</ul></li>\n<li>最後に、`dev`コマンドなので`import.meta.hot`のおまじないをくっつける</li>\n</ul><p>これらが全部、ViteのSSRのコンテキストで動いてる。</p>\n\n<div class=\"section\">\n    <h5>実際に変換されるコードたち</h5>\n    <p>たとえばこんな`.astro`を変換するとする。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink>---\n\n---\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\"> </span><span class=\"synType\">lang</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;en&quot;</span><span class=\"synIdentifier\">&gt;</span>\n\t<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">\t\t</span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">meta</span><span class=\"synIdentifier\"> </span><span class=\"synType\">charset</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;utf-8&quot;</span><span class=\"synIdentifier\"> /&gt;</span>\n<span class=\"synPreProc\">\t\t</span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">meta</span><span class=\"synIdentifier\"> </span><span class=\"synType\">name</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;viewport&quot;</span><span class=\"synIdentifier\"> </span><span class=\"synType\">content</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;width=device-width&quot;</span><span class=\"synIdentifier\"> /&gt;</span>\n<span class=\"synPreProc\">\t\t</span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">title</span><span class=\"synIdentifier\">&gt;</span>Astro<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">title</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">\t</span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n\t<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n\t\t<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">h1</span><span class=\"synIdentifier\">&gt;</span>Astro<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">h1</span><span class=\"synIdentifier\">&gt;</span>\n\t<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>Goのコンパイラで`.ts`に変換すると、こんな風に。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synConstant\">&quot;import {</span>\n  Fragment<span class=\"synStatement\">,</span>\n  render <span class=\"synStatement\">as</span> $$render<span class=\"synStatement\">,</span>\n  createAstro <span class=\"synStatement\">as</span> $$createAstro<span class=\"synStatement\">,</span>\n  createComponent <span class=\"synStatement\">as</span> $$createComponent<span class=\"synStatement\">,</span>\n  renderComponent <span class=\"synStatement\">as</span> $$renderComponent<span class=\"synStatement\">,</span>\n  unescapeHTML <span class=\"synStatement\">as</span> $$unescapeHTML<span class=\"synStatement\">,</span>\n  renderSlot <span class=\"synStatement\">as</span> $$renderSlot<span class=\"synStatement\">,</span>\n  addAttribute <span class=\"synStatement\">as</span> $$addAttribute<span class=\"synStatement\">,</span>\n  spreadAttributes <span class=\"synStatement\">as</span> $$spreadAttributes<span class=\"synStatement\">,</span>\n  defineStyleVars <span class=\"synStatement\">as</span> $$defineStyleVars<span class=\"synStatement\">,</span>\n  defineScriptVars <span class=\"synStatement\">as</span> $$defineScriptVars<span class=\"synStatement\">,</span>\n  createMetadata <span class=\"synStatement\">as</span> $$createMetadata\n<span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;/@fs/Users/leader22/Codes/tryastro/node_modules/astro/dist/runtime/server/index.js&quot;</span><span class=\"synStatement\">;</span>\n\n\n\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> $$metadata <span class=\"synStatement\">=</span> $$createMetadata<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;/src/pages/index.astro&quot;</span><span class=\"synStatement\">,</span> <span class=\"synIdentifier\">{</span> modules: <span class=\"synIdentifier\">[]</span><span class=\"synStatement\">,</span> hydratedComponents: <span class=\"synIdentifier\">[]</span><span class=\"synStatement\">,</span> clientOnlyComponents: <span class=\"synIdentifier\">[]</span><span class=\"synStatement\">,</span> hydrationDirectives: <span class=\"synStatement\">new</span> <span class=\"synSpecial\">Set</span><span class=\"synStatement\">(</span><span class=\"synIdentifier\">[]</span><span class=\"synStatement\">),</span> hoisted: <span class=\"synIdentifier\">[]</span> <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n<span class=\"synType\">const</span> $$Astro <span class=\"synStatement\">=</span> $$createAstro<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;/src/pages/index.astro&quot;</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">'https://astro.build'</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">'file:///Users/leader22/Codes/tryastro/'</span><span class=\"synStatement\">);</span>\n<span class=\"synType\">const</span> Astro <span class=\"synStatement\">=</span> $$Astro<span class=\"synStatement\">;</span>\n\n<span class=\"synComment\">//@ts-ignore</span>\n<span class=\"synType\">const</span> $$Index <span class=\"synStatement\">=</span> $$createComponent<span class=\"synStatement\">(async</span> <span class=\"synStatement\">(</span>$$result<span class=\"synStatement\">,</span> $$props<span class=\"synStatement\">,</span> $$slots<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n<span class=\"synType\">const</span> Astro <span class=\"synStatement\">=</span> $$result.createAstro<span class=\"synStatement\">(</span>$$Astro<span class=\"synStatement\">,</span> $$props<span class=\"synStatement\">,</span> $$slots<span class=\"synStatement\">);</span>\nAstro.<span class=\"synConstant\">self</span> <span class=\"synStatement\">=</span> $$Index<span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">return</span> $$render<span class=\"synConstant\">`&lt;html lang=&quot;en&quot;&gt;</span>\n<span class=\"synConstant\">\t&lt;head&gt;</span>\n<span class=\"synConstant\">\t\t&lt;meta charset=&quot;utf-8&quot;&gt;</span>\n<span class=\"synConstant\">\t\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</span>\n<span class=\"synConstant\">\t\t&lt;title&gt;Astro&lt;/title&gt;</span>\n<span class=\"synConstant\">\t&lt;!--astro:head--&gt;&lt;/head&gt;</span>\n<span class=\"synConstant\">\t&lt;body&gt;</span>\n<span class=\"synConstant\">\t\t&lt;h1&gt;Astro&lt;/h1&gt;</span>\n<span class=\"synConstant\">\t&lt;/body&gt;&lt;/html&gt;`</span><span class=\"synStatement\">;</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> $$Index<span class=\"synStatement\">;</span>\n</pre><p>Astroコンポーネントのコードってわけで、これを`esbuild`で最適化しつつ`.js`にする。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span>\n  render as $$render,\n  createAstro as $$createAstro,\n  createComponent as $$createComponent,\n  createMetadata as $$createMetadata\n<span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;/@fs/Users/leader22/Codes/tryastro/node_modules/astro/dist/runtime/server/index.js&quot;</span>;\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">const</span> $$metadata = $$createMetadata(<span class=\"synConstant\">&quot;/src/pages/index.astro&quot;</span>, <span class=\"synIdentifier\">{</span> modules: <span class=\"synIdentifier\">[]</span>, hydratedComponents: <span class=\"synIdentifier\">[]</span>, clientOnlyComponents: <span class=\"synIdentifier\">[]</span>, hydrationDirectives: <span class=\"synComment\">/* @__PURE__ */</span> <span class=\"synStatement\">new</span> Set(<span class=\"synIdentifier\">[]</span>), hoisted: <span class=\"synIdentifier\">[]</span> <span class=\"synIdentifier\">}</span>);\n<span class=\"synStatement\">const</span> $$Astro = $$createAstro(<span class=\"synConstant\">&quot;/src/pages/index.astro&quot;</span>, <span class=\"synConstant\">&quot;https://astro.build&quot;</span>, <span class=\"synConstant\">&quot;file:///Users/leader22/Codes/tryastro/&quot;</span>);\n<span class=\"synStatement\">const</span> Astro = $$Astro;\n<span class=\"synStatement\">const</span> $$Index = $$createComponent(async ($$result, $$props, $$slots) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> Astro2 = $$result.createAstro($$Astro, $$props, $$slots);\n  Astro2.<span class=\"synStatement\">self</span> = $$Index;\n  <span class=\"synStatement\">return</span> $$render`&lt;html lang=<span class=\"synConstant\">&quot;en&quot;</span>&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=<span class=\"synConstant\">&quot;utf-8&quot;</span>&gt;\n\t\t&lt;meta name=<span class=\"synConstant\">&quot;viewport&quot;</span> content=<span class=\"synConstant\">&quot;width=device-width&quot;</span>&gt;\n\t\t&lt;title&gt;Astro&lt;/title&gt;\n\t&lt;!--astro:head--&gt;&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;h1&gt;Astro&lt;/h1&gt;\n\t&lt;/body&gt;&lt;/html&gt;`;\n<span class=\"synIdentifier\">}</span>);\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> $$Index;\n</pre><p>で、これがページをSSRするときに利用されるというわけ。</p>\n\n</div>\n<div class=\"section\">\n    <h5>vite-plugin-astro-postprocess</h5>\n    <p>おまけみたいなもの。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/vite-plugin-astro-postprocess/index.ts\">https://github.com/withastro/astro/blob/9ef92e0a3d604c479bb325eab073e7d3c896d388/packages/astro/src/vite-plugin-astro-postprocess/index.ts</a></p>\n\n    </blockquote>\n<p>`Astro.glob()`を使ってる`.astro`ファイルをよしなにする最後の一手間とのこと。</p><p>`Astro.glob()`が`.astro`でしかたたけないっていうissueがあった気がしたけど、そういうことっぽい。</p>\n\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>基本的には、Svelteのそれと一緒でコンパイル時に中間コードを生成して、それを別のコンテキストで利用するってところがトリッキーではあるが、まぁ納得って感じ。</p><p>Viteに依存してるとはいえ、綺麗に乗っかってるわけではないってのがよくわかる回だった。（SvelteKitのコード読んでる時も同じこと思ってたけど）</p><p>正直なところ、薄目で読んでるだけでも迷子になりまくるコードベースなので、ちゃんと全貌を理解するのは諦めたほうがいいかもなと悟った回でもあった。</p><p>ViteやRollupやら、バンドラ自体にそれなりに習熟してないと、コードベースに対してはほぼ何もできんな・・って思ったし、さすが`snowpack`作ってた人たちよなーっていう。</p><p>まぁ`.astro`ファイル内でだけ使える特殊な構文の裏側が、ある程度はわかってよかったかなと。</p><p>コマンドとしては`build`が残ってるので、それを次回に読んで終わりとしたい。</p>\n\n</div>"
}
