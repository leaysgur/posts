{
  "title": "ソフトウェアアーキテクチャの基礎 読んだ",
  "html": "\n    <blockquote>\n        <p><a href=\"https://www.oreilly.co.jp/books/9784873119823/\">O&#39;Reilly Japan - &#x30BD;&#x30D5;&#x30C8;&#x30A6;&#x30A7;&#x30A2;&#x30A2;&#x30FC;&#x30AD;&#x30C6;&#x30AF;&#x30C1;&#x30E3;&#x306E;&#x57FA;&#x790E;</a></p>\n\n    </blockquote>\n<p>分厚かった。</p><p>TL;DRとしては、</p>\n\n<ul>\n<li>アーキテクトかくあるべしについて書かれた本</li>\n<li>実践的というよりかは、汎用的な話が広範囲で書かれてる感じ</li>\n<li>基礎って書いてるけど、いわゆる駆け出しエンジニア向けではない</li>\n</ul><p>って感じ。</p><p>一エンジニアがコード書きながら「ここのコードどうまとめよかっな〜」とか「あのフレームワークかな〜」っていうレベルというより、もっと上位のレイヤーで「サービス全体のアーキテクチャが〜」とか「構成として冗長性が〜」みたいな話。そもそもコードを書く開発者と、この本の対象であるアーキテクトは別の位置づけだったりする。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>3部構成</h3>\n    \n<ul>\n<li>はじめに</li>\n<li>第1部: 基礎\n<ul>\n<li>アーキテクトとは、その役割はどうあるべきか</li>\n<li>アーキテクチャとは</li>\n<li>どういう事柄に注意を払うべきか</li>\n</ul></li>\n<li>第2部: アーキテクチャスタイル\n<ul>\n<li>イベントベースとかマイクロサービスとか、具体的な設計方法について</li>\n<li>（たぶんこの本のメイン）</li>\n</ul></li>\n<li>第3部: テクニックとソフトスキル\n<ul>\n<li>第1部を実践するための方法について</li>\n<li>エンジニアとどう接するべきかとか</li>\n</ul></li>\n</ul><p>という構成になってて、個人的には序章とか第1部が一番良かったかなという感じ。<br />\n実際にアーキテクトとして働いてるわけではないので、ざっくりとしたガイドラインやら前フリにあたる部分のほうが、読み物として丁度いいというか。</p><p>以下、特に気になった章だけまとめ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>1章 イントロダクション</h3>\n    \n<ul>\n<li>ソフトウェアにおけるアーキテクチャとは</li>\n<li>この4つによって構成されるもの\n<ul>\n<li>システムの構造 = どういうスタイルで構成されてるか</li>\n<li>アーキテクチャの特性 = いわゆるイリティについて</li>\n<li>アーキテクチャによる決定 = 遵守されるべきルール</li>\n<li>設計の指針（ガイドライン） = ルールよりは緩いガイド</li>\n</ul></li>\n<li>こうした決定を下し、ガイドするのがアーキテクト\n<ul>\n<li>技術トレンド、事業ドメイン、対人スキル、政治などなど幅広い理解が必要</li>\n</ul></li>\n<li>アーキテクチャは良し悪しではなく、トレードオフしかない</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>2章: アーキテクチャ思考</h3>\n    \n<ul>\n<li>アーキテクチャを決めるのがアーキテクト</li>\n<li>その決定を元に設計を行いコードを書くのが開発者</li>\n<li>この責任の異なる2者のコラボレーションが重要だという話</li>\n<li>アーキテクトは技術的な幅が優先される\n<ul>\n<li>一般的には、深さよりも幅</li>\n<li>開発者は、幅よりも深さが要求されがち</li>\n</ul></li>\n<li>ただし一定の深さも必要\n<ul>\n<li>チームに溶け込んで、自らもコードを書くべき</li>\n</ul></li>\n<li>未知の未知を、未知の既知にどう変えていくか</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>9章: 基礎</h3>\n    \n<ul>\n<li>巨大な泥団子とは\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Big_ball_of_mud\">https://en.wikipedia.org/wiki/Big_ball_of_mud</a></li>\n<li>いわゆるクソコードの塊</li>\n<li>アーキテクトはこれを避けるのが使命</li>\n</ul></li>\n<li>分散アーキテクチャの誤信\n<ul>\n<li>サービス間のネットワークが信頼できるとかレイテンシがないとか</li>\n</ul></li>\n<li>その他の課題\n<ul>\n<li>ロギング</li>\n<li>トランザクション</li>\n<li>バージョン管理</li>\n</ul></li>\n<li>こうしたトレードオフを知らずに、分散アーキテクチャに手を出していけない</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>23章: 交渉とリーダーシップのスキル</h3>\n    \n<ul>\n<li>アーキテクトの決定に対する異議をどうコントロールするか\n<ul>\n<li>vs ステークホルダー</li>\n<li>vs 他のアーキテクト</li>\n<li>vs 開発者</li>\n</ul></li>\n<li>いわゆる交渉術\n<ul>\n<li>コストの話は最後の手段</li>\n<li>人によって声のかけ方を変える</li>\n</ul></li>\n<li>プログラマティックでありつつ、ビジョナリーでもあるべき</li>\n<li>チームに溶け込みリーダーシップを発揮する</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    \n    <blockquote>\n        <p>ソフトウェアアーキテクチャはトレードオフがすべてだ</p>\n\n    </blockquote>\n<p>これに尽きる。額にいれて飾りたい。</p><p>ちょっとした設計をするときとかでも、正解を求めすぎる気持ちはわからないでもない。けど結局そこに正解はなく、トレードオフがあるだけなので、淡々と取捨選択して残ったやつを拾い上げれば良いんやなと。ただ取捨選択できるだけの手札は揃えておく必要があって、選球眼も養っておかないといけない。</p><p>そんなこんなあれこれ調べてると、Microsoftが出してるAzureのドキュメントサイトが圧倒的知見の塊で、いろいろよかった。</p>\n\n    <blockquote>\n        <p><a href=\"https://docs.microsoft.com/ja-jp/azure/architecture/guide/\">Azure &#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3; &#x30A2;&#x30FC;&#x30AD;&#x30C6;&#x30AF;&#x30C1;&#x30E3;&#x306E;&#x57FA;&#x790E; - Azure Architecture Center | Microsoft Docs</a></p>\n\n    </blockquote>\n\n</div>"
}
