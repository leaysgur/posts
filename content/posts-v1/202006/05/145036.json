{
  "title": "React x MobXな趣味プロダクトをSvelteでリライトした",
  "html": "\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2018/10/29/110000\">&#x7D9A;&#x30FB;React x MobX&#x306A;&#x8DA3;&#x5473;&#x30D7;&#x30ED;&#x30C0;&#x30AF;&#x30C8;&#x3092;TypeScript&#x3067;&#x30EA;&#x30E9;&#x30A4;&#x30C8;&#x3057;&#x305F; - console.lealog();</a></p>\n\n    </blockquote>\n<p>このシリーズの続編で、いわばSvelte人柱シリーズです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>どんなプロダクトなの</h3>\n    <p>一言でいうと、ブラウザで動く<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iTunes\">iTunes</a>みたいなSPA。<br />\nCDを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%C3%A5%D4%A5%F3%A5%B0\">リッピング</a>してMP3にしたものを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VPS\">VPS</a>においてて、それをWebのUIから再生できるようにしてる。</p><p>使い続けてかれこれ3年くらい・・思えば最初はVueだった気もする・・。<br />\nTodoAppほど小さくはなくて、でも片手で数えられるくらいのルートしかなくて、非同期処理はあって、ちょい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%E9%A5%AF%A5%C6%A5%A3%A5%D6\">インタラクティブ</a>なUIになってる程度のサイズ。</p><p>なので正直いってそこまで大きくないので、どんなものを使ってもそれなりにきれいなコードは書けると思ってた。</p><p>なのでここは好奇心ドリブンで、最近イチオシになりつつあるSvelteを採用することにした。</p>\n\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D3%A5%D5%A5%A9%A1%BC%A5%A2%A5%D5%A5%BF%A1%BC\">ビフォーアフター</a></h3>\n    \n<div class=\"section\">\n    <h4>技術スタック</h4>\n    <p>いままで。</p>\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink><span class=\"synSpecial\">{</span>\n  &quot;<span class=\"synStatement\">mobx</span>&quot;: &quot;<span class=\"synConstant\">^5.5.2</span>&quot;,\n  &quot;<span class=\"synStatement\">mobx-react</span>&quot;: &quot;<span class=\"synConstant\">^5.3.6</span>&quot;,\n  &quot;<span class=\"synStatement\">react</span>&quot;: &quot;<span class=\"synConstant\">^16.6.0</span>&quot;,\n  &quot;<span class=\"synStatement\">react-dom</span>&quot;: &quot;<span class=\"synConstant\">^16.6.0</span>&quot;,\n  &quot;<span class=\"synStatement\">styled-components</span>&quot;: &quot;<span class=\"synConstant\">^4.0.2</span>&quot;\n<span class=\"synSpecial\">}</span>\n</pre><p>そしてこれから。</p>\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink><span class=\"synSpecial\">{</span>\n  &quot;<span class=\"synStatement\">svelte</span>&quot;: &quot;<span class=\"synConstant\">^3.23.0</span>&quot;\n<span class=\"synSpecial\">}</span>\n</pre><p>Svelteは全部入りなので、依存が綺麗サッパリなくなった。</p><p>ビルドもwebpackからrollupにしたけど、まあもちろん困ることはなにもない。</p><p>Reactが嫌になったわけではなくて、Svelte試したいな〜というだけ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ファイルサイズ</h4>\n    <p>以下はすべて、minifyしてるけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gzip\">gzip</a>してない、ブラウザでのパースサイズ。</p><p>いままで。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>index.html: 954B\nmain.js: 248KB</pre><p>250KBくらい。（たしか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gzip\">gzip</a>されると60KBくらいだったはず）</p><p>`styled-components`で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> in JSしてるので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>ファイルは存在しなかった。</p><p>これから。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>index.html: 717B\nglobal.css: 530B\nbundle.css: 4.6KB\nbundle.js: 34.3KB</pre><p>なんと40KBになった。（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gzip\">gzip</a>してないのに）</p><p>これがSvelteの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>の力！<br />\n正直ここまで小さくなるのか〜とちょっと感動した。</p><p>ちなみにいままでのファイルサイズで支配的だったものたちはこんな感じ。</p>\n\n<ul>\n<li>`react-dom`: 110KBくらい</li>\n<li>`mobx`: 45KBくらい</li>\n<li>`styled-components`: 16KBくらい</li>\n<li>本体コード: 35KBくらい</li>\n</ul><p>たとえばPreactにして、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>-in-JSをやめても、ファイルサイズではSvelteに遠く及ばない・・。<br />\nもちろん理論上、いつかランタイムに抱えたほうがサイズが小さくなるラインは訪れるけど、そんな巨SPAはそもそも採用しないので。</p><p>ちなみに、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/gzip\">gzip</a>したSvelte版のJSのサイズは10KBくらい。ちっさ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Svelteの書き味について</h3>\n    <p>ファイルサイズが小さい = ランタイムが小さいは正義。</p><p>なので、あとはその元となるコード、その書き味がいったいどんなものか。</p><p>いくつか書き残しておくべきポイントをメモっておく。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/mmss-client\">https://github.com/leader22/mmss-client</a></p>\n\n    </blockquote>\n<p>そういえば、実際のコードが見れる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>はこちらです。</p>\n\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>.svelte</h4>\n    <p>書き味としてはやはり`.vue`を思い出す・・。<br />\n`markup` / `script` / `style`を1つのファイルに書く必要があって、開発UXはこれに馴染めるかに引っ張られるなーと。</p><p>状態やロジックを`.svelte`ではなくただの`.js`に逃がすこともできるけど、100％ではない。</p><p>というか、Svelteの良さを活かすには、むしろ積極的に`script`部分に書いていく必要がある気もしてる。</p>\n\n    <blockquote>\n        <p>Write less code.</p>\n\n    </blockquote>\n<p>保守性って意味だと、このSvelteの哲学とのバランスが一番難しいところかな〜と個人的には思った。</p><p>ちなみに今回のリライトでは割と保守性を重視してて、`.svelte`ではあまり状態を宣言せず、`svelte/store`を使うようにしてるけど・・。<br />\n（Svelteの段階的な状態管理についてみたいな記事は書けるかもしれない）</p>\n\n</div>\n<div class=\"section\">\n    <h4>Svelte言語(markup)</h4>\n    \n    <blockquote>\n        <p><a href=\"https://svelte.dev/docs#Template_syntax\">https://svelte.dev/docs#Template_syntax</a></p>\n\n    </blockquote>\n<p>最初見たときは、Handlebarsかと思った（ちがった）！</p><p>JSXの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BB%B0%B9%E0%B1%E9%BB%BB%BB%D2\">三項演算子</a>より単項`if`はやっぱ見やすいし、`v-for`とか書くより`#each`のほうが直感的なので、個人的には好み。</p><p>ただ現状`slot`を使うときに、JSXでいう`Fragment`みたいなやつがなくて、そこだけが不満。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Svelte言語（script）</h4>\n    \n    <blockquote>\n        <p>Svelte is a language.</p>\n\n    </blockquote>\n<p>なので、普通の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の用途では見慣れない記法があったりする。<br />\nそしてそれがなかなか重要な概念になってたりする・・。</p>\n\n    <blockquote>\n        <p><a href=\"https://svelte.dev/docs#script\">https://svelte.dev/docs#script</a></p>\n\n    </blockquote>\n<p>このセクションのすべてを理解することが、Svelteの最初の壁かなーと。<br />\nあとは、`$`という文字列の持つ意味を理解したときに、アハ体験ができるはず。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Reactivity</h4>\n    \n<ul>\n<li>宣言した変数が更新されたら</li>\n<li>それに依存してる関数やDOMが</li>\n<li>必要ならば再実行される</li>\n</ul><p>このへんはMobX推しとしても元から求めていたところ。</p><p>なのでMobXとの書き味の比較をしておくと一番の差異は、変数への「代入」がリアクティブになるところ。</p><p>つまり、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">let</span> numbers = <span class=\"synIdentifier\">[</span>1, 2, 3<span class=\"synIdentifier\">]</span>;\n\n<span class=\"synStatement\">const</span> addNumber = (n) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// NG</span>\n  <span class=\"synComment\">// numbers.push(n);</span>\n\n  <span class=\"synComment\">// OK</span>\n  numbers = <span class=\"synIdentifier\">[</span>...numbers, n<span class=\"synIdentifier\">]</span>;\n<span class=\"synIdentifier\">}</span>;\n</pre><p>というように配列のアップデートは、イミュータブルに新しい配列を代入しないといけない。<br />\n逆に、オブジェクトへのプロパティの追加は自動的にト<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%C3%A5%AD%A5%F3%A5%B0\">ラッキング</a>してくれる。</p><p>なので`Map`や`Set`はそのまま使えないので、必要なら独自の`store`にラップすることになるはず。<br />\nただ独自の`store`でラップすると値の参照にひと手間かかるようになるので、そこがな〜って感じ。</p><p>このあたりは、MobXのほうがよくできてたなと思う。</p>\n\n</div>\n<div class=\"section\">\n    <h4>storeのテスト</h4>\n    <p>ロジックを`script`部に書きたくない場合、ビルトインの`svelte/store`を使うのが鉄板。</p><p>で、そうしてしまえばただの`.js`なので、テストもいつもどおりにできる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// store.js</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> writable <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;svelte/store&quot;</span>;\n\n<span class=\"synStatement\">const</span> value = writable(1);\n<span class=\"synStatement\">const</span> update = (v) =&gt; value.set(v);\n\n<span class=\"synStatement\">return</span> <span class=\"synIdentifier\">{</span> value, update <span class=\"synIdentifier\">}</span>;\n</pre><p>こうなってしまえば、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// store.test.js</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> value, update <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;./store.js&quot;</span>;\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> get <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;svelte/store&quot;</span>;\n\ntest(<span class=\"synConstant\">&quot;should get default value&quot;</span>, () =&gt; <span class=\"synIdentifier\">{</span>\n  expect(get(value)).toBe(1);\n<span class=\"synIdentifier\">}</span>);\n\ntest(<span class=\"synConstant\">&quot;should update value&quot;</span>, () =&gt; <span class=\"synIdentifier\">{</span>\n  update(3);\n  expect(get(value)).toBe(3);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>毎回`get()`するのだけが面倒くさいけど、`import/export`だけ何かしらで変換すればテストできる。</p><p>`.svelte`側にしっかり書いちゃった場合は、もう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>するしかないので、こういうのでやるとか？</p>\n\n    <blockquote>\n        <p><a href=\"https://testing-library.com/docs/svelte-testing-library/intro\">https://testing-library.com/docs/svelte-testing-library/intro</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>TypeScript</h4>\n    <p>いきなりあれこれ試すのは悪手だと思ってるので、今回は採用しなかった。</p><p>調べてみた感じ、</p>\n\n<ul>\n<li>使えるのは使える\n<ul>\n<li>が、一部の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>に制限がでるなど不便がある</li>\n<li><a href=\"https://github.com/sveltejs/svelte-preprocess/issues/144\">https://github.com/sveltejs/svelte-preprocess/issues/144</a></li>\n</ul></li>\n<li>LSPもまだWIP\n<ul>\n<li><a href=\"https://github.com/sveltejs/language-tools/issues/83\">https://github.com/sveltejs/language-tools/issues/83</a></li>\n</ul></li>\n</ul><p>まぁESLintの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>を入れるだけでも、変数名のチェックくらいはできるので、もうちょっと待っていいかなーという気持ち。</p><p>というかSvelteは言語というならば、既存の仕組みを利用しようとする限り、どうしても相容れないところは残りそう・・・。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>まとめ = おすすめできるか</h3>\n    <p>つまりは、Reactやら既存のFWを差し置いて、採用するか？という問い。</p><p>そんなものはもちろん要件次第である！</p><p>ただ個人的な手応えからすると、SPAを作りたいなら普通に採用していいかなーと思った。<br />\n回線速度が遅かったり、端末が低スペックだとかって話は割とよくあるので、ランタイムの小ささはそれだけでえらい。</p><p>あとは規模が小さいものをシュッと作りたいって場合も、Reactよりいいなと思った。<br />\nというか、規模が小さいのにReactを採用するなという気持ちが強まったっていうほうが正しいかもしれないｗ</p><p>ただscopedにしたいからってだけで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>-in−JSしちゃうケースも多いと思うし、そこもSvelteのデフォルトでカバーされるならなおさら。</p><p>この学習コストで、（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a>によってチューニング済の）軽量なアプリがさくっと書けるのは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1\">コスパ</a>良すぎると思う。</p><p>懸念としては、`v3`になってまだ1年くらいなため、コミュニティがまだ未成熟なところ。<br />\nちょっとしたUIもすぐ`npm`で探してしまうしまうとか、なんかあったときの腕力に自身がない場合は、あんまりおすすめできないかもしれない・・。<br />\nここ最近ずっとIssueとPRを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/watch\">watch</a>してるけど、ちょいちょいコーナーケースを踏んでる人はいるっぽいし。</p><p>というのが現時点でのお気持ちでした。</p><p>ファイルサイズの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%D1%A5%AF\">インパク</a>トがでか過ぎて、Web開発で素のReactをもう使う気になれず、使うにしてもPreactしかないな〜とか思ってる自分がいる。</p>\n\n</div>"
}
