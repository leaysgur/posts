{
  "title": "HTML5 Conference に行ってきたメモ #html5j",
  "html": "<p>2015年に引き続いて2016年も。<br />\n北千住もーちょっと近くならんかな・・ｗ</p><p>なんだかんだずっとホールにいました。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>基調講演</h3>\n    \n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/W3C\">W3C</a>/Keio 中村さん</h4>\n    \n<ul>\n<li>画像とか動画でおなじみ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/HDR\">HDR</a>\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/HDR\">HDR</a>をWebから使えたら・・・？</li>\n<li>こういう視点がこれから必要なのでは</li>\n</ul></li>\n<li>BigData, AI, IoTなどIT業界の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/BuzzWord\">BuzzWord</a>\n<ul>\n<li>でもこれは、Internet・Webの上に成り立ってるもの</li>\n</ul></li>\n<li>WebはDistributed OSだ！（地球上の）\n<ul>\n<li>なので我々がふだん作ってるのは、OS上の資源</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/W3C\">W3C</a>の活動範囲の広さそこにつながるもの\n<ul>\n<li>TV（Hybridcast）、車、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C5%C5%BB%D2%BD%F1%C0%D2\">電子書籍</a></li>\n<li>車のインパネもWebに！（なるかも</li>\n<li>e-Pubと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/W3C\">W3C</a>の統合</li>\n<li>縦書き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a></li>\n<li>Blockchain <a href=\"https://en.bitcoin.it/wiki/Block_chain\">https://en.bitcoin.it/wiki/Block_chain</a> のような分散システム</li>\n</ul></li>\n<li>IG (Interest Group)\n<ul>\n<li>WoT Servient<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Increments 及川さん</h4>\n    \n<ul>\n<li>\"<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/HTML5\">HTML5</a>\"というキーワードはそろそろ・・</li>\n<li>○○としてのWeb</li>\n<li>アプリケーションとしてのWeb\n<ul>\n<li>各種Web○○<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></li>\n<li>ChromeApp -> ProgressiveWebApp</li>\n<li>WebAssembly</li>\n</ul></li>\n<li>メディアとしてのWeb\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB\">スマホ</a>時代</li>\n<li>ニュースキュレーションアプリの隆盛はモ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4\">バイ</a>ルWebをサボった結果</li>\n<li>そこでAMP</li>\n<li>ただ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>や多数のシステムにまみれた既存企業では対応が難しい現実</li>\n</ul></li>\n<li>プラットフォームとしてのWeb\n<ul>\n<li>http/2</li>\n</ul></li>\n<li>2016はWebを見直す年\n<ul>\n<li>Webは何度死んだと言われたか</li>\n<li>Reinvest / Reinvent Web！</li>\n</ul></li>\n</ul><p>基調講演らしいエモいい話やった。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Reactの最新動向とベストプラクティス</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/koba04/reactfalsezui-xin-dong-xiang-tobesutopurakuteisu\">React&#x306E;&#x6700;&#x65B0;&#x52D5;&#x5411;&#x3068;&#x30D9;&#x30B9;&#x30C8;&#x30D7;&#x30E9;&#x30AF;&#x30C6;&#x30A3;&#x30B9; // Speaker Deck</a></p>\n\n    </blockquote>\n<p>@koba04 せんせー！<br />\n会場のReactを業務で使ってる率はあんまいなかった。</p>\n\n<ul>\n<li>Reactの採用事例\n<ul>\n<li>大きいところはあんまり増えてない・・？</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>Reactでつくるアプリケーション</h4>\n    \n<ul>\n<li>State -> View -> Func -> State -> ...</li>\n<li>宣言的に状態を定義するだけ</li>\n<li>更新差分はVirtualDOMで吸収</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の作り方</h4>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SFC\">SFC</a>(StatelessFunctionalComponent)\n<ul>\n<li>基本的にはコレ</li>\n<li>stateやlifecycleフックがない</li>\n</ul></li>\n<li>React.Component\n<ul>\n<li>Viewに関係ないならstateにいれなくていい</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>プロパティでいい</li>\n</ul></li>\n<li>React.PureComponent\n<ul>\n<li>`shouldComponentUpdate`で`props/state`をShallowEqualで見てくれる</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SFC\">SFC</a>の子への最適化も入るかも？</li>\n<li>パフォーマンスチューニングの時に、計測した上で使えば</li>\n</ul></li>\n<li>createClass\n<ul>\n<li>非推奨ーー</li>\n<li>HOC(HigherOrderComponent)</li>\n<li><a href=\"https://github.com/acdlite/recompose\">https://github.com/acdlite/recompose</a></li>\n<li>`props.children`に関数を渡して拡張するスタイルも</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>State管理</h4>\n    \n<ul>\n<li>親<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>で`state`を、子<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>には`props`を\n<ul>\n<li>親はReact.Component、子は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SFC\">SFC</a></li>\n</ul></li>\n<li>ただし親の`state`が大きくなるとつらい</li>\n<li>そこでReduxとか\n<ul>\n<li>特にメモるようなことはなかった</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>テスト</h4>\n    \n<ul>\n<li>`shallowRender`すればNode環境でもテストできる\n<ul>\n<li>`refs`は使えない</li>\n</ul></li>\n<li><a href=\"https://github.com/thejameskyle/react-test-renderer\">https://github.com/thejameskyle/react-test-renderer</a>\n<ul>\n<li>最近できた</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>その他</h4>\n    \n<ul>\n<li>eslint\n<ul>\n<li><a href=\"https://github.com/yannickcr/eslint-plugin-react\">https://github.com/yannickcr/eslint-plugin-react</a></li>\n</ul></li>\n<li>React Storybook\n<ul>\n<li><a href=\"https://github.com/kadirahq/react-storybook\">https://github.com/kadirahq/react-storybook</a></li>\n</ul></li>\n<li>DevTools\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>この先</h4>\n    \n<ul>\n<li>コアは小さくなっていく\n<ul>\n<li>react / renderer</li>\n</ul></li>\n<li>内部<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0\">アルゴリズム</a>の書き換え（Reconciler）</li>\n<li>優先度をつけた差分検出</li>\n</ul><p>ReactはまぁReactという感じの話やった。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Service Worker Deep Dive</h3>\n    \n    <blockquote>\n        <p><a href=\"https://docs.google.com/presentation/d/19x3yi7Jn-6In5igGYfEiK0tBfNI290BAclT0AiqDj4Q/pub?slide=id.p\">Service Worker Deep Dive - Google &#x30B9;&#x30E9;&#x30A4;&#x30C9;</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Service Wokerとは</h4>\n    \n<ul>\n<li>`navigator.serviceWorker.register()`</li>\n<li>ページのリクエストを横取りしたり</li>\n<li>ページが開かれてなくても通知したり</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Push　Notification</h4>\n    \n<ul>\n<li>FCM(Firebase Cloud Messaging / 旧GCM)サーバーから</li>\n<li>C50から、Pushするpayloadにデータを載せられるように\n<ul>\n<li><a href=\"https://github.com/web-push-libs/web-push\">https://github.com/web-push-libs/web-push</a></li>\n</ul></li>\n<li>C52から、 Voluntary Application Server Identificationでサーバー認証が簡単に\n<ul>\n<li>事前登録いらず</li>\n<li><a href=\"https://tools.ietf.org/html/draft-thomson-webpush-vapid-02\">https://tools.ietf.org/html/draft-thomson-webpush-vapid-02</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Stream</h4>\n    \n<ul>\n<li>C52から対応\n<ul>\n<li>でもコードはそこまで楽にはなってない印象</li>\n<li>むしろStreamを逐次返す処理の分だけコードは増える</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Unified Media Pipeline</h4>\n    \n<ul>\n<li><a href=\"https://developers.google.com/web/updates/2016/06/ump\">https://developers.google.com/web/updates/2016/06/ump</a></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Background Sync</h4>\n    \n<ul>\n<li>オンラインになったら○○</li>\n<li>ブラウザ落としてる間にfetch -> pushとか\n<ul>\n<li>UXとしては微妙なのでは・・</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Foreign Fetch</h4>\n    \n<ul>\n<li>他のサイトBから自サイトAへのリクエストを横取りできる</li>\n<li>`registerForeignFetch()`\n<ul>\n<li>`origin`と`scope`も指定できる</li>\n</ul></li>\n<li>ただしレスポンスを差し替えると、CORSに引っかかる</li>\n<li>ただしC54以降でフラグが必要な実験機能</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>登録方法</h4>\n    \n<ul>\n<li>`navigator.serviceWorker.register()`だけでなく</li>\n<li>HTTPのLink headerでも</li>\n<li>link要素でも</li>\n<li>ただしC54以降でフラグが（ｒｙ</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Origin Trails</h4>\n    \n<ul>\n<li>実験機能を特定のオリジンで一定期間使ってもらおうという試み</li>\n<li><a href=\"https://github.com/jpchase/OriginTrials\">https://github.com/jpchase/OriginTrials</a></li>\n<li>フォームで申請するとトークンがもらえて、それを埋め込むと新機能が使えるように！</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>その他</h4>\n    \n<ul>\n<li>AppCache\n<ul>\n<li>ServiceWorker使おう</li>\n</ul></li>\n<li>DevTools\n<ul>\n<li>開いてる間は、ServiceWorkerが停止しないように</li>\n</ul></li>\n</ul><p>SW、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>で載せてくれるのは何時になるのかー。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>The First Step to Angular 2</h3>\n    \n    <blockquote>\n        <p><a href=\"https://slides.com/laco/first-step-to-angular-land\">The First Step to Angular 2 by laco</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Angular 2とは</h4>\n    <p>らこパイセンのありがたいお話。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Web%C9%B8%BD%E0\">Web標準</a>との親和性\n<ul>\n<li>まだ標準になってないのも多いけどな！</li>\n</ul></li>\n<li>テンプレートへのデータ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0\">バインディング</a>は、`[prop]`\n<ul>\n<li>`[class.foo]` -> `class=\"foo\"`</li>\n<li>`[style.width.px]` -> `style=\"width: xxpx\"`</li>\n</ul></li>\n<li>イベントは`(click)=\"onClick\"`</li>\n<li>100000check / 10msで高速に差分チェックするハイパフォーマンス</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EB%A5%B9%A5%BF\">フルスタ</a>ック & 公式の周辺機器も豊富</li>\n<li>TypeScript\n<ul>\n<li>型もあるし補完も強いし</li>\n<li>型をコンストラクタの引数に渡すだけでDIされる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>基本の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>たち</h4>\n    \n<ul>\n<li>@Component\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の組合せでアプリができあがる</li>\n<li>`styles`は他の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>に影響しない</li>\n</ul></li>\n<li>@Input\n<ul>\n<li>親からデータを受け取るときに</li>\n</ul></li>\n<li>@Output\n<ul>\n<li>親にイベントを飛ばす</li>\n</ul></li>\n<li>@Directive\n<ul>\n<li>要素の拡張</li>\n</ul></li>\n<li>@Pipe\n<ul>\n<li>データの拡張</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a></h4>\n    \n<ul>\n<li>Application</li>\n<li>Platform\n<ul>\n<li>ブラウザなのか、サーバーなのか、Workerなのか</li>\n</ul></li>\n<li>Module\n<ul>\n<li>compiler, injector</li>\n</ul></li>\n<li>Component</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Router</h4>\n    \n<ul>\n<li>いろいろありましたが、Router v3\n<ul>\n<li>RxjsでURLの変更がObservable</li>\n</ul></li>\n<li>ルートは`path: component`で宣言的に定義</li>\n<li>`<routerLink />`と`<router-outlet />`で使う</li>\n</ul><p>`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/tsc\">tsc</a>`も速くなったらしいし、さわってみてもいいかな・・？って一瞬思ったけど、やっぱり正式にリリースされて安定してからでいいかな・・ｗ</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Webパフォーマンス最前線</h3>\n    \n    <blockquote>\n        <p>資料は見つけたら</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>ハイパフォーマンスWebUI</h3>\n    \n<ul>\n<li>モ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4\">バイ</a>ル時代でアプリのように振る舞うWeb</li>\n<li>サイトの要件によって、RAILでも重視するポイントが違う</li>\n<li>描画処理をCPU -> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GPU\">GPU</a>へ</li>\n<li>`translateZ(0)`は諸刃</li>\n<li>`will-change`も必要な時にだけ指定するように！</li>\n<li>rAFでアニメーションの処理</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>スクロール</h3>\n    \n<ul>\n<li>C41からスクロール最適化の取り組みがあった</li>\n<li>`img`要素の`lazyload`属性というのがIE11, Edgeでは使える</li>\n<li>`throttle()`で間引こうとしたりしてきた</li>\n<li>`IntersectionObserver`\n<ul>\n<li><a href=\"https://wicg.github.io/IntersectionObserver/\">https://wicg.github.io/IntersectionObserver/</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>Task最適化</h3>\n    \n<ul>\n<li>`requestIdleCallback()`\n<ul>\n<li><a href=\"http://inside.pixiv.net/entry/2015/12/24/182248\">JS&#x304C;&#x30D6;&#x30E9;&#x30A6;&#x30B6;&#x3092;&#x56FA;&#x3081;&#x3066;&#x3064;&#x3089;&#x3044;&#x306E;&#x3067;&#x3001;&#x65B0;&#x3057;&#x3044;API&#x300C;requestIdleCallback&#x300D;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306B;&#x3057;&#x305F; - pixiv inside</a></li>\n<li>まだ全然<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>でしか使えないけども</li>\n</ul></li>\n<li>昔は`setImmediate()`というものもあってだな・・</li>\n</ul><p>結論、CPUより<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GPU\">GPU</a>使え（ここ2、3年くらいずっと同じこと言ってる気がするけど</p>\n\n</div>\n<div class=\"section\">\n    <h3>Progressive Web Apps の導入基礎</h3>\n    \n    <blockquote>\n        <p>資料は見つけたら</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>ホームに追加</h4>\n    \n<ul>\n<li>Webはアプリより横流れしやすい</li>\n<li>簡単3ステップ\n<ul>\n<li>manifestファイルの用意</li>\n<li>`link rel=\"manifest\"`</li>\n<li>`navigator.serviceWorker.register()`</li>\n</ul></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest\">https://developer.mozilla.org/en-US/docs/Web/Manifest</a></li>\n<li>プロンプトの表示タイミングも調整可能\n<ul>\n<li>`beforeinstallprompt`イベント</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Push通知</h4>\n    \n<ul>\n<li>便利だけどもOFFにする方法もわかりやすくすべき</li>\n<li>`registration.pushManager.getSubscription()`してトークンを</li>\n<li>`push`イベントで受ける\n<ul>\n<li>通知をクリックした = `notificationclick`イベント</li>\n</ul></li>\n<li>サーバーでそのトークンに向けてpush</li>\n<li>通知のPayloadにデータが載せられるのはC50から\n<ul>\n<li>それまでは都度内容をサーバーに確認する</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Offline Cache</h4>\n    \n<ul>\n<li>表示速度が4倍に！</li>\n<li>SWのlifecycle\n<ul>\n<li>Installing</li>\n<li>Installed(Waiting)</li>\n<li>Activating</li>\n<li>Activated</li>\n<li>Redundant</li>\n</ul></li>\n<li>Cache <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/API/Cache\">https://developer.mozilla.org/ja/docs/Web/API/Cache</a></li>\n</ul></li>\n<li>オフラインキャッシュの扱いについて詳しい\n<ul>\n<li><a href=\"https://jakearchibald.com/2014/offline-cookbook/\">https://jakearchibald.com/2014/offline-cookbook/</a></li>\n</ul></li>\n<li>App Shell<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/getting-started/your-first-progressive-web-app/step-01?hl=ja\">App Shell&#x3092;&#x69CB;&#x7BC9;&#x3059;&#x308B; | Web Fundamentals - Google Developers</a></li>\n</ul></li>\n<li>Activedのタイミングで古いCacheは消すなど\n<ul>\n<li>Installingで消しちゃうと、その後のステップで必要になるかもしれない</li>\n</ul></li>\n</ul><p>繰り返しになるけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>で使えたらやるのになー・・。</p>\n\n</div>\n</div>"
}
