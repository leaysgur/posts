{
  "title": "0からはじめる MobX Part.1",
  "html": "<p><iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmobxjs%2Fmobx\" title=\"mobxjs/mobx\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p><p>海外では去年くらいからRedux alternativeとして割と名前が上がってると思うのですが、国内はまだまだもっぱらReduxですねー。</p><p>個人的には何でもいいんですけど、Reduxはもう色んな人がやってるし、自分は違う方面を掘ってみたいなーと思いつつ、<br />\nいつまでたっても仲間が増える気配がないので、自分で布教していくことにした次第！</p><p>ちなみに、趣味案件ではもう使ってて、仕事案件でも使ってみようかなーくらいの熟練度です。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>なにこれ</h3>\n    <p><a href=\"https://twitter.com/mweststrate\" target=\"_blank\">@mweststrate</a>氏作の、いわゆるState managementに使うライブラリ。</p>\n\n    <blockquote>\n        <p>Anything that can be derived from the application state, should be derived. Automatically.</p>\n\n    </blockquote>\n<p>という哲学のもとに生まれたらしい。</p><p>コード見たほうがいろいろ早いと思うのでありそうなコードの要点を書くと、このように。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// Observableな値を用意して</span>\n<span class=\"synStatement\">const</span> appState = observable(<span class=\"synIdentifier\">{</span>\n    timer: 0\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// Observerとして指定したReactのViewで受ければ</span>\n<span class=\"synStatement\">const</span> TimeView = observer(<span class=\"synStatement\">class</span> TimerView <span class=\"synStatement\">extends</span> React.Component <span class=\"synIdentifier\">{</span>\n  render() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> (\n      &lt;div&gt;\n        Seconds passed: <span class=\"synIdentifier\">{this</span>.props.appState.timer<span class=\"synIdentifier\">}</span>\n      &lt;/div&gt;\n    );\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// データを直接！更新するだけでViewに反映される</span>\nsetIterval(() =&gt; <span class=\"synIdentifier\">{</span>\n  appState.timer++;\n<span class=\"synIdentifier\">}</span>, 1000);\n</pre><p>簡単！便利！これがFRPってやつなんですかね？<br />\nちなみにソースはTypeScriptでカッチカチで、なにげに1年以上前から開発されてて、毎日Issueの対応とかしてて、とにかく盛んな感じです。</p><p>というわけでまったくのRedux Alternativesではなくて、あくまでStateとViewの紐付けがいい感じになるやつです。<br />\nFluxライクなデータフローにしたいなら自分でそう書きます。</p>\n\n</div>\n<div class=\"section\">\n    <h3>導入</h3>\n    <p>こんな書き出しですが、Reactは必須じゃないです。<br />\nただだいたいはReactと一緒に使いたいと思うので、今回はそのていで。</p>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>npm i mobx mobx-react <span class=\"synSpecial\">--save</span>\n</pre>\n<ul>\n<li>mobx: いわゆるコア</li>\n<li>mobx-react: React用のバインディング</li>\n</ul><p>ちなみにこのライブラリ、Decoratorsを使ったサンプルが山ほどでてきますが、これも別に必須じゃないです！<br />\n全機能に、ちゃんと代わりの記法があります。</p><p>ただDecoratorsを使ったほうがいろいろすっきり書けるので、まだStage 2ですがそこはお好みで。</p><p>ドキュメントはむちゃくちゃ充実してるので、一通り目を通しておくと吉。</p>\n\n    <blockquote>\n        <p><a href=\"https://mobxjs.github.io/mobx/\">Introduction | MobX</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>最低限知っておけばいいこと</h3>\n    \n<div class=\"section\">\n    <h4>Observableな値の作り方</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// プレーンなオブジェクト</span>\n<span class=\"synStatement\">const</span> store = observable(<span class=\"synIdentifier\">{</span>\n  a: 1,\n  b: <span class=\"synConstant\">'2'</span>,\n  c: <span class=\"synIdentifier\">[</span>3, 4, 5<span class=\"synIdentifier\">]</span>,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// クラス</span>\n<span class=\"synIdentifier\">function</span> Todo(title) <span class=\"synIdentifier\">{</span>\n  extendObservable(<span class=\"synIdentifier\">this</span>, <span class=\"synIdentifier\">{</span>\n    title: <span class=\"synConstant\">'foo'</span>,\n    rate: <span class=\"synIdentifier\">{</span> pr: 30, desc: <span class=\"synConstant\">'hoge'</span> <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// プリミティブなやつ</span>\n<span class=\"synStatement\">const</span> num = observable(20);\n<span class=\"synComment\">// 代入しちゃうとアレなのでそれ用の手段で更新</span>\nnum.set(30);\n</pre><p>プリミティブだろうがオブジェクトだろうが、渡すと再帰的に面倒みてくれます。<br />\nただ`prototype`をもってるやつは、`extendObservable()`で明示的にObservableにしたいプロパティを指定しないとダメです。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ObserverとなるReactコンポーネント</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> Foo <span class=\"synStatement\">extends</span> React.Component <span class=\"synIdentifier\">{}</span>\nmodule.exports = observer(Foo);\n\n<span class=\"synStatement\">const</span> Bar = () =&gt; <span class=\"synIdentifier\">{}</span>;\nmodule.exports = observer(Bar);\n</pre><p>SFCだろうがなんだろうが`observer()`で囲むだけ。</p><p>ちなみに、いかなる子コンポーネントであろうとも、Observableな値を表示するのであれば、`observer()`で囲みます。<br />\nその理由が知りたいならこのリンクを。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/mobxjs/mobx/issues/101\">Do child components need `@observer`? &middot; Issue #101 &middot; mobxjs/mobx &middot; GitHub</a></p>\n\n    </blockquote>\n<p>とりあえずコレだけで、後は全部MobXがいい感じにしてくれる！素敵！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>というわけで</h3>\n    <p>少なくともReduxよりも必要なボイラープレート的コードは少ないのは確かで、そこは優位性なのかなと思ってます。<br />\nReactのViewにデータを配送することを考えると、もちろん自然とFlux（1方向データフローという意味で）的なコードを自分で書くようにはなるんやけど、それでも値を変更するだけでいい！そこだけ集中すればいい！というのは、コードの書き味としていいなと。<br />\n（もちろんいろいろ込み入ってくると覚えないといけないものは出てくるけど）</p><p>そもそもReduxと何が違うねん！とか、どういう用途に向いてる？とかは、そのままのIssueがあったのでコレを読むべし。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/mobxjs/mobx/issues/199\">Understanding MobX and when to use it. &middot; Issue #199 &middot; mobxjs/mobx &middot; GitHub</a></p>\n\n    </blockquote>\n<p><br />\nこの記事は社内勉強会向けに使うスライド代わりなので短めです。<br />\nPart.2として書きたいネタもいくつかあるので、近いうちに書きまーす。</p>\n\n</div>"
}
