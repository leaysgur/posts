{
  "title": "jsx-no-bindだとStateless Functional Componentsでpropsをハンドラに上手く渡せない問題",
  "html": "<p>お前は何を言っているんだみたいなタイトルですが、つまり・・。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 子</span>\n<span class=\"synStatement\">const</span> SFC = (<span class=\"synIdentifier\">{</span>\n  some,\n  vars,\n  and,\n  handler,\n<span class=\"synIdentifier\">}</span>) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> (\n    &lt;div onClick=<span class=\"synIdentifier\">{</span>handler<span class=\"synIdentifier\">}</span>&gt;&lt;/div&gt;\n  );\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// 親</span>\n<span class=\"synStatement\">class</span> Container <span class=\"synStatement\">extends</span> React.Component <span class=\"synIdentifier\">{</span>\n  render() <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// 略</span>\n    &lt;SFC <span class=\"synIdentifier\">{</span>...item<span class=\"synIdentifier\">}</span> handler=<span class=\"synIdentifier\">{this</span>.handler<span class=\"synIdentifier\">}</span> /&gt;\n  <span class=\"synIdentifier\">}</span>\n\n  handler(ev) <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// ココで子に渡したpropsを使ってなんかしたい</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>さてどうしたらいいんだという話。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>jsx-no-bindとは</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md\">eslint-plugin-react/jsx-no-bind.md at master &middot; yannickcr/eslint-plugin-react &middot; GitHub</a></p>\n\n    </blockquote>\n<p>eslint-plugin-reactのルールのひとつで、JSXの中で関数書くな！というやつ。<br />\nこのルールがなければ↓こんな風に書けるので何も困らない。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink>// SFC\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> onClick=</span><span class=\"synConstant\">{(ev)</span><span class=\"synIdentifier\"> =&gt;</span> { handler(ev, vars); }}<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>けど、レンダリングする度にFunctionがスコープを作ってパフォーマンスが云々・・というわけで、せっかくSFC使っておきながらなんか中途半端に甘えを許すみたいな気持ちになる。<br />\nできればこのルールはstrictにtrueなまま運用したいなーと。</p><p>でも`props`渡せないし困るしうーむ。<br />\nさて。</p>\n\n</div>\n<div class=\"section\">\n    <h3>案1: 懐かしいdata属性</h3>\n    <p>上位のハンドラで`ev`は取れるなら、そこを経由すればいいのでは作戦。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink>// SFC\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> onClick=</span><span class=\"synConstant\">{handler}</span><span class=\"synIdentifier\"> </span><span class=\"synType\">data</span><span class=\"synIdentifier\">-vars=</span><span class=\"synConstant\">{vars}</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>こうしちゃえば、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 親</span>\nhandler(ev) <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// 取れる！</span>\n  <span class=\"synStatement\">const</span> vars = ev.currentTarget.getAttribute(<span class=\"synConstant\">'data-vars'</span>);\n<span class=\"synIdentifier\">}</span>\n</pre><p>ただしこれだと文字列しか渡せないので、たぶん後々に困るケースがありそう・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>案2: jsx-no-bindをあきらめる</h3>\n    <p>jsx-no-bindにはオプションが指定できて、`allowArrowFunctions`ってのがある。</p><p>要するに、アローファンクションなら使ってもいいよっていうものなので、これを`true`にすれば最初の例でも怒られない。</p><p>いやでもこれはーなんというかー！</p>\n\n</div>\n<div class=\"section\">\n    <h3>案3: SFCをあきらめる</h3>\n    <p>SFCをやめて、普通にCompomentにすればいける。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 元SFC</span>\n<span class=\"synStatement\">class</span> C <span class=\"synStatement\">extends</span> React.Component <span class=\"synIdentifier\">{</span>\n  constructor() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">super</span>();\n    <span class=\"synIdentifier\">this</span>._handler = <span class=\"synIdentifier\">this</span>._handler.bind(<span class=\"synIdentifier\">this</span>);\n  <span class=\"synIdentifier\">}</span>\n\n  render() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> (\n      &lt;div onClick=<span class=\"synIdentifier\">{this</span>._handler<span class=\"synIdentifier\">}</span>&gt;&lt;/div&gt;\n    );\n  <span class=\"synIdentifier\">}</span>\n\n  _handler(ev) <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> vars, handler <span class=\"synIdentifier\">}</span> = <span class=\"synIdentifier\">this</span>.props;\n    handler(ev, vars);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>いやでもそうなると今度は`prefer-stateless-function`というルールがですね・・。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md\">eslint-plugin-react/prefer-stateless-function.md at master &middot; yannickcr/eslint-plugin-react &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>案4: JSXの外でbindする</h3>\n    <p>それで最終的に思いついたのがコレ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// SFC</span>\n<span class=\"synStatement\">const</span> SFC = (<span class=\"synIdentifier\">{</span>\n  some,\n  vars,\n  and,\n  handler,\n<span class=\"synIdentifier\">}</span>) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ここならJSXの外なので怒られない</span>\n  <span class=\"synStatement\">const</span> _handler = (ev) =&gt; <span class=\"synIdentifier\">{</span> handler(ev, vars); <span class=\"synIdentifier\">}</span>;\n\n  <span class=\"synStatement\">return</span> (\n    &lt;div onClick=<span class=\"synIdentifier\">{</span>_handler<span class=\"synIdentifier\">}</span>&gt;&lt;/div&gt;\n  );\n<span class=\"synIdentifier\">}</span>\n</pre><p>これだー！！</p><p>と思ったけど、これはパフォーマンス的にはいいのか？JSXの中でスコープ作るのと何が違うんやろう？という疑問がわきまして。</p><p>どうするのが最良か、誰かおしえてくれんかなーということで、記事にしてみました。</p>\n\n</div>\n<div class=\"section\">\n    <h3>案5: コンポーネントの外でbindする（ by @yosuke_furukawa</h3>\n    <p>関数を返すハンドラを渡して、動的にやるパターン。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// SFC</span>\n<span class=\"synStatement\">const</span> SFC = (<span class=\"synIdentifier\">{</span>\n  some,\n  vars,\n  and,\n  handler,\n<span class=\"synIdentifier\">}</span>) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> (\n    &lt;div onClick=<span class=\"synIdentifier\">{</span>handler(vars)<span class=\"synIdentifier\">}</span>&gt;&lt;/div&gt;\n  );\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// 親</span>\nhandler(vars) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> (ev) =&gt; <span class=\"synIdentifier\">{</span>\n    vars; <span class=\"synComment\">// 取れる！</span>\n  <span class=\"synIdentifier\">}</span>;\n<span class=\"synIdentifier\">}</span>\n</pre><p>なるほど！天才！って最初は思ったけど、生成後のコードという意味ではあまり変わらんので、書き味の好みでお選びくださいって感じです。<br />\n他のハンドラと並べて見た時に、親でなんでコレだけ関数返してるんやろう・・って気持ちになる人もいるかもしれない！</p>\n\n</div>\n<div class=\"section\">\n    <h3>ちなみにビルドすると</h3>\n    <p>前後は省略してるけど、違いはコレだけ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>  <span class=\"synComment\">// 案2</span>\n  <span class=\"synStatement\">return</span> React.createElement(\n    <span class=\"synConstant\">'div'</span>,\n    <span class=\"synIdentifier\">{</span> onClick: <span class=\"synIdentifier\">function</span> handler(ev) <span class=\"synIdentifier\">{</span>\n          _handler(ev, vars);\n        <span class=\"synIdentifier\">}</span> <span class=\"synIdentifier\">}</span>,\n\n  <span class=\"synComment\">// 案4</span>\n  <span class=\"synIdentifier\">var</span> _handler = <span class=\"synIdentifier\">function</span> _handler(ev) <span class=\"synIdentifier\">{</span>\n    handler(ev, vars);\n  <span class=\"synIdentifier\">}</span>;\n\n  <span class=\"synStatement\">return</span> React.createElement(\n    <span class=\"synConstant\">'div'</span>,\n    <span class=\"synIdentifier\">{</span> onClick: _handler <span class=\"synIdentifier\">}</span>\n</pre><p>`React.createElement()`にどう関数が渡るかだけの違いで、これだけ見るとなんも変わらんよね。</p>\n\n</div>\n<div class=\"section\">\n    <h3>というわけで結論</h3>\n    <p>今のところコレだ！！というパターンはないっぽいので、お好きなやつを使う。</p><p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/leader22\">@leader22</a> <a href=\"https://twitter.com/yosuke_furukawa\">@yosuke_furukawa</a> ShouldComponentUpdateとかPureComponentを使う時に注意する意味あいの方が大きいかな。ただ避けられるなら避けた方がいいので、まぁプラクティスとして設定しておくのはいいと思う。</p>&mdash; Toru Kobayashi (@koba04) <a href=\"https://twitter.com/koba04/status/773820378061819905\">2016年9月8日</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><p>まさかのオチ</p><p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/leader22\">@leader22</a> <a href=\"https://twitter.com/yosuke_furukawa\">@yosuke_furukawa</a> ちなみに <a href=\"https://t.co/szBxRTF5IH\">https://t.co/szBxRTF5IH</a></p>&mdash; Toru Kobayashi (@koba04) <a href=\"https://twitter.com/koba04/status/773821134018011137\">2016年9月8日</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n</div>"
}
