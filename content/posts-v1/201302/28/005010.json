{
  "title": "JavaScriptにおける数値⇔文字列の型変換あれこれ",
  "html": "<p>気になったら即調べるが吉、ということで。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>数値→文字列</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> num = 123;\n\n<span class=\"synComment\">// わかりやすい</span>\n<span class=\"synType\">String</span>(num); <span class=\"synComment\">// &quot;123&quot;</span>\nnum.toString(10); <span class=\"synComment\">// &quot;123&quot;</span>\n\n<span class=\"synComment\">// この用途では使ったこと無い</span>\nnum.toFixed() <span class=\"synComment\">// &quot;123&quot;</span>\n\n<span class=\"synComment\">// なるほど</span>\nnum + <span class=\"synConstant\">''</span>; <span class=\"synComment\">// &quot;123&quot;</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3>文字列→数値</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> str = <span class=\"synConstant\">'123'</span>;\n\n<span class=\"synComment\">// わかりやすい</span>\n<span class=\"synType\">Number</span>(str); <span class=\"synComment\">// 123</span>\nparseInt(str, 10); <span class=\"synComment\">// 123</span>\nparseFloat(str); <span class=\"synComment\">// 123</span>\n\n<span class=\"synComment\">// なるほど</span>\nstr - 0; <span class=\"synComment\">// 123</span>\nstr * 1; <span class=\"synComment\">// 123</span>\nstr / 1; <span class=\"synComment\">// 123</span>\n\n<span class=\"synComment\">// すっきりやけど知らん人は読めない</span>\n+str; <span class=\"synComment\">// 123</span>\n-(-str); <span class=\"synComment\">// 123</span>\n~~str; <span class=\"synComment\">// 123</span>\nstr&amp;-1; <span class=\"synComment\">// 123</span>\nstr|0; <span class=\"synComment\">// 123</span>\nstr^0; <span class=\"synComment\">// 123</span>\nstr&gt;&gt;0; <span class=\"synComment\">// 123</span>\nstr&lt;&lt;0; <span class=\"synComment\">// 123</span>\n\n<span class=\"synComment\">// 使っちゃダメってばっちゃが言ってた</span>\n<span class=\"synComment\">// eval(str) // 123</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3>ありがちなpx→数値変換</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> px = <span class=\"synConstant\">'123px'</span>;\n\n<span class=\"synType\">Number</span>(px); <span class=\"synComment\">// NaN</span>\nparseInt(px, 10); <span class=\"synComment\">// 123</span>\nparseFloat(px); <span class=\"synComment\">// 123</span>\n\npx - 0; <span class=\"synComment\">// NaN</span>\npx * 1; <span class=\"synComment\">// NaN</span>\npx / 1; <span class=\"synComment\">// NaN</span>\n\n+px; <span class=\"synComment\">// NaN</span>\n~~px; <span class=\"synComment\">// 0</span>\n\n<span class=\"synComment\">// eval(px) // SyntaxError: Unexpected token ILLEGAL</span>\n\n<span class=\"synComment\">// 番外</span>\npx.substr(0, px.length-2); <span class=\"synComment\">// 123</span>\npx.split(<span class=\"synConstant\">'px'</span>)<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>; <span class=\"synComment\">// 123</span>\n</pre><p>せっかく関数用意してあるんやから、大人しくそれ使っとけってことですね。<br />\n後から読んでもわかりやすいし。</p>\n\n</div>\n<div class=\"section\">\n    <h3>先頭に0がある文字列→数値変換</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> str = <span class=\"synConstant\">'0123'</span>;\n\n<span class=\"synType\">Number</span>(str); <span class=\"synComment\">// 123</span>\nparseInt(str, 10); <span class=\"synComment\">// 123</span>\nparseFloat(str); <span class=\"synComment\">// 123</span>\n\nstr - 0; <span class=\"synComment\">// 123</span>\nstr * 1; <span class=\"synComment\">// 123</span>\nstr / 1; <span class=\"synComment\">// 123</span>\n\n+str; <span class=\"synComment\">// 123</span>\n~~str; <span class=\"synComment\">// 123</span>\nstr|0; <span class=\"synComment\">// 123</span>\n\neval(str) <span class=\"synComment\">// 83</span>\n</pre><p>evalとはここで別れましょう・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>先頭に半角スペースがある文字列→数値変換</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> str = <span class=\"synConstant\">' 123'</span>;\n\n<span class=\"synType\">Number</span>(str); <span class=\"synComment\">// 123</span>\nparseInt(str, 10); <span class=\"synComment\">// 123</span>\nparseFloat(str); <span class=\"synComment\">// 123</span>\n\nstr - 0; <span class=\"synComment\">// 123</span>\nstr * 1; <span class=\"synComment\">// 123</span>\nstr / 1; <span class=\"synComment\">// 123</span>\n\n+str; <span class=\"synComment\">// 123</span>\n~~str; <span class=\"synComment\">// 123</span>\nstr|0; <span class=\"synComment\">// 123</span>\n\neval(str) <span class=\"synComment\">// 123</span>\n</pre><p>空白はあってないものらしい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>1年経ってみての感想</h3>\n    \n    <blockquote>\n        <p>20140624: なにげにアクセス数があるみたいなので、今のきもちを追記。</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>文字列→数値なら</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synConstant\">'123'</span>|0; <span class=\"synComment\">// 123</span>\n</pre><p>ってすることが多いかなー。<br />\nやっぱりすっきり書けるのが良いですね。<br />\nただ小数点が入っちゃうと挙動が変わってくるので注意。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synConstant\">'123.5'</span>|0; <span class=\"synComment\">// 123</span>\n\n+<span class=\"synConstant\">'123.5'</span>; <span class=\"synComment\">// 123.5</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h4>数値→文字列なら</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synConstant\">''</span>+123; <span class=\"synComment\">// &quot;123&quot;</span>\n</pre><p>かなー。<br />\n正直こんなことする機会ないですね。</p>\n\n</div>\n</div>"
}
