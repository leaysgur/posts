{
  "title": "iOSなどでアニメーションさせるとチラつく",
  "html": "<p>いったい何度同じ過ちを繰り返せば気が済むんだという感じになったのでメモ。</p><br />\n<p>スマートフォンで要素の拡大・縮小やら移動やらするときに気をつけたいのは以下。</p>\n\n<ul>\n<li>GPUアクセラレータが効く方法を選ぶ</li>\n<li>アニメーションさせる要素数を厳選する</li>\n<li>Defferdなど、時と場合によっては擬似的に遅らせたりする</li>\n</ul><p>・・・でもメモしたいのはもっと手前の凡ミス。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>2次元方向の移動だとしても</h3>\n    \n<div class=\"section\">\n    <h4>ダメな例</h4>\n    <pre class=\"code lang-css\" data-lang=\"css\" data-unlink><span class=\"synIdentifier\">.moveX</span> <span class=\"synIdentifier\">{</span>\n    -webkit-transform: translateX(<span class=\"synConstant\">20px</span>);\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synIdentifier\">.moveY</span> <span class=\"synIdentifier\">{</span>\n    -webkit-transform: translateY(<span class=\"synConstant\">20px</span>);\n<span class=\"synIdentifier\">}</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h4>良い例</h4>\n    <pre class=\"code lang-css\" data-lang=\"css\" data-unlink><span class=\"synIdentifier\">.moveX</span> <span class=\"synIdentifier\">{</span>\n    -webkit-transform: translate<span class=\"synConstant\">3</span>d(<span class=\"synConstant\">20px</span>, <span class=\"synConstant\">0</span>, <span class=\"synConstant\">0</span>);\n<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">.moveY</span> <span class=\"synIdentifier\">{</span>\n    -webkit-transform: translate<span class=\"synConstant\">3</span>d(<span class=\"synConstant\">0</span>, <span class=\"synConstant\">20px</span>, <span class=\"synConstant\">0</span>);\n<span class=\"synIdentifier\">}</span>\n</pre><p>3dでのアニメーションだと無理やり指定することで、チラつきが回避できる模様。<br />\nGPUアクセラレータのスイッチが切り替わるタイミングでチラつくらしい。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>で、今回のメモ本題</h3>\n    <p>例えばアニメーションさせるやり方として、JavaScriptで特定のクラスを付与したらアニメーション！っていう場合に、元のアニメーション前の要素に対して、</p>\n<pre class=\"code lang-css\" data-lang=\"css\" data-unlink><span class=\"synIdentifier\">.translate</span> <span class=\"synIdentifier\">{</span>\n    -webkit-transform: translate<span class=\"synConstant\">3</span>d(<span class=\"synConstant\">0</span>, <span class=\"synConstant\">0</span>, <span class=\"synConstant\">0</span>);\n<span class=\"synIdentifier\">}</span>\n</pre><p>としておくと、3dでアニメーション：GPUで！と指定できる・・とやってたけどそもそも。</p>\n<pre class=\"code lang-css\" data-lang=\"css\" data-unlink><span class=\"synIdentifier\">.translate</span> <span class=\"synIdentifier\">{</span>\n    -webkit-transform-style: preserve<span class=\"synConstant\">-3</span>d;\n<span class=\"synIdentifier\">}</span>\n</pre><p>コレで良いらしい。<br />\n今まで見る度に何の意味があんねやろーって思ってたけど、こういうことやったのね！<br />\n(一応この指定をしていこうとは思うものの、なんだかもやもやが残るのよね。)</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://dev.w3.org/csswg/css3-3d-transforms/#transform-style-property\" target=\"_blank\">CSS 3D Transforms</a></p>\n\n    </blockquote>\n<p><br />\nそしてさらに、最近のiOS6はこうなってるらしい。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://indiegamr.com/ios6-html-hardware-acceleration-changes-and-how-to-fix-them/\" target=\"_blank\" title=\"iOS6 html hardware acceleration changes and how to fix them | indiegamr\">iOS6 html hardware acceleration changes and how to fix them | indiegamr</a></p>\n\n    </blockquote>\n<p>なんだか冗長になったわね・・。</p>\n<pre class=\"code lang-css\" data-lang=\"css\" data-unlink><span class=\"synIdentifier\">.translate</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">/*-webkit-transform-style: preserve-3d;*/</span>\n    -webkit-transform: translateZ(<span class=\"synConstant\">0</span>);\n    -webkit-perspective: <span class=\"synConstant\">1000</span>;\n    -webkit-backface-<span class=\"synType\">visibility</span>: <span class=\"synType\">hidden</span>;\n<span class=\"synIdentifier\">}</span>\n</pre>\n</div>\n</div>"
}
