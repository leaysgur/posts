{
  "title": "今さらJavaScriptのクロージャがハラオチした",
  "html": "<p>仕組みはなんとなくわかってても、どこでそんなん使うんやろ？っていう。<br />\n使ってみてこそはじめてわかるというもので。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://lealog.hateblo.jp/entry/2012/04/03/184142\" target=\"_blank\" title=\"JavaScriptのクロージャについて - console.lealog();\">JavaScriptのクロージャについて - console.lealog();</a></p>\n\n    </blockquote>\n<p>関数を返す関数と言ったり、状態を保持する関数とか言ってみたり・・。<br />\nこんな記事を以前書いてましたね。<br />\n書いて概念を知りつつも、実際のところどんな場面で使うんそれ？って思ってました。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>クロージャ</h3>\n    <p>以下のソースにコメントを打って考えます。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>(<span class=\"synIdentifier\">function</span>(win)<span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// クラス名のショートカット </span>\n    <span class=\"synIdentifier\">var</span> classNames = <span class=\"synIdentifier\">{</span>\n      hoge: <span class=\"synConstant\">'hoge'</span>,\n      piyo: <span class=\"synConstant\">'piyo'</span>\n    <span class=\"synIdentifier\">}</span>;\n  \n    <span class=\"synComment\">// このスクリプトのメイン実装</span>\n    <span class=\"synIdentifier\">var</span> Test = <span class=\"synIdentifier\">{</span>\n\n      <span class=\"synComment\">// 公開したい大事な変数たち</span>\n      pub: <span class=\"synConstant\">'var'</span>,\n      pub2: <span class=\"synConstant\">'foo'</span>,\n<span class=\"synComment\">//   prv: true // [2]こんな風にして</span>\n\n      <span class=\"synComment\">// [1]この関数を実装するために、大事じゃないけど変数が欲しくなったら・・？</span>\n      closure: (<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n        <span class=\"synComment\">// [3]関係ないところから参照できるようにしちゃっても良いけど、それはしたくない・・。</span>\n\n        <span class=\"synIdentifier\">var</span> prv = <span class=\"synConstant\">true</span>; <span class=\"synComment\">// [4]ここに宣言して使えればいいけど、毎回初期化されちゃう・・</span>\n        <span class=\"synComment\">// [5]クロージャならそれができる！</span>\n        <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n          prv = !prv;\n          console.log(prv);\n        <span class=\"synIdentifier\">}</span>\n      <span class=\"synIdentifier\">}</span>())\n  \n    <span class=\"synIdentifier\">}</span>;\n\n    Test.closure(); <span class=\"synComment\">// false</span>\n    Test.closure(); <span class=\"synComment\">// true</span>\n    Test.closure(); <span class=\"synComment\">// false &lt;- おお、状態を保持しとる！</span>\n\n    win.Test = Test;\n\n  <span class=\"synIdentifier\">}</span>(<span class=\"synIdentifier\">this</span>));\n</pre><p>今まで関数にばっかり目が行ってましたが、どちらかというと関数内で宣言した変数が状態を保持してるので、そいつが重要なような。</p><p>いつもより関数を1段階深くしてあげるだけで、状態が保持できるようになるお得な感じ！<br />\nこれは使えるヤツやで・・！</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://developer.mozilla.org/ja/docs/JavaScript/Guide/Closures\" target=\"_blank\" title=\"クロージャ - JavaScript | MDN\">クロージャ - JavaScript | MDN</a></p>\n\n    </blockquote>\n\n</div>\n</div>"
}
