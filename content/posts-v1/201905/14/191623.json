{
  "title": "React HooksとMobXをあわせて使う",
  "html": "<p>最近はもっぱらWebRTCの世界にどっぷりでしたが、フロントエンドのこともちゃんとやってます！</p><p>SkyWayにはショーケースとしてWeb会議アプリがあるんですが、それをこの度リライトしてました。</p><p>リライトする理由としては・・・、</p>\n\n<ul>\n<li>当時の設計ままでは改修が面倒なバグが見つかった</li>\n<li>単にUIがダサい</li>\n<li>WebRTCフロントエンドをしばらくやって得たノウハウも反映したい</li>\n</ul><p>などなど、まあ理由つけて書き直した感じです。</p><p>で、どうせ書き直すならってことで、ReactのHooksも使い込みつつ、MobXと混ぜた場合にどうなるか？ってのを味見しました。</p><p>ということを、将来の自分が見返せるようにするためのメモ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>最近のMobXについて</h3>\n    <p>MobXの本体は最新がv5で、これはしばらく変わってないです。<br />\n今のところv6の気配もない・・？</p><p>Reactバインディングである`mobx-react`は、もうすぐv6が出そうで、まだしばらく出ないって感じです。</p><p>ReactのHooksがリリースにあわせて、`mobx-react`でもHooksベースのAPIを提供するための`mobx-react-lite`という別リポジトリができました。<br />\n`mobx-react-lite`は、Hooksを味見したりAPIを提供したり議論したりと、次なる`mobx-react`を開発するためのリポジトリ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/mobxjs/mobx-react-lite\">GitHub - mobxjs/mobx-react-lite: Lightweight React bindings for MobX based on React 16.8 and Hooks</a></p>\n\n    </blockquote>\n<p>で、`mobx-react`のv6で一部のAPIが`mobx-react-lite`から流用されるらしい。<br />\nそれだけ先に欲しい場合は、`mobx-react`のRC版を使えばおっけーで、今回は`6.0.0-rc.4`を使いました。</p><p>`mobx-react-lite`はいろんな実験的なHooksベースのAPIを提供してます。<br />\nただ、それいる・・？純Hooksでよくない？普通にMobX使えばよくない？みたいなAPIも多いので、個人的には様子見・・って感じです。</p><p>`mobx-react`にもあるAPIも、Hooksによって使わなくなるもの、おそらく今後Depricatedされるので使わないほうがよいものなどあるので、あらためて使ってるAPIはこれ！というのも書いておく。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>- mobx@5.9.4\n  - decorate\n  - observable\n  - computed\n  - action\n  - reaction\n  - observe\n- mobx-react@6.0.0-rc.4\n  - Observer</pre><p>`mobx`のほうは正直v4の頃から外部APIは変わってないので、書くことなし。<br />\nいっぱいあるように見えるけど、どれも役割が明確に違うし、どれも必要なのがすぐにわかるはず。</p><p>`mobx-react`は、`Provider`コンポーネントと`inject()`という関数でいわゆるコンテキストを代替してたけど、それがHooksによって不要に。<br />\n`observer()`で片っ端からコンポーネントをラップしてたのもやめて、必要な箇所でだけ`Observer`コンポーネントを使うように。</p><p>というのが個人的なおすすめです。</p>\n\n</div>\n<div class=\"section\">\n    <h3>全体の構造</h3>\n    <pre class=\"code\" data-lang=\"\" data-unlink>.\n├── main.tsx\n├── app.tsx\n├── contexts.ts\n├── stores\n├── effects\n├── observers\n├── components\n└── utils</pre>\n<div class=\"section\">\n    <h4>main / app</h4>\n    <p>`main`はエントリーポイントであり、`App`をマウントするだけ。</p><p>`app`もそのままの`App`コンポーネント。<br />\n`components`や`observers`にあるReactコンポーネントをレイアウト。</p><p>Functionalじゃないコンポーネントはコレだけで、ErrorBoundaryを兼ねるため。</p>\n\n</div>\n<div class=\"section\">\n    <h4>contexts</h4>\n    <p>`createContext()`でいわゆるストアをエクスポート。</p>\n\n</div>\n<div class=\"section\">\n    <h4>stores</h4>\n    <p>グローバルに存在する単一のストア。</p><p>ドメインごとにストアを分けるのがMobX流で、`ui`とか`media`とかいくつか別れてて、互いには依存しない。</p>\n\n</div>\n<div class=\"section\">\n    <h4>effects</h4>\n    <p>そんなストアを操作するための層。</p><p>`useEffect()`や`useCallback()`で利用されるものが全てココにあるし、ここ以外ではストアを更新しない。</p><p>なので型は`EffectCallback`かただの関数だけ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>observers</h4>\n    <p>`mobx-react`の`Observer`コンポーネントによって、ストアに更新があった際にRe-renderされるコンポーネント。</p><p>`useContext()`でストアを取って、`effects`からハンドラを生成して下層にPropsとして配るだけの層。<br />\nスタイルに関する記述は一切なし。</p><p>根っこのコンポーネントでグローバルな`useEffect()`を呼ぶ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>components</h4>\n    <p>型はすべて`FunctionComponent`で、必要ならHooksを使う。</p><p>今まではローカルな状態にもMobXを使ってたけど、`useState()`があるならそっちのほうがいいかなという感じ。<br />\nここに関してはHooks最高！って思った。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>MobX自体いらないのでは？論</h3>\n    <p>最初はそう思ったけど、やっぱりまだまだ使うかなーという結論に落ち着いた。</p><p>そもそもHooksはclassコンポーネントを代替するためのものいう認識。<br />\nそうであるならば、classコンポーネントを使ってた頃に必須だったものが、いきなり不要になるわけはないなーと。</p><p>確かにローカルの状態もHooksでシュッと書けるようになったし、`shouldComponentUpdate()`も`memo()`でさくっと済むし、メリットは減ったかもしれん。<br />\nそれでも全てをローカルコンポーネントに閉じることはできんし、そういう意味でのReact設計論は何一つ変化してないよなーと。</p><p>と、うっすら思ってたら、作者も同じような感じだったのを発見した。</p><p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"en\" dir=\"ltr\">After building a couple of, not too complex, apps with hooks: 1. I really like hooks 2. I&#39;m still thinking about &amp; solving problems with re-rendering &amp; deps that I don&#39;t have when using <a href=\"https://twitter.com/hashtag/mobx?src=hash&amp;ref_src=twsrc%5Etfw\">#mobx</a><br><br>This is a personal take. But the reason I atm still pick <a href=\"https://twitter.com/hashtag/mobx?src=hash&amp;ref_src=twsrc%5Etfw\">#mobx</a> for any non-local state</p>&mdash; Michel Weststrate (@mweststrate) <a href=\"https://twitter.com/mweststrate/status/1111563996975517696?ref_src=twsrc%5Etfw\">2019年3月29日</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><p>このブログでも何回も書いてるけど、やっぱり単一の状態変化から導き出される状態変化を宣言的に書けるのが圧倒的開発UXで、MobXを手放せない個人的な理由かなと思ってる。</p>\n\n    <blockquote>\n        <p>Anything that can be derived from the application state, should be derived. Automatically.</p>\n\n    </blockquote>\n<p>まじで額縁にいれて飾りたい感ある。</p>\n\n<div class=\"section\">\n    <h4>WebRTC = StateFull</h4>\n    <p>そもそもWebRTCとかやってると、シリアライズできない状態がいっぱいあって、そういうのとミュータブルな思想が相性いいってのもあるかも？</p>\n\n<ul>\n<li>接続用の`RTCPeerConnection`\n<ul>\n<li>それをラップしてるであろうSDKのインスタンス</li>\n</ul></li>\n<li>参加者の数だけ送られてくる`MediaStream(Track)`</li>\n<li>自分が送信する`MediaStream(Track)`</li>\n<li>シグナリング用のチャンネル</li>\n<li>etc...</li>\n</ul><p>そういうわけで、結局はコンテキストなり状態管理の外側との濃厚なお付き合いが避けられないので、そのへん柔軟にやれるライブラリと相性が良いのだなあという感じ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>TypeScriptとの相性</h3>\n    <p>TSで書かれてるMobXなのに、なぜかエラーになるシリーズ。<br />\naka 型付け力が足りないので超えられなかった壁たち。</p><p>バグなのか、ミスなのか、仕様なのかわからないので、`@ts-ignore`して運用中のものたち。</p><p>再現コードとエラー内容を載せておく。</p>\n\n<div class=\"section\">\n    <h4>decorate w/ private accessor</h4>\n    <p>そのクラスに`private`がついてるプロパティやメソッドがあるとエラーになる。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> decorate<span class=\"synStatement\">,</span> observable <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;mobx&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">class</span> Store <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">private</span> _name: <span class=\"synType\">string</span><span class=\"synStatement\">;</span>\n\n  <span class=\"synStatement\">constructor()</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>._name <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;ok&quot;</span><span class=\"synStatement\">;</span>\n  <span class=\"synIdentifier\">}</span>\n\n  get name<span class=\"synStatement\">()</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>._name<span class=\"synStatement\">;</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\ndecorate<span class=\"synStatement\">(</span>Store<span class=\"synStatement\">,</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// @ts-ignore: to use private accessor</span>\n  _name: observable\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> Store<span class=\"synStatement\">;</span>\n</pre><p>エラーこちら。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>Argument of type &#39;{ _name: IObservableFactory &amp; IObservableFactories &amp; { enhancer: IEnhancer&lt;any&gt;; }; }&#39; is not assignable to parameter of type &#39;{ prototype?: MethodDecorator | PropertyDecorator | MethodDecorator[] | PropertyDecorator[] | undefined; }&#39;.\n  Object literal may only specify known properties, and &#39;_name&#39; does not exist in type &#39;{ prototype?: MethodDecorator | PropertyDecorator | MethodDecorator[] | PropertyDecorator[] | undefined; }&#39;.</pre>\n</div>\n<div class=\"section\">\n    <h4>observable.shallow w/ decorate and constructor</h4>\n    <p>`ObservableArray`の型がうまく当たらない。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> decorate<span class=\"synStatement\">,</span> observable <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;mobx&quot;</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> IObservableArray <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;mobx&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">class</span> Store <span class=\"synIdentifier\">{</span>\n  items: IObservableArray<span class=\"synStatement\">&lt;</span><span class=\"synType\">string</span><span class=\"synStatement\">&gt;;</span>\n\n  <span class=\"synStatement\">constructor()</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// @ts-ignore: to type IObservableArray</span>\n    <span class=\"synIdentifier\">this</span>.items <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">[]</span><span class=\"synStatement\">;</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\ndecorate<span class=\"synStatement\">(</span>Store<span class=\"synStatement\">,</span> <span class=\"synIdentifier\">{</span>\n  items: observable.shallow\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> Store<span class=\"synStatement\">;</span>\n</pre><p>エラーこちら。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>Type &#39;never[]&#39; is missing the following properties from type &#39;IObservableArray&lt;string&gt;&#39;: spliceWithArray, observe, intercept, clear, and 4 more.</pre>\n</div>\n<div class=\"section\">\n    <h4>Observer does not accept null</h4>\n    <pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> * <span class=\"synStatement\">as</span> React <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;react&quot;</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> FunctionComponent <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;react&quot;</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> Observer <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;mobx-react&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">const</span> Chat: FunctionComponent<span class=\"synStatement\">&lt;</span><span class=\"synIdentifier\">{}</span><span class=\"synStatement\">&gt;</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> <span class=\"synStatement\">(</span>\n    <span class=\"synStatement\">&lt;</span>Observer<span class=\"synStatement\">&gt;</span>\n      <span class=\"synIdentifier\">{</span><span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n        <span class=\"synStatement\">if</span> <span class=\"synStatement\">(</span>xxx<span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n          <span class=\"synComment\">// return null;</span>\n          <span class=\"synStatement\">return</span> <span class=\"synStatement\">&lt;&gt;&lt;</span>/<span class=\"synStatement\">&gt;;</span>\n        <span class=\"synIdentifier\">}</span>\n\n        <span class=\"synStatement\">return</span> <span class=\"synStatement\">&lt;</span>div /<span class=\"synStatement\">&gt;;</span>\n      <span class=\"synIdentifier\">}}</span>\n    <span class=\"synStatement\">&lt;</span>/Observer<span class=\"synStatement\">&gt;</span>\n  <span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n</pre><p>エラーこちら。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>Type &#39;() =&gt; Element | null&#39; is not assignable to type &#39;() =&gt; ReactElement&lt;any, string | ((props: any) =&gt; ReactElement&lt;any, string | ... | (new (props: any) =&gt; Component&lt;any, any, any&gt;)&gt; | null) | (new (props: any) =&gt; Component&lt;any, any, any&gt;)&gt;&#39;.\n  Type &#39;Element | null&#39; is not assignable to type &#39;ReactElement&lt;any, string | ((props: any) =&gt; ReactElement&lt;any, string | ... | (new (props: any) =&gt; Component&lt;any, any, any&gt;)&gt; | null) | (new (props: any) =&gt; Component&lt;any, any, any&gt;)&gt;&#39;.\n    Type &#39;null&#39; is not assignable to type &#39;ReactElement&lt;any, string | ((props: any) =&gt; ReactElement&lt;any, string | ... | (new (props: any) =&gt; Component&lt;any, any, any&gt;)&gt; | null) | (new (props: any) =&gt; Component&lt;any, any, any&gt;)&gt;&#39;.</pre><p>どれもワークアラウンドはあるし、実害はないので良いっちゃ良いけど、やっぱりちょっと嫌。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>ReactのHooksの最初のとっつきにくいオーラは半端なかったけど、使い慣れてくるとその気持ちもわかってきて、中々に良いですね。</p><p>ってもまあそんなにあれこれ駆使するわけではなく、基本的なやつしか使ってないし、使うつもりもないんやけど。</p>\n\n<ul>\n<li>`useEffect()`であれこれいっぺんにやらない</li>\n<li>ちゃんと処理を細分化して複数のEffectにする</li>\n<li>ちゃんとDisposeできるよう返す</li>\n</ul><p>みたいなHooks哲学が他のコードにも活きてくる（というかそうしないと居心地わるい）のは、思わぬ収穫だったかも。</p>\n\n</div>"
}
