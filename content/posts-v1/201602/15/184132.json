{
  "title": "Angular UI-Routerで、ui-viewな要素が増えていく",
  "html": "<p>という奇怪な出来事に遭遇したのでその原因と対策をメモ。</p><p>`angular ui-view dupulicate`とか調べてる人には一見の価値ありかもしれません。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>きっかけ</h3>\n    \n<ul>\n<li>Angularのui-routerを使ってるページで</li>\n<li>特定のstateに遷移すると</li>\n<li>ui-view=\"foo\"を指定してる要素が増える</li>\n</ul><p>DOMのイメージとしては、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> ui-view=</span><span class=\"synConstant\">&quot;foo&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> ui-view=</span><span class=\"synConstant\">&quot;foo&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> ui-view=</span><span class=\"synConstant\">&quot;foo&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> ui-view=</span><span class=\"synConstant\">&quot;foo&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> ui-view=</span><span class=\"synConstant\">&quot;foo&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>みたいになる。<br />\n本来の正常な動作であれば、要素は1つだけ残ってその中身だけが置き換わるはず。</p>\n\n</div>\n<div class=\"section\">\n    <h3>原因</h3>\n    <p>というか、調べてみてわかった仕組みからの推察。<br />\nDOMの置換まわりがおかしいのは明確なので、どういうロジックでDOMを触ってるかを調べる。</p>\n\n<div class=\"section\">\n    <h4>ui-viewディレクティブ</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/angular-ui/ui-router/blob/legacy/src/viewDirective.js\">https://github.com/angular-ui/ui-router/blob/legacy/src/viewDirective.js</a></p>\n\n    </blockquote>\n<p>ディレクティブを処理してるコードがここ。</p><p>L:203あたりで、stateが変わるタイミングになんやかんやしてるのがわかる。<br />\n肝心のDOMにさわってるのはL:243あたり。</p><p>説明するためにコードをそのまま貼って、ちょっと並び替える。<br />\nここで、`previousEl`とか`currentEl`とかなってるのが今回の獲物。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">function</span> cleanupLastView() <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">var</span> _previousEl = previousEl;\n  <span class=\"synIdentifier\">var</span> _currentScope = currentScope;\n\n  <span class=\"synStatement\">if</span> (_currentScope) <span class=\"synIdentifier\">{</span>\n    _currentScope._willBeDestroyed = <span class=\"synConstant\">true</span>;\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synStatement\">if</span> (currentEl) <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// rendererってなんぞ</span>\n    renderer.leave(currentEl, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      cleanOld();\n      previousEl = <span class=\"synStatement\">null</span>;\n    <span class=\"synIdentifier\">}</span>);\n\n    previousEl = currentEl;\n  <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">else</span> <span class=\"synIdentifier\">{</span>\n    cleanOld();\n    previousEl = <span class=\"synStatement\">null</span>;\n  <span class=\"synIdentifier\">}</span>\n\n  currentEl = <span class=\"synStatement\">null</span>;\n  currentScope = <span class=\"synStatement\">null</span>;\n\n\n  <span class=\"synIdentifier\">function</span> cleanOld() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">if</span> (_previousEl) <span class=\"synIdentifier\">{</span>\n      _previousEl.remove(); <span class=\"synComment\">// これで消してるなら消えるはず・・</span>\n    <span class=\"synIdentifier\">}</span>\n\n    <span class=\"synStatement\">if</span> (_currentScope) <span class=\"synIdentifier\">{</span>\n      _currentScope.$destroy();\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h4>rendererとはなんだ問題</h4>\n    <p>ui-routerのstateが切り替わるときに、アニメーションで遷移させたい！需要があったんでしょうね。<br />\nその対応をするために、rendererってのを噛ませて、`**-leave`とか`**-enter`ってクラス名を捌いたり、アニメーションの処理をしてる。</p><p>ドキュメントこれ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions#how-to-animate-ui-view-with-ng-animate\">Frequently Asked Questions &middot; angular-ui/ui-router Wiki &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>そしてng-animate</h4>\n    <p>今回の罠にハマるのは、おそらくng-animateを読み込んでるプロジェクト。<br />\nなんで突然ng-animateの話になるかというと、このrendererの処理がこいつの存在によって変わるから。</p><p>L:155あたりが正にそれで、ng-animateがある場合はコールバックがPromise.then()で処理されるようになってる。<br />\nこのコールバックの処理がさっき見てた古いui-viewなDOMを削除してるとこ。</p><p>で、この削除のロジックを通ってるならDOMは消えるはずーってことでブレークポイント張ってみるも、待てども待てども処理されない！<br />\nどうやら直前のif文をかいくぐってるっぽい。</p><p>というわけで、古いDOMを`remove()`する処理の判定が走るはずのところが、ng-animateの非同期な処理のせいでズレて、古いui-viewな要素が消えず、どんどん増えていく、と。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>対策</h3>\n    <p>ようはng-animateがない場合の処理を通せばいいわけなので・・。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// [0] そもそもDIしない</span>\nangular.module(<span class=\"synConstant\">'app'</span>, <span class=\"synIdentifier\">[</span><span class=\"synComment\">/* 'ng-animate' */</span><span class=\"synIdentifier\">]</span>);\n\n<span class=\"synComment\">// [1] まとめてOFF</span>\n$animate.enabled(<span class=\"synConstant\">false</span>);\n\n<span class=\"synComment\">// [2] 個別にOFF</span>\n$animate.enabled(el, <span class=\"synConstant\">false</span>); <span class=\"synComment\">// el = ui-viewなやつ</span>\n</pre><p>もしくは、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synComment\">&lt;!-- [3] noanimation=&quot;true&quot; --&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> ui-view=</span><span class=\"synConstant\">&quot;foo&quot;</span><span class=\"synIdentifier\"> noanimation=</span><span class=\"synConstant\">&quot;true&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>この方式が一番シンプルで良いなーと思ったら、<br />\nこの`noanimation`方式なんと2016-02-07リリースの、いわゆる最新バージョンの0.2.18で追加されたやつ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>Angularガチ勢への道のりは遠いですね。</p>\n\n</div>"
}
