{
  "title": "Node学園 33時限目 に行ってきたメモ #tng33",
  "html": "<p>久しぶりにリクルートに来た。</p><p>41Fのホールへは、23Fで乗り換えです。<br />\n22Fで降りると上行きのエレベーターが来なくて詰みます！！！<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>JSX hacks 汎用木構造データ生成機としてのJSX 〜JSXをHTML以外に活用する〜 by shibukawa</h3>\n    \n    <blockquote>\n        <p><a href=\"https://docs.google.com/presentation/d/1Tw_yJLTxC9Lgw3FuI_Ajt_TaIqMYqVBN-fl_ZohwwDo\">JSX hacks - Google &#x30B9;&#x30E9;&#x30A4;&#x30C9;</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>はじめに</h4>\n    \n<ul>\n<li>フューチャーという会社からきました\n<ul>\n<li><a href=\"https://www.future.co.jp/\">&#x30D5;&#x30E5;&#x30FC;&#x30C1;&#x30E3;&#x30FC;&#x682A;&#x5F0F;&#x4F1A;&#x793E;</a></li>\n</ul></li>\n<li>B2Bの会社で</li>\n<li>著名な本をいろいろ書かれています</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>JSXとは</h4>\n    \n<ul>\n<li>Reactのキモ\n<ul>\n<li><a href=\"https://facebook.github.io/jsx/\">JSX | XML-like syntax extension to ECMAScript</a></li>\n</ul></li>\n<li>JavaScriptの中にHTMLが書ける\n<ul>\n<li>今までも似たような取り組みはあったが、どれよりも満足度が高い</li>\n</ul></li>\n<li>コンポーネント作成の生産性が高い\n<ul>\n<li>小さくイミュータブルに作るなどトレンドも相まって</li>\n</ul></li>\n<li>JSXが出力するHTMLは木構造\n<ul>\n<li>これをなにかに使えないか・・？</li>\n</ul></li>\n<li>構文解析やシンタックスハイライト、エラー検出などはもともとできてる\n<ul>\n<li>出力する部分だけ自作すれば、自作DSLを作るよりも安いのでは</li>\n</ul></li>\n<li>書いたタグが関数呼び出しに変換される\n<ul>\n<li>子要素は引数になって渡っていく</li>\n</ul></li>\n<li>自作レンダラー\n<ul>\n<li>作り込むのはちょっと大変（それ用のAPIを使い込む</li>\n<li>差分検出とかしないなら簡単</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>自作してみた</h4>\n    \n<ul>\n<li>JSONを返す`createElement()`を作る</li>\n<li>とりあえずできた\n<ul>\n<li>JSONが出たらそれをYAMLに変換するとかも容易い</li>\n</ul></li>\n<li>けどユースケースが増えてきて機能が足りないと気づく\n<ul>\n<li>`docker-compose.yml`とかで便利に使おうとすると</li>\n</ul></li>\n<li>Excelもできた\n<ul>\n<li>npmに`xslx`というのがある</li>\n<li><a href=\"http://sheetjs.com/opensource\">SheetJS - Open Source</a></li>\n</ul></li>\n<li>Excel方眼紙もできた\n<ul>\n<li>ちょっと便利だった</li>\n<li>しかしテキストボックスとかを駆使した神Excelにはまだ届かず</li>\n</ul></li>\n<li>エラーメッセージを出す仕組みを入れるとデバッグに便利だった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>まとめ</h4>\n    \n<ul>\n<li>1週間くらいでこれができた</li>\n<li>0から自作するよりも圧倒的に楽\n<ul>\n<li>要素を1つ追加するだけでも大変</li>\n</ul></li>\n<li>構造化データと1:1の変換だけだとあまり美味しくない</li>\n<li>コードはそのうち公開するかも</li>\n</ul><p>Real World HTTPのミニ版が近日中に公開されるそうです！<br />\nって言ってたらされましたすごい！</p>\n\n    <blockquote>\n        <p><a href=\"https://www.oreilly.co.jp/books/9784873118789/\">O&#39;Reilly Japan - Real World HTTP &#x30DF;&#x30CB;&#x7248;</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Yahoo!ニュースにおけるBFFパフォーマンスチューニング事例 by Mt.Tomo32, @gladenjoy, @oTheRwoRldy</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.slideshare.net/techblogyahoo/yahoobff\">Yahoo!&#x30CB;&#x30E5;&#x30FC;&#x30B9;&#x306B;&#x304A;&#x3051;&#x308B;BFF&#x30D1;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30F3;&#x30B9;&#x30C1;&#x30E5;&#x30FC;&#x30CB;&#x30F3;&#x30B0;&#x4E8B;&#x4F8B;</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>NewsWeb</h4>\n    \n<ul>\n<li>Yahoo!ニュース配下の1部ページを担うWebアプリ</li>\n<li>React/Reduxのクライアントと、expressのサーバー</li>\n<li>Javaで作ったけど、SSRが必要になったのでNodeに書き換え</li>\n<li>パフォーマンス要件\n<ul>\n<li>4000req/s以上</li>\n<li>99パーセンタイルが1秒以下、80パーセンタイルが0.5秒以下</li>\n</ul></li>\n<li>リクエストの元はすべてNodeが捌いている\n<ul>\n<li>エッジにいるのはCDNではない！</li>\n</ul></li>\n<li>ベンチマークはApacheBenchで</li>\n<li>ベンチの結果は想像以上に遅かった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>どうしよう</h4>\n    \n<ul>\n<li>勘でデバッグするのではなく、ちゃんとボトルネックを特定したい</li>\n<li>思いついた案\n<ul>\n<li>`console.time()`とか？</li>\n<li><a href=\"https://github.com/45deg/node-sjsp\">https://github.com/45deg/node-sjsp</a></li>\n</ul></li>\n<li>プロファイルを取ってみるべしとの天啓を得た\n<ul>\n<li>`node --prof`で作成</li>\n<li>`node --process-prof`で読める形にフォーマット</li>\n</ul></li>\n<li>その結果、`fs`関連が怪しそうとわかった</li>\n<li>コードレベルで特定していく\n<ul>\n<li><a href=\"https://github.com/mapbox/flamebearer\">https://github.com/mapbox/flamebearer</a></li>\n<li>`node --inspect`</li>\n</ul></li>\n<li>原因わかった\n<ul>\n<li>axiosのキャッシュ取り出しで`JSON.parse()`が使われていた</li>\n<li>`Intl.DateTimeFormat`</li>\n<li>InversifyJSの挙動を勘違いしてた + コンストラクタ内に`readFileSync()`書かれてた</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>改善していく</h4>\n    \n<ul>\n<li>axiosのキャッシュ\n<ul>\n<li>アダプタを自作した</li>\n<li>文字列ではなくオブジェクトをそのままキャッシュするように</li>\n</ul></li>\n<li>`Intl.DateTimeFormat`\n<ul>\n<li>`Date.toUTCString`に変えてもらった</li>\n<li>パフォーマンスの差は1000倍もあった・・</li>\n</ul></li>\n<li>DIコンテナ\n<ul>\n<li>シングルトンになるようにした</li>\n<li>アプリ起動時に、全コンテナのコンストラクタを初期化しておく</li>\n</ul></li>\n<li>他</li>\n<li>Clusterモジュールの利用\n<ul>\n<li>`--inspect`があるときは利用しないと開発しやすい</li>\n</ul></li>\n<li>HTTPのキープアライブを有効に\n<ul>\n<li>TCPのハンドシェイクをスキップできる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>改めてベンチマーク</h4>\n    \n<ul>\n<li>Clusterモジュールがすごい</li>\n<li>改善前は174インスタンスが必要だったのが、12インスタンスで足りるように</li>\n<li>レスポンスも問題ない</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>まとめ</h4>\n    \n<ul>\n<li>思い込みと想像で対処するのではなく、ちゃんとボトルネックを</li>\n<li>今後も継続してチューニングしていきたい</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>金無し、時間はコマ切れ、リーンにやりたい。そんなチームが使う、リアルな技術選定と、Typescriptの型情報をフロント/サーバーで共有したい需要 by @dublook</h3>\n    \n    <blockquote>\n        <p>資料は見つけたら</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>はじめに</h4>\n    \n<ul>\n<li>電子書籍の会社で経営企画のお仕事</li>\n<li>コードも書いてるし、副業でも書いてる</li>\n<li>リーンスタートアップ</li>\n<li>そういうフィールドにおける技術選定について</li>\n<li>本当に好きなマンガだけが100%読めるサービスを作ろうと思った</li>\n<li>Kindleのマンガの巻数はすごいけど、コードはあまり書かない3人で</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>どうやって好きなマンガを調べるか</h4>\n    \n<ul>\n<li>対面レコメンド\n<ul>\n<li>どんなマンガが聞いて、それでおすすめする</li>\n<li>精度はすごい</li>\n<li>スケールしない</li>\n</ul></li>\n<li>LINE@でレコメンド\n<ul>\n<li>同じく会話した上でおすすめする</li>\n<li>裏側は人間がやってる</li>\n</ul></li>\n<li>Kindleに2000冊くらい貯めてる人のマンガにフォーカス\n<ul>\n<li>その人たちのリストを使ってレコメンド</li>\n<li>仕事のようにマンガを仕分けている人々なので間違いない</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ここで技術選定</h4>\n    \n<ul>\n<li>AWS, S3, Lambda</li>\n<li>Vue.js</li>\n<li>型欲しいのでサーバー側でTS使うように</li>\n<li>便利なのでクライアントでもこの型定義を使いたい\n<ul>\n<li>コピペは確かに手軽で便利</li>\n<li>`package.json`のdepsにGitHubのリポジトリ名が書ける <- コレで</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>DCL15秒の見れないサイトを3秒まで改善した話。改善継続中 by @mahiguch1</h3>\n    \n    <blockquote>\n        <p>資料は見つけたら</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>はじめに</h4>\n    \n<ul>\n<li>グリーの関連会社からきました</li>\n<li>メディア系の事業をやってる会社\n<ul>\n<li><a href=\"https://limia.jp/\">&#x4F4F;&#x307E;&#x3044;&#x30FB;&#x66AE;&#x3089;&#x3057;&#x60C5;&#x5831;&#x306E;LIMIA(&#x30EA;&#x30DF;&#x30A2;)&#xFF5C;100&#x5747;DIY&#x4E8B;&#x4F8B;&#x3084;&#x7BC0;&#x7D04;&#x53CE;&#x7D0D;&#x8853;&#x304C;&#x6E80;&#x8F09;</a></li>\n</ul></li>\n<li>リリースから1年、しばらく経ったときに気づいた</li>\n<li>機能追加が積もり積もって、気づけばDOMContentLoadedまで15秒かかるようになってた</li>\n<li>直さないと！！</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>現状を把握</h4>\n    \n<ul>\n<li>投稿画面はTypeScriptで手書き</li>\n<li>Reactを使ってるところもある</li>\n<li>広告のタグはテンプレにべた書き</li>\n<li>表示が遅すぎて、広告が表示されない事態になってた</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>改善 #1</h4>\n    \n<ul>\n<li>`script`タグをまとめるとか</li>\n<li>非同期にできるものをそうしたり</li>\n<li>無駄にデカい画像を小さくしたり</li>\n<li>5%くらい改善された</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>改善 #2</h4>\n    \n<ul>\n<li>依存してたもののバージョンアップをした\n<ul>\n<li>TypeScript/Gulp/Node</li>\n</ul></li>\n<li>なぜか劇的に改善された</li>\n<li>理由はわからない\n<ul>\n<li>会場: ざわ...</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>改善 #3</h4>\n    \n<ul>\n<li>Webpackのバージョンアップ</li>\n<li>これも改善につながった\n<ul>\n<li>TreeShakingとか？</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>PromiseとNode.jsで解説する Smart Payment Button by PayPal 岡村さん</h3>\n    \n    <blockquote>\n        <p>資料は見つけたら</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>今日お話すること</h4>\n    \n<ul>\n<li>PayPalの新しくなった実装方法について\n<ul>\n<li><a href=\"https://developer.paypal.com/\">PayPal Developer Documentation - PayPal Developer</a></li>\n</ul></li>\n<li>レガシーな決済システムに思われがちだが最近がんばってます！\n<ul>\n<li>UIを改善したりAPIを改善したり</li>\n</ul></li>\n<li>JavaScriptだけで完結する\n<ul>\n<li>Nodeでサーバーサイドでも</li>\n</ul></li>\n<li>Qiitaに日本語のサマリを書く活動もしています\n<ul>\n<li><a href=\"https://qiita.com/PPJP\">PPJP - Qiita</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>デモ</h4>\n    \n<ul>\n<li>インコンテキストという方式\n<ul>\n<li>ポップアップで決済できる</li>\n<li>ページ遷移しないから離脱しない</li>\n</ul></li>\n<li>Sandbox環境あるよ</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>コードについて</h4>\n    \n<ul>\n<li>`Promise`サポートされてます\n<ul>\n<li>よくある決済完了画面へのリダイレクトがない</li>\n</ul></li>\n<li>サーバーサイドも同じく</li>\n<li>JS-SDKのカスタマイズをGETパラメータで制御できる\n<ul>\n<li>依存するライブラリとか</li>\n</ul></li>\n<li>内部的にGraphQLを採用してパフォーマンスUP\n<ul>\n<li>GraphQLへのあれこれを綴った発表もした</li>\n</ul></li>\n</ul><p>PayPalにもUGがあって、Facebookとconnpassで活動していますとのこと。</p>\n\n</div>\n</div>"
}
