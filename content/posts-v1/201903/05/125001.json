{
  "title": "Node.jsでBufferを読み取る",
  "html": "<p>プロトコルの実装でよく出てくるやつのまとめです。</p><p>Node.jsの`Buffer`を通して得た、オクテットバイトストリームってやつを対象に。</p><p>普通に`Buffer`のメソッドを使うこともあるし、特定のバイトからビットを取り出すこともあるはずで、そのバリエーションのメモ。</p><p>もうバリエーションはないかもしれないけど、また見つけたら追記する。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>バイト単位で読み取る</h3>\n    <p>一番シンプルな読み出しのパターン。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> first1Byte = buf<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>;\n</pre><p>というようにインデックスで対象の1バイトが取れる。</p><p>その他は、APIのリストにある`readXxx()`系のメソッドを使う。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 1バイトなのでBEもLEも関係ない</span>\n<span class=\"synStatement\">const</span> byte0_1 = buf.readUInt8(0);\n\n<span class=\"synStatement\">const</span> byte0_2 = buf.readUInt16BE(0);\n<span class=\"synStatement\">const</span> byte2_4 = buf.readUInt16BE(2);\n\n<span class=\"synStatement\">const</span> byte0_4 = buf.readUInt32BE(0);\n</pre><p>という具合で、読み取り位置をオフセットで指定する。<br />\nまだ実装経験が浅いけど、おそらく`readUIntXXBE()`系のメソッドしか使わなさそう。</p>\n\n    <blockquote>\n        <p><a href=\"https://nodejs.org/api/buffer.html\">Buffer | Node.js v18.3.0 Documentation</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>4byteより大きい読み取り</h4>\n    <p>`readUIntXXBE()`系のメソッドは、32bit = 4byteまでしか用意されてない。</p><p>そこで使うのが`readUIntBE()`・・ではあるが、これも最大で6byteまでしか読み取れない。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> byte0_2 = buf.readUIntBE(0, 2);\n<span class=\"synStatement\">const</span> byte0_6 = buf.readUIntBE(0, 6);\n\n<span class=\"synStatement\">const</span> byte0_7 = buf.readUIntBE(0, 7); <span class=\"synComment\">// RangeError!</span>\n</pre><p>それ以上を一気に読み取りたい場合どうするか。</p>\n\n</div>\n<div class=\"section\">\n    <h4>6byteより大きい読み取り</h4>\n    <p>まあほとんどの場合はそれを数値ではなく、その中身をそのまま使いたいとかなはず。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> byte0_8 = buf.slice(0, 8);\n\n<span class=\"synStatement\">const</span> last2Byte = buf.slice(-2);\n</pre><p>それ用のメソッドが`slice()`です。</p><p>その後は`toString()`するか、そのまま使うことが多いはず。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ビット単位で読み取る</h3>\n    <p>ここから先は、バイトではなくビットが欲しい場合。<br />\nビットが欲しい = `1`か`0`が知りたいということになる。</p>\n\n<div class=\"section\">\n    <h4>先頭1bitの値を得る</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synStatement\">byte</span> = buf<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>;\n<span class=\"synStatement\">const</span> first1Bit = (<span class=\"synStatement\">byte</span> &amp; 0x80) &gt;&gt;&gt; 7;\n</pre>\n<ul>\n<li>16進数の`0x80`は、10進数で`128`で、2進数で`10000000`\n<ul>\n<li>先頭だけが`1`の8bit</li>\n</ul></li>\n<li>それを`&`で演算すると、同じ桁が`1`のところだけ`1`が残る\n<ul>\n<li>先頭は`1`なら`1`が残る、他の桁は`0`になる</li>\n</ul></li>\n<li>それを`>>> 7`、つまり右から7桁捨てる\n<ul>\n<li>残るのは2進数で`1`か`0`、10進数でも`1`か`0`</li>\n</ul></li>\n<li>なので先頭1bitが`0`か`1`が取れる</li>\n</ul><p>という仕組み。</p>\n\n</div>\n<div class=\"section\">\n    <h4>うしろ4bitの値を得る</h4>\n    <p>さっきの応用といえば応用。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synStatement\">byte</span> = buf<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>;\n<span class=\"synStatement\">const</span> last4Bit = <span class=\"synStatement\">byte</span> &amp; 0x0f;\n</pre>\n<ul>\n<li>16進数の`0x0f`は、10進数で`15`、2進数で`1111`\n<ul>\n<li>つまり8bitでかくと`00001111`</li>\n</ul></li>\n<li>それを`&`で演算すると、上4桁は`0000`に固定できる\n<ul>\n<li>下4桁は`1`なら`1`になるし、`0`なら`0`のまま残る</li>\n</ul></li>\n<li>最終的に、2進数で`1111`から`0000`の範囲の値が取れる\n<ul>\n<li>= 10進数の`15`から`0`の範囲の値</li>\n</ul></li>\n</ul><p>つまり欲しいビットの桁だけを`1`にしたやつで`&`演算すれば、その値がわかるということ。</p><p>たとえばうしろ7bitが欲しいなら、2進数の`01111111`つまり16進数の`0x7f`で`&`すればいい。</p>\n\n<ul>\n<li>うしろ1bit: `& 0x01`</li>\n<li>うしろ2bit: `& 0x03`</li>\n<li>うしろ3bit: `& 0x07`</li>\n<li>うしろ4bit: `& 0x0f`</li>\n<li>うしろ5bit: `& 0x1f`</li>\n<li>うしろ6bit: `& 0x3f`</li>\n<li>うしろ7bit: `& 0x7f`</li>\n</ul><p>という感じ。</p>\n\n</div>\n</div>"
}
