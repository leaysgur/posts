{
  "title": "React NativeでNativeからのイベントをSwiftで受けて使うには",
  "html": "<p>またも何が言いたいんだみたいなタイトルですがようは、</p>\n\n<ul>\n<li>Native側で特定のタイミングでイベント発火</li>\n<li>それをjs側で監視</li>\n</ul><p>それを、Swiftでどう書けばできるようになるのかというメモです。<br />\nまたもドキュメントにはObj-Cのことしか書いてません。</p>\n\n    <blockquote>\n        <p><a href=\"http://facebook.github.io/react-native/docs/native-modules-ios.html#sending-events-to-javascript\">Native Modules</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>必要なファイル</h3>\n    <p>これは普通にNativeのブリッジをSwiftで用意したときと一緒で、以下3つ。</p>\n\n<ul>\n<li>`XXX.swift`で実装</li>\n<li>`XXX.m`でエクスポート</li>\n<li>`MyProject-Bridging-Header.h`でつなぐ</li>\n</ul><p>書くまでもないけどエクスポートするのをお忘れなく・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>`MyProject-Bridging-Header.h`</h3>\n    <pre class=\"code lang-objc\" data-lang=\"objc\" data-unlink><span class=\"synPreProc\">#import </span><span class=\"synConstant\">&quot;RCTEventEmitter.h&quot;</span>\n</pre><p>イベント用のモジュールをインポートするだけ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>`XXX.swift`</h3>\n    <p>3ステップです。</p>\n\n<div class=\"section\">\n    <h4>1. クラスの元をかえる</h4>\n    <pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synComment\">// @objc(XXX) class XXX: NSObject {}</span>\n<span class=\"synType\">@objc</span>(XXX) <span class=\"synPreProc\">class</span> <span class=\"synType\">XXX</span><span class=\"synSpecial\">:</span> <span class=\"synType\">RCTEventEmitter</span> {}\n</pre><p>といった具合に、`NSObject`を元にしてたのを、`RCTEventEmitter`に変更します。</p>\n\n</div>\n<div class=\"section\">\n    <h4>2. 必要なイベントを定義</h4>\n    <pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synStatement\">override</span> <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">supportedEvents</span>() <span class=\"synSpecial\">-&gt;</span> <span class=\"synPreProc\">[String]</span><span class=\"synIdentifier\">!</span> {\n  <span class=\"synStatement\">return</span> [<span class=\"synConstant\">&quot;onend&quot;</span>]\n}\n</pre><p>この`supportedEvents`ってのを定義して、発火するイベント名を配列で予め定義しておく必要があるみたい。<br />\nコレをサボるとコンパイルでコケます。</p>\n\n</div>\n<div class=\"section\">\n    <h4>3. イベント発火</h4>\n    <p>あとは好きなタイミングで発火するだけ。</p>\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synIdentifier\">self</span>.sendEventWithName(<span class=\"synConstant\">&quot;onend&quot;</span>, body<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;fooooo&quot;</span>)\n</pre><p>`self`でアクセスするの気持ち悪くて最初は別クラスにしてたけど、なぜかそれだと上手くいかず。<br />\nSwiftっていうかReact Nativeが絡んだせいでなんか色々制約があってコケてるんやと思うけどよーわからん！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>jsで受ける</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span>\n  NativeModules,\n  NativeEventEmitter,\n<span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'react-native'</span>;\n<span class=\"synStatement\">const</span> myEv = <span class=\"synStatement\">new</span> NativeEventEmitter(NativeModules.XXX);\n\n<span class=\"synStatement\">const</span> subscription = myEv.addListener(<span class=\"synConstant\">'onend'</span>, (payload) =&gt; <span class=\"synIdentifier\">{</span>\n  console.log(JSON.stringify(payload, <span class=\"synStatement\">null</span>, 2));\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// いらなくなったら</span>\nsubscription.remove();\n</pre><p>もっとSwiftまわりのドキュメント充実させてくれーーーー</p>\n\n</div>"
}
