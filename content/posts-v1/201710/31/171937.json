{
  "title": "Result outputs go wrong with using async tasks in `{before,after}xxx` #jest",
  "html": "\n<ul>\n<li>beforeAll</li>\n<li>afterAll</li>\n<li>beforeEach</li>\n<li>afterEach</li>\n</ul><p>jestではこの4つがあるけど、この中で非同期処理をすると、途端にテスト実行時のログの体裁がおかしくなるという話。</p><p>あと、`--forceExit`というオプションを組み合わせるとまた違った体裁になってよーわからんという話。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>同期処理だけの正常パターン</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>beforeAll(() =&gt; <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">'beforeAll'</span>);\n<span class=\"synIdentifier\">}</span>);\nbeforeEach(() =&gt; <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">'beforeEach'</span>);\n<span class=\"synIdentifier\">}</span>);\nafterEach(() =&gt; <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">'afterEach'</span>);\n<span class=\"synIdentifier\">}</span>);\nafterAll(() =&gt; <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">'afterAll'</span>);\n<span class=\"synIdentifier\">}</span>);\n\ndescribe(<span class=\"synConstant\">'d1'</span>, () =&gt; <span class=\"synIdentifier\">{</span>\n  test(<span class=\"synConstant\">'t11'</span>, () =&gt; <span class=\"synIdentifier\">{</span> expect(<span class=\"synConstant\">'ok'</span>); <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\ndescribe(<span class=\"synConstant\">'d2'</span>, () =&gt; <span class=\"synIdentifier\">{</span>\n  test(<span class=\"synConstant\">'t21'</span>, () =&gt; <span class=\"synIdentifier\">{</span> expect(<span class=\"synConstant\">'ok'</span>); <span class=\"synIdentifier\">}</span>);\n  test(<span class=\"synConstant\">'t22'</span>, () =&gt; <span class=\"synIdentifier\">{</span> expect(<span class=\"synConstant\">'ok'</span>); <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\ndescribe(<span class=\"synConstant\">'d3'</span>, () =&gt; <span class=\"synIdentifier\">{</span>\n  test(<span class=\"synConstant\">'t31'</span>, () =&gt; <span class=\"synIdentifier\">{</span> expect(<span class=\"synConstant\">'ok'</span>); <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>これを普通に実行すると、ログは想定通りこうなる。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>pass  __tests__/foo.test.js\n d1\n   ✓ t11 (2ms)\n d2\n   ✓ t21\n   ✓ t22 (1ms)\n d3\n   ✓ t31 (1ms)\n\n console.log __tests__/foo.test.js:4\n   beforeAll\n\n console.log __tests__/foo.test.js:8\n   beforeEach\n\n console.log __tests__/foo.test.js:13\n   afterEach\n\n console.log __tests__/foo.test.js:8\n   beforeEach\n\n console.log __tests__/foo.test.js:13\n   afterEach\n\n console.log __tests__/foo.test.js:8\n   beforeEach\n\n console.log __tests__/foo.test.js:13\n   afterEach\n\n console.log __tests__/foo.test.js:8\n   beforeEach\n\n console.log __tests__/foo.test.js:13\n   afterEach\n\n console.log __tests__/foo.test.js:16\n   afterAll\n\ntest suites: 1 passed, 1 total\ntests:       4 passed, 4 total\nsnapshots:   0 total\ntime:        0.874s, estimated 1s</pre><p>何の問題もない。</p>\n\n<ul>\n<li>テストのファイル別結果</li>\n<li>`console.log`</li>\n<li>テスト全体に関する情報</li>\n</ul><p>という感じで見やすい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>非同期処理を`{before,after}xxx`でやるパターン</h3>\n    <p>ただし、非同期をまぜると途端に出力されるログがおかしくなる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> sleep = msec =&gt; <span class=\"synStatement\">new</span> promise(resolve =&gt; settimeout(resolve, msec));\n\n<span class=\"synComment\">// ここだけ変えてみる</span>\nbeforeEach(done =&gt; <span class=\"synIdentifier\">{</span>\n  sleep(100).then(() =&gt; <span class=\"synIdentifier\">{</span>\n    console.log(<span class=\"synConstant\">'beforeEach'</span>);\n    done();\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>各テストの直前で100ms待つように。</p><p>すると、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>  console.log __tests__/foo.test.js:4\n    beforeAll\n\n  console.log __tests__/foo.test.js:8\n    beforeEach\n\n  console.log __tests__/foo.test.js:13\n    afterEach\n\n  console.log __tests__/foo.test.js:8\n    beforeEach\n\n  console.log __tests__/foo.test.js:13\n    afterEach\n\n  console.log __tests__/foo.test.js:8\n    beforeEach\n\n  console.log __tests__/foo.test.js:13\n    afterEach\n\n pass  __tests__/foo.test.js\n  d1\n    ✓ t11 (107ms)\n  d2\n    ✓ t21 (102ms)\n    ✓ t22 (106ms)\n  d3\n    ✓ t31 (102ms)\n\ntest suites: 1 passed, 1 total\ntests:       4 passed, 4 total\nsnapshots:   0 total\ntime:        1.04s\n  console.log __tests__/foo.test.js:8\n    beforeEach\n\n  console.log __tests__/foo.test.js:13\n    afterEach\n\n  console.log __tests__/foo.test.js:16\n    afterAll</pre><p>というようになる。<br />\nさっきとログの体裁が違う！なんで！</p><p>Promiseのところは`async / await`にしても同じ結果になる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// こっちでも</span>\nbeforeEach(async done =&gt; <span class=\"synIdentifier\">{</span>\n  await sleep(100);\n  console.log(<span class=\"synConstant\">'beforeEach'</span>);\n  done();\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// こっちでも一緒だった</span>\nbeforeEach(async () =&gt; <span class=\"synIdentifier\">{</span>\n  await sleep(100);\n  console.log(<span class=\"synConstant\">'beforeEach'</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>ログが気持ち悪い。</p>\n\n</div>\n<div class=\"section\">\n    <h3>forceExitをつけて実行する</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/facebook/jest/issues/1456\">Jest process doesn&rsquo;t quit after last test completes &middot; Issue #1456 &middot; facebook/jest &middot; GitHub</a></p>\n\n    </blockquote>\n<p>このissueにもあるように、処理が終わらないとjestの実行も終わらない場合がある。<br />\nそんな時に、強制終了したいよねって話で、`--forceExit`ってオプションがある。</p><p>さっきの非同期コードにこれを使うと・・、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>console.log __tests__/foo.test.js:4\n  beforeAll\n\nconsole.log __tests__/foo.test.js:8\n  beforeEach\n\nconsole.log __tests__/foo.test.js:11\n  afterEach\n\nconsole.log __tests__/foo.test.js:8\n  beforeEach\n\nconsole.log __tests__/foo.test.js:11\n  afterEach\n\nconsole.log __tests__/foo.test.js:8\n  beforeEach\n\nconsole.log __tests__/foo.test.js:11\n  afterEach\n\npass  __tests__/foo.test.js\nd1\n  ✓ t11 (108ms)\nd2\n  ✓ t21 (102ms)\n  ✓ t22 (105ms)\nd3\n  ✓ t31 (101ms)\n\ntest suites: 1 passed, 1 total\ntests:       4 passed, 4 total\nsnapshots:   0 total\ntime:        1.043s</pre><p>と、`afterAll`が呼ばれてないのに終わる・・ように見える。<br />\nただし実際は`afterAll`は動いてるっぽく、適当に`fs.writeFile`とかやるとわかる。<br />\nけど、ログには出ない。謎。</p><p>これはバグなのかなんなのか・・。</p>\n\n</div>"
}
