{
  "title": "PWA Night vol.15 ～テクニック/API～ に行ってきたメモ #pwanight",
  "html": "\n    <blockquote>\n        <p><a href=\"https://pwanight.connpass.com/event/172303/\">PWA Night vol.15 &#xFF5E;&#x30C6;&#x30AF;&#x30CB;&#x30C3;&#x30AF;/API&#xFF5E; - connpass</a></p>\n\n    </blockquote>\n<p>オンライン登壇の実績を解除した・・・！<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Next.js x AMP by @yosuke_furukawa</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/yosuke_furukawa/nextjs-x-amp\">nextjs_x_AMP.pdf - Speaker Deck</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>はじめに</h4>\n    \n<ul>\n<li>Next.jsとは\n<ul>\n<li>Reactのフレームワーク</li>\n<li>zeitという会社がつくってる</li>\n</ul></li>\n<li>AMPとは\n<ul>\n<li>Accelerated Mobile Pages</li>\n<li>用意されたタグを使って、ルールに準拠したページを作ると、キャッシュしてもらえる</li>\n<li>`amp-validator`でチェックされる</li>\n</ul></li>\n<li>AMPのタグ\n<ul>\n<li>結構な種類のタグがあるので、割となんでもできる</li>\n<li>ただGoogleにホスティングされたものを使うことになる\n<ul>\n<li>障害が出たら、もれなくページに影響が出る・・・</li>\n</ul></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Next.js x AMP</h4>\n    \n<ul>\n<li>Next.jsでSSRして、AMPを使う事例をリリースした\n<ul>\n<li>AMPは使うけど、AMP Cacheは使わない</li>\n<li>ちょっと特殊な使い方かも</li>\n</ul></li>\n<li>Next.jsでは、`withAmp()`でコンポーネントを囲むだけでAMP対応できる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Next.jsのクセ</h4>\n    \n<ul>\n<li>prodモードとdevモードで挙動が異なる</li>\n<li>静的なページの場合\n<ul>\n<li>prod: 事前にHTMLに変換されてSSRの処理をスキップ</li>\n<li>dev: 毎回ビルドされて、SSRされる</li>\n</ul></li>\n<li>静的なページかどうかは、`getInitialProps()`が生えてるかどうか\n<ul>\n<li>あるなら動的、ないなら静的</li>\n</ul></li>\n<li>すべてのページを静的にするのは、現実的ではない\n<ul>\n<li>incrementalにビルドできないので</li>\n<li><a href=\"https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support\">https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support</a></li>\n<li>新しい機能が検討されてるところ</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>AMP Validator</h4>\n    \n<ul>\n<li>Next.jsで開発している間、内部的に常にチェックしてくれる</li>\n<li>ただ常に怒られる</li>\n<li>ので、条件指定してignoreできるようにPRを出した</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>AMP Optimizer</h4>\n    \n<ul>\n<li>AMPのレンダリングを高速化してくれる便利なやつ\n<ul>\n<li>フォントのプリロードとか</li>\n</ul></li>\n<li>ただしprodモードでは、SSR中に必ず実行される</li>\n<li>しかし重い</li>\n<li>そもそもSSRが重いのに、さらに重い</li>\n<li>これもカスタマイズできるようにPRを出した</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>その他</h4>\n    \n<ul>\n<li>不満\n<ul>\n<li>ベストプラクティスのスコアが低い</li>\n<li>型がない</li>\n</ul></li>\n<li>不満はあるし制約も多いけど、エッジの技術はそういうもの</li>\n<li>世界にもまだない問題が多いので、チャレンジングではある</li>\n</ul><p>会長「俺が世界を1mmでも良くする！」</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ブラウザの新しいAPIで遊んでみる by @kan_dai</h3>\n    \n    <blockquote>\n        <p>資料は見つけたら</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Barcode Detection API</h4>\n    \n<ul>\n<li>QRコードリーダーをつくった\n<ul>\n<li>以前に作ったやつを再実装した</li>\n<li><a href=\"https://github.com/KanDai/simple-qr-reader\">https://github.com/KanDai/simple-qr-reader</a></li>\n<li>Chromeでフラグを立てる必要あり</li>\n</ul></li>\n<li>処理の流れ\n<ul>\n<li>まず`getUserMedia()`で端末のカメラの映像を取得</li>\n<li>`new BarcodeDetector()`して、`detect(videoElement)`すると読み取れる</li>\n<li>`rawValue`で値までそのまま取れる</li>\n</ul></li>\n<li>canvasに渡してピクセル解析する必要がなくなった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Face Detection API</h4>\n    \n<ul>\n<li>ブラウザでかんたんにFaceトラッキングできるAPI</li>\n<li>全体的な顔の位置だけでなく、ランドマークとして目や鼻などの位置までわかる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Text Detection API</h4>\n    \n<ul>\n<li>同様に、文字を認識できる</li>\n<li>日本語の読み取りはいまいちだが、英数字はなかなかの精度</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Media Session API</h4>\n    \n<ul>\n<li>音楽プレーヤーの再生中の情報や、曲送りなどが実装できる</li>\n<li>PWAで作れば、バックグラウンドでも使える</li>\n<li>`navigator.mediaSession.setActionHandler(type, callback)`</li>\n</ul><p>いろんなAPI使って、いろんなものを作りましょう！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>APIs around the WebRTC by @leader22</h3>\n    \n    <blockquote>\n        <p><a href=\"https://leader22.github.io/slides/pwa_night-15/#1\">APIs around the WebRTC</a></p>\n\n    </blockquote>\n<p>自分の発表なのでスライドだけ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>LT: 最近あったbugの話 by @ko_kelvin</h3>\n    \n    <blockquote>\n        <p>資料は見つけたら</p>\n\n    </blockquote>\n\n<ul>\n<li>最近あったバグの共有をします</li>\n<li>WorkboxとかServiceWorkerとか</li>\n<li>Workboxとは\n<ul>\n<li><a href=\"https://developers.google.com/web/tools/workbox\">https://developers.google.com/web/tools/workbox</a></li>\n<li>ServiceWorkerを使うときのベストプラクティスが詰まったツール</li>\n<li>webpackの設定を書くだけでいい</li>\n<li>最近は機能追加がすすんで、バンドルサイズが増えた</li>\n</ul></li>\n<li>なのでそれを減らしたい\n<ul>\n<li>React LazyでDynamic importしたりして</li>\n</ul></li>\n<li>しかし謎のバグが</li>\n<li>新しいタブで開いたほうのSWが、古いタブの動きに影響してた</li>\n</ul><p>みなさんも`skipWaiting`と`clientsClaim`の指定や、Dynamic importするときはお気をつけて！</p>\n\n</div>"
}
