{
  "title": "GoogleChrome/sw-precache が便利そう",
  "html": "<p>知ってた人には今さらーって感じかもやけど。</p><p>正月休み最後の日ということで、何か新しい目のやつを学びたいなあと思い。<br />\nServiceWorkerでできることやデザインについては追ってたつもりやったけど、実際にコード書いたことはないなということで。</p><p>スーパーイカメーカーとかいう丁度よい題材も手元にあることやので、これにServiceWorkerを適応するならどんな感じかとやってみた。<br />\nただ結局リリースはしてなくて、その紆余曲折もまとめてメモ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>ServiceWorkerでやりたかったこと</h3>\n    <p>主にはCache <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>によるオフライン対応。<br />\nもはや更新の予定がないのでプッシュ通知もいらないし、他のテクいことにも使えなさそう。</p><p>最初は勉強がてら手書きで全部いこうかと思ったけど、細かいとこまで考慮しようとすると色んなイベントで色んなことが必要なのと、キャッシュしたいパスをコードに手書きするのはアレやなーってところで、`sw-precache`なるツールがあるのを発見。</p><p><iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FGoogleChrome%2Fsw-precache\" title=\"GoogleChrome/sw-precache\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p><p>これは便利なのでは・・！</p>\n\n</div>\n<div class=\"section\">\n    <h3>sw-precache</h3>\n    \n<ul>\n<li>設定ファイルにキャッシュしたいパスやら設定を指定</li>\n<li>それでもって実行すると、`serviceworker.js`が生成される</li>\n<li>あとはそれを`navigator.ServiceWorker.register()`でロード</li>\n</ul><p>静的コンテンツのキャッシュのためだけのツールチェインやけど、今回の要件には必要十分。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// sw-precache-config.js</span>\nmodule.exports = <span class=\"synIdentifier\">{</span>\n  swFile: <span class=\"synConstant\">'sw.js'</span>,\n  staticFileGlobs: <span class=\"synIdentifier\">[</span>\n    <span class=\"synConstant\">'**.html'</span>,\n    <span class=\"synConstant\">'dist/**.*'</span>,\n    <span class=\"synConstant\">'font/**/*'</span>,\n    <span class=\"synConstant\">'img/**/*'</span>,\n  <span class=\"synIdentifier\">]</span>,\n  cacheId: <span class=\"synConstant\">'v1'</span>,\n<span class=\"synIdentifier\">}</span>;\n</pre><p>ってのを用意したうえで、これを実行。</p>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>sw-precache <span class=\"synSpecial\">--config=./sw-precache-config.js</span> <span class=\"synSpecial\">--verbose</span>\n</pre><p>すると、この場合は`sw.js`ってのが生成される。<br />\nあとはクライアントで読み込むだけ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/GoogleChrome/sw-precache/blob/master/demo/app/js/service-worker-registration.js\">sw-precache/service-worker-registration.js at master &middot; GoogleChrome/sw-precache &middot; GitHub</a></p>\n\n    </blockquote>\n<p>これの通りにやっとけばよさそう。</p><p>ちなみに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>からじゃなくてgulpからももちろん使える。</p>\n\n</div>\n<div class=\"section\">\n    <h3>リリースしなかったわけ</h3>\n    \n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>で使えないから</h4>\n    <p>GAによるとユーザーの7割が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>なのですが、そこで動かんならあんまり意味ないし、今さらバグが出た！とかなっても直すモチベーションがないｗ</p>\n\n</div>\n<div class=\"section\">\n    <h4>既存の作りとの兼ね合い</h4>\n    <p>トップページ -> ボーイ or ガールを作るページっていう2段構えになってて、</p>\n\n<ul>\n<li>トップひらく</li>\n<li>規約よむ</li>\n<li>そこからページ遷移</li>\n</ul><p>ってのを強制してるので、ページ遷移が必要 = SPAではないのです。</p><p>で、どうせオフライン対応するなら`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/apple\">apple</a>-mobile-web-app-capable`的なこともしたい・・、でも作り直すのは面倒よなーと。<br />\nそもそも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>でホームに追加しようと思ったらなんたら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DE%A5%CB%A5%D5%A5%A7%A5%B9%A5%C8\">マニフェスト</a>とかも必要よね、これは1日で終わらんし、いろいろやっぱ面倒くさい。</p>\n\n</div>\n<div class=\"section\">\n    <h4>完全にオフライン対応するには</h4>\n    <p>例えばGAのjsとかCDNから読んでるファイルとか、いわゆる3rdな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>に対するリクエストも制御できるように作らないとダメ。<br />\nこれは後からさくっとやってさくっと対応！みたいな話ではない。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ServiceWorkerの学び方</h3>\n    <p>ことCacheするだけの場合で、今日一日振り返って見て何してたか。</p>\n\n<div class=\"section\">\n    <h4>1. ライフサイクルを覚える</h4>\n    <p>これを知らんと始まらない。<br />\nけど、全てを細かく覚えるのではなくて、ServiceWorkerのデザインとしてどういうタイミングでどういう動きをするかをざっと把握する。<br />\n本当に必要なのは後のコード書くときに嫌でも出てくるので。</p>\n\n</div>\n<div class=\"section\">\n    <h4>2. 開発の仕方を覚える</h4>\n    <p>ページをリロードしてもupdateされないとかそういうの。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>ならDevToolsのどこの何を見れば良いかとかを知っておく。</p><p>ApplicationパネルにServiceWorkerとCacheとそれぞれあるのでだいたいわかると思うけど。</p><p>ちなみに最初は無理かと思ってたけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/localhost\">localhost</a>でも開発できた。</p>\n\n</div>\n<div class=\"section\">\n    <h4>3. コードの書き方を覚える</h4>\n    <p>以上のステップを経た上でサンプルコードを眺める。<br />\nだいたいは`self.addEventListener()`をいくつか書くだけなんやけど・・。</p><p>sw-precacheで出力したファイルとか最初に見とけばよかった。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/GoogleChrome/sw-precache/blob/master/service-worker.tmpl\">sw-precache/service-worker.tmpl at master &middot; GoogleChrome/sw-precache &middot; GitHub</a></p>\n\n    </blockquote>\n<p>2017年のアプリ開発は、最初の設計の時点でこういうオフライン対応も見据えて色々やらんといかんのかねー。<br />\nどのタイミングでキャッシュを破棄するとか、どうすればできるとか、そのへんも考えておかないと後で困りそう。</p><p>なんしかこの`sw-precache`、ServiceWorkerをどう使ってく？っていう手札の中では一番<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1\">コスパ</a>が良いものな気がしてます。<br />\nプッシュ通知は通知サーバーの用意とか通知と許可取るタイミングを考えるの大変やし・・。</p>\n\n</div>\n</div>"
}
