{
  "title": "MobX 3.0.0 の変更点について",
  "html": "\n    <blockquote>\n        <p><a href=\"https://medium.com/@mweststrate/mobx-3-released-unpeeling-the-onion-ca877382f443\">MobX 3 released: Unpeeling the onion &ndash; Michel Weststrate &ndash; Medium</a></p>\n\n    </blockquote>\n<p>作者の @mweststrate 氏による記事も出てましたねー。</p><p>`2.7.0`まで理想的な使い方をしてきたなら、特に大きな変更があるわけではないバージョンアップです。<br />\nただにわかに人気が出つつある気もするので、長いことMobX使ってるマンとして書いておきまーす。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>変更点まとめ</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/mobxjs/mobx/blob/master/CHANGELOG.md#300\">mobx/CHANGELOG.md at master &middot; mobxjs/mobx &middot; GitHub</a></p>\n\n    </blockquote>\n<p>詳しくは↑のログを見てもらうとして、個人的に大きなのは、</p>\n\n<ul>\n<li>APIの刷新\n<ul>\n<li>`observable`な値の作り方が変わった</li>\n<li>Modifierが消えた</li>\n</ul></li>\n<li>Bound actions</li>\n<li>エラーハンドリングの強化</li>\n<li>その他</li>\n</ul><p>って感じですね。</p>\n\n</div>\n<div class=\"section\">\n    <h3>APIの刷新</h3>\n    <p>MobX的Observableな値を作るためのコードスタイルが少し変わります。</p>\n\n<div class=\"section\">\n    <h4>タイプごとの`observable.*`</h4>\n    <p>`2.7.0`までのMobXは、どんな型の値でも共通のAPIでObservable化してました。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 2.7.0</span>\n<span class=\"synStatement\">const</span> arr = observable(<span class=\"synIdentifier\">[]</span>);\n<span class=\"synStatement\">const</span> obj = observable(<span class=\"synIdentifier\">{}</span>);\n</pre><p>これが、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 3.0.0</span>\n<span class=\"synStatement\">const</span> arr = observable.array(<span class=\"synIdentifier\">[]</span>);\n<span class=\"synStatement\">const</span> obj = observable.object(<span class=\"synIdentifier\">{}</span>);\n\n<span class=\"synStatement\">const</span> any = observable(<span class=\"synIdentifier\">{}</span>);\n</pre><p>という用に、APIとしても型を明示できるようになりました。<br />\nっても中の挙動は変わってないし、`observable()`をそのまま使えば値によって今まで通りに使えます。</p>\n\n</div>\n<div class=\"section\">\n    <h4>さよならModifier</h4>\n    <p>`2.7.0`までのMobXは、渡されたオブジェクトを勝手に「再帰的に」Observableにしてました。<br />\nAPIからの返り値をただ入れておきたいみたいな場合、巨大なJSONを再帰されても・・ってな場合には、Modifierを使ってました。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 2.7.0</span>\n<span class=\"synComment\">// 再帰</span>\nobservable(response)\n\n<span class=\"synComment\">// 1階層だけ</span>\nobservable(asFlat(response))\n</pre><p>ただこのModifier、APIのデザインとして適当・・？っていう話が前からあり。<br />\n左辺で定義したいとか、flatってなんやねんとか、そもそもいらねーんじゃねーのとか。</p><p>今回のAPI刷新に伴い、ここも変更されました。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 3.0.0</span>\n<span class=\"synComment\">// 再帰</span>\nobservable.object(response)\n\n<span class=\"synComment\">// 1階層だけ</span>\nobservable.shallowObject(response)\n</pre><p>Observableな値を作るには、`observable.*()`なメソッドを使うということで、よりわかりやすくなりました。<br />\nこの`observable.*`を何層か組合せて実現していくのを、オニオンアーキテクチャというらしい。冒頭の記事のタイトルにもなってる考え方ですね。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 2.7.0</span>\n<span class=\"synStatement\">class</span> Store <span class=\"synIdentifier\">{</span>\n  constructor() <span class=\"synIdentifier\">{</span>\n    extendObservable(<span class=\"synIdentifier\">this</span>, <span class=\"synIdentifier\">{</span>\n      foo: asFlat(<span class=\"synIdentifier\">[]</span>),\n      bar: asMap(<span class=\"synIdentifier\">{}</span>),\n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// 3.0.0</span>\n<span class=\"synStatement\">class</span> Store <span class=\"synIdentifier\">{</span>\n  constructor() <span class=\"synIdentifier\">{</span>\n    extendObservable(<span class=\"synIdentifier\">this</span>, <span class=\"synIdentifier\">{</span>\n      foo: observable.shallow(<span class=\"synIdentifier\">[]</span>),\n      bar: observable.map(<span class=\"synIdentifier\">{}</span>),\n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>`extendObservable`の場合もこのような感じ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>生き残りModifier</h4>\n    <p>↑のコードを見て、`shallow`にはしたいけど型不定な場合どうしたらいいの？とか、Decorators派なんですけど・・って人もいるので、</p>\n\n<ul>\n<li>`observable.deep`</li>\n<li>`observable.ref`</li>\n<li>`observable.shallow`</li>\n</ul><p>この3つは引き続きModifierとして使えます。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 2.7.0</span>\n<span class=\"synStatement\">class</span> Store <span class=\"synIdentifier\">{</span>\n  constructor() <span class=\"synIdentifier\">{</span>\n    extendObservable(<span class=\"synIdentifier\">this</span>, <span class=\"synIdentifier\">{</span>\n      todos: asFlat(<span class=\"synIdentifier\">[]</span>)\n    <span class=\"synIdentifier\">}</span>)\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">class</span> DecoStore <span class=\"synIdentifier\">{</span>\n  @observable todos = asFlat(<span class=\"synIdentifier\">[]</span>)\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// 3.0.0</span>\n<span class=\"synStatement\">class</span> Store <span class=\"synIdentifier\">{</span>\n  constructor() <span class=\"synIdentifier\">{</span>\n    extendObservable(<span class=\"synIdentifier\">this</span>, <span class=\"synIdentifier\">{</span>\n      todos: observable.shallow(<span class=\"synIdentifier\">[]</span>)\n    <span class=\"synIdentifier\">}</span>)\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">class</span> DecoStore <span class=\"synIdentifier\">{</span>\n  @observable.shallow todos = <span class=\"synIdentifier\">[]</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p><br />\nちなみにModifierは、`@observable`、`extendObservable`、`observable.object`でしか使いません。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h4>オブジェクトもクローンされるように</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 3.0.0</span>\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> observable <span class=\"synIdentifier\">}</span> = mobx;\n\n<span class=\"synStatement\">const</span> a = <span class=\"synIdentifier\">{</span> x: 1 <span class=\"synIdentifier\">}</span>;\n<span class=\"synStatement\">const</span> o = observable(a);\n\no.x = 2;\n\nconsole.log(a.x === o.x) <span class=\"synComment\">// false</span>\n</pre><p>`2.7.0`までは、これが`true`でした。</p><p>まあそんなに驚きはない・・かと。<br />\nArrayとかMapは今までクローンされてたので、こっちのほうが自然ですね。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Bound actions</h3>\n    <p>個人的に欲しかったやーつ。<br />\n公式のログからまるっと持ってきましたが、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> Ticker <span class=\"synIdentifier\">{</span>\n  @observable tick = 0\n\n  @action.bound increment() <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>.tick++ <span class=\"synComment\">// 'this' will always be correct</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">const</span> ticker = <span class=\"synStatement\">new</span> Ticker()\nsetInterval(ticker.increment, 1000)\n</pre><p>というわけで、`@action`の明示と`bind(this)`がまとめてできるように！<br />\nいやー`action`化するのと`bind`するので`prototype`を2周するのアレだったんですよねー。</p><p>ちなみに、`action`化するというのは・・、<br />\n`MobX.useStrict(true)`することで、`action`化されたメソッド以外でObservableな値を変更すると警告が出る（そのおかげで関心の分離ができる）ようになります。<br />\nそのため、このメソッドは`action`ですと明示することが必要で、それです。</p>\n\n</div>\n<div class=\"section\">\n    <h3>エラーハンドリングの強化</h3>\n    <p>`2.7.0`までのMobXは、なんかエラーや例外があったときに、catchしてwarningをログに出してくれてました。<br />\nただこうしてしまうと、MobXに問題があるのか、ユーザーが書いたコードに問題があってのものなのか、見分けがつきにくかったです。そしてだいたいMobXに問題は無い。</p><p>`3.0.0`からのMobXは、なんの警告も出さなくなって、エラーハンドリングは全てユーザーに委ねられるようになります。</p>\n\n</div>\n<div class=\"section\">\n    <h3>その他</h3>\n    <p>他にもBreakingな変更もあるんですけど、そこまで影響ないと思うので割愛。</p>\n\n<ul>\n<li>DepricatedなAPIがいろいろ消えたり</li>\n<li>Flowで型の恩恵が得られるようになったり</li>\n</ul><p>もしてます。<br />\nReduxはいらんと思ってるけど生Reactは辛い・・そういうあなたにオススメなMobXの2017年にこうご期待。</p>\n\n    <blockquote>\n        <p>というわけで個人的には割と理想の使い方をしてきてたので、Modifierを一括置換するだけで移行完了でした。</p>\n\n    </blockquote>\n\n</div>"
}
