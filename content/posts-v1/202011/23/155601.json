{
  "title": "Vue Composition APIとReact HooksとSvelteの違い",
  "html": "<p>について、Vue Composition APIのDocsに記載があったので、自分用にメモ。</p>\n\n    <blockquote>\n        <p><a href=\"https://vue-composition-api-rfc.netlify.app/#comparison-with-react-hooks\">Composition API RFC | Vue Composition API</a></p>\n\n    </blockquote>\n<p>このRFCが出たのは2019年の7月なので、ぜんっぜん目新しい情報はないです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>React Hooksとの比較</h3>\n    \n<ul>\n<li>Composition APIで関数ベースでロジックを記述できるようになる</li>\n<li>ロジックを合成できるという書き味は、React Hooksと同等であろう</li>\n<li>ただし、大きな違いもいくつかある</li>\n<li>まず`setup()`は、本当に1度しか呼ばれない</li>\n<li>これはつまり\n<ul>\n<li>より直感的にJavaScriptを記述できる</li>\n<li>呼び出し順序も、条件分岐も気にしなくてよい</li>\n<li>呼ばれる回数が減るのでGCにも優しい</li>\n<li>`useCallback()`を使ったインラインハンドラーの最適化などが不要</li>\n<li>`useEffect()`や`useMemo()`に正しい依存変数を渡し忘れることもない</li>\n</ul></li>\n<li>確かにHooksから着想を得たところはあるが、Vueの目指すべきものとは違う</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>Svelteとの比較</h3>\n    \n<ul>\n<li>物は違えど非常によく似たコンセプトである</li>\n<li>Svelteはコンパイラーを使うため、記述するべきコードはより簡素になる</li>\n<li>Vueでも同じことはもちろんできる（Babelのプラグインでも）が、やらない理由がある</li>\n<li>それは、あくまでスタンダードなJavaScriptで記述するというところ</li>\n<li>Vueで書いた`script`内のコードは、ファイルに切り出してもES Modulesとして動作する\n<ul>\n<li>Svelteはそうはいかない</li>\n</ul></li>\n<li>コンパイラーベースのアプローチを取らない理由は、\n<ul>\n<li>そもそもビルドせずに利用できるプログレッシブなフレームワークだから</li>\n<li>Svelteの魔法のシンタックスは、コンポーネントの外では動かない（Storeを自作しなければならない）</li>\n<li>関数内で定義した変数は、リアクティブにならない</li>\n<li>TypeScriptのサポートが大変</li>\n</ul></li>\n<li>そういうわけで、コンパイラーを使うのはVueの目指すところではない</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>どれがベスト！というわけではないし、好きなもん使ったらええやんって思うけど、三者三様でおもしろいな〜と。</p><p>PreactにこのComposition APIを入れたいっていうPRもだいぶ前から立ってるけど、どうなることやら。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/preactjs/preact/pull/1923\">Composition api by porfirioribeiro &middot; Pull Request #1923 &middot; preactjs/preact &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>"
}
