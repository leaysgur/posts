{
  "title": "Svelteランタイムのコードを読む Part.2",
  "html": "<p>前回の記事でランタイムにおける`svelte`のコアは読んだので、今回は拡張となる機能たちを見ていく。</p>\n\n<ul>\n<li>`svelte/store`</li>\n<li>`svelte/motion`</li>\n<li>`svelte/transition`</li>\n<li>`svelte/easing`</li>\n<li>`svelte/animate`</li>\n</ul><p>これらのネームスペースで`import`できるやつ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>`svelte/store`</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/blob/master/src/runtime/store/index.ts\">https://github.com/sveltejs/svelte/blob/master/src/runtime/store/index.ts</a></p>\n\n    </blockquote>\n\n<ul>\n<li>`readable()`</li>\n<li>`writable()`</li>\n<li>`derived()`</li>\n<li>`get()`</li>\n</ul>\n<div class=\"section\">\n    <h4>`writable()`</h4>\n    <p>`writable()`は、`{ set, update, subscribe }`というオブジェクトを返すだけ。<br />\n値ごとに`subscribers`という配列があって、`subscribe()`されるとその配列に入っていく。</p><p>テンプレートで`$store`と書いた場合は、`component_subscribe()`という内部的な関数に変換されて、自動で`subscribe()` + `onDestroy()`で捨ててくれる。</p><p>`readable()`は`{ subscribe }`だけを返すというだけで、ほかはまったく一緒。</p>\n\n</div>\n<div class=\"section\">\n    <h4>`get()`</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">export</span> <span class=\"synIdentifier\">function</span> get_store_value(store) <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">let</span> value;\n  subscribe(store, (_) =&gt; (value = _))();\n  <span class=\"synStatement\">return</span> value;\n<span class=\"synIdentifier\">}</span>\n</pre><p>特別な内部処理がある？って思ってたけど、まったくそんなことなかった。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>`svelte/motion`</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/blob/master/src/runtime/motion/index.ts\">https://github.com/sveltejs/svelte/blob/master/src/runtime/motion/index.ts</a></p>\n\n    </blockquote>\n\n<ul>\n<li>`tweened()`</li>\n<li>`spring()`</li>\n</ul><p>直線的ではなく曲線的に加算できるタイプの`store`です。<br />\nなので`{ set, update, subscribe }`というオブジェクトを返すところまでは一緒。</p><p>というか、内部的には`writable()`を値の保持に使ってて、値をアップデートするタイミングにモーション味があるだけ。</p><p>そのタイミングを実装する処理が行数のほとんどだった。</p>\n\n</div>\n<div class=\"section\">\n    <h3>`svelte/transition`</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/blob/master/src/runtime/transition/index.ts\">https://github.com/sveltejs/svelte/blob/master/src/runtime/transition/index.ts</a></p>\n\n    </blockquote>\n<p>`{#if}`とかでDOMに現れるとき、消えるときにつけられるエフェクト。<br />\nこのコンセプトを理解しないまま困ってます！っていうIssueを結構見かける。</p><p>テンプレートでこれを使うときは、だいたい`if/else`とかがセットになるので、それ用のブロックが生成される。<br />\nその中の`p`と`o`で、`create_bidirectional_transition()`という内部的な関数で処理される。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/transitions.ts\">https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/transitions.ts</a></p>\n\n    </blockquote>\n<p>あとはそれを`requestAnimationFrame`で段階的に呼び出す。<br />\nCSSアニメーションで表現できるものは、そのタイミングごとにCSSのルールをアップデートして表現してる。</p><p>`fade`なら`opacity`、`slide`なら`height/pardding/margin/border`みたいな。</p><p>ちなみに`transition`は、`in`だけ、`out`だけみたいな指定もできるし、別々の演出にすることもできる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>`svelte/easing`</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/blob/master/src/runtime/easing/index.ts\">https://github.com/sveltejs/svelte/blob/master/src/runtime/easing/index.ts</a></p>\n\n    </blockquote>\n<p>アニメーション用のイージング関数たち。<br />\n<a href=\"https://github.com/mattdesl/eases\">https://github.com/mattdesl/eases</a> をそのまま使ってる模様。</p><p>ここに関しては特に読むことがない。</p>\n\n</div>\n<div class=\"section\">\n    <h3>`svelte/animate`</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/blob/master/src/runtime/animate/index.ts\">https://github.com/sveltejs/svelte/blob/master/src/runtime/animate/index.ts</a></p>\n\n    </blockquote>\n<p>だいたいの仕組みは`svelte/transition`と同じ。</p><p>現状は`flip()`だけ用意されてる。<br />\nこれも使いたかったら基本的に自作することになるはず。</p><p>これもコンセプトをあまり理解されてない感があるけど、`#each`の中で順序が入れ替わるときにだけ発現するもの。</p>\n\n</div>\n<div class=\"section\">\n    <h3>`svelte/register`</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/blob/master/register.js\">https://github.com/sveltejs/svelte/blob/master/register.js</a></p>\n\n    </blockquote>\n<p>今回コード読んでてはじめて知った。</p><p>Nodeのコードからコンポーネントを直接`require()`できるようにするためのスタブ。<br />\nその都度`complie()`して返すだけのちょっとしたコードだった。</p>\n\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>ランタイムといっても完全にランタイムに独立して動く処理ばかりではなく、きっちりコンパイル時に布石が打ってあった。</p><p>改めて、SvelteはReactとかと比較するもんではないな〜と思った。</p><p>単にView部分を差分レンダリングする以上のことをやっていて、そういう意味でやっぱ今からWeb開発するような人たちにこそ触ってもらいたい。</p><p>コードをだいたい読んでみたはいいけど、コントリビュートできる気は全然していないのである・・・！</p>\n\n</div>"
}
