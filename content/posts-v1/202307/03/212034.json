{
  "title": "OpenSeadragonで、非同期にgetTileUrl()したい",
  "html": "<p>高機能な画像ビューワーであるOpenSeadragon（以下、OSD）を使った小ネタ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/openseadragon/openseadragon\">GitHub - openseadragon/openseadragon: An open-source, web-based viewer for zoomable images, implemented in pure JavaScript.</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3 id=\"カスタムタイルソース\">カスタムタイルソース</h3>\n    <p>OSDでは、IIIFやDZIのように決められたフォーマット以外にも、生のタイル画像をそのまま扱えるパターンもある。</p><p>で、それをやるにはこんなコードを書く。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">new</span> OpenSeadragon.Viewer(<span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n\n  tileSources: <span class=\"synIdentifier\">{</span>\n    height: 512 * 256,\n    width: 512 * 256,\n    tileSize: 256,\n    getTileUrl: (level, x, y) =&gt;\n      <span class=\"synConstant\">&quot;http://s3.amazonaws.com/com.modestmaps.bluemarble/&quot;</span>\n        + <span class=\"synConstant\">`</span><span class=\"synSpecial\">${level - 8}</span><span class=\"synConstant\">-r</span><span class=\"synSpecial\">${y}</span><span class=\"synConstant\">-c</span><span class=\"synSpecial\">${x}</span><span class=\"synConstant\">.jpg`</span>,\n  <span class=\"synIdentifier\">}</span>,\n<span class=\"synIdentifier\">}</span>);\n</pre><p>ここまでは、ドキュメントにも書いてある通り。</p>\n\n    <blockquote>\n        <p><a href=\"https://openseadragon.github.io/examples/tilesource-custom/\">Custom Tile Source | OpenSeadragon</a></p>\n\n    </blockquote>\n<p>この場合の実装的な挙動としては、内部的に`Image`オブジェクトを生成して、その`src`にこの`getTileUrl()`で得られるパスがそのまま使われるようになってる。</p><p>で、これの問題は、タイル画像に対して、静的なパス + 単なるGETでアクセスできない場合。</p>\n\n<ul>\n<li>特別なリクエストヘッダーが必要</li>\n<li>POSTじゃないとダメ</li>\n<li>SDKを通して非同期にバイナリを渡す</li>\n<li>そもそも画像は別のパイプラインで生成する</li>\n<li>etc...</li>\n</ul><p>などなどの場合に、どうするか。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"1-オプションで解決する\">1. オプションで解決する</h3>\n    <p>実は`Viewer`や`TileSources`を指定するときに、いくつか渡せるオプションがあって、それで挙動を変えて解決できるものもある。</p>\n\n<ul>\n<li>`crossOriginPolicy`: `Image`で読み込む場合の`crossorigin`属性</li>\n<li>`loadTilesWithAjax`: `true`なら、`XMLHttpRequest`のラッパーである`$.makeAjaxRequest()`でGETするようになる\n<ul>\n<li>`ajaxHeaders`: その際のカスタムヘッダー</li>\n<li>`ajaxWithCredentials`: その際の`withCredentials`</li>\n</ul></li>\n</ul><p>単にヘッダがついてればいい場合は、こういうのでいい。</p><p>ほかにも、`tileSources`を文字列URLで指定した場合に、そのURLの`#`以降をPOSTで送信できる？風の、`splitHashDataForPost`なるオプションもあるらしい。<br />\n（というか、高機能すぎて何ができるのか未だに把握できないし、この場合はこれが使えないとかそういうのもわかってない。）</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"2-コードを上書きして解決する\">2. コードを上書きして解決する</h3>\n    <p>オプションだけでは解決できない場合の奥の手。<br />\nたとえばS3とかにタイル画像を置いてて、SDKでしかそれを取得できない場合などに。</p><p>さっきから見ての通り、`getTileUrl()`のシグネチャは`() => string`ではあるが、`OpenSeadragon.TileSource`クラスの一部を差し替えることで、非同期にできる。</p><p><script src=\"https://gist.github.com/leader22/cd8d6799e2b0586939125206085d8c57.js\"> </script></p><p>これを事前に実行しておけば、`getTileUrl()`のシグネチャを`() => Promise<string>`にできるってわけ。<br />\n`() => string`以外を返すようにした場合は、`hasTransparency(): boolean`がエラーにならないようにケアする必要があるらしい。</p><p>もしくは、`getTileUrl()`はそのまま同期で文字列を返しつつ、ロジック側でよしなに非同期することもできる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> url = context.src;\n\n<span class=\"synStatement\">const</span> ac = <span class=\"synStatement\">new</span> AbortController();\nmySdk.getObject(mySdk.toParams(url), ac.signal)\n  .then((blob) =&gt; <span class=\"synIdentifier\">{</span>\n    image.src = URL.createObjectURL(blob);\n  <span class=\"synIdentifier\">}</span>)\n  .<span class=\"synStatement\">catch</span>((err) =&gt; finish(err.message));\n\n<span class=\"synComment\">// </span><span class=\"synTodo\">XXX</span><span class=\"synComment\">: Shoud be `XMLHttpRequest` but `abort()` is only used</span>\ndataStore.request = ac;\n</pre><p>なんかのタイミングで`revokeObjectURL()`したい気持ちもあるけど、もともとのロジックでもやってなかったので仕方ない。</p><p>というわけで、ココのあたりをいじれば、だいたいのことは実現できそうである。ただし、裏技なので本体アップデートによりいつ動かなくなってもおかしくない。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"OSDはすごい\">OSDはすごい</h3>\n    <p>高機能ではあるが、この時代にESMでもなく3万行の巨大な1ファイルしか提供されてないし、コードも歴史ある感じでメンテしやすいとも言えず、かといって代わりになるライブラリもない・・って感じ。</p><p>リポジトリのIssueを見てた限り、この非同期の取得はそれなりに需要あることらしかった。なので、今回の対応もできれば本家コードに馴染むように、できればPRも・・・とやってたけど、そう簡単でもないな〜って感じたのでやめた。</p><p>それでもばっちり動いてるからすごい。</p>\n\n</div>"
}
