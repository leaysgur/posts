{
  "title": "cloudflare/workerd をセルフホスト目的で使う",
  "html": "<p>ちょっと調べたいことがあったのでそのメモ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"workerd\">workerd</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/cloudflare/workerd/\">GitHub - cloudflare/workerd: The JavaScript / Wasm runtime that powers Cloudflare Workers</a></p>\n\n    </blockquote>\n<p>Cloudflare Workersのランタイムである`workerd`は、OSSとして公開されていて、自分でモジュールとして使えば、セルフホストもできるよってことになってる。</p><p>ビルドするならBazeliskで`bazel`を使えとか、READMEに必要なことはほとんど書いてある。</p><p>自分でビルドせずとも、プリビルトのものでよければ`npx workerd`から利用できる。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"コマンド\">コマンド</h3>\n    \n<ul>\n<li>serve</li>\n<li>compile</li>\n<li>test</li>\n</ul><p>現状で利用できるコマンドはこの3つだった。</p><p>（`test`は知らないが）、`serve`と`compile`は、引数に`.capnp`の設定ファイルを渡して使う。</p><p>Cap’n Protoっていうフォーマットは初めて知ったけど、JSONよりProtobufよりすげーやつらしい。</p>\n\n    <blockquote>\n        <p><a href=\"https://capnproto.org/\">Cap&#39;n Proto: Introduction</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"とりあえず動かす\">とりあえず動かす</h3>\n    <p>まずは`my-config.capnp`をこのように。</p>\n<pre class=\"code capnp\" data-lang=\"capnp\" data-unlink>using Workerd = import &#34;/workerd/workerd.capnp&#34;;\n\nconst config :Workerd.Config = (\n  services = [\n    (name = &#34;main&#34;, worker = .mainWorker),\n  ],\n\n  sockets = [\n    ( name = &#34;http&#34;,\n      address = &#34;*:8080&#34;,\n      http = (),\n      service = &#34;main&#34;\n    ),\n  ]\n);\n\nconst mainWorker :Workerd.Worker = (\n  modules = [\n    (name = &#34;worker&#34;, esModule = embed &#34;hello.js&#34;)\n  ],\n  compatibilityDate = &#34;2023-07-17&#34;,\n);</pre><p>で、`hello.js`はこれだけ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> <span class=\"synIdentifier\">{</span>\n  async fetch() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> Response(<span class=\"synConstant\">&quot;Hello World!&quot;</span>);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>そして、`npx workerd serve my-config.capnp`とすれば、`<a href=\"http://localhost:8080\">http://localhost:8080</a>`にサービスが立って、アクセスできるようになる。</p><p>もしくは、`npx workerd compile my-config.capnp > my-worker`とすれば、実行できるバイナリも生成できる。</p><p>あとは`systemd`なんかでよしなに`serve`するように設定すれば、誰でもセルフホストできる！という感じ。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"おまけ\">おまけ</h3>\n    \n<ul>\n<li>`.capnp`で使える定義の詳細について\n<ul>\n<li><a href=\"https://github.com/cloudflare/workerd/blob/main/src/workerd/server/workerd.capnp\">https://github.com/cloudflare/workerd/blob/main/src/workerd/server/workerd.capnp</a></li>\n</ul></li>\n<li>いろんなユースケースの定義例\n<ul>\n<li><a href=\"https://github.com/cloudflare/workerd/tree/main/samples\">https://github.com/cloudflare/workerd/tree/main/samples</a></li>\n</ul></li>\n<li>ほかにも引数やフラグがあるようだったが、何に使うのかはよくわからなかった\n<ul>\n<li><a href=\"https://github.com/cloudflare/workerd/blob/main/src/workerd/server/workerd.c%2B%2B#L550-L623\">https://github.com/cloudflare/workerd/blob/main/src/workerd/server/workerd.c%2B%2B#L550-L623</a></li>\n</ul></li>\n</ul>\n</div>"
}
