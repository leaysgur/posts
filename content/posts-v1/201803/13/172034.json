{
  "title": "MobX 4.0.0 について",
  "html": "<p>去年の末から地道に対応が進んでたのですが、ついに出ましたねー。</p><p>作者によるサマリー記事とあわせて公開されました↓</p>\n\n    <blockquote>\n        <p><a href=\"https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\">MobX 4: Better, simpler, faster, smaller &ndash; Michel Weststrate &ndash; Medium</a></p>\n\n    </blockquote>\n<p>ちゃんとv3からv4へのマイグレーションガイドもあります。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/mobxjs/mobx/wiki/Migrating-from-mobx-3-to-mobx-4\">Migrating from mobx 3 to mobx 4 &middot; mobxjs/mobx Wiki &middot; GitHub</a></p>\n\n    </blockquote>\n<p>フルのChangeLogもあるよ！</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/mobxjs/mobx/blob/master/CHANGELOG.md#400\">mobx/CHANGELOG.md at master &middot; mobxjs/mobx &middot; GitHub</a></p>\n\n    </blockquote>\n<p>というわけで、手元のプロジェクトをアップデートしたのでその作業メモと、軽くアップデートのご紹介。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>`decorate()`</h3>\n    <p>`decorate()`という関数で、何をどうObservableにするか指定できるようになりました。</p><p>たとえばこの古いv3のコード。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> extendObservable, observable <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'mobx'</span>;\n\n<span class=\"synStatement\">class</span> FooStore <span class=\"synIdentifier\">{</span>\n  constructor() <span class=\"synIdentifier\">{</span>\n    extendObservable(<span class=\"synIdentifier\">this</span>, <span class=\"synIdentifier\">{</span>\n      foo: <span class=\"synConstant\">'text'</span>,\n      shallowObj: observable.shallowObject(<span class=\"synIdentifier\">{}</span>),\n      shallowArr: observable.shallowArray(<span class=\"synIdentifier\">[]</span>),\n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>Decoratorsシンタックスは怪しいので使ってなくて、`extendObservable()`で値を持ってるStoreのクラス。<br />\nそして、`observable.shallowXxx()`というModifierを使って、自動的に再起でObservalbeにされるのを回避してたコード。</p><p>ただこの度`observable.shallowXxx()`がお亡くなりになられましたので、これをいくつかのパターンで書き直す必要があった。</p>\n\n<div class=\"section\">\n    <h4>`extendObservable()` w/ decorators param</h4>\n    <p>まずこれ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> extendObservable, observable <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'mobx'</span>;\n\n<span class=\"synStatement\">class</span> FooStore <span class=\"synIdentifier\">{</span>\n  constructor() <span class=\"synIdentifier\">{</span>\n    extendObservable(<span class=\"synIdentifier\">this</span>, <span class=\"synIdentifier\">{</span>\n      foo: <span class=\"synConstant\">'text'</span>,\n      shallowObj: <span class=\"synIdentifier\">{}</span>,\n      shallowArr: <span class=\"synIdentifier\">[]</span>,\n    <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n      shallowObj: observable.shallow,\n      shallowArr: observable.shallow,\n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>このように、第3引数に`observable()`の挙動を変える引数を渡して、後からDecorateするように。</p>\n\n</div>\n<div class=\"section\">\n    <h4>`decorate()`</h4>\n    <p>もしくは、新たに追加されたAPIである`decorate()`を使ったパターン。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> decorate, observable <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'mobx'</span>;\n\n<span class=\"synStatement\">class</span> FooStore <span class=\"synIdentifier\">{</span>\n  constructor() <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>.foo = <span class=\"synConstant\">'text'</span>;\n    <span class=\"synIdentifier\">this</span>.shallowObj = <span class=\"synIdentifier\">{}</span>;\n    <span class=\"synIdentifier\">this</span>.shallowArr = <span class=\"synIdentifier\">[]</span>;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\ndecorate(FooStore, <span class=\"synIdentifier\">{</span>\n  foo: observable,\n  shallowObj: observable.shallow,\n  shallowArr: observable.shallow,\n<span class=\"synIdentifier\">}</span>);\n</pre><p>このパターンの場合は、全てのプロパティを明示的に`observable`指定する必要があるのでそこだけ注意。（例でいう`foo`）</p><p>まあObservableにしたくない場合は何もしなくていいので、MobXを一部だけ適用するみたいなイメージで使えていいかも。まあ`extendObservable()`と記述場所が変わったくらいやんって感じではある。</p><p>まぁコードの見通し的にも、これがオススメかな？</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>flow</h3>\n    <p>さっきのDecoratorには今までもあった`action`とかも指定できるけど、その中でさらに増えたやつがあって、それが`flow`。</p><p>一言でいうと、非同期でObservableな値を更新しようとするとコードが煩雑になるケースがあって、それを回避できる便利なやつ。</p><p>詳細はこの記事および記事内の動画が詳しいのでおすすめ。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.leighhalliday.com/mobx-async-actions\">MobX Async Actions | Leigh Halliday</a></p>\n\n    </blockquote>\n<p>まあただ、</p>\n\n<ul>\n<li>Storeで非同期しない派\n<ul>\n<li>= 別のところで叩いて、Storeは値を抱えるだけにしてる</li>\n</ul></li>\n<li>`action`使ってない派</li>\n</ul><p>の人には関係ないです。俺もめっきり`useStrict(true)`改め`configure({ enforceActions: true })`してません。</p>\n\n</div>\n<div class=\"section\">\n    <h3>その他</h3>\n    <p>ChangeLogからそれらしいのを・・と思ったけど、使ってない機能とか使わなさそうな機能しかなかったので、特にないかな・・。</p><p>それくらい、簡単に移行できるアップデートってことですよ！</p>\n\n</div>\n<div class=\"section\">\n    <h3>というわけで</h3>\n    <p>割と長らくMobXユーザーやってますが、そこまでマニアックなAPIは使わず最低限のものしか使ってないので、移行にはまったく手こずらなかったなーという感想でした。<br />\nちなみに次のMobx 5.0.0では、裏側の実装がProxyになったりするらしいですよ。乞うご期待。</p><p>なんかあったらTwitterで教えてくださいー。</p>\n\n</div>"
}
