{
  "title": "Node学園 25時限目 に行ってきたメモ #tng25",
  "html": "<p>今度は銀座で会長が遅刻してくる回。</p>\n\n    <blockquote>\n        <p><a href=\"https://nodejs.connpass.com/event/54749/\">Node&#x5B66;&#x5712; 25&#x6642;&#x9650;&#x76EE; - connpass</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>Node v8 by abouthiroppy</h3>\n    \n    <blockquote>\n        <p><a href=\"http://abouthiroppy.github.io/slides/node8/\">abouthiroppy/node8</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Node v8</h4>\n    \n<ul>\n<li>新たなLTSバージョン\n<ul>\n<li><a href=\"https://github.com/nodejs/LTS\">GitHub - nodejs/LTS: Node.js Foundation Long-term Support Working Group</a></li>\n</ul></li>\n<li>高速化がメインのアップデート</li>\n<li>WebAssemblyがデフォルトで有効に</li>\n<li>TURBOFUN\n<ul>\n<li><a href=\"https://github.com/v8/v8/wiki/TurboFan\">https://github.com/v8/v8/wiki/TurboFan</a></li>\n<li>V8に最適化された<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JIT\">JIT</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9\">コンパイラ</a></li>\n<li>ES2015+なコードにも対応できるように</li>\n<li>従来のCrankshaftではそこが難しかった</li>\n</ul></li>\n<li>IGNITION\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF\">インタプリタ</a></li>\n<li>V8の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JIT\">JIT</a>の非効率だった部分を、予め変換することで解消</li>\n</ul></li>\n<li>リリースは05/30</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>おすすめアップデート内容</h4>\n    \n<ul>\n<li>N-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>\n<ul>\n<li>ABI互換性の保証</li>\n<li>N-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>に対応してればバージョンが変わっても再<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>なしで使える</li>\n<li>対応してれば、バージョンが変わると動かない・・V8以外で動かない・・とかがなくなる</li>\n<li>`node-sass` / `<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canvas\">canvas</a>` / `node-sqlite3`とか</li>\n</ul></li>\n<li>`fs`で`file://`読めるように</li>\n<li>`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/whatwg\">whatwg</a>-url`</li>\n<li>さよなら`node --debug`</li>\n<li>`Promise`内のエラーのStackTraceが改善</li>\n<li>`util.promisify()`</li>\n<li>Shared memory and atomics 以外のES2017が使える</li>\n<li>etc...</li>\n</ul><p>細かすぎてメモ取ってられないので、気になる人はリリースノートをどうぞ・・！</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/nodejs/node/pull/12220\">[WIP] 8.0.0 Release Proposal by jasnell &middot; Pull Request #12220 &middot; nodejs/node &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Introduction to Rust by Akito0107</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/akito0107/nodexue-yuan-25xian-introduction-to-rust\">Node&#x5B66;&#x5712; 25&#x9650; Introduction to Rust // Speaker Deck</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Rust</h4>\n    \n<ul>\n<li><a href=\"https://doc.rust-lang.org/book/README.html\">The Rust Programming Language</a>\n<ul>\n<li><a href=\"https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/README.html\">&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;&#x8A00;&#x8A9E;Rust</a></li>\n</ul></li>\n<li>2015年10月にv1.0</li>\n<li>マルチ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A5%E9%A5%C0%A5%A4%A5%E0\">パラダイム</a>の言語\n<ul>\n<li>System / Networkプログラミングに強い</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LLVM\">LLVM</a>！WebAssembly！</li>\n</ul></li>\n<li>文法がモダンとかもあるけどもそれよりもメモリ管理が賢い\n<ul>\n<li>所有権という概念</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>メモリ管理について</h4>\n    \n<ul>\n<li>StackとHeap</li>\n<li>Stack\n<ul>\n<li>スコープ内で</li>\n<li>使ってるものを詰んでいく</li>\n</ul></li>\n<li>Heap\n<ul>\n<li>Stackより遅い</li>\n<li>解放しないとだめ</li>\n<li>使いまわされるものに</li>\n</ul></li>\n<li>今まで\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC\">C言語</a>では`<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/malloc\">malloc</a>() / free()`で手動でやってた <- 人類には無理</li>\n<li>そこで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GC\">GC</a>を採用した言語が出てきた <- マシンが重い</li>\n</ul></li>\n<li>Rustはその両者のいいとこどりを</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Rustのメモリ管理</h4>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GC\">GC</a>はない</li>\n<li>所有権（Ownership）\n<ul>\n<li>所有権に違反したコードは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>が通らない</li>\n</ul></li>\n<li>`=`は代入というより、所有権の委譲</li>\n<li>`let foo = ...;`したものを、`&foo`とすると参照・借用できる\n<ul>\n<li>Readは何回でもWriteは1回だけ</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Rustの何がいいの</h4>\n    \n<ul>\n<li>所有権によるメモリ管理の安全性\n<ul>\n<li>並列処理でも</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>できた = メモリ安全なコード</li>\n<li>パターンマッチやエラー処理の記述も洗練されてて嬉しい</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Rustを何に使おうか</h4>\n    \n<ul>\n<li>CPU Intensiveな処理</li>\n<li>高<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%EB%A1%BC%A5%D7%A5%C3%A5%C8\">スループット</a>を求められる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2\">ミドルウェア</a>\n<ul>\n<li>メディアの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9\">エンコード</a>とか</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>とか</li>\n</ul></li>\n<li>URLに画像の情報を含めて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/imageMagick\">imageMagick</a>で変換して返すやつ書いてみた\n<ul>\n<li>EventLoopでやるパターンと、EventLoop + MultiThreadのパターン</li>\n<li>前者は同時接続数が増えると、徐々にパフォーマンスが落ちていった</li>\n</ul></li>\n<li>これからはhttpサーバー実装を書き直すところからやっていこうかと</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>Cycle.js by wakasmha</h3>\n    \n    <blockquote>\n        <p>資料は見つけたら</p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%AF%A5%EB%A1%BC%A5%C8\">リクルート</a>のブログでRxのこと書いてた人。</p>\n\n<div class=\"section\">\n    <h4>Cycle.jsとは</h4>\n    \n<ul>\n<li><a href=\"https://github.com/cyclejs/cyclejs\">GitHub - cyclejs/cyclejs: A functional and reactive JavaScript framework for predictable code</a></li>\n<li>Observable + VirtualDOM = Cycle.js\n<ul>\n<li>`rxjs`ではなく`xstream`という軽量版でも</li>\n<li>VDOM実装は`hyperscript`</li>\n<li><a href=\"https://github.com/snabbdom/snabbdom\">GitHub - snabbdom/snabbdom: A virtual DOM library with focus on simplicity, modularity, powerful features and performance.</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>コードの特徴</h4>\n    \n<ul>\n<li>`main()`と`driver()`という区別に分ける\n<ul>\n<li>`main()`の範囲ではObservableを使ったStateの管理を</li>\n<li>`driver()`の範囲ではそれ以外の処理を（描画・<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>・・etc）</li>\n</ul></li>\n<li>この2つが流れるサイクルでやっていくからCycle.js</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>初めての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OSS\">OSS</a>初めてのNode.js contribute by chiiia12</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/chiiia12/chu-metefalseosschu-metefalsenode-dot-js-contribute-number-tng25\">&#x521D;&#x3081;&#x3066;&#x306E;OSS&#x521D;&#x3081;&#x3066;&#x306E;Node.js Contribute#tng25 // Speaker Deck</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OSS\">OSS</a>の魅力</h4>\n    \n<ul>\n<li>何かあったら自分でPull Requestできる</li>\n<li>やってみた\n<ul>\n<li>1回目は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/dup\">dup</a></li>\n<li>2回目はそもそも論になって消失</li>\n<li>3回目にやっとマージされた</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>学び</h4>\n    \n<ul>\n<li>PullRequestに対する抵抗がなくなった</li>\n<li>有名な人にレビューしてもらえる！</li>\n<li>レビューが勉強になる</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>にも詳しくなる\n<ul>\n<li>`Land`の意味を知る</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>何から始めればいいか</h4>\n    \n<ul>\n<li>テスト</li>\n<li>表示崩れ</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB\">チュートリアル</a>を実際に動かしてみて気付いたこと</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>v8の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D7%A5%EA%A5%BF\">インタープリタ</a>について by brn0227</h3>\n    \n    <blockquote>\n        <p>資料は見つけたら</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Ignition <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/interpreter\">interpreter</a></h4>\n    \n<ul>\n<li>V8には<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D7%A5%EA%A5%BF\">インタープリタ</a>ーがなかった\n<ul>\n<li>特定のケースでコードサイズがデカくて辛い</li>\n</ul></li>\n<li>今まで\n<ul>\n<li>JS</li>\n<li>AST</li>\n<li>FullCodegen</li>\n</ul></li>\n<li>これから\n<ul>\n<li>JS</li>\n<li>AST</li>\n<li>Ignition <- new!</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Ignitionの中身</h4>\n    \n<ul>\n<li>Bytecode generator</li>\n<li>Bytecode execution\n<ul>\n<li>IgnitionはASTをBytecodeに変換して</li>\n<li>そのBytecodeをブラウザはV8経由で実行する</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Turbofan</h4>\n    \n<ul>\n<li>InlineCaching</li>\n<li>今までよりオーバーヘッドが減ったらしい</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>Hello, MobX! by leader22</h3>\n    \n    <blockquote>\n        <p><a href=\"http://leader22.github.io/slides/node_gakuen-25\">Hello, MobX!</a></p>\n\n    </blockquote>\n<p>発表した！<br />\nやっぱスライドちょっと多かったなー。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Slack CodeGolf by darai0512</h3>\n    \n    <blockquote>\n        <p>資料は見つけたら</p>\n\n    </blockquote>\n\n<ul>\n<li>Slackで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A1%BC%A5%C9%A5%B4%A5%EB%A5%D5\">コードゴルフ</a>する話</li>\n<li>他人と競える順位だけわかる</li>\n<li>Slack <-> Heroku <-> Docker</li>\n<li>外部コマンドでチートすると却下するとか</li>\n</ul><p>自分の発表の後でわたわたしててあんまりメモれんかった・・。</p>\n\n</div>"
}
