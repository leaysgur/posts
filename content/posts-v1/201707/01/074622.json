{
  "title": "Macで作ったファイルをrsyncして、Linux上のNodeでファイルパスを扱うとき",
  "html": "<p>に、考慮しておかないと確実にハマること・・。</p>\n\n<ul>\n<li>濁点・半濁点</li>\n<li>UTF-8-MAC</li>\n<li>NFC / NFD</li>\n<li>`rsync --iconv=UTF-8-MAC,UTF-8`</li>\n<li>`String.prototype.normalize()`</li>\n</ul><p>このあたりがキーワードです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>事の発端</h3>\n    <p>こういう個人で作って使ってるアプリがありまして。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/mmss-client\">GitHub - leader22/mmss-client</a></p>\n\n    </blockquote>\n\n<ul>\n<li>家にある母艦Macにある`mp3`を、VPSにあるLinuxにバックアップしてる\n<ul>\n<li>その際、音源と一緒にファイルパスのマッピングを書いたJSONも転送してる</li>\n</ul></li>\n<li>そしてその音源を、Nodeで書いたアプリでストリーミングして聞いてる</li>\n<li>再生できるものとできないものがある</li>\n<li>どうやらファイル名にカタカナ + 濁点・半濁点があるとダメらしい</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>解決策</h3>\n    <p>まずファイルを送る時。</p>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>rsync <span class=\"synSpecial\">--iconv=UTF-8-MAC,UTF-8</span> ...\n</pre><p>`...`は各自の用途に応じて。<br />\n重要なのは`--iconv`のオプションを有効にすること。</p><p>古いバージョンの`rsync`だと使えなかったりするようなので、要確認。</p><p>次にファイルパスを生成するとき。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synConstant\">'Macで打った濁点つきのカタカナたとえばガギグゲゴ'</span>.normalize();\n</pre><p>という感じに、`normalize()`しておく。<br />\n引数を空にすると自動的にNFCになる。</p>\n\n    <blockquote>\n        <p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\">String.prototype.normalize() - JavaScript | MDN</a></p>\n\n    </blockquote>\n<p>これで本当に不便のない最高の環境が整ってしまった・・・！</p>\n\n</div>\n<div class=\"section\">\n    <h3>いちおう原因</h3>\n    \n<ul>\n<li>MacのUTF-8はUTF-8-MACといって、厳密には違う</li>\n<li>内部的な差異としては、NFC（Windows/Linux）とNFD（Mac）らしい\n<ul>\n<li>というかMacのHFS+ってやつがNFD（一部）を使う</li>\n<li>Windows/Linuxは何もしないのでだいたいNFC</li>\n</ul></li>\n<li>とりあえず濁点つきの文字を、文字と濁点に分けて扱うのがMac流</li>\n<li>なのでそれをそのまま使うと、Linuxとかで事故る\n<ul>\n<li>NFCにしてあげないとダメ</li>\n</ul></li>\n</ul>\n</div>"
}
