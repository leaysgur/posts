{
  "title": "lit-htmlとhyperHTML",
  "html": "<p>幸か不幸か、この2つについていろいろ調べた機会があったのでメモ。</p><p>結果、個人的には、hyperHTML推しです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>はじめに</h3>\n    <p>どっちも聞いたことないな？って人のために、何を目的とした技術なのかを。</p><p>これらはReactがやってるみたく、ウェブアプリケーションのViewを構成するコンポーネントを、宣言的に記述するためのライブラリ。</p><p>ただReactやらVueはVirtualDOMという抽象化を経る一方、こちらはRealDOMであるのと、JSXとかそういう記法はなく、Tagged Templatesを使ってコンポーネントを書いてく。</p><p>まあ実装はさておき書き味としては、めちゃくちゃ薄いReactって感じの立ち位置。<br />\nTemplate Literalで書いたHTMLを関数にわたすと、DOM要素として返してくれたり、実際のDOMツリーに反映してくれたりする。</p><p>で、そういう目的をもつライブラリとして白羽の矢が立ったのがこの2つだったわけです。</p>\n\n</div>\n<div class=\"section\">\n    <h3>lit-html</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/Polymer/lit-html\">GitHub - Polymer/lit-html: An efficient, expressive, extensible HTML templating library for JavaScript.</a></p>\n\n    </blockquote>\n<p>まず最初に使ってたのが`lit-html`。<br />\nPolymer、もといLitElementのコアということで、名前で決めたところは正直ある。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> html, render <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'lit-html'</span>;\n\n<span class=\"synStatement\">const</span> helloTemplate = (name) =&gt; html`&lt;div&gt;Hello $<span class=\"synIdentifier\">{</span>name<span class=\"synIdentifier\">}</span>!&lt;/div&gt;`;\n\nrender(helloTemplate(<span class=\"synConstant\">'Steve'</span>), <span class=\"synStatement\">document</span>.body);\n</pre><p>という具合に、SFCライクに文字列から要素を作り出せて、それをDOMに描画するAPIもある。</p><p>この描画も賢くて、ちゃんとやれば差分描画してくれる。</p><p>ちなみにこの`lit-html`、実は`lit-extended`っていう拡張版がある。</p>\n\n    <blockquote>\n        <p><a href=\"https://polymer.github.io/lit-html/guide/writing-templates.html#lit-html-or-lit-extended\">https://polymer.github.io/lit-html/guide/writing-templates.html#lit-html-or-lit-extended</a></p>\n\n    </blockquote>\n<p>`lit-html`にいくつかの記法が追加されてて、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> html <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'lit-html/lib/lit-extended.js'</span>;\n\n<span class=\"synStatement\">const</span> Btn = () =&gt; html`\n  &lt;button\n    <span class=\"synStatement\">class</span>$=$<span class=\"synIdentifier\">{}</span>\n    disabled?=$<span class=\"synIdentifier\">{}</span>\n    on-click=$<span class=\"synIdentifier\">{</span>ev =&gt; <span class=\"synIdentifier\">{}}</span>\n  &gt;OK&lt;/button&gt;\n`;\n</pre><p>みたく書ける。</p><p>そうそうコレコレ〜欲しかったあの機能たち！<br />\nなのでこの関数に引数を渡せば、いわゆる`props`的な使い方もできて、SFCが捗ります。</p><p>`lit-extended`があれば、WebComponentsだけでも頑張れるのでは？という気持ちになってくる。</p>\n\n<div class=\"section\">\n    <h4>しかし</h4>\n    <p>やっぱり使うのやめました。</p><p><blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"ja\" dir=\"ltr\">なんかよくわからんけど、lit-htmlのrenderに自作のcustom elementsを渡した場合、その要素のconnectedCallbackが謎いタイミングで呼ばれて、自身のルート要素が空っぽ（attrもtextContentも）になる・・気が・・する・・</p>&mdash; りぃ (@leader22) <a href=\"https://twitter.com/leader22/status/1006081462985035776?ref_src=twsrc%5Etfw\">June 11, 2018</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><p>なんてことないユースケースやと思うものの、地雷を踏んだのかうまくいかない。</p><p><blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"ja\" dir=\"ltr\">秘技rAFで挟むするとうまく描画されることが判明してしまった</p>&mdash; りぃ (@leader22) <a href=\"https://twitter.com/leader22/status/1006057619050512384?ref_src=twsrc%5Etfw\">June 11, 2018</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><p>そんなことしてまで使いたくはない！</p><p>まぁそこまで使い込んでないのでいまいち確信は持ててないけど、なんか運が悪かったんやろうね・・。</p><p>ちなみに当時のバージョンは`0.10.0`でした。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>hyperHTML</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/WebReflection/hyperHTML\">GitHub - WebReflection/hyperHTML: A Fast &amp; Light Virtual DOM Alternative</a></p>\n\n    </blockquote>\n<p>そういうわけで、日本ではまったく話題になってないけど、今の個人的なイチオシとなったのがコレ。</p><p>立ち位置としては、`lit-html`よりも先発のライブラリで、ProductionReadyとのこと。作者による比較Gistもある。</p>\n\n    <blockquote>\n        <p><a href=\"https://gist.github.com/WebReflection/fadcc419f5ccaae92bc167d8ff5c611b\">https://gist.github.com/WebReflection/fadcc419f5ccaae92bc167d8ff5c611b</a></p>\n\n    </blockquote>\n<p>試しにさっきの`lit-html`のコード例を全部置き換えてみるとこうなる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> wire, bind <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'hyperhtml'</span>;\n\n<span class=\"synStatement\">const</span> helloTemplate = name =&gt; wire()`&lt;div&gt;Hello $<span class=\"synIdentifier\">{</span>name<span class=\"synIdentifier\">}</span>!&lt;/div&gt;`;\n\nbind(<span class=\"synStatement\">document</span>.body)`$<span class=\"synIdentifier\">{</span>helloTemplate(<span class=\"synConstant\">'Steve'</span>)<span class=\"synIdentifier\">}</span>`;\n\n<span class=\"synStatement\">const</span> Btn = () =&gt; wire()`\n  &lt;button\n    <span class=\"synStatement\">class</span>=$<span class=\"synIdentifier\">{}</span>\n    disabled=$<span class=\"synIdentifier\">{}</span>\n    onclick=$<span class=\"synIdentifier\">{</span>ev =&gt; <span class=\"synIdentifier\">{}}</span>\n  &gt;OK&lt;/button&gt;\n`;\n</pre><p>てな具合でほぼ遜色ない感じ。</p>\n\n<ul>\n<li>`render`が`bind`になって</li>\n<li>`html`が`wire`になっただけ</li>\n<li>属性の末尾に`$`つけなくてもよくなったり</li>\n</ul><p>と、いい事づくしなのに、`lit-html`で起こってた描画のバグも発生しなかったので、これがProductionReadyってやつか！ってなった。</p><p>SSRするためのモジュールとして、`viperHTML`ってのまで用意してあって、本気度が伺えますね。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/WebReflection/viperHTML\">GitHub - WebReflection/viperHTML: Isomorphic hyperHTML</a></p>\n\n    </blockquote>\n<p>というわけで、もうしばらく使いこんでみるので、`hyperHTML`についてはまた記事を書くかも。</p>\n\n</div>"
}
