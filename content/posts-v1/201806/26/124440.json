{
  "title": "JestでES Moudlesなモジュールをテストしたい",
  "html": "<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> observable <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'mobx'</span>;\n\n<span class=\"synStatement\">class</span> Store <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> Store;\n</pre><p>のような、`import / export`で書いたモジュールを、Jestでそのままテストしたい。</p><p>が、そのまま`require()`することもできないので、なんとかする必要がある。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>`esm`を使う</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 各テストファイルで</span>\n<span class=\"synStatement\">const</span> requireEsm = require(<span class=\"synConstant\">'esm'</span>)(module);\n<span class=\"synStatement\">const</span> ChatStore = requireEsm(<span class=\"synConstant\">'../../../src/conf/store/chat'</span>).<span class=\"synStatement\">default</span>;\n\ntest(<span class=\"synConstant\">'あとはいつもどおり'</span>, () =&gt; <span class=\"synIdentifier\">{</span>\n  expect(xxx);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>一番手軽ではあるが、最初の行を全てのテストファイルでいちいち書かないといけない。<br />\nJestの`setupFiles`で最初に・・とかしたかったけど、ダメだった。Jestの都合な感じがする。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Babelを使う</h3>\n    <p>BabelでES Modulesの記法をCommonJSのそれに変換するパターン。</p><p>けど、パイプライン的な依存も増えるしなんだかなーと。</p>\n\n</div>\n<div class=\"section\">\n    <h3>しかし</h3>\n    \n<ul>\n<li>普通のテスト</li>\n<li>`spyOn()`での後からモック</li>\n</ul><p>は思ったように動いたけど、`useFakeTimers()`でのタイマーのモックができなかった・・無念。</p><p>最終的な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EF%A1%BC%A5%AF%A5%A2%A5%E9%A5%A6%A5%F3%A5%C9\">ワークアラウンド</a>は、「Jestを捨ててKarma + Rollup」でした・・。</p>\n\n</div>"
}
