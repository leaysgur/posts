{
  "title": "Requirejsを使う時の覚書",
  "html": "<p>巷ではあまり評判よくないんですかね？<br />\n個人としては、そこまでらいふちぇいんじんぐってほどではないけども、<br />\nそれなりに使えるケースもあると思うんですけど・・。</p><p>というわけで、個人的にメモっておきます。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>シングルトンを作る</h3>\n    <p>割とよくあるケースだと思います。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>define(<span class=\"synIdentifier\">[]</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n\n  <span class=\"synIdentifier\">var</span> MyModule = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// ...</span>\n  <span class=\"synIdentifier\">}</span>;\n\n  <span class=\"synComment\">// newして返す</span>\n  <span class=\"synStatement\">return</span> (<span class=\"synStatement\">new</span> MyModule());\n<span class=\"synIdentifier\">}</span>);\n</pre><p>こうすると一応どこでrequireしても同じものが返ってくるように。<br />\nただ厳密には、getInstanceみたいなメソッド作って、<br />\n明示的に初期化できるようにしてから運用したほうが幸せになれる感がある。</p>\n\n</div>\n<div class=\"section\">\n    <h3>require/defineの違い</h3>\n    <p>違いがないようで違う。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>define(<span class=\"synIdentifier\">[]</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>);\n\nrequire(<span class=\"synIdentifier\">[]</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>HTMLにscriptタグ書いて、data-mainを指定してるうちは、全部defineで定義してても動く。<br />\nが、そのままrjsで固めてしまうと、起動メソッドが存在しない扱いになって、起動しないままになる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>循環参照を避ける</h3>\n    <p>これも割とよくあるやつ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>define(<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'hoge'</span><span class=\"synIdentifier\">]</span>, <span class=\"synIdentifier\">function</span>(Hoge) <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// Hoge // =&gt; undefined</span>\n  <span class=\"synComment\">// ってなってダメなやつに関しては、</span>\n<span class=\"synIdentifier\">}</span>);\n\ndefine(<span class=\"synIdentifier\">[]</span>, <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// 使いたいときに呼ぶようにする</span>\n  <span class=\"synIdentifier\">var</span> Hoge = require(<span class=\"synConstant\">'hoge'</span>)\n<span class=\"synIdentifier\">}</span>);\n</pre>\n</div>\n<div class=\"section\">\n    <h3>require.config</h3>\n    <p>こいつは別ファイルにもできるけど、data-mainで指定する先にしとくのが得策。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>require.config(<span class=\"synIdentifier\">{</span>\n  paths: <span class=\"synIdentifier\">{}</span>,\n  shim: <span class=\"synIdentifier\">{}</span>,\n\n  callback: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{}</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>みたく、実はコールバックが指定できるので、こっから全てを起動するみたくするのが良い。<br />\nそうしておけば、HTMLの記述もすっきりするし、rjsで固めるシーンになっても安心。</p>\n\n</div>\n<div class=\"section\">\n    <h3>configを切り出すときは</h3>\n    <p>とはいえそういうケースももちろんあるわけで。</p>\n\n    <blockquote>\n        <p>詳しくは書かないけど、configをファイルで切り出す = 複数のアプリで共通のconfigを使いたい場合に、<br />\ngrunt-contrib-requirejsとかの指定で、configそのまま使えなくて困る。<br />\n正確には、configの内容だけをファイル指定するオプションがない(?)</p>\n\n    </blockquote>\n<p>なので、そのような場合に備えて、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>;(<span class=\"synIdentifier\">function</span>(global) <span class=\"synIdentifier\">{</span>\n\n  <span class=\"synIdentifier\">var</span> config = <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// ...</span>\n  <span class=\"synIdentifier\">}</span>;\n  \n  <span class=\"synStatement\">if</span> (_Node) <span class=\"synIdentifier\">{</span>\n    module.exports = config;\n  <span class=\"synIdentifier\">}</span>\n  <span class=\"synStatement\">if</span> (_Browser) <span class=\"synIdentifier\">{</span>\n    global.require = config;\n  <span class=\"synIdentifier\">}</span>\n\n<span class=\"synIdentifier\">}</span>(<span class=\"synIdentifier\">this</span>.<span class=\"synStatement\">self</span> || global));\n</pre><p>みたく、普段使い(Browser)もGrunt(Node)もOKにしておく。<br />\nするとGruntのタスクないでrequireとかしてpaths/shimの設定を引っこ抜ける。</p>\n\n</div>\n<div class=\"section\">\n    <h3>pathsに外部URL</h3>\n    <p>使えるんですコレが。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>paths: <span class=\"synIdentifier\">{</span>\n  facebook: <span class=\"synConstant\">'http://connect.facebook.net/ja_JP/sdk'</span>\n<span class=\"synIdentifier\">}</span>,\nshim: <span class=\"synIdentifier\">{</span>\n  facebook: <span class=\"synIdentifier\">{</span> exports: <span class=\"synConstant\">'FB'</span> <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>って風にできるので、わざわざこういうのだけCDN経由で云々しなくて良い。</p><p>けど、rjsで固めることを考えると、bowerなり手動なり手元に持ってこないとダメです。<br />\nrjsが取ってきてくれたりはしません。</p><p>以上、お世話になりました。</p>\n\n</div>"
}
