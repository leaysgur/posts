{
  "title": "Svelte(Kit)を使ってて気になるポイント",
  "html": "<p>Svelte(Kit)に対しては、基本的に\"推し\"なスタンス。</p><p>けど、今回はあえて気になるポイントも書いておこうかと。めちゃめちゃ不満ってほどでもないけど、気になるってところ。</p><p>ちなみに、SSRは基本的にしない（できない）用途の開発ばっかりやってる勢なので、観点には多少の偏りがあるはず。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"Svelte-1ファイル1コンポーネント縛り\">Svelte: 1ファイル1コンポーネント縛り</h3>\n    <p>`.svelte`ファイルからは、コンポーネント1つしか返せないという制約があり、あれがたまに息苦しいという話。</p><p>つまりJSXでは可能だった、Named exportで似たような用途のコンポーネントをまとめて返す・・とかができない。</p><p>是非はさておき、Propsの型すらexportできない。</p><p>もしその対象が静的なHTML片なのであれば、`#if`で分岐してもいいけど、これはちがうんよな〜〜。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">  </span><span class=\"synStatement\">export</span><span class=\"synSpecial\"> </span><span class=\"synIdentifier\">let</span><span class=\"synSpecial\"> fragmentKey;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n\n{#if fragmentKey === &quot;A&quot;}\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>A<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n{/if}\n\n{#if fragmentKey === &quot;B&quot;}\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>B<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n{/if}\n</pre><p>他にも、ちょっとしたフラグメントをインラインで変数化して置いておくこともできなくて、これはずっと前からRFCが浮いてる状態。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/rfcs/pull/34\">Inline components by Rich-Harris &middot; Pull Request #34 &middot; sveltejs/rfcs &middot; GitHub</a></p>\n\n    </blockquote>\n<p>あとはEarly returnもできないので、唐突にJSX（というかReact）が恋しくなる瞬間がくる時がある。（SolidもJSXなのにEarly returnはできないけども）</p><p>まあたまに息苦しくはなるものの、Hooksからコンポーネント返すとかいうアクロバティックな技も禁止できるっていうのは、一周回って安全！やはり正しい！っていう気持ちもあり、まあ受け入れるかこのトレードオフを・・・って感じ。</p><p>まあファイル名を見ただけで、その中に1コンポーネントだけ入ってることが保証されるってことであり、なんでこんなとこにロジック書いた？！みたいな事故も起きないってことやし、安全第一で。</p><p>ちなみに、`index.js`みたいなのを置いて、その中で複数のコンポーネントをre-exportすることはできる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">export</span> <span class=\"synIdentifier\">{</span> <span class=\"synStatement\">default</span> as Comp1 <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;./comp1.svelte&quot;</span>;\n<span class=\"synStatement\">export</span> <span class=\"synIdentifier\">{</span> <span class=\"synStatement\">default</span> as Comp2 <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;./comp2.svelte&quot;</span>;\n</pre>\n</div>\n<div class=\"section\">\n    <h3 id=\"Svelte-Storeまわり\">Svelte: Storeまわり</h3>\n    <p>少し正規化したい規模のプロジェクトで、こういうStoreを作って返した場合。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// my-store.js</span>\n\n<span class=\"synStatement\">const</span> count = writable(0);\n<span class=\"synStatement\">const</span> unit = writable(5);\n\n<span class=\"synStatement\">return</span> <span class=\"synIdentifier\">{</span>\n  state: <span class=\"synIdentifier\">{</span>\n    count: <span class=\"synIdentifier\">{</span> subscribe: count.subscribe <span class=\"synIdentifier\">}</span>,\n    unit: <span class=\"synIdentifier\">{</span> subscribe: unit.subscribe <span class=\"synIdentifier\">}</span>,\n  <span class=\"synIdentifier\">}</span>,\n  action: <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">/* ... */</span>\n  <span class=\"synIdentifier\">}</span>,\n<span class=\"synIdentifier\">}</span>;\n</pre><p>気持ちとしては、似たようなものを固めて`export`したいというもの。</p><p>で、まず気になるのは、StoreをReadOnlyで`export`するために必要な`subscribe`だけを返すこの一連の流れが冗長ってこと。（それだけやる関数を作ればいいのはわかるけどそういうとこよ）</p><p>次に、`.svelte`のテンプレートで`foo`という変数名のStoreを、`$foo`としてアクセスできる便利なアレを使う時。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">  </span><span class=\"synStatement\">import</span><span class=\"synSpecial\"> </span><span class=\"synIdentifier\">{</span><span class=\"synSpecial\"> state, action </span><span class=\"synIdentifier\">}</span><span class=\"synSpecial\"> from </span><span class=\"synConstant\">&quot;../my-store&quot;</span><span class=\"synSpecial\">;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n\n{$state.count}\n</pre><p>とは書け・・・ない。もちろん`{state.$count}`とも書けない。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">  </span><span class=\"synStatement\">import</span><span class=\"synSpecial\"> </span><span class=\"synIdentifier\">{</span><span class=\"synSpecial\"> state, action </span><span class=\"synIdentifier\">}</span><span class=\"synSpecial\"> from </span><span class=\"synConstant\">&quot;../my-store&quot;</span><span class=\"synSpecial\">;</span>\n\n<span class=\"synSpecial\">  </span><span class=\"synStatement\">const</span><span class=\"synSpecial\"> </span><span class=\"synIdentifier\">{</span><span class=\"synSpecial\"> count </span><span class=\"synIdentifier\">}</span><span class=\"synSpecial\"> = state;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n\n{$count}\n</pre><p>というように直で`$`をつける必要があり、これが塵積で不便やなって。</p><p>ならいっそ`state`という層を設けなければよいのでは〜っていうのは一理あるけど、なんか妥協っぽくてこれはこれで気になる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> count, action <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;../my-store&quot;</span>;\n</pre><p>というところで、制約が地味に息苦しいな〜という。いやまあ些細な問題ではあるけども。</p><p>そもそも、リアクティブ系のシンタックスが`let`と`store`と2種類あるのも地味に脳内リソースを消費する一因になってるかも。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Svelte-TSサポートの弱さ\">Svelte: TSサポートの弱さ</h3>\n    <p>たとえば、こういうコンポーネントを作りたい場合。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">label</span><span class=\"synIdentifier\"> </span><span class=\"synType\">for</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;email&quot;</span><span class=\"synIdentifier\">&gt;</span>メールアドレス<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">label</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">input</span><span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;email&quot;</span><span class=\"synIdentifier\"> </span><span class=\"synType\">type</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;email&quot;</span><span class=\"synIdentifier\"> /&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>JSX系のコンポーネントなら`Props`を`InputHTMLAttributes & { label: string }`みたくできる。</p><p>が、Svelteではそういうことができないので、</p>\n\n<ul>\n<li>`$$props`でまとめて受け取るが型を諦める</li>\n<li>ぜんぶ手動で属性値を指定し、`click`などのイベントも全部手動でdelegateする</li>\n</ul><p>という2択を迫られる。これは普通に面倒くさい。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/issues/6067\">More elegant prop typing &middot; Issue #6067 &middot; sveltejs/svelte &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Svelte-Portalほしい\">Svelte: Portalほしい</h3>\n    <p>過去に何度もIssueになっては閉じられを繰り返してる。</p><p>自分でそれらしい挙動を実装できるのはそのとおりではあるけど、あってもよくない？って思ってる。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/issues/7082\">[feature] Add `Portal`s to Svelte &middot; Issue #7082 &middot; sveltejs/svelte &middot; GitHub</a></p>\n\n    </blockquote>\n<p>こういうのは、内部実装や挙動のクセをちゃんと把握してないと、マトモなものが書けないので。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"SvelteKit-SSRする場合シンタックスが冗長になる\">SvelteKit: SSRする場合、シンタックスが冗長になる</h3>\n    <p>SvleteKitはSSRすることを軸足に置いたメタフレームワークなので、採用を決めたその瞬間からたとえば、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">let</span><span class=\"synSpecial\"> value = localStorage.getItem</span>(<span class=\"synConstant\">&quot;VALUE&quot;</span>)<span class=\"synSpecial\">;</span>\n<span class=\"synSpecial\">$: localStorage.setItem</span>(<span class=\"synConstant\">&quot;VALUE&quot;</span><span class=\"synSpecial\">, value</span>)<span class=\"synSpecial\">;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>みたいなコードが書けなくなる。</p><p>記述量が少なくて済むのがSvelteのいいところなのに、Kitに乗った瞬間からお行儀のいいIsomorphicなコードを要求される。<br />\n`onMount()`で囲んで・・`value`をStoreに逃がして・・と、一気にコードが簡潔じゃなくなる。</p><p>まあこれはSvelteKitに限らず、いわゆるメタフレームワーク全部がそうなんやけど、Svelteの場合は元が元なだけに、余計に気になってしまうって話。</p><p>幸い`export const ssr = false`ってすればいいだけではあるけども。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"SvelteKit-loadをawaitしたい\">SvelteKit: `load()`を`{#await}`したい</h3>\n    <p>個人的にはSapperの頃からずっと思ってるやつ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/kit/discussions/8640\">How to avoid waiting for +page.js to load the data (on the client side) &middot; sveltejs/kit &middot; Discussion #8640 &middot; GitHub</a></p>\n\n    </blockquote>\n<p>ローディング表示もなく単に白い画面で待たされるの、不安すぎません？これだからSSRはな・・ってなるポイントでもある。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"SvelteKit-layoutsvelteでNamed-slotが使えない\">SvelteKit: `+layout.svelte`でNamed slotが使えない</h3>\n    <p>つまり、各ページ側からは、単一の`slot`にしか手が出せないということ。</p><p>ページごとに外側のレイアウトに対して表示を制御したい場合（特別なヘッダ出したいとか、`z-index`を超えたいとか）は、</p>\n\n<ul>\n<li>自分でレイアウト用のコンポーネントを作って自分で使う</li>\n<li>いわゆる`Portal`相当のテクニックを使う\n<ul>\n<li>Svelte本体には存在しない</li>\n</ul></li>\n</ul><p>という必要がある。ちょっと不便。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"SvelteKit-特殊なファイル名なせいで\">SvelteKit: 特殊なファイル名なせいで</h3>\n    <p>`+page.svelte`とか、`(app)`みたいなやつのこと。</p><p>zshとかシェルの問題かもしれんけど、`vi +page.svelte`ってやるとダメで、`vi ./+page.svelte`のようにしないとファイルが開けなくて不便。<br />\n（これだからVSCodeは！）</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"SvelteKit-SSRがデフォルトか\">SvelteKit: SSRがデフォルトか〜</h3>\n    <p>って言いたいだけのところはある。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/kit/issues/8631\">Support CSR as first class citizen in kit &middot; Issue #8631 &middot; sveltejs/kit &middot; GitHub</a></p>\n\n    </blockquote>\n<p>まぁ一括ではなくページ別にこの設定ができるのは、数あるメタフレームワークの中でもSvelteKitだけだと思う（SolidStartは一括指定しかなかったはず）ので、まあやればいいだけの話。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"というわけで\">というわけで</h3>\n    <p>まあ気になるポイントはあるけど、どれもクリティカルではなく、</p>\n\n<ul>\n<li>Write less code最高</li>\n<li>`{#await}`ならびに各種シンタックスが便利すぎ</li>\n<li>`on:click`とだけ書けばイベント上層に通せるの最高</li>\n<li>双方向バインディングも楽すぎ</li>\n<li>ページ別にSSG/SSR/CSR選べるのえらい</li>\n</ul><p>みたいなところで、まあこれからも引き続きヘビーに使っていくとは思う。</p><p>ただここに書いてきたちょっとした不満（特にストアまわり）により、思ってたより大きな規模のアプリには採用しないかも？っていう兆しを感じてる今日このごろ。次にSPA(s)をやる案件がきたら、SolidStart w/ `ssr: false`しちゃうかも。</p>\n\n</div>"
}
