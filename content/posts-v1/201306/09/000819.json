{
  "title": "JavaScriptでのライブラリ作成時のデザインパターンは、オブジェクトか関数か",
  "html": "<p>なんてあやふやなタイトルなんや・・。</p><p>例えばタブのUIとか、簡単ですがライブラリちっくなものを書く機会が最近多いです。<br />\nそんなとき、オブジェクト作って全部やるパターンと、Functionで作ってnewして使うパターンと、結局どっちが良いんやろ？って思ったんです。</p><p>あと、他にも思うところがあったので、やっつけ仕事で2パターン書いてみて考察。</p><p></p>\n\n<div class=\"section\">\n    <h3>というわけでタブのUI</h3>\n    <p>HtmlとCssは共通のものを使います。</p>\n\n<div class=\"section\">\n    <h4>Html/Css</h4>\n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synComment\">&lt;!DOCTYPE HTML&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\"> </span><span class=\"synType\">lang</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;ja-JP&quot;</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">meta</span><span class=\"synIdentifier\"> </span><span class=\"synType\">charset</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;UTF-8&quot;</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">title</span><span class=\"synIdentifier\">&gt;</span>Tab lib<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">title</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">style</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synComment\">/* For css */</span>\n<span class=\"synIdentifier\">.my-tab-container</span> <span class=\"synIdentifier\">.my-tab-header</span> <span class=\"synIdentifier\">{</span>\n\t<span class=\"synType\">display</span>: -webkit-box;\n\t<span class=\"synType\">list-style</span>: <span class=\"synType\">none</span>;\n\t<span class=\"synType\">padding</span>: <span class=\"synConstant\">0</span>;\n\t<span class=\"synType\">background-color</span>: <span class=\"synConstant\">#eee</span>;\n\t<span class=\"synType\">text-align</span>: <span class=\"synType\">center</span>;\n<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">.my-tab-container</span> <span class=\"synIdentifier\">.my-tab-header</span> <span class=\"synStatement\">li</span> <span class=\"synIdentifier\">{</span>\n\t-webkit-box-flex: <span class=\"synConstant\">1</span>;\n<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">.my-tab-container</span> <span class=\"synIdentifier\">.my-tab-header</span> <span class=\"synIdentifier\">.js-active</span> <span class=\"synIdentifier\">{</span>\n\t<span class=\"synType\">background-color</span>: <span class=\"synConstant\">#000</span>;\n\t<span class=\"synType\">color</span>: <span class=\"synConstant\">#fff</span>;\n<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">.my-tab-container</span> <span class=\"synIdentifier\">.my-tab-body</span> <span class=\"synIdentifier\">{</span>\n\t<span class=\"synType\">padding</span>: <span class=\"synConstant\">0</span>;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">/* For js */</span>\n<span class=\"synIdentifier\">.js-tab-container</span> <span class=\"synIdentifier\">.js-tab-header</span> <span class=\"synIdentifier\">.js-active</span> <span class=\"synIdentifier\">{</span>\n\t<span class=\"synType\">pointer</span>-events: <span class=\"synType\">none</span>;\n<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">.js-tab-container</span> <span class=\"synIdentifier\">.js-tab-body</span> <span class=\"synStatement\">li</span> <span class=\"synIdentifier\">{</span>\n\t<span class=\"synType\">display</span>: <span class=\"synType\">none</span>;\n<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">.js-tab-container</span> <span class=\"synIdentifier\">.js-tab-body</span> <span class=\"synIdentifier\">.js-active</span> <span class=\"synIdentifier\">{</span>\n\t<span class=\"synType\">display</span>: <span class=\"synType\">block</span>;\n<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">style</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> </span><span class=\"synType\">class</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;js-tab-container my-tab-container&quot;</span><span class=\"synIdentifier\">&gt;</span>\n\t<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">ul</span><span class=\"synIdentifier\"> </span><span class=\"synType\">class</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;js-tab-header my-tab-header&quot;</span><span class=\"synIdentifier\">&gt;</span>\n\t\t<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>Title1<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>\n\t\t<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>Title2<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>\n\t\t<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>Title3<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>\n\t<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">ul</span><span class=\"synIdentifier\">&gt;</span>\n\t<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">ul</span><span class=\"synIdentifier\"> </span><span class=\"synType\">class</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;js-tab-body my-tab-body&quot;</span><span class=\"synIdentifier\">&gt;</span>\n\t\t<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>Text1 is this. JavaScript is really difficult and ...<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>\n\t\t<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>Text2 is this. JavaScript is really difficult and ...<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>\n\t\t<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>Text3 is this. JavaScript is really difficult and ...<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>\n\t<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">ul</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;//cdnjs.cloudflare.com/ajax/libs/zepto/1.0/zepto.min.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synComment\">&lt;!-- ここでそれぞれjsを読み込んで実行 --&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n</pre>\n</div>\n</div>\n<div class=\"section\">\n    <h3>Javascript</h3>\n    <p>まずはそれぞれのソース。<br />\n今回はZepto.jsを使ってみた。</p>\n\n<div class=\"section\">\n    <h4>Objectパターン</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// Act like &quot;tab-obj.js&quot; file.</span>\n;(<span class=\"synIdentifier\">function</span>(global, $, <span class=\"synStatement\">undefined</span>) <span class=\"synIdentifier\">{</span>\n\t<span class=\"synConstant\">'use strict'</span>;\n\n\t<span class=\"synIdentifier\">var</span> classNames = <span class=\"synIdentifier\">{</span>\n\t\theader: <span class=\"synConstant\">'.js-tab-header'</span>,\n\t\tbody: <span class=\"synConstant\">'.js-tab-body'</span>,\n\n\t\tactive: <span class=\"synConstant\">'js-active'</span> <span class=\"synComment\">// for addClass! Dont prepend &quot;.&quot;.</span>\n\t<span class=\"synIdentifier\">}</span>;\n\n\n\t<span class=\"synIdentifier\">var</span> Tab = <span class=\"synIdentifier\">{</span>\n\t\ttrigger: $(classNames.header).find(<span class=\"synConstant\">'li'</span>),\n\t\tbody: $(classNames.body).find(<span class=\"synConstant\">'li'</span>),\n\n\t\tinit: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n\t\t\tTab.showThis(Tab.trigger.eq(0));\n\t\t\tTab.trigger.on(<span class=\"synConstant\">'click'</span>, Tab.showThis);\n\t\t<span class=\"synIdentifier\">}</span>,\n\n\t\tshowThis: <span class=\"synIdentifier\">function</span>(e) <span class=\"synIdentifier\">{</span>\n\t\t\t<span class=\"synIdentifier\">var</span> index = Tab.trigger.index(e.target),\n\t\t\tc = classNames;\n\n\t\t\tTab._refresh();\n\n\t\t\tTab.trigger.eq(index).addClass(c.active);\n\t\t\tTab.body.eq(index).addClass(c.active);\n\t\t<span class=\"synIdentifier\">}</span>,\n\n\t\t_refresh: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n\t\t\t<span class=\"synIdentifier\">var</span> c = classNames;\n\t\t\t\n\t\t\tTab.trigger.removeClass(c.active);\n\t\t\tTab.body.removeClass(c.active);\n\t\t<span class=\"synIdentifier\">}</span>\n\t<span class=\"synIdentifier\">}</span>;\n\t\n\tglobal.Tab = Tab;\n<span class=\"synIdentifier\">}</span>(<span class=\"synIdentifier\">this</span>.<span class=\"synStatement\">self</span> || global, Zepto));\n</pre><p>実行する時は、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>;(<span class=\"synIdentifier\">function</span>(global, $, <span class=\"synStatement\">undefined</span>) <span class=\"synIdentifier\">{</span>\n\t<span class=\"synConstant\">'use strict'</span>;\n\n\tglobal.Tab.init();\n\n<span class=\"synIdentifier\">}</span>(<span class=\"synIdentifier\">this</span>.<span class=\"synStatement\">self</span> || global, Zepto));\n</pre>\n</div>\n<div class=\"section\">\n    <h4>Functionパターン</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// Act like &quot;tab-func.js&quot; file.</span>\n;(<span class=\"synIdentifier\">function</span>(global, $, <span class=\"synStatement\">undefined</span>) <span class=\"synIdentifier\">{</span>\n\t<span class=\"synConstant\">'use strict'</span>;\n\n\t<span class=\"synIdentifier\">var</span> classNames = <span class=\"synIdentifier\">{</span>\n\t\theader: <span class=\"synConstant\">'.js-tab-header'</span>,\n\t\tbody: <span class=\"synConstant\">'.js-tab-body'</span>,\n\n\t\tactive: <span class=\"synConstant\">'js-active'</span> <span class=\"synComment\">// for addClass! Dont prepend &quot;.&quot;.</span>\n\t<span class=\"synIdentifier\">}</span>;\n\n\n\t<span class=\"synIdentifier\">var</span> Tab = <span class=\"synIdentifier\">function</span>($elm) <span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synIdentifier\">this</span>.init($elm);\n\t<span class=\"synIdentifier\">}</span>;\n\n\tTab.prototype.init = <span class=\"synIdentifier\">function</span>($elm) <span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synIdentifier\">var</span> that = <span class=\"synIdentifier\">this</span>,\n\t\tc = classNames;\n\n\t\tthat.trigger = $elm.find(c.header).find(<span class=\"synConstant\">'li'</span>);\n\t\tthat.body = $elm.find(c.body).find(<span class=\"synConstant\">'li'</span>);\n\t\tthat.trigger.on(<span class=\"synConstant\">'click'</span>, $.proxy(<span class=\"synIdentifier\">this</span>.showThis, <span class=\"synIdentifier\">this</span>));\n\n\t\tthat.showThis(that.trigger.eq(0));\n\t<span class=\"synIdentifier\">}</span>;\n\n\tTab.prototype.showThis = <span class=\"synIdentifier\">function</span>(e) <span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synIdentifier\">var</span> that = <span class=\"synIdentifier\">this</span>,\n\t\tc = classNames,\n\t\tindex = that.trigger.index(e.target);\n\n\t\tthat._refresh();\n\n\t\tthat.trigger.eq(index).addClass(c.active);\n\t\tthat.body.eq(index).addClass(c.active);\n\n\t<span class=\"synIdentifier\">}</span>;\n\n\tTab.prototype._refresh = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synIdentifier\">var</span> that = <span class=\"synIdentifier\">this</span>,\n\t\tc = classNames;\n\n\t\tthat.trigger.removeClass(c.active);\n\t\tthat.body.removeClass(c.active);\n\t<span class=\"synIdentifier\">}</span>;\n\n\tglobal.Tab = Tab;\n<span class=\"synIdentifier\">}</span>(<span class=\"synIdentifier\">this</span>.<span class=\"synStatement\">self</span> || global, Zepto));\n</pre><p>実行する時は、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>;(<span class=\"synIdentifier\">function</span>(global, $, <span class=\"synStatement\">undefined</span>) <span class=\"synIdentifier\">{</span>\n\t<span class=\"synConstant\">'use strict'</span>;\n\n\t<span class=\"synStatement\">new</span> global.Tab($(<span class=\"synConstant\">'.js-tab-container'</span>));\n\n<span class=\"synIdentifier\">}</span>(<span class=\"synIdentifier\">this</span>.<span class=\"synStatement\">self</span> || global, Zepto));\n</pre>\n</div>\n</div>\n<div class=\"section\">\n    <h3>結局どっちがいいのか</h3>\n    <p>良いと思ったところを列挙。</p>\n\n<div class=\"section\">\n    <h4>Objectパターン</h4>\n    \n<ul>\n<li>記述もわかりやすいので、実装するのが楽。</li>\n<li>コードが短い！(本質的には同じでも、印象として)</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Functionパターン</h4>\n    \n<ul>\n<li>プロトタイプ活用って省メモリぽい。</li>\n<li>拡張しやすい！(1ページにタブが2つ以上ある時とか)</li>\n<li>クラス名などを引数で渡せるので柔軟性がある。</li>\n</ul><p>やっぱり・・・基本的にやれることは同じやと思うので、その時々で使い分けるしかないかしら。</p><p>クラス名決め打ちでも問題ないものや、そのページでしか使わんやろ！みたいな汎用性の低いUIについてはObjectパターンで決め打ちで。</p><p>それ以外は基本的にFunctionパターンで作れば良いって感じかな・・？</p>\n\n</div>\n</div>"
}
