{
  "title": "VimでもSvelteをTypeScriptで書きたい",
  "html": "<p>TypeScript対応が入って久しいSvelteですが、いざその恩恵に預かって快適コーディングするためには、LSPのサポートが必須な今日このごろ。</p><p>ただ、界隈のLSPにシュッと対応したエディタといえばVSCodeの話ばっかりで、こちとらVimなんですが！！って感じだった。<br />\n今まで使ってたALEにもLSPの機能はあるみたいやったけど、手元の構成だとうまく動かせなくて詰んでた。</p><p>けど、改めて探してみたら、Vimでもいい感じにできるプラグインが普通にあったわ・・という話。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>coc.nvim</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/neoclide/coc.nvim\">GitHub - neoclide/coc.nvim: Nodejs extension host for vim &amp; neovim, load extensions like VSCode and host language servers.</a></p>\n\n    </blockquote>\n<p>さすが「Conquer of Completion」っていうつよいネーミングなだけある。</p><p>これを、懇意にしているパッケージマネージャーでインストールする。</p>\n<pre class=\"code lang-vim\" data-lang=\"vim\" data-unlink>Plug <span class=\"synConstant\">'neoclide/coc.nvim'</span>, <span class=\"synSpecial\">{</span><span class=\"synConstant\">'branch'</span>: <span class=\"synConstant\">'release'</span><span class=\"synSpecial\">}</span>\n</pre><p>Node.jsに依存することにはなるけど、どうせ入ってるのでまぁよし。</p><p>READMEに、おすすめ`.vimrc`の記述があるので忘れずに。</p><p>個人的に全部はいらないと思ったので、基本的なやつとTABで補完リストを選べるようにするやつだけコピった。</p>\n\n</div>\n<div class=\"section\">\n    <h3>coc-svelte</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/coc-extensions/coc-svelte\">GitHub - coc-extensions/coc-svelte: svelte support for (Neo)Vim</a></p>\n\n    </blockquote>\n<p>CoCは各種サポートを拡張機能で提供するので、Svelte用のそれを入れる。</p><p>拡張はVim上から`:CocInstall coc-svelte`って実行することでインストールする。</p><p>`.vimrc`に書くことでもインストールできるけど、こっちの方法がおすすめって書いてあった。</p><p>なんとこれだけでLSPの機能が使えるようになる・・・。</p><p>デフォルトのファイルタイプだと、`.svelte`はナニソレ状態なので、シンタックスハイライトは自分で用意する必要があることに注意。</p><p>`leafOfTree/vim-svelte-plugin`とか、`evanleck/vim-svelte`とか。</p>\n\n</div>\n<div class=\"section\">\n    <h3>:CocConfig</h3>\n    <p>CoC自体の設定を変えるには、Vim上で`:CocConfig`コマンドを入力する。<br />\nすると設定ファイルが開く。なので、直接そのファイル（`~/.vim/coc-settings.json`）を修正してもいいはず。</p><p>今の設定はこんな感じ。</p>\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink><span class=\"synSpecial\">{</span>\n  &quot;<span class=\"synStatement\">coc.preferences.extensionUpdateCheck</span>&quot;: &quot;<span class=\"synConstant\">daily</span>&quot;,\n  &quot;<span class=\"synStatement\">diagnostic.checkCurrentLine</span>&quot;: <span class=\"synConstant\">true</span>,\n  &quot;<span class=\"synStatement\">tsserver.enableJavascript</span>&quot;: <span class=\"synConstant\">false</span>,\n  &quot;<span class=\"synStatement\">eslint.autoFixOnSave</span>&quot;: <span class=\"synConstant\">true</span>\n<span class=\"synSpecial\">}</span>\n</pre><p>上から、</p>\n\n<ul>\n<li>拡張のアップデートを毎日チェックする</li>\n<li>TSやESLintのエラー内容を、行単位で表示する（デフォルトは文字単位）</li>\n<li>`.js`ファイルでは、`tsserver`を起動しない</li>\n<li>保存時に`eslint --fix`する</li>\n</ul><p>ほぼVSCodeのそれ。</p><p>ちなみにJSONを修正するときには、`coc-json`を入れておくとこれまたいい感じにしてくれる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>というわけで</h3>\n    <p>CoCがすごくて感動したという話でした。<br />\n拡張もVSCodeの拡張をフォークして作れるみたいなデザインらしく、他にも便利なやつありそう。</p><p>ちなみに、最近のマイ`.vimrc`はこんな感じ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/dotfiles/blob/master/.vimrc\">https://github.com/leader22/dotfiles/blob/master/.vimrc</a></p>\n\n    </blockquote>\n<p>もうひとつちなむと、SvelteをTSで書けるようにはなったけど、それで満足に型安全なコードが書けるのか？と問われると、今のところまだ微妙と言わざるを得ない・・というのが正直な感想。</p>\n\n</div>"
}
