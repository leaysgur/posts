{
  "title": "forループの中でsetTimeoutしたらiはどうなるか",
  "html": "<p>この手の話題は記事タイトルが本当につけにくいｗ</p><p>今回も備忘メモです。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">for</span>(<span class=\"synIdentifier\">var</span> i = 0; i &lt; 3; i++) <span class=\"synIdentifier\">{</span>\n    setTimeout(<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span> console.log(i); <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>\n</pre><p>このコード、実行するとどうなるでしょう？<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>こうなる</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">for</span>(<span class=\"synIdentifier\">var</span> i = 0; i &lt; 3; i++) <span class=\"synIdentifier\">{</span>\n    setTimeout(<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span> console.log(i); <span class=\"synIdentifier\">}</span>); <span class=\"synComment\">// 3 が3回</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>思ってたのとちがう！</p>\n\n</div>\n<div class=\"section\">\n    <h3>こうすればOK</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">for</span>(<span class=\"synIdentifier\">var</span> i = 0; i &lt; 3; i++) <span class=\"synIdentifier\">{</span>\n  (<span class=\"synIdentifier\">function</span>(local)<span class=\"synIdentifier\">{</span> <span class=\"synComment\">// とじこめる</span>\n    setTimeout(<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span> console.log(local); <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>(i)); <span class=\"synComment\">// とじこめる！</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>すごーくざっくりした理解ですが、</p>\n\n<ul>\n<li>JavaScriptはシングルスレッド</li>\n<li>setTimeoutを使うと、擬似的に実行軸をズラして非同期にできる</li>\n<li>その結果、本流のforループとsetTimeoutの先の実行タイミングが分離しちゃう</li>\n<li>よって、本流が即まわりきって i は 3 になり、setTimeout側からは 3 しか取れない</li>\n<li>それが困るならsetTimeout側の処理へその時点の i を渡す必要がある</li>\n<li>というか、ループ用の変数 i それ以外を使えば良い</li>\n<li>コメントで頂いたように外の変数を都度インクリメントしてもいいし、上の例みたく1クッション用意してもいい</li>\n</ul><p>なにか間違ってたら教えてください。</p>\n\n    <blockquote>\n        <p>コメントで頂いた通り、単にスコープ外なので想定してる動作にはならんよね、というのが本質です。<br />\n長々とすみません！</p>\n\n    </blockquote>\n\n</div>"
}
