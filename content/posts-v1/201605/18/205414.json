{
  "title": "Service Worker 使ってますか？〜Frontend Meetup Tokyo vol.2 に行ってきたメモ #frontendmt",
  "html": "<p>まさか2日連続で勉強会に行く日が来るとはー。</p><p>ServiceWorkerそんな使ってないけども、とりあえずアップデートしときたい知識ではあったので行ってきた。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Developer Workflow by @s10wen</h3>\n    \n    <blockquote>\n        <p><a href=\"http://s10wen.com/japan2016/\">Japan 2016 | Simon Owen | Front-End Developer</a></p>\n\n    </blockquote>\n<p>「フロントエンドは始めたばかり、あまり詳しくないという方向けの内容になります」とのこと。</p>\n\n<ul>\n<li>Developerのワークフローについて\n<ul>\n<li>必ずしも正解ではないのであくまで参考に</li>\n</ul></li>\n<li>今日はなすテーマ\n<ul>\n<li>Apps & Tools</li>\n<li>Wellbeing</li>\n<li>Team Work</li>\n<li>Improve and Produce</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>Apps & Tools</h4>\n    \n<ul>\n<li>アプリ開発に使える便利な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB\">ツール</a>がたくさんある昨今</li>\n<li>DevToolsすごいし</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VirtualBox\">VirtualBox</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MacOS\">MacOS</a>でもWinのテストができたり</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Sublime\">Sublime</a>好き</li>\n<li>GitUp使ってるよ</li>\n<li>SlackやらDocsでコミュニケーション</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Hearth</h4>\n    \n<ul>\n<li>健康でいること・健全な環境で働くこと</li>\n<li>ヘッドホンつけて集中したり</li>\n<li>紙とペンを使ってみたり</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D6%A5%EB%A1%BC%A5%E9%A5%A4%A5%C8\">ブルーライト</a>対策で黒い画面にしたり\n<ul>\n<li>エディタのテーマのMonokai（この人が作ったんや</li>\n</ul></li>\n<li>自分をリセットする方法をもつ\n<ul>\n<li>瞑想とか、一日の終わりにメモで明日につながることを書き残す習慣</li>\n</ul></li>\n<li>自分のデスクを居心地良く</li>\n<li>燃え尽きないように注意しよう</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Team Work</h4>\n    \n<ul>\n<li>{なぜチームワークと言いつつ以下のようなメモが残っているかは謎 / たぶんWork Flowと間違えた？}</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Sublime\">Sublime</a>の便利パッケージを使ってみたり</li>\n<li>キーボードショートカットを駆使したり</li>\n<li>当然ブラインドタッチで</li>\n<li>パフォーマンス改善やリファクタは細かい単位を繰り返すように</li>\n<li>つまらん作業は自動化</li>\n<li>よく打つコマンドは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9\">エイリアス</a>に\n<ul>\n<li>.aliasesを充実させてこ</li>\n<li>`mkdir -p \"$@\" && cd \"$@\"` -> `mkd`とか</li>\n<li>でもやりすぎ厳禁</li>\n</ul></li>\n<li>便利ときいてもすぐ飛びつかず、まず試す</li>\n<li>新しいコードベースをまず作って、テストしてから統合する手法</li>\n<li>あなたにとってのシンプルは、みんなにとってもシンプルか</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Improve and Produce</h4>\n    \n<ul>\n<li>「TODO: あとでなおす」は危険であるということ\n<ul>\n<li>そんな暇は永遠にやってこない</li>\n<li>ビジネス<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C9%F4%CC%E7\">部門</a>とも調整して、負債は早めに対応するべき</li>\n</ul></li>\n<li>このスライド作るために<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>で意見集めたよ</li>\n<li>あらためてWebってすごいよね</li>\n</ul><p>げんきだいじ！<br />\n普段あんまり触れられないトピックスだと思うので、新鮮やった。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Service Worker by @Jxck_</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/jxck/service-worker-registration-and-lifecycle\">Service Worker registration &amp; lifecycle // Speaker Deck</a></p>\n\n    </blockquote>\n<p>Service Worker の(概要の一個次くらいのレベル感の)話だそうな。</p>\n\n<ul>\n<li>ハマりがちなregistration / lifecycleの話</li>\n<li>ServiceWorker解説動画あるよ\n<ul>\n<li><a href=\"https://blog.jxck.io/entries/2016-04-24/service-worker-tutorial.html\">https://blog.jxck.io/entries/2016-04-24/service-worker-tutorial.html</a></li>\n</ul></li>\n<li>Client x Controllerの関係\n<ul>\n<li>Client = Window / Controller = SW</li>\n<li>リクエストをフックできる</li>\n<li>WebSocketはフックできない（使うことはできる</li>\n</ul></li>\n<li>できる\n<ul>\n<li>WebSocket</li>\n<li>WebWorker</li>\n</ul></li>\n<li>できない\n<ul>\n<li>LocalStorage（同期I/Oだから）</li>\n</ul></li>\n<li>BrowserCacheの手前に、SWのcachesがある</li>\n<li>SWからリクエストしても、BrowserCacheにあればそれが返ることもある</li>\n</ul>\n<div class=\"section\">\n    <h4>Lifecycle</h4>\n    \n<ul>\n<li>Install\n<ul>\n<li>`navigator.serviceWorker.register('worker.js')`</li>\n<li>`oninstall`イベント -> 状態は`.waiting`に</li>\n<li>はじめてのものなら`.active`に</li>\n<li>これでWorkerとしては立ったが、動くのは次にページが開いたとき</li>\n<li>そうなってはじめてControllerになる（= 色々やれるようになる</li>\n</ul></li>\n<li>状態\n<ul>\n<li>.installing</li>\n<li>.waiting</li>\n<li>.active</li>\n</ul></li>\n<li>`claim()`ってのを呼べば、即Controller化できる</li>\n<li>`update()`するか、リロードすると新しいものを取得\n<ul>\n<li>1byteでもファイルに差分があれば新しいものと見なす</li>\n</ul></li>\n<li>v2ができてもv1のキャッシュが消えないのでは\n<ul>\n<li>MaxAgeを無視して必ず24Hでサーバーに取りに行ける</li>\n</ul></li>\n<li>`oninstall` / `onactivate`の使いドコロ\n<ul>\n<li>`oninstall`はv1 / v2で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B6%A6%C2%B8\">共存</a>できる処理</li>\n<li>`onactivate`はv1のCleanUpとか</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ServiceWorkerっていつ動くの</h4>\n    \n<ul>\n<li>オフラインでも</li>\n<li>ページ開いてなくても</li>\n<li>ブラウザが閉じていても</li>\n<li>止まる時もある\n<ul>\n<li>仕様ではブラウザが止めていいことになってる</li>\n<li>必要なデータはハンドラが動いてるうちに、必ず保存するべし</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>そのページ（パス）で動くSWはどう決まるか</h4>\n    \n<ul>\n<li>最長マッチ\n<ul>\n<li>そのパスに対して登録されてる中から長い順にみていく</li>\n</ul></li>\n<li>Controllerは必ず1つだけ</li>\n<li>多段SWしたい場合（特定のパスでは動かしたくないとか）\n<ul>\n<li>愚直にパスをif / else</li>\n<li>空SWを使う</li>\n</ul></li>\n<li>登録できるパスにも注意\n<ul>\n<li>`/js/worker.js`は、`/js/*`のページでしか動かない</li>\n<li>`Service-Worker-Allowed`をレスポンスヘッダにつけて返すことも</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>開発tips</h4>\n    \n<ul>\n<li>http[^s]でもSWしたい場合\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>の起動オプションでもいじれる</li>\n<li>`--unsafely-treat-insecure-origin-as-secure=\"<a href=\"http://example.com\">http://example.com</a>\"`</li>\n</ul></li>\n<li>最新のCanaryがおすすめ</li>\n<li>registration / update は開発でちゃんと確認する</li>\n<li>スコープ（パス）の設計は慎重に</li>\n<li>SWの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%D9%A5%F3%A5%C8%A5%CF%A5%F3%A5%C9%A5%E9\">イベントハンドラ</a>外の部分のコードは動かない可能性が高い</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>\n<ul>\n<li>あると嬉しいパターン</li>\n<li>ないと動かないパターン <- こっちは要注意</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>質疑</h4>\n    \n<ul>\n<li>規模の大きい利用例は？\n<ul>\n<li>Flipkart（インドのEC）</li>\n<li>日本だとSuumo</li>\n</ul></li>\n<li>テストつらい\n<ul>\n<li>`self`だけ上手いことやれば他はただのjs</li>\n<li>SW自体がもうちょい固まればきっと・・</li>\n<li>手動でPushもテストできる</li>\n</ul></li>\n<li>Window界から値を飛ばすには？\n<ul>\n<li>`postMessage()`すればいい</li>\n<li>DOMParserはSW界にないので、Window界でやらせたりした</li>\n</ul></li>\n</ul><p><br />\nServiceWorkerやるか！って気持ちにあんまりならないのは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>全盛の日本ではそんなに使いみちが見出だせないからやなー。<br />\nPush通知とキャッシュ機構以外のおもしろい使い方が思い浮かべば・・。</p>\n\n</div>\n</div>"
}
