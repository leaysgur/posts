{
  "title": "#ウデマエアーカイブ をReactで書き直した件に関するメモ",
  "html": "\n    <blockquote>\n        <p><a href=\"http://lealog.hateblo.jp/entry/2015/08/24/193734\">&#x30B9;&#x30D7;&#x30E9;&#x30C8;&#x30A5;&#x30FC;&#x30F3;&#x306E;&#x30A6;&#x30C7;&#x30DE;&#x30A8;&#x3092;&#x53EF;&#x8996;&#x5316;&#x3059;&#x308B;&#x30B5;&#x30FC;&#x30D3;&#x30B9;&#x3092; - console.lealog();</a></p>\n\n    </blockquote>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%AB\">イカ</a>のゲームが発売されたのが去年の5月。<br />\n↑の記事を書いたのが去年の8月。<br />\nよもや1年に渡って同じゲームをやり続けることになろうとは・・・。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>というわけで</h3>\n    <p>録画系ガチ勢はIkalog x stat.ink、iOSApp勢は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%AB\">イカ</a>キロク、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>勢は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%AB\">イカ</a>レコ、その他もろもろ。</p><p>とまぁ色んなサービスが世の中には出てきましたが、そんな中でも未だにぼちぼち利用者がいて驚いてるのがこのWeb版のウデマエ管理サービスのウデマエ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AB%A5%A4%A5%D6\">アーカイブ</a>です。</p><p>作った当初はVue.jsを使ってて、割と勢いで作りました。<br />\nなのでその後の機能追加はどんどん難航し、あれよあれよと更新しなくなったのが去年の暮れです。</p><p>そんな中、先月にVue.jsの2.0が発表されて、これはアップデートのチャンス！ついでにリファクタのチャンス！と思ったけど・・。</p><p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Vuejs@2のサンプルコード見てるけどそんなに変わってない・・？</p>&mdash; りぃ (@leader22) <a href=\"https://twitter.com/leader22/status/725537579416739840?ref_src=twsrc%5Etfw\">2016年4月28日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p>\n\n</div>\n<div class=\"section\">\n    <h3>というわけでReactへ</h3>\n    <p>リニューアルやりかけてやめるのはアレだったので、手に馴染み始めたReactでやることにしました。</p><p>今回のてくのろじーすたっく from `package.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>`</p>\n\n<ul>\n<li>\"chart.js\": \"^2.1.2\",</li>\n<li>\"object-assign\": \"^4.1.0\",</li>\n<li>\"react\": \"^15.0.2\",</li>\n<li>\"react-dom\": \"^15.0.2\",</li>\n<li>\"react-router\": \"^2.4.0\",</li>\n<li>\"react-tap-event-plugin\": \"^1.0.0\"</li>\n</ul><p>まぁわかりやすいですね。</p><p>`tap-event-plugin`は結局`v15`になっても必要っぽいので、仕方なし。</p><p>Flux系のライブラリは使ってません。<br />\nというのも、既存のコードの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MVC\">MVC</a>意識なMの部分を使いまわせそうだったので、State管理する系<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>でそれ叩けばいいかなーと。</p><p>となるとStore用意するのも面倒やし処理をActionに切り出すのも面倒やしそもそも更新処理そんな無いしってことで、愚直なReactスタイルで。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9\">ソースコード</a>はこちらです。</p><p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fleader22%2Fika-rchive\" title=\"leader22/ika-rchive\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/leader22/ika-rchive\">github.com</a></cite></p><p></p>\n\n</div>\n<div class=\"section\">\n    <h3>Fluxとはなんだったのか</h3>\n    <p>個人的にはooってライブラリを入れたからFluxとかそういうのでは無いと思ってて、</p>\n\n<ul>\n<li>とあるデータ構造があって、それをまんまDOMにしてくれるのがReact</li>\n<li>そのデータ構造を更新する箇所は限定する(≒ rootComponent)</li>\n<li>するとデータの流れが自然と単方向になる</li>\n</ul><p>みたいなReactさわってると誰もがたどり着くであろうパターンになれば、もうそれはFluxってくくりでいい気がしてます。<br />\n別にStoreがなくたってActionでやりとりしなくたって。</p>\n\n</div>\n<div class=\"section\">\n    <h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リ構造</h3>\n    <pre class=\"code\" data-lang=\"\" data-unlink>- component/\n- model/\n- page/\n- reducer/\n- const.js\n- main.js\n- router.jsx\n- util.js</pre><p>こうなった。</p>\n\n<ul>\n<li>`component`がいわゆる状態をほぼ持たない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a></li>\n<li>`model`はv1から続投の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MVC\">MVC</a>のMで、`localStorage`をゴニョるおじさん</li>\n<li>`page`ってのがルートごとに`state`を管理する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a></li>\n<li>`reducer`はModelを`state`にする手前に噛ませるPureな関数で、`page`の単位で存在させる</li>\n</ul><p>このへんのネーミングのベストプ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ティスがあれば知りたい今日このごろ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>ライブラリ個別の知見たち</h3>\n    \n<div class=\"section\">\n    <h4>React Router</h4>\n    <p>知らん間にパワーアップしてて、驚きでした。</p><p>`component`じゃなくて`components`ってのを使えば、親に`props`で渡せるのに感動した。<br />\nAngularのui-routerとかも似たような機能あったなーと思いながら。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink>module.exports = (\n  <span class=\"synIdentifier\">&lt;</span>Router<span class=\"synIdentifier\"> history=</span><span class=\"synConstant\">{hashHistory}</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span>Route<span class=\"synIdentifier\"> path=</span><span class=\"synConstant\">&quot;/&quot;</span><span class=\"synIdentifier\"> component=</span><span class=\"synConstant\">{Master}</span><span class=\"synIdentifier\">&gt;</span>\n      <span class=\"synIdentifier\">&lt;</span>IndexRedirect<span class=\"synIdentifier\"> to=</span><span class=\"synConstant\">&quot;record&quot;</span><span class=\"synIdentifier\"> /&gt;</span>\n      <span class=\"synIdentifier\">&lt;</span>Route<span class=\"synIdentifier\"> path=</span><span class=\"synConstant\">&quot;record&quot;</span><span class=\"synIdentifier\"> component=</span><span class=\"synConstant\">{RecordPage}</span><span class=\"synIdentifier\">&gt;</span>\n        <span class=\"synIdentifier\">&lt;</span>IndexRedirect<span class=\"synIdentifier\"> to=</span><span class=\"synConstant\">&quot;graph&quot;</span><span class=\"synIdentifier\"> /&gt;</span>\n        <span class=\"synIdentifier\">&lt;</span>Route<span class=\"synIdentifier\"> path=</span><span class=\"synConstant\">&quot;graph&quot;</span><span class=\"synIdentifier\"> component=</span><span class=\"synConstant\">{GraphPage}</span><span class=\"synIdentifier\"> /&gt;</span>\n        <span class=\"synIdentifier\">&lt;</span>Route<span class=\"synIdentifier\"> path=</span><span class=\"synConstant\">&quot;list&quot;</span><span class=\"synIdentifier\">  component=</span><span class=\"synConstant\">{ListPage}</span><span class=\"synIdentifier\"> /&gt;</span>\n      <span class=\"synIdentifier\">&lt;/</span>Route<span class=\"synIdentifier\">&gt;</span>\n      <span class=\"synIdentifier\">&lt;</span>Route<span class=\"synIdentifier\"> path=</span><span class=\"synConstant\">&quot;stat&quot;</span><span class=\"synIdentifier\">   component=</span><span class=\"synConstant\">{StatPage}</span><span class=\"synIdentifier\"> /&gt;</span>\n      <span class=\"synIdentifier\">&lt;</span>Route<span class=\"synIdentifier\"> path=</span><span class=\"synConstant\">&quot;input&quot;</span><span class=\"synIdentifier\">  component=</span><span class=\"synConstant\">{InputPage}</span><span class=\"synIdentifier\"> /&gt;</span>\n      <span class=\"synIdentifier\">&lt;</span>Route<span class=\"synIdentifier\"> path=</span><span class=\"synConstant\">&quot;others&quot;</span><span class=\"synIdentifier\"> component=</span><span class=\"synConstant\">{OthersPage}</span><span class=\"synIdentifier\"> /&gt;</span>\n    <span class=\"synIdentifier\">&lt;/</span>Route<span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span>Router<span class=\"synIdentifier\">&gt;</span>\n);\n</pre><p>こんな感じのルート構造。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Chart.js</h4>\n    <p>これが一番の驚き。<br />\n知らん間にv2になってて、ドキュメントも綺麗になってた。</p><p>設定の細かさだとやはり、HighChartsやらd3やらに軍配は上がるけども、ライトな触り心地って意味では取っ付き易くて非常に良いと思います。</p>\n\n<div class=\"section\">\n    <h5>Y軸を左右ともに表示したい</h5>\n    <p>ココに一番ハマったのでメモ。</p><p>これをやりたい場合、`datasets`に同じデータが2つ必要です。<br />\nかつ、axisのmin/maxも同じにする必要があります。</p><p>そして、`bar`チャートで2つデータを渡すと、表示されるバーの幅を2つが折半してしまうので、片方は`line`チャートにして透明で描画するとかしないといい感じに表示できないです。<br />\n`barPercentage`とか、`categoryPercentage`とかを絶妙に調整すれば2本を1本に見せかけることもできますが、オススメはしない方向という結論です。</p><p>とにかくこれにめっちゃハマったけど、それ以外はすごく良くなってた。</p>\n\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3>React道で悩んでるところ</h3>\n    \n<div class=\"section\">\n    <h4>Util的な関数を、どこまで`render`で使うのか</h4>\n    <p>`props`で渡された時点で既に期待する形になってるべきってのもわかるけど、元ネタは同じやけど見せ方が異なる場合に2つ用意すんの？とか考えたら面倒になった。</p>\n\n<ul>\n<li>あくまでプリミティブなデータとしてざっくり処理してから`props`に渡す</li>\n<li>`950 => S50` みたいな見せ方に関する処理は、Utilを個別に</li>\n</ul><p>ってしてるけどうーむ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Const的なものを、どこまで渡すか</h4>\n    <p>これもほぼ同上。<br />\nContextで渡しちゃうとかでもいいけど、どうせ変わらないものなのであれば<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>から直<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%DC%BF%A8\">接触</a>っても一緒ではないかっていう。</p><p>モジュールとしては依存するわけやけど、それによって何か挙動が変わるわけでもないし・・・。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>というわけで</h3>\n    <p>あらためてv2になったウデマエ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AB%A5%A4%A5%D6\">アーカイブ</a>を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%AB\">イカ</a>よろしくーー。</p><p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fleader22.github.io%2Fika-rchive%2F\" title=\"ウデマエアーカイブ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://leader22.github.io/ika-rchive/\">leader22.github.io</a></cite></p>\n\n</div>"
}
