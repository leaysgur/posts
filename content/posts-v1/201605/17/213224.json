{
  "title": "WebRTC Meetup Tokyo #10 に行ってきたメモ #webrtcjp",
  "html": "<p>移転した21Cafeにはじめていった！<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>SDPをひたすら説明する by @iwashi86</h3>\n    \n    <blockquote>\n        <p><a href=\"http://www.slideshare.net/iwashi86/webrtc-for-sdp\">SDP for WebRTC</a></p>\n\n    </blockquote>\n\n<ul>\n<li><a href=\"http://www.slideshare.net/iwashi86/20150311-web-rtcmeetup7sdp\">http://www.slideshare.net/iwashi86/20150311-web-rtcmeetup7sdp</a> の詳細について</li>\n<li>EdgeもWebkitもWebRTC1.0に対応\n<ul>\n<li>つまりSDPをいじれる</li>\n</ul></li>\n<li>と思ったら、SDPいじれなくなるかも by IETF</li>\n</ul>\n<div class=\"section\">\n    <h4>SDPとは</h4>\n    \n<ul>\n<li>P2Pにおける最適な通信手順・方式を定義したもの(RFC4566)</li>\n<li>Offer <-> Answerの間でやりとりする</li>\n<li>セッション(親)の中に、動画・音声・データのメディア(子)がある</li>\n<li>記法は`v=0` <- 空白いれちゃダメ のような`k=v`が複数行に渡り続く\n<ul>\n<li>`a=ssrc:xxxx xxxxx`みたいな定義の仕方もある</li>\n</ul></li>\n<li>O/Aで違う行数に違う定義があってもダメ</li>\n<li>こっから各行の解説\n<ul>\n<li>後で資料でみてね</li>\n<li>b=ASで帯域も絞れる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>質疑</h4>\n    \n<ul>\n<li>SDPいじれなくなるかもーって言ってたけど、その場合にはどうすればいいの？\n<ul>\n<li>いじれくなるかもというか、それ用のAPIが出るはずって話</li>\n<li>しばらくは生SDPをいじる日々が続きそう</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>WebRTCで快適な画面共有を実現する by @yusuke84</h3>\n    \n    <blockquote>\n        <p>資料見つけ次第追記</p>\n\n    </blockquote>\n\n<ul>\n<li>ビデオチャット + 画面共有というあるあるのニーズ</li>\n<li>愚直にMediaStreamを増やしていくと、フルメッシュになってってパフォーマンスがヤバい\n<ul>\n<li>そういう時のSFUではあるけど、今回は置き</li>\n</ul></li>\n<li>今回はMultiTrack</li>\n<li>1つのMediaStreamで、複数のTrackを送る\n<ul>\n<li>MultiTrackについては <a href=\"http://www.slideshare.net/mganeko/webrtc-multitrack-multistream\">http://www.slideshare.net/mganeko/webrtc-multitrack-multistream</a></li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>関連API</h4>\n    \n<ul>\n<li>`stream.getTracks()`</li>\n<li>`stream.getVideoTracks()`</li>\n<li>`stream.getAudioTracks()`</li>\n<li>`stream.addTrack()`</li>\n<li>`stream.removeTrack()`</li>\n<li>`new webkitMediaStream(受け取ったTrack)`</li>\n<li>受け取ったTrackは見分けが付かないので、`stream.label`とかで区別</li>\n<li>SkyWayのPeer.jsならちょっとだけ楽に書けるよ！</li>\n</ul><p>ただしこれWebkitに限るやんねー・・。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>PeerConnectionリレーとMediaRecorder * @massie_g</h3>\n    \n    <blockquote>\n        <p><a href=\"http://www.slideshare.net/mganeko/peerconnectionmediarecorder\">PeerConnection&#x30EA;&#x30EC;&#x30FC;&#x3068;MediaRecorder</a></p>\n\n    </blockquote>\n<p>手動シグナリングが好きってどういうことなの( ﾟдﾟ)</p>\n\n<ul>\n<li>多段中継したい\n<ul>\n<li>フルメッシュだと死ぬから</li>\n</ul></li>\n<li>ただ2段目からは動画は出るのに音声が出なかった\n<ul>\n<li>最近なおった</li>\n</ul></li>\n<li>ただし遅延する（動画も音声も）\n<ul>\n<li>のでディレイのエフェクトとして使える！！</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>MediaRecorderの話</h4>\n    \n<ul>\n<li>Chrome49からRemoteも録画できるように</li>\n<li>そのまま取るとビットレートがデカい</li>\n<li>そのうち調整できるようになる</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>SFUの話 by @tnoho</h3>\n    \n    <blockquote>\n        <p><a href=\"http://www.slideshare.net/tnoho/sfu\">SFU&#x306E;&#x8A71;</a></p>\n\n    </blockquote>\n\n<ul>\n<li>WebRTCは2Mbps/人を標準で使う\n<ul>\n<li>エンコードで暗号化してるとこが重い</li>\n</ul></li>\n<li>そこでMCU\n<ul>\n<li>1コネクションでやる</li>\n<li>サーバーでデコードする</li>\n<li>なのでサーバーで録画とかできる</li>\n<li>ただ1コネクションなので人ごとに分割できない</li>\n</ul></li>\n<li>SFUってのもあるよ\n<ul>\n<li>P2Pじゃなくてサーバーが配信を肩代わりする</li>\n<li>一番状況の悪い人にあわせるしかない（品質がSFU次第）</li>\n</ul></li>\n<li>P2PはSkype / SFUはHangout\n<ul>\n<li>どれも一長一短ではある</li>\n</ul></li>\n<li>SFUで品質低下を避けるには・・\n<ul>\n<li>SimulCastに対応する</li>\n<li>SVC: 特許なのでお金かかる</li>\n<li>MultiStream: 実装がむずかしい</li>\n</ul></li>\n<li>SFUでMultiStreamに対応してるのは某社しかないらしい</li>\n<li>あとはハードウェアエンコーダーの対応・・</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>H.264で相互接続 by @higed</h3>\n    \n    <blockquote>\n        <p><a href=\"http://www.slideshare.net/goforbroke/h264-webrtc-meetup-japan-10\">H.264&#x3067;&#x76F8;&#x4E92;&#x63A5;&#x7D9A; - WebRTC Meetup Tokyo #10</a></p>\n\n    </blockquote>\n\n<ul>\n<li>共通コーデックになりつつあるH.264</li>\n<li>`mediatype=video`のところ</li>\n<li>異なるデバイス同士で通信したい場合に</li>\n<li>Videoが表示されるまで\n<ul>\n<li>Camera</li>\n<li>Video Encoder</li>\n<li>Video Packetizer</li>\n<li>UDP</li>\n<li>Video Depacketizer</li>\n<li>Video Decoder</li>\n<li>Display</li>\n</ul></li>\n<li>H.264はRFC6184にて</li>\n<li>どうやって統一するか</li>\n<li>`profile-level-id`をSDPで定義してあわせる\n<ul>\n<li>デコーダの能力</li>\n<li>サイズ・ビットレート</li>\n</ul></li>\n<li>`packetization-mode`も</li>\n</ul><p>FireFox x Chrome M52ならH.264で通信できる！</p>\n\n</div>"
}
