{
  "title": "第65回 HTML5とか勉強会 ー React最新情報 に行ってきたメモ #html5j",
  "html": "<p><blockquote class=\"twitter-tweet\" data-lang=\"HASH(0xa2b7230)\"><p lang=\"ja\" dir=\"ltr\">Angularの人が受付してるReactの勉強会に着いたやで</p>&mdash; りぃ (@leader22) <a href=\"https://twitter.com/leader22/status/737589264716693504\">May 31, 2016</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><br />\n<p>ちなみに、今年のHTML5 Conferenceは9/3（土）だそうです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>React現状確認 by @koba04</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/koba04/the-state-of-react-dot-js-2016\">The state of React.js 2016 // Speaker Deck</a></p>\n\n    </blockquote>\n\n<ul>\n<li>React.js meetup #4が6月にあるかも</li>\n<li>Reactの使用例\n<ul>\n<li>Instagram, Netflix, Uber etc..</li>\n<li>Twitterのモバイル版 <- 知らんかった</li>\n</ul></li>\n<li>SFC: StatelessFunctionalComponentsがコンポーネントの基本</li>\n<li>MixinはなくなったのでHighOrderComponentのスタイルで機能を追加</li>\n<li>新しくReact.PureComponentってのが増えるかも</li>\n<li>`shouldComponentUpdate()`でチューニングするのがやっぱ速い</li>\n<li>パフォーマンスチューニングするなら\n<ul>\n<li>定番の`react-addons-perf`</li>\n<li>`why-did-you-update`ってパッケージもある</li>\n</ul></li>\n<li>PropTypesはLegacyで、FlowやらTypeScriptを使っていく流れに</li>\n<li>`setState()`は基本的にはまとめて反映される（が、特定の場合にまとめられない\n<ul>\n<li>`unstable_batchedUpdates()`ってのもあって、まとめて`setState()`してくれる</li>\n</ul></li>\n<li>StringRefもLegacyで、Refはcallbackで取るべし</li>\n<li>テストで使える`shallowRenderer`\n<ul>\n<li>そのコンポーネントの一階層下までだけrenderしてくれる</li>\n</ul></li>\n<li><a href=\"https://github.com/airbnb/enzyme\">GitHub - airbnb/enzyme: JavaScript Testing utilities for React</a></li>\n<li>ESLint x eslint-plugin-react</li>\n<li>最新情報は\n<ul>\n<li>`reactjs/core-notes`を追うと○</li>\n<li><a href=\"https://github.com/reactjs/react-basic\">GitHub - reactjs/react-basic: A description of the conceptual model of React without implementation burden.</a></li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>あとで`tap-event-plugin`についてきく</h4>\n    <p>メジャーバージョンアップすれば取り込まれるからもうすぐなくなるよ！！って言い続けてたけど、今も結局必要なままで・・。<br />\nどうなってるんですか？って聞いたけど、 @koba04 さんも知らないだそうですｗ</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>なぜReduxを使うのか by @kuy</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/kuy/nazereduxwoshi-ufalseka\">&#x306A;&#x305C;Redux&#x3092;&#x4F7F;&#x3046;&#x306E;&#x304B; // Speaker Deck</a></p>\n\n    </blockquote>\n<p>アカウントの読みは[kai]です！</p>\n\n<ul>\n<li>Redux機運の高まりを感じる\n<ul>\n<li>同時によーわからんって声もきく</li>\n</ul></li>\n<li>Reactだけだとつらい問題があってFluxがきたがそれでもつらいのでRedux</li>\n<li>ReduxはFluxのStoreの債務を分割しただけ</li>\n<li>Reduxは複数のStoreの存在を許さない\n<ul>\n<li>代わりにReducerを複数にする</li>\n</ul></li>\n<li>Stateの分割の考え方はボトムアップ</li>\n<li>素のReduxはオススメせず、Middlewareをあわせて使うべし\n<ul>\n<li>redux-form, redux-saga, etc..</li>\n</ul></li>\n<li>とあるreducer内で他所ののstateが欲しくなったら、そもそもStateの構造を見直すのが吉</li>\n<li>非同期するならredux-sagaがよさげ</li>\n<li>Reducerの分割がReduxのキモ</li>\n<li>Middlewareの選定も大事</li>\n</ul><p>うーん、やっぱりむずかしいよーーReduxーーーというのが正直なきもち。</p><p>なんか違和感がずっと残ってるのは、この発表内でもそうやったけど、</p>\n\n<ul>\n<li>Reduxもまだまだ試行錯誤する余地がある</li>\n<li>なのにReduxが界隈の唯一解として語られてる（ように見える</li>\n</ul><p>からなんよなー。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Relay by @hokaccha</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/hokaccha/relay-1\">relay // Speaker Deck</a></p>\n\n    </blockquote>\n\n<ul>\n<li>react-relay x graphql-relay</li>\n<li>データのストア、APIのハンドリングも全部やるのがRelay\n<ul>\n<li>サーバーの仕様・実装まで規定する</li>\n</ul></li>\n<li>GraphQL\n<ul>\n<li>REST/RPCと同じレイヤー</li>\n</ul></li>\n<li>エンドポイントは1つだけ\n<ul>\n<li>RESTでは複数のリクエストが必要なところを</li>\n<li>クエリを組み上げ（ネスト）れば1リクエストで済む</li>\n</ul></li>\n<li>React.ComponentをRelayコンポーネントにして使う\n<ul>\n<li>宣言的に欲しいデータへのクエリが書ける</li>\n</ul></li>\n<li>Relay.QL(`ここにクエリを書く`)\n<ul>\n<li>JSXみたいな記法じゃない！やった！</li>\n<li>でもBabel通さないと動かない意味ない＼(^o^)／</li>\n<li><a href=\"https://www.npmjs.com/package/babel-relay-plugin\">babel-relay-plugin</a></li>\n</ul></li>\n<li>現状のRelayはつらい\n<ul>\n<li>Babelもサーバーがいる</li>\n<li>クエリ脳に慣れない</li>\n<li>サンプルが少ないというか無い</li>\n</ul></li>\n</ul><p>Falcorと一緒で敷居の高さがすごいやんね・・・。<br />\nあと後から導入できるシロモノではないよね。</p>\n\n</div>\n<div class=\"section\">\n    <h3>How to style React components by @Quramy</h3>\n    \n    <blockquote>\n        <p><a href=\"https://quramy.github.io/react-css-note/#/\">How to style React components</a></p>\n\n    </blockquote>\n\n<ul>\n<li>最近のライブラリは\"コンポーネント\"を作ることができる\n<ul>\n<li>React.Component, Angular.module, Vue.component, etc..</li>\n</ul></li>\n<li>CSSは外部からの影響を受けやすい</li>\n<li>子コンポーネントへも影響する可能性がある</li>\n<li>CSSのセレクタがグローバルなのが問題</li>\n<li>どうするか\n<ul>\n<li>ルール・命名で縛る（BEM）</li>\n<li>WebComponents</li>\n<li>CSS in JS</li>\n<li>CSS Modules</li>\n</ul></li>\n<li>CSS in JSは、Styleオブジェクトをjsで作る\n<ul>\n<li>オブジェクトなので`assign`すれば@mixinとか@extendの代替もできる</li>\n<li>jsなのでconstとかも使える</li>\n<li>ただ擬似要素・擬似クラスが使えない</li>\n<li>メディアクエリやキーフレームアニメーションもできない</li>\n</ul></li>\n<li>一部なら、ライブラリでなんとかなるが・・\n<ul>\n<li><a href=\"https://github.com/FormidableLabs/radium\">GitHub - FormidableLabs/radium: A toolchain for React component styling.</a></li>\n<li><a href=\"https://github.com/js-next/react-style\">GitHub - js-next/react-style: Maintainable styling for React.js components [not actively maintained anymore]</a></li>\n<li><a href=\"https://github.com/petehunt/jsxstyle\">GitHub - petehunt/jsxstyle</a></li>\n</ul></li>\n<li>CSS Modulesは、CSSをJSで使う\n<ul>\n<li>jsでcssをimportする</li>\n<li>その時に独自のクラス名がつく</li>\n</ul></li>\n<li>webpackでロードする必要あり</li>\n<li><a href=\"http://morishitter.hatenablog.com/entry/2015/09/28/103334\">CSS Modules &#x6240;&#x611F; - morishitter blog</a></li>\n</ul><p>CSSをコンポーネントに押し込んだところでどのみちカオスなコードを生み出す未来が見えるので、おとなしく綺麗にCSSを書いたらいいのでは？と思ってしまうのは、CSSも一応書けるよっていう人種やからなんかな( ˘ω˘)ｽﾔｧ</p>\n\n</div>\n<div class=\"section\">\n    <h3>Atomic Design powered by React @ AbemaTV by @ygoto3_</h3>\n    \n    <blockquote>\n        <p><a href=\"http://www.slideshare.net/ygoto3q/atomic-desigin-powered-by-react-abematv\">Atomic Desigin powered by React @ AbemaTV</a></p>\n\n    </blockquote>\n\n<ul>\n<li>空気を読みながら開発スタートしたAbemaTV\n<ul>\n<li>なのでいつ変更が入るかわからない</li>\n<li>画面仕様が変わっても怖くないように組む必要があった</li>\n</ul></li>\n<li><a href=\"http://bradfrost.com/blog/post/atomic-web-design/\">Atomic Design | Brad Frost</a></li>\n<li>原子 > 分子みたくコンポーネントを分解して考える\n<ul>\n<li>Atom: もっとも細かい（ボタンとか、アイコンとか、テキストラベルとか）</li>\n<li>Molecules: Atomの組合せ</li>\n<li>Organisms: AtomとMoleculesの組合せ</li>\n</ul></li>\n<li><a href=\"http://ygoto3.com/posts/atomic-design-on-actual-project/\">Atomic Design &#x3092;&#x5B9F;&#x6848;&#x4EF6;&#x306B;&#x5C0E;&#x5165; - UI &#x30B3;&#x30F3;&#x30DD;&#x30FC;&#x30CD;&#x30F3;&#x30C8;&#x306E;&#x7C92;&#x5EA6;&#x3092;&#x660E;&#x78BA;&#x5316;&#x3057;&#x305F;&#x7D50;&#x679C;&#x3068;&#x526F;&#x7523;&#x7269; | ygoto3.com</a></li>\n<li>データに触れるコンポーネントと、表示に徹するコンポーネントに分ける\n<ul>\n<li>表示に徹する方を、AtomicDesignの要素として使う</li>\n<li>Actionも発行させないし、Storeのデータもさわらせない</li>\n</ul></li>\n<li>そうするとコンポーネントのガイドも作成可能</li>\n</ul><p>個人的にはさっきのCSS in JS問題でもあったようにCSSはCSSで書け派なので、こういうアプローチは割と好き。<br />\nBEMと粒度がちょっと違ったりするくらいな気がするけど、やっぱそこは設計する人のセンスに依存しちゃうんかなー。</p>\n\n</div>"
}
