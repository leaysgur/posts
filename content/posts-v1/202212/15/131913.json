{
  "title": "Cloudflare D1のデータベースファイルをダンプして使う",
  "html": "<p>Cloudflare WorkersのD1といえば、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>として立てたWorkerの内部で操作するのがまぁ一般的なはず。</p><p>ただ、D1は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SQLite\">SQLite</a>なので、その裏にいるDBファイルを持ち回すこともできるんでは？っていう。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"ダンプする\">ダンプする</h3>\n    <p>なんとそれ用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が用意されてる！</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/d1/platform/client-api/#await-dbdump\">https://developers.cloudflare.com/d1/platform/client-api/#await-dbdump</a></p>\n\n    </blockquote>\n<p>というわけで、こういうコードをWorkerで実装すればよい。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> <span class=\"synIdentifier\">{</span>\n  async fetch(_req, env, _ctx) <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> db = env.DB;\n\n    <span class=\"synStatement\">const</span> arrayBuffer = await db.dump();\n    <span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> Response(arrayBuffer, <span class=\"synIdentifier\">{</span>\n      headers: <span class=\"synIdentifier\">{</span>\n        <span class=\"synConstant\">&quot;Content-Type&quot;</span>: <span class=\"synConstant\">&quot;application/octet-stream&quot;</span>,\n      <span class=\"synIdentifier\">}</span>,\n    <span class=\"synIdentifier\">}</span>;\n  <span class=\"synIdentifier\">}</span>,\n<span class=\"synIdentifier\">}</span>;\n</pre><p>これだけで、このエンドポイントから<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SQLite\">SQLite</a>のバイナリが落とせるようになる。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"ダッシュボードからでも\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C0%A5%C3%A5%B7%A5%E5\">ダッシュ</a>ボードからでも</h3>\n    <p>どうやらD1は1-2時間くらいの間隔で自動バックアップしてくれてる（手動実行もできる）ので、それを直接ダウンロードすることでも入手できた。</p><p>Cloudflareの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C0%A5%C3%A5%B7%A5%E5\">ダッシュ</a>ボードにブラウザでログインして、該当のD1データベースの特定のバックアップをダウンロードするだけ。<br />\n（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GUI\">GUI</a>からリストアできるのはじめて知った）</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"あとは使うだけ\">あとは使うだけ</h3>\n    <p>`sqlite3 dump.db`みたいにするなり。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SQL\">SQL</a>.jsなんかを使えば、ブラウザで使うこともできる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> initSqlJs from <span class=\"synConstant\">&quot;sql.js&quot;</span>;\n\n<span class=\"synStatement\">const</span> SQL = await initSqlJs(<span class=\"synIdentifier\">{</span>\n  locateFile: (file) =&gt; <span class=\"synConstant\">`https://sql.js.org/dist/</span><span class=\"synSpecial\">${file}</span><span class=\"synConstant\">`</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synStatement\">const</span> res = await fetch(<span class=\"synConstant\">&quot;/my-db-dump-endpoint&quot;</span>);\n<span class=\"synStatement\">const</span> ab = await res.arrayBuffer();\n\n<span class=\"synStatement\">const</span> db = <span class=\"synStatement\">new</span> SQL.Database(<span class=\"synStatement\">new</span> Uint8Array(ab));\n</pre><p>あとは煮るなり焼くなり。</p><p>前回の記事で書いた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SQLite\">SQLite</a>公式の実装からでも、同様のことはできるはず。</p>\n\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2022/12/02/134526\">SQLite&#x516C;&#x5F0F;&#x306E;WASM&#x5B9F;&#x88C5;&#x3092;&#x8A66;&#x3059; - console.lealog();</a></p>\n\n    </blockquote>\n\n</div>"
}
