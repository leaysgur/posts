{
  "title": "SQLite公式のWASM実装を試す",
  "html": "\n    <blockquote>\n        <p><a href=\"https://sqlite.org/wasm/doc/trunk/index.md\">sqlite3 wasm docs: sqlite3 WebAssembly &amp;amp; JavaScript Documentation Index</a></p>\n\n    </blockquote>\n<p>別にいままでも、公式ではないWASM実装はブラウザで使えてたけど、公式が出すからには何かあるに違いない！ということで一応。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"インストール\">インストール</h3>\n    <p>いつものようにまず、`npm`からインストール・・・できない。</p><p>少なくとも、調べた限りでは、ダウンロードページから`.zip`で落としてくるほかなさそうだった。</p><p>（この時点でそういうステータスなんやなと悟る）</p>\n\n    <blockquote>\n        <p><a href=\"https://www.sqlite.org/download.html\">SQLite Download Page</a></p>\n\n    </blockquote>\n<p>このページにある、WebAssembly & JavaScriptのところ。<br />\nこれを書いてる時点では、`sqlite-wasm-3400000.zip`ってやつだった。</p><p>中身はこんな感じ。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>sqlite-wasm-3400000\n├── README.txt\n├── common\n│   ├── SqliteTestUtil.js\n│   ├── emscripten.css\n│   └── testing.css\n├── demo-123-worker.html\n├── demo-123.html\n├── demo-123.js\n├── demo-jsstorage.html\n├── demo-jsstorage.js\n├── demo-worker1-promiser.html\n├── demo-worker1-promiser.js\n├── demo-worker1.html\n├── demo-worker1.js\n├── index.html\n├── jswasm\n│   ├── sqlite3-opfs-async-proxy.js\n│   ├── sqlite3-worker1-promiser.js\n│   ├── sqlite3-worker1.js\n│   ├── sqlite3.js\n│   └── sqlite3.wasm\n├── tester1-worker.html\n├── tester1.html\n└── tester1.js</pre><p>肝心のコードも、ただのデモのコードもごっちゃになって入ってる。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"使ってみる\">使ってみる</h3>\n    <p>とりあえず動かしてみる。<br />\n同梱されてるデモでも確認できるけど、最小構成を試したいので自力で書く。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synComment\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\"> </span><span class=\"synType\">lang</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;en&quot;</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">  </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">meta</span><span class=\"synIdentifier\"> </span><span class=\"synType\">charset</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;UTF-8&quot;</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">  </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">title</span><span class=\"synIdentifier\">&gt;</span>SQLite WASM<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">title</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;./sqlite-wasm-3400000/jswasm/sqlite3.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;./main.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>ダウンロードしてきたファイルにある、`jswasm/sqlite3.js`を使うのが最小構成。</p><p>`main.js`ではこのように。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>(async () =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> sqlite3 = await <span class=\"synStatement\">window</span>.sqlite3InitModule();\n  console.log(sqlite3);\n<span class=\"synIdentifier\">}</span>)();\n</pre><p>`sqlite3InitModule()`を呼ぶと、`jswasm/sqlite3.wasm`が読み込まれて、JSから操作できるようになる。</p><p>にしてもこの`sqlite3.js`、ESMでもなくTree-shakingできない上に10000行！みたいな感じで、うーむ。<br />\nドキュメントには`sqlite3.mjs`も同梱って書いてあるけど、この時は入ってなかった。</p><p>CJSっぽいコードは見たので、自前でバンドルすればそういう書き方はできるはず。</p>\n\n<div class=\"section\">\n    <h4 id=\"Workerからも使える\">Workerからも使える</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">new</span> Worker(<span class=\"synConstant\">&quot;./jswasm/sqlite3-worker1.js&quot;</span>);\n</pre><p>というようにもできるし、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;./jswasm/sqlite3-worker1-promiser.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>から、Workerとのやり取りを`Promise`でラップしたものが使えてちょっとうれしい。</p>\n\n    <blockquote>\n        <p><a href=\"https://sqlite.org/wasm/doc/trunk/api-worker1.md\">sqlite3 wasm docs: Workers and Promises (a.k.a. Worker1 and Promiser)</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"sqlite3オブジェクト\">sqlite3オブジェクト</h3>\n    <p>さっきのコードで取得した`sqlite3`から、各種オペレーションをやっていくことになるが、使えるAPIは大きく2つある。</p>\n\n<ul>\n<li>`sqlite3.capi`: C-style API</li>\n<li>`sqlite3.oo1`: OO API #1</li>\n</ul><p>前者はC言語のAPIに準拠してるので、よりstableとのこと。（`sqlite3_open`とかそういうやつ）</p><p>後者はJSで使いやすいようにしてみた！というやつで、変更の可能性もあるやつとのこと。</p><p>まあ我々が期待するのは後者かなって感じ。</p>\n\n    <blockquote>\n        <p><a href=\"https://sqlite.org/wasm/doc/trunk/api-oo1.md\">sqlite3 wasm docs: Object Oriented API #1 (a.k.a. oo1)</a></p>\n\n    </blockquote>\n<p>コードで書いてみるとこんな具合。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>(async () =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> sqlite3 = await <span class=\"synStatement\">window</span>.sqlite3InitModule();\n\n  <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> DB <span class=\"synIdentifier\">}</span> = sqlite3.oo1;\n  <span class=\"synComment\">// Use :memory: storage</span>\n  <span class=\"synStatement\">const</span> db = <span class=\"synStatement\">new</span> DB();\n\n  db.exec(<span class=\"synConstant\">&quot;CREATE TABLE IF NOT EXISTS users(id INTEGER, name TEXT)&quot;</span>);\n\n  <span class=\"synStatement\">const</span> stmt = db.prepare(<span class=\"synConstant\">&quot;insert into users values(?, ?)&quot;</span>);\n  stmt.bind(<span class=\"synIdentifier\">[</span>1, <span class=\"synConstant\">&quot;Alice&quot;</span><span class=\"synIdentifier\">]</span>).stepReset();\n  stmt.bind(<span class=\"synIdentifier\">[</span>2, <span class=\"synConstant\">&quot;Bob&quot;</span><span class=\"synIdentifier\">]</span>).stepReset();\n  stmt.finalize();\n\n  <span class=\"synStatement\">const</span> resultRows = <span class=\"synIdentifier\">[]</span>;\n  db.exec(<span class=\"synIdentifier\">{</span>\n    sql: <span class=\"synConstant\">&quot;SELECT * FROM users&quot;</span>,\n    rowMode: <span class=\"synConstant\">&quot;object&quot;</span>,\n    resultRows,\n  <span class=\"synIdentifier\">}</span>);\n\n  <span class=\"synComment\">// Logs { id, name }[]</span>\n  console.log(resultRows);\n<span class=\"synIdentifier\">}</span>)();\n</pre><p>ふむ。</p><p>このOO1、他にもDBの状態を`LocalStorage`なんかに保存する機能や、OPFSで永続化するためのコードなんかも入ってる。</p>\n\n    <blockquote>\n        <p><a href=\"https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/\">The File System Access API with Origin Private File System | WebKit</a></p>\n\n    </blockquote>\n<p>OPFSって単語は初見やったけど、要はFile System Access APIのことね。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"まとめ\">まとめ</h3>\n    \n    <blockquote>\n        <p>Except where noted in the non-goals, provide a more-or-less feature-complete wrapper to the sqlite3 C API, insofar as WASM feature parity with C allows for. In fact, provide at least the following APIs...<br />\n  1. Bind a low-level sqlite3 API which is as close to the native one as feasible in terms of usage.<br />\n  2. A higher-level OO API, more akin to sql.js and node.js-style implementations. This one speaks directly to the low-level API. This API must be used from the same thread as the low-level API.<br />\n  3. A Worker-based API which speaks to the previous APIs via Worker messages. This one is intended for use in the main thread, with the lower-level APIs installed in a Worker thread, and talking to them via Worker messages. Because Workers are asynchronous and have only a single message channel, some acrobatics are needed here to feed async work results back to the client (as we cannot simply pass around callbacks between the main and Worker threads).<br />\n  4. A Promise-based variant of the Worker API (#3, above) which entirely hides the cross-thread communication aspects from the user.</p><p>Insofar as possible, support persistent client-side storage using available JS APIs. As of this writing, that includes the Origin-Private FileSystem (OPFS) and (very limited) storage via the window.localStorage and window.sessionStorage backend.</p>\n\n    </blockquote>\n<p>というわけで、</p>\n\n<ul>\n<li>各種APIをWASMから提供することが目標\n<ul>\n<li>C APIみたいなLowレベルのもの</li>\n<li>OO APIみたいなHighレベルのもの</li>\n<li>Workerで利用できるもの</li>\n<li>WorkerをメインスレッドからもPromise経由で利用できるもの</li>\n</ul></li>\n<li>ブラウザでの永続化もできるようにしたい\n<ul>\n<li>OPFS</li>\n<li>Web Storage（制限つき）</li>\n</ul></li>\n</ul><p>という汎用的な目標があるそうな。</p><p>ローカルで完結するアプリを作る！って場合に、はじめて輝きそうではある。<br />\nまあブラウザでSQLite使いたいモチベーションって、それくらいなもんかって気もするけど。</p><p>今のままだと`sql.js`よりもフットプリントが大きいので、汎用性は求めてないって場合には使わないかも。</p>\n\n</div>"
}
