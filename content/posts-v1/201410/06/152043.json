{
  "title": "compareDocumentPositionとビットマスクとビット演算",
  "html": "<p>部屋とYシャツと私みたいなタイトルになった・・。</p><p>わかったのかわかってないのか、とりあえず調べたことをメモっておくための記事。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>事の発端</h3>\n    <p>とある偉人のコードを見てた時に見つけた以下の行。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> DOCUMENT_POSITION_ANCESTOR = global.Node.DOCUMENT_POSITION_PRECEDING | global.Node.DOCUMENT_POSITION_CONTAINS;\n<span class=\"synIdentifier\">var</span> DOCUMENT_POSITION_DESCENDANT = global.Node.DOCUMENT_POSITION_FOLLOWING | global.Node.DOCUMENT_POSITION_CONTAINED_BY;\n</pre><p>どゆこと・・？</p><p>もしかして || って書こうとしてて忘れたんかな・・・って、<br />\nまあそんなわけ万が一にもないですよねー、ということで、コイツの正体を追っていくことに。</p>\n\n</div>\n<div class=\"section\">\n    <h3>コレで何してるか</h3>\n    <p>もちろん変数にとってあるので使う目的があるはず。<br />\nそれを見てみると・・・、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>pos = <span class=\"synIdentifier\">this</span>.target.compareDocumentPosition(touchInfo.target);\n<span class=\"synStatement\">if</span> (pos === DOCUMENT_POSITION_ANCESTOR || pos === DOCUMENT_POSITION_DESCENDANT) <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>ふむ。</p><br />\n<p>・・ふむ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>node.compareDocumentPosition(otherNode)とは</h3>\n    \n    <blockquote>\n        <p>参考: <a =href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.compareDocumentPosition\" target=\"_blank\">Node.compareDocumentPosition() - Web API Interfaces | MDN</a></p>\n\n    </blockquote>\n<p>これはなにかというと、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> head = <span class=\"synStatement\">document</span>.getElementsByTagName(<span class=\"synConstant\">'head'</span>).item(0);\nhead.compareDocumentPosition(<span class=\"synStatement\">document</span>.body); <span class=\"synComment\">// =&gt; 4</span>\n</pre><p>というように、ノード間の位置関係を取得するメソッド。</p><p>上記の例でいうと、head と body はHTMLの構造としては以下で、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>返ってきた 4 は、DOCUMENT_POSITION_FOLLOWING の 4 らしく、<br />\nつまり、head からすると body は、後にある(=FOLLOWING)関係ってことになる。</p>\n\n<div class=\"section\">\n    <h4>The return value is a bitmask with the following values:</h4>\n    <p>さっきの 4 についてもっと詳しく。<br />\ncompareDocumentPositionの返り値は以下で、ビットマスクであるらしい。</p>\n\n<div class=\"section\">\n    <h5>a.compareDocumentPosition(b)のとき、</h5>\n    \n<table>\n    <tr>\n    <th>name</th>\n    <th>value</th>\n    <th>意訳</th>\n    </tr>\n    <tr>\n    <td>DOCUMENT_POSITION_DISCONNECTED</td>\n    <td>1</td>\n    <td>bはaと同一tree上にない</td>\n    </tr>\n    <tr>\n    <td>DOCUMENT_POSITION_PRECEDING</td>\n    <td>2</td>\n    <td>bはaの前にある</td>\n    </tr>\n    <tr>\n    <td>DOCUMENT_POSITION_FOLLOWING</td>\n    <td>4</td>\n    <td>bはaの後にある</td>\n    </tr>\n    <tr>\n    <td>DOCUMENT_POSITION_CONTAINS</td>\n    <td>8</td>\n    <td>bはaを含んでいる</td>\n    </tr>\n    <tr>\n    <td>DOCUMENT_POSITION_CONTAINED_BY</td>\n    <td>16</td>\n    <td>bはaに含まれている</td>\n    </tr>\n    <tr>\n    <td>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</td>\n    <td>32</td>\n    <td>実装次第(なんだと...)</td>\n    </tr>\n</table><p><br />\nさて、さっきの例では 4 が返ってきたけども、以下の例だと違う。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> head  = <span class=\"synStatement\">document</span>.getElementsByTagName(<span class=\"synConstant\">'head'</span>).item(0);\n<span class=\"synIdentifier\">var</span> title = <span class=\"synStatement\">document</span>.getElementsByTagName(<span class=\"synConstant\">'title'</span>).item(0);\n\nhead.compareDocumentPosition(title); <span class=\"synComment\">// =&gt; 20</span>\n</pre><p>これはHTML構造でみると、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">    </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">title</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">title</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">  </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>さっきの表とてらしてぱっと見る感じ、</p>\n\n<ul>\n<li>titleはheadより、後ろにある</li>\n<li>titleはheadに、含まれている</li>\n</ul><p>なので、20。</p><p>えーっと、それはなんで？ってことで次。</p>\n\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3>ビットマスクとビット演算と</h3>\n    <p>さっきの返り値 20 は、10進数の 20 。<br />\nただコレはビットマスクで表した結果であると書いてありました。</p><p>ビットマスクについてはまず以下の記事を。</p>\n\n    <blockquote>\n        <p>参考: <a href =\"https://developer.mozilla.org/ja/docs/JavaScript/Reference/Operators/Bitwise_Operators#Example.3A_Flags_and_bitmasks\" target=\"_blank\">ビット演算子 - JavaScript | MDN</a></p>\n\n    </blockquote>\n<p>2進数で1|0のフラグを複数組み合わせて単一の条件を表現するって感じかね。</p><p>さっきの例でいうと、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// この結果が 20</span>\nhead.compareDocumentPosition(title); <span class=\"synComment\">// =&gt; 20</span>\n\n<span class=\"synComment\">// 20はビットマスクで20なので、</span>\n<span class=\"synComment\">// どういうビットの並びかを調べるには、2進数にする</span>\n(20).toString(2); <span class=\"synComment\">// =&gt; 10100</span>\n\n<span class=\"synComment\">// 10100は、10000 と 100 から成るビットマスクってことがわかったので、</span>\n\n<span class=\"synComment\">// 10000 を10進数に戻す</span>\nparseInt(10000, 2); <span class=\"synComment\">// =&gt; 16</span>\n\n<span class=\"synComment\">// 100 も10進数に戻す</span>\nparseInt(100, 2); <span class=\"synComment\">// =&gt; 4</span>\n</pre><p>さっきの表でみると</p>\n\n<ul>\n<li>4: DOCUMENT_POSITION_FOLLOWING (=後にある)</li>\n<li>16: DOCUMENT_POSITION_CONTAINED_BY (=含まれている)</li>\n</ul><p>なので、最初の予想と同じになる、って感じ。</p>\n\n<div class=\"section\">\n    <h4>ビット演算の | は</h4>\n    <p>a | b でどっちかが 1 なら 1 になるので、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> FLAG_A = 1; <span class=\"synComment\">// 0001</span>\n<span class=\"synIdentifier\">var</span> FLAG_B = 2; <span class=\"synComment\">// 0010</span>\n<span class=\"synIdentifier\">var</span> FLAG_C = 4; <span class=\"synComment\">// 0100</span>\n<span class=\"synIdentifier\">var</span> FLAG_D = 8; <span class=\"synComment\">// 1000</span>\n<span class=\"synComment\">// -----------------------</span>\n<span class=\"synComment\">// AかBかC ------&gt; 0111</span>\n\n<span class=\"synIdentifier\">var</span> mask = FLAG_A | FLAG_B | FLAG_C; <span class=\"synComment\">// =&gt; 0111なので 7</span>\n</pre><p>となる。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ここで最初のコードに</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> DOCUMENT_POSITION_ANCESTOR = global.Node.DOCUMENT_POSITION_PRECEDING | global.Node.DOCUMENT_POSITION_CONTAINS;\n<span class=\"synIdentifier\">var</span> DOCUMENT_POSITION_DESCENDANT = global.Node.DOCUMENT_POSITION_FOLLOWING | global.Node.DOCUMENT_POSITION_CONTAINED_BY;\n</pre><p>さっきの表とてらしてみる</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> DOCUMENT_POSITION_ANCESTOR = 2 | 8; <span class=\"synComment\">// =&gt; 10</span>\n<span class=\"synIdentifier\">var</span> DOCUMENT_POSITION_DESCENDANT = 4 | 16; <span class=\"synComment\">// =&gt; 20</span>\n</pre><p>つまり、このコードの意味は、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>pos = <span class=\"synIdentifier\">this</span>.target.compareDocumentPosition(touchInfo.target);\n<span class=\"synStatement\">if</span> (pos === 10 || pos === 20) <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>ここでいう pos が、</p>\n\n<ul>\n<li>4: DOCUMENT_POSITION_FOLLOWING (=後にある)</li>\n<li>16: DOCUMENT_POSITION_CONTAINED_BY (=含まれている)</li>\n</ul><p>の組み合わせで 20 のとき</p><p>もしくは、</p>\n\n<ul>\n<li>2: DOCUMENT_POSITION_PRECEDING (=前にある)</li>\n<li>8: DOCUMENT_POSITION_CONTAINS  (=含んでいる)</li>\n</ul><p>の組み合わせで 10 のとき</p><p>っていう判別をしていることになる・・と。</p><br />\n<p>あーそーゆことね、完全に理解した！</p>\n\n</div>"
}
