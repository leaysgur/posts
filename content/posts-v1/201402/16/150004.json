{
  "title": "いまさらBackbone.jsでSPAぽいものを作ったので",
  "html": "<p>反省と学びをメモしておきます。</p><p>リポジトリは、</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/leader22/simple-pokedex\" target=\"_blank\" title=\"leader22/simple-pokedex\">leader22/simple-pokedex</a></p>\n\n    </blockquote>\n<p>ご参考まで。</p>\n\n    <blockquote>\n        <p>2014/04/24現在、Backbone.Marionetteで作りなおしました。</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>作ったものの概要</h3>\n    <p>簡単なポケモン図鑑です。<br />\n布団の中でWiFi対戦に潜ってて、「そもそもコイツ何タイプ・・？」とか、「コイツって耐久あるんやっけ？」とかなったとき、<br />\n対戦wikiをGoogleで検索してる時間はないけどサクッと知りたい・・！っていう個人的ニーズのもと作られました。</p>\n\n<ul>\n<li>あいうえおから検索</li>\n<li>図鑑No順の一覧から検索</li>\n</ul><p>すると、種族値と特性とタイプ相性がわかります。<br />\nそれだけ。</p><p>実装的には、</p>\n\n<ul>\n<li>Backbone.jsでできてる</li>\n<li>Require.jsで依存管理</li>\n<li>いわゆるSPA</li>\n<li>JSTはプリコンパイル</li>\n<li>1ソースでバイリンガル対応</li>\n<li>マスタデータはLocalStorageに貯めてる</li>\n<li>フラットデザイン風</li>\n</ul><p>やってみたかった感満載の一品となっております。</p>\n\n</div>\n<div class=\"section\">\n    <h3>所感つらつら</h3>\n    \n<ul>\n<li>Backboneは確かに背骨</li>\n<li>でも背骨だけでは何も成せない</li>\n<li>underscoreとjQueryはほんとにすごい</li>\n<li>Require.jsは個人的に賛否両論</li>\n<li>規模はどうあれ結局、設計がイノチ</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>Backbone.jsの勘所</h3>\n    <p>自分の作りたいものと比較して、コレだ！っていうサンプルが見つからなかったのが辛かったです。<br />\nよって、出来上がったコードも正解ではないんやろなーって箇所がちらほらいます。</p><p>いちおう、今後のために書き留めておきたいBackboneのノウハウ的なのは以下です。</p>\n\n<div class=\"section\">\n    <h4>Backbone.Routerが起点になる</h4>\n    <p>さて、どこからコード書いていこうかってなったときに、ここから書き始めると良いと思いました。<br />\nいわゆるエントリーポイントってやつですかね。</p><p>ただこのRouterを起点に据えてしまうと、このアプリ全体！って概念と競合する気がするので、しっかり決めなきゃな感じ。</p><p>あとは今回みたく、Routingの度にViewのインスタンス作るのか、最初に全部作っちゃって、表示の切替だけにするのか、とか。<br />\n今となっては、</p>\n\n<ul>\n<li>Viewは最初に全部インスタンスつくる</li>\n<li>RouterはViewの表示の切替メソッドだけ叩く</li>\n<li>DOMの更新が必要なViewは、そこを勝手に更新する</li>\n</ul><p>みたいなのが良かったかなーと思ったりも。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Collection.fetchを保証してからViewを</h4>\n    <p>なんだかしかCollection的なものをサーバーサイドとやりとりするのであれば、これは重要だと思われます。<br />\nAjaxでデータ取ったりしてると、Viewの切り替え時にはまだレスポンスが返ってきてなくて白い画面が・・みたいのは回避したいので。<br />\nそもそもRouterでViewを切り替える部分で、Collectionのfetchなりをフックしてあげる必要がありそうです。</p><p>幸いな事に、 Backbone.Collection.fetch は  jqXHR を返してくれるので、こういうことができました。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>myCollectionFetch.done(<span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">new</span> MyView(<span class=\"synIdentifier\">{</span>\n    el: <span class=\"synConstant\">'#my-view'</span>,\n    collection: myCollection\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>Collection.fetch を自作する場合は、$.Deferred()でも使って、同じ感じになるようにすれば良い感じです。</p>\n\n</div>\n<div class=\"section\">\n    <h4>背骨の限界</h4>\n    <p>あと一歩的な意味で、物足りなさを感じる箇所がちらほら。</p><p>onBeforeRouteみたいなイベントも欲しくなってくるし。<br />\nViewの切り替えと同時に document.title を書き換えるとか、定型化するリンクのイベント管理とか、<br />\n逐一Viewに実装していくとなんだかなーみたいなやつらのやり場がなかったり。<br />\nあと1Route1Viewだったのでなんとかなってますが、コレは増えてきたら破綻するニオイがします。</p><p>まあこのあたりは、Backbone経験値を積めばなんとかなりそう(慣れそう)です。<br />\nMarionetteとかはそういうのを解決してくれるんやろうか。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>最後までわからなかったこと</h3>\n    <p>一応メモ。</p>\n\n<div class=\"section\">\n    <h4>Backbone.history.navigateどこまでやるか</h4>\n    <p>上述のとおり、定型化するリンクをViewに実装するたびに、 events に記述を増やすのがどうもなーと思ってまして。<br />\naタグのhrefに直接 #hoge って書いても動くので、もうそれでいいのでは・・と何度も心が折れそうになりました。<br />\nいい落とし所はどこなんでしょうか。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Collectionとうまくやる方法</h4>\n    <p>これはなんか見落としてるだけな気もするんですけど・・。</p><p>Backbone.Collection は Underscore.jsのいくつかのメソッドが使えます！的なことが書いてますが、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>myCollection.comparator = <span class=\"synConstant\">'name'</span>;\nmyCollection.sort(); <span class=\"synComment\">// OK</span>\n\nmyFilteredCollection = myCollection.filter();\n\nmyFilteredCollection.comparator = <span class=\"synConstant\">'id'</span>;\nmyFilteredCollection.sort(); <span class=\"synComment\">// NG: myFilteredCollection は、もはやBackbone.CollectionではなくBackbone.Modelのつまった配列</span>\n</pre><p>これはそういう仕様なのでしょうか。</p><p>あと先日記事にしたコレ。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://lealog.hateblo.jp/entry/2014/02/09/130032\" target=\"_blank\" title=\"Backbone.Collection.get()がよくわからない - console.lealog();\">Backbone.Collection.get()がよくわからない - console.lealog();</a></p>\n\n    </blockquote>\n<p>うーん、わからない。</p>\n\n</div>\n<div class=\"section\">\n    <h4>濁点含む文字列のうまいsort</h4>\n    <p>これはなんかそもそもですけど・・。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> arr = <span class=\"synIdentifier\">[</span><span class=\"synConstant\">'カイロス'</span>, <span class=\"synConstant\">'ガブリアス'</span>, <span class=\"synConstant\">'カメックス'</span><span class=\"synIdentifier\">]</span>;\narr.sort(); <span class=\"synComment\">// [&quot;カイロス&quot;, &quot;カメックス&quot;, &quot;ガブリアス&quot;] ってなるけど元のままでいてほしい</span>\n</pre><p>これ、どうしたらいいんかなー。<br />\nunicodeとかに分解して云々すればいいんかな・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Handlebarsのプリコンパイルがコケる</h4>\n    <p>いろいろ調べたのですが、結局Underscoreのテンプレに乗り換えることで解決としました。</p><p>grunt-contrib-handlebarsが悪いとか、ランタイムのバージョンあげればなおるとか、<br />\nなんかいろいろ調べれば出てくるものの、結局どれもこれも効果がなく！<br />\nたぶんもうあのヒゲは使わないと思います・・・。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>ページ構成としてはたった4ページ。<br />\n機能も全然ないはずですが、それでも結構たいへんでした。<br />\n年明けからはじめたプロジェクトなので、製作期間はだいたい2ヶ月くらい。<br />\n(もっと余裕のある仕事に就いてればもっと早かったでしょうね・・・。)</p>\n\n</div>"
}
