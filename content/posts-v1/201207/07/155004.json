{
  "title": "配列から重複する値を削る関数とin演算子",
  "html": "\n    <blockquote>\n        <p>参考：<a href=\"http://www.softel.co.jp/blogs/tech/archives/2932\" target=\"_blank\">【Javascript】配列内の重複を除く at softelメモ</a></p>\n\n    </blockquote>\n<p>in<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>の使い方には、こういうのもあるんだなぁというメモ。</p>\n\n    <blockquote>\n        <p>実はfor-in文とin<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>をごっちゃに解釈していたのですが、投稿後<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>でフィードバックをいただき、以下の記事内容を少し修正・加筆しました。<br />\n助かります、ありがとうございます！</p>\n\n    </blockquote>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>in<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a></h3>\n    \n    <blockquote>\n        <p>参考：<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/in\" target=\"_blank\">in - MDN</a></p>\n\n    </blockquote>\n<p>これによると、</p><p>オブジェクトにプロパティが存在するかをチェックして、trueかfalseを返すやつで、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> obj = <span class=\"synIdentifier\">{</span>\n  first: <span class=\"synConstant\">'最初'</span>,\n  last: <span class=\"synConstant\">'最後'</span>\n<span class=\"synIdentifier\">}</span>;\n\nconsole.log(<span class=\"synConstant\">'first'</span> <span class=\"synStatement\">in</span> obj); <span class=\"synComment\">// true</span>\nconsole.log(<span class=\"synConstant\">'middle'</span> <span class=\"synStatement\">in</span> obj); <span class=\"synComment\">// false</span>\n</pre><p>値が設定されていようとなかろうと、プロパティがあればtrueになる・・と。</p><p>もうひとつ、別物だけれどもついでにメモ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>for-in文</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> obj = <span class=\"synIdentifier\">{</span>\n  first: <span class=\"synConstant\">'最初'</span>,\n  last: <span class=\"synConstant\">'最後'</span>\n<span class=\"synIdentifier\">}</span>;\n\n<span class=\"synStatement\">for</span>(<span class=\"synIdentifier\">var</span> i <span class=\"synStatement\">in</span> obj)<span class=\"synIdentifier\">{</span>\n  console.log(i, obj<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span>);\n<span class=\"synIdentifier\">}</span>\n<span class=\"synComment\">//  first 最初</span>\n<span class=\"synComment\">//  last 最後</span>\n</pre><p>みたいに、for-inのセットで使える文法もあったっけ。</p><p>これは配列の中身走査にも使えるけど、余分なやつまで引っ掛けたりするので普通は使っちゃいけない。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synType\">Array</span>.prototype.po = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{}</span>;\n<span class=\"synIdentifier\">var</span> arr = <span class=\"synIdentifier\">[</span>1,2,3<span class=\"synIdentifier\">]</span>;\n\n<span class=\"synStatement\">for</span> (<span class=\"synIdentifier\">var</span> i <span class=\"synStatement\">in</span> arr) <span class=\"synIdentifier\">{</span>\n  console.log(arr<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span>);\n<span class=\"synIdentifier\">}</span>\n<span class=\"synComment\">//  1, 2, 3, function()...</span>\n</pre>\n    <blockquote>\n        <p>inって書いてあるけど上述のin<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>とはまったくの別物！</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>冒頭の重複を削除する関数</h3>\n    <p>これは本題の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>のほうのinを使った例。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">function</span> unique(<span class=\"synType\">array</span>) <span class=\"synIdentifier\">{</span>\n　<span class=\"synIdentifier\">var</span> storage = <span class=\"synIdentifier\">{}</span>;\n　<span class=\"synIdentifier\">var</span> uniqueArray = <span class=\"synIdentifier\">[]</span>;\n　<span class=\"synIdentifier\">var</span> i,value;\n　<span class=\"synStatement\">for</span> ( i=0; i&lt;<span class=\"synType\">array</span>.length; i++) <span class=\"synIdentifier\">{</span>\n   　value = <span class=\"synType\">array</span><span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span>;\n      <span class=\"synStatement\">if</span> (!(value <span class=\"synStatement\">in</span> storage)) <span class=\"synIdentifier\">{</span>\n      　storage<span class=\"synIdentifier\">[</span>value<span class=\"synIdentifier\">]</span> = <span class=\"synConstant\">true</span>;\n         uniqueArray.push(value);\n       <span class=\"synIdentifier\">}</span>\n   <span class=\"synIdentifier\">}</span>\n   <span class=\"synStatement\">return</span> uniqueArray;\n<span class=\"synIdentifier\">}</span>\n</pre>\n<div class=\"section\">\n    <h4>使い方</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// チェックしたい配列を用意して、</span>\n<span class=\"synIdentifier\">var</span> arr = <span class=\"synIdentifier\">[</span>1, 2, 3, 1, 3, 3<span class=\"synIdentifier\">]</span>;\n\n<span class=\"synComment\">// 使うだけ。</span>\narr = unique(arr);\n\n<span class=\"synComment\">// すると配列が、[1, 2, 3]という具合に。</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h4>コードの意味</h4>\n    \n<ul>\n<li>引数で渡した配列の要素を、とりあえずプロパティとして仮オブジェクトに格納。</li>\n<li>最初はもちろん空っぽオブジェクトなので、問答無用で格納。</li>\n<li>2つ目以降の格納時は、仮オブジェクトに既にプロパティとして格納されてるかをチェック。</li>\n<li>格納されていない場合は、重複していない＝新規の要素として格納。</li>\n<li>最後に重複を取り除いた配列を返す。</li>\n</ul><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">if</span> (!(value <span class=\"synStatement\">in</span> storage))\n</pre><p>これがキモですね・・。<br />\n単純に「既にプロパティとして存在するかどうか」をT/Fで返してくれるin<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>を、条件分岐に使う・・・！</p><p>「配列」の中身を走査するために「オブジェクト」使うっていう発想が！<br />\nでも確かにこのやり方賢いな・・。<br />\nいやー、奥が深いなぁ。</p>\n\n</div>\n</div>\n</div>"
}
