{
  "title": "Modern Web Development on the JAMstack を読んでまとめた",
  "html": "\n    <blockquote>\n        <p><a href=\"https://www.netlify.com/pdf/oreilly-modern-web-development-on-the-jamstack.pdf\">https://www.netlify.com/pdf/oreilly-modern-web-development-on-the-jamstack.pdf</a></p>\n\n    </blockquote>\n<p>Netlify社が2019年に公開した本？PDFです。</p><p>せっかくJamstackの会社に入ったので、読んでおかないといけない気がして。</p><p>あとJamstackは人によって解釈が違ったりするとし、Jamstackの真髄について知っておきたいですよね？と思い。</p><p>ただこれなんと127ページもあるんですよね〜。<br />\n全編もちろん英語なので、読むのも中々に大変ですよね〜。</p><p>てなわけで、ざっくり訳してまとめまておきました。（それでも長いけど）<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"はじめに\">はじめに</h3>\n    \n<ul>\n<li>ここ最近のWebの進化はすさまじい\n<ul>\n<li>ブラウザも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>もパワフルになった</li>\n</ul></li>\n<li>その分ユーザーの要求も増える\n<ul>\n<li>やることが増えると処理は遅くなる</li>\n<li>遅いページは見向きもされないモバイル当たり前の世界だ</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>ですら、表示速度を検索<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0\">アルゴリズム</a>に反映する</li>\n</ul></li>\n<li>そこで紹介したいのがJAMstack（今はJamstack表記）\n<ul>\n<li>より高速でスケールでき、負荷耐性もあって安全</li>\n</ul></li>\n<li>モノリシックなシステムに疲弊したことあるよね\n<ul>\n<li>Jamstackの意義がわかるはず</li>\n<li>開発者だけでなく、ユーザーにもメリットがある</li>\n</ul></li>\n<li>いわゆるサーバーはいらない\n<ul>\n<li>HTMLは事前に生成され、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>に配置される</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>はサーバーではなく専用のマイクロサービスで提供される</li>\n</ul></li>\n<li>新しいア<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%C7%A5%A2\">イデア</a>に懐疑的な人もいるだろう\n<ul>\n<li>今までもWebにはいろんなア<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%C7%A5%A2\">イデア</a>があった</li>\n</ul></li>\n<li>しかしそれらのア<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%C7%A5%A2\">イデア</a>は、また新たな目標を生み出してきた\n<ul>\n<li>たとえば<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wordpress\">Wordpress</a>でコンテンツを生み出せるようになった</li>\n<li>しかしパフォーマンスとセキュリティの問題が生まれた</li>\n<li>それを回避するためのキャッシュの指定に奮闘した</li>\n<li>それによるパイプラインの肥大化が起きた</li>\n<li>以下ループ</li>\n</ul></li>\n<li>そういう過去を踏まえ、簡素化して再構築したのがJamstackである</li>\n</ul>\n<div class=\"section\">\n    <h4 id=\"JAMとは\">JAMとは</h4>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a> / <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a> / Markup</li>\n<li>Jamstackとは\n<ul>\n<li>特定の技術を指す言葉ではない</li>\n<li>いわばムーブメントである</li>\n</ul></li>\n<li>いろいろな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AC%A5%A4%A5%C9%A5%E9%A5%A4%A5%F3\">ガイドライン</a>があり、その中で選択をすることになる\n<ul>\n<li>ブラウザのための<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>は必須になるが、それ以外の言語も使える</li>\n<li>いろいろな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OSS\">OSS</a>を選択できる</li>\n</ul></li>\n<li>新しいア<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%C7%A5%A2\">イデア</a>もあれば、古いものもある\n<ul>\n<li>最近になってやっと選べるようになった技術もある</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"開発効率とパフォーマンス\">開発効率とパフォーマンス</h4>\n    \n<ul>\n<li>Jamstackなサイトとは\n<ul>\n<li>世界中にデプロイされ、負荷耐性がある</li>\n<li>Gitベースで開発者フレンドリー</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>によってサービスを利用する</li>\n<li>事前にビルドされ、最適化されている</li>\n</ul></li>\n<li>最後の項目が特に重要\n<ul>\n<li>クライアントが動的に画面を組み上げるべきではないし</li>\n<li>サーバーもリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トの度にコンテンツを生成すべきではない</li>\n</ul></li>\n<li>Jamstackたるもの\n<ul>\n<li>コードとコンテンツは同じ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>で管理され</li>\n<li>そこに変更があればビルドが実行され、HTMLや他のデータを生成する</li>\n<li>それらは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>で、ユーザーに最も近いところへ配置される</li>\n</ul></li>\n<li>こうすることでネットワークのレイテンシを極限まで下げられる</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>に対する変更にはじまり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>のファイル更新に終わる\n<ul>\n<li>この流れが新しいポイント</li>\n<li>キャッシュのパージを待つ必要もない</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"バージョン管理によるアトミックなデプロイ\">バージョン管理によるアトミックなデプロイ</h4>\n    \n<ul>\n<li>Jamstackでは、コンテンツすらもGitで管理する\n<ul>\n<li>つまりデータベースが不要になる</li>\n</ul></li>\n<li>この考え方で、常にデプロイがアトミックなものになる\n<ul>\n<li>Gitのブランチを切り替えれば、それがステージングになる</li>\n</ul></li>\n<li>そういう意味では、もはや静的ではなく、日に数百回も更新される</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"Jamstackをやっていく\">Jamstackをやっていく</h4>\n    \n<ul>\n<li>ワークフローに参加するのはエンジニアだけではない\n<ul>\n<li>Gitに詳しくない人もいるだろう</li>\n</ul></li>\n<li>そのための<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>などもある\n<ul>\n<li>Gitを意識することなく、コンテンツの作成や修正ができる</li>\n</ul></li>\n<li>ビルドのタイミングでそれを自動化することもできる\n<ul>\n<li>特定のソースから情報を取ってくるなど</li>\n</ul></li>\n<li>全てを巻き込むことで、すべての履歴を管理できるようになる\n<ul>\n<li>必要な単位・タイミングで、Gitの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>に入れればいい</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"API\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></h4>\n    \n<ul>\n<li>単なるHTMLよりも複雑なことをやる場合に必要</li>\n<li>従来はセッションを保持して、サーバーが状態を保っていた</li>\n<li>これらは、専用のマイクロサービスによって代替される\n<ul>\n<li>支払いはStripe</li>\n<li>検索はAlgolia</li>\n<li>etc...</li>\n</ul></li>\n<li>すべてを1回呼びきりで副作用のない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>にする\n<ul>\n<li>スケーラブルにするため</li>\n</ul></li>\n<li>とはいえ認証などはあるだろう\n<ul>\n<li>JWTを作成して、ブラウザに保存するとよい</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"Smashing-Magazineのケース\">Smashing Magazineのケース</h4>\n    \n<ul>\n<li>歴史あるWebマガジン\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/\">https://www.smashingmagazine.com/</a></li>\n</ul></li>\n<li>2017年の末、Jamstackに移行した\n<ul>\n<li>後の章でそれを解説する</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"では本編へ\">では本編へ</h4>\n    \n<ul>\n<li>Jamstackを知るためには、実際にやってみるのがよい</li>\n<li>特別なスキルは必要なく、既にできることの組み合わせである\n<ul>\n<li>ただしサーバーなしで</li>\n</ul></li>\n<li>最初にWebに触れたあの頃を思い出してほしい\n<ul>\n<li>いかに負担をかけずにコンテンツを制作するか</li>\n<li>それが魅力あるコンテンツ、UI作りにつながる</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"1-モダンWeb開発への挑戦\">1. モダンWeb開発への挑戦</h3>\n    \n<div class=\"section\">\n    <h4 id=\"モノリスアーキテクチャ\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CE%A5%EA%A5%B9\">モノリス</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a></h4>\n    \n<ul>\n<li>誰もが通った歴史</li>\n<li>しかしサーバーがクライアントの形まで決めてしまう</li>\n<li>分離されていないので不必要に複雑化していく</li>\n<li>現世においては、オーバーエンジニアリングなところすらある</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"失われた柔軟性\">失われた柔軟性</h5>\n    \n<ul>\n<li>ここ数年、パフォーマンスへの認識は高まっている</li>\n<li>しかし<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CE%A5%EA%A5%B9\">モノリス</a>なままでは、これ以上の改善がむずかしい</li>\n<li>開発ワークフローなどにも制限を課されてしまう</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"パフォーマンスへの関心\">パフォーマンスへの関心</h5>\n    \n<ul>\n<li>パフォーマンスとコンバージョンには関連がある\n<ul>\n<li>1秒遅いと売上が7％下がる</li>\n</ul></li>\n<li>モノリシックなサーバーが、リク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トごとにHTMLを生成するから遅い\n<ul>\n<li>スピードだけがパフォーマンスの指標ではないけども</li>\n</ul></li>\n<li>キャッシュはパフォーマンスにとって重要</li>\n<li>しかしモノリシックなアプリの場合は、単一のURLから複数のコンテンツが返ることもある\n<ul>\n<li>ログイン状態などにより</li>\n</ul></li>\n<li>これもユーザーが予測できるようになっているべき</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"スケールの問題\">スケールの問題</h5>\n    \n<ul>\n<li>リク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トのたびにページを生成すると、予期せぬ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%D5%A5%A3%A5%C3%A5%AF\">トラフィック</a>増大の問題がある</li>\n<li>生成コストの問題だけがあるわけではない</li>\n<li>サイトのためのコンテンツを生成する要件と、サイトを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%B9%A5%C6%A5%A3%A5%F3%A5%B0\">ホスティング</a>する要件が混ざっているのも問題\n<ul>\n<li>コンテンツ管理者も、一般の閲覧者も、インフラがいっしょくたになる</li>\n</ul></li>\n<li>コンテンツに対するREADとWRITEは、分離されているべき\n<ul>\n<li>性質が違うから</li>\n</ul></li>\n<li>ここを切り離せないと、スケールできない</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"セキュリティの問題\">セキュリティの問題</h5>\n    \n<ul>\n<li>モノリシックな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>を、全否定したいわけではない\n<ul>\n<li>ただし、セキュリティの問題があるならばそれを推奨はできない</li>\n</ul></li>\n<li>Webの29％は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wordpress\">Wordpress</a>などの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>でできているという報告がある\n<ul>\n<li>それだけに、攻撃者の標的にもなってしまっている</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%B9%A5%C6%A5%A3%A5%F3%A5%B0\">ホスティング</a>しなければならないゆえに、攻撃手法の選択肢も豊富である</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>などで機能を拡張できるようになっているが、そこも悪意を向けられやすい構造\n<ul>\n<li>つい最近も、1200万ものDurupalを使ったサイトに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%C8%BC%E5%C0%AD\">脆弱性</a>のパッチが充てられる事案があった</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"現状維持のリスク\">現状維持のリスク</h4>\n    \n<ul>\n<li>変化よりも現状維持のほうが、得てして簡単である\n<ul>\n<li>その変化のためにあらゆるリソースが必要になるから</li>\n</ul></li>\n<li>しかし今こそ、変化の時がきたのだと思っている\n<ul>\n<li>現状維持のほうが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1\">コスパ</a>が悪くなるラインがきたということ</li>\n</ul></li>\n<li>既に前に進む選択をしている人たちもいる\n<ul>\n<li>ブログや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OSS\">OSS</a>のドキュメント、イベント告知ページなど</li>\n</ul></li>\n<li>この流れがやがて大きくなって、ECやサブスク系にも広がっていくはず</li>\n<li>オンライン人口がこれからもずっと増えていく\n<ul>\n<li>そのために、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%D5%A5%A3%A5%C3%A5%AF\">トラフィック</a>増大にも耐えられ</li>\n<li>あらゆるネットワークでも快適に閲覧でき</li>\n<li>あらゆる言語、デ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>で利用できる</li>\n<li>セキュリティも万全な</li>\n</ul></li>\n<li>そんなWebを、Jamstackで作りたい</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"2-Jamstackとは\">2. Jamstackとは</h3>\n    \n<div class=\"section\">\n    <h4 id=\"その名の由来\">その名の由来</h4>\n    \n<ul>\n<li>既にあるものを組み合わせて名付けただけ\n<ul>\n<li>名前というものは便利</li>\n</ul></li>\n<li>その背景にあるトレンドとなっている技術たち\n<ul>\n<li>静的サイトジェネレータ</li>\n<li>SPA</li>\n<li>ビルドツール</li>\n<li>用途に特化した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>のエコシステム</li>\n<li>PWA</li>\n<li>etc...</li>\n</ul></li>\n<li>J: ブラウザのランタイムとしての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a></li>\n<li>A: データベースを意識しない、個別のHTTPの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></li>\n<li>M: 事前にビルド済のHTML</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"JavaScript\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a></h4>\n    \n<ul>\n<li>1995年に10日ぽっちで作られたとは思えないほど成熟した\n<ul>\n<li>ほかの言語から<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>されることもあるほどに</li>\n</ul></li>\n<li>ランタイムの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VM\">VM</a>として、Jamstackでも利用する\n<ul>\n<li>ブラウザはもはやWebにおけるOSである</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"API-1\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></h4>\n    \n<ul>\n<li>もともとの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>には、外部のサーバーとやり取りする機能はなかった\n<ul>\n<li>それが今やCORS、WebSocketなどなど</li>\n<li>OAuth2やJWTなど認証の仕組みまである</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>は、Webの可能性をそのまま広げる\n<ul>\n<li>今やだいたいのものは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>でまかなえる</li>\n</ul></li>\n<li>これを利用しない手はないという意味で、Jamstackでも利用する</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"Markup\">Markup</h4>\n    \n<ul>\n<li>HTMLはもともと文書を読むためのものだった\n<ul>\n<li>いうなればWebサイトは、ただのフォルダだった</li>\n</ul></li>\n<li>やがて、データベースの情報を取得して返すものになった\n<ul>\n<li>しかしこれが遅い</li>\n<li>静的なサイトに比べると複雑になる</li>\n</ul></li>\n<li>けど、あの頃はそうするしかなかった</li>\n<li>しかし今は違う\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>もあるし、クロス<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>も利用できる</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"事前ビルド\">事前ビルド</h5>\n    \n<ul>\n<li>リク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トを受けてからビルドするのではない</li>\n<li>事前にビルドしておいて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>に配置しておく</li>\n<li>これにより、フロントエンドとバックエンドを分離できる\n<ul>\n<li>バックエンドに縛られない = パフォーマンスもUXも改善できる</li>\n</ul></li>\n<li>この考え方自体は、ネイティブアプリの開発と同じかも</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"マイクロサービスサーバーレス関数\">マイクロサービス、サーバーレス関数</h5>\n    \n<ul>\n<li>フロントエンドとバックエンドの分離を推し進めた要因\n<ul>\n<li>バックエンドの開発者たちも、時を同じくしてモノリシックな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>を見直した</li>\n</ul></li>\n<li>SPAも単一のエンドポイントではなく、複数の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を利用するようになった\n<ul>\n<li>そのため、OAuthやJWTのような画一的な認可認証のフローが必要にもなった</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"Jamstackのプロジェクト\">Jamstackのプロジェクト</h4>\n    \n<ul>\n<li>世界中で様々なタイプのプロジェクトがデプロイされてる\n<ul>\n<li>数ページのものから、数千ページのものまで</li>\n</ul></li>\n<li>その種類について見ていく</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"HTMLコンテンツ\">HTMLコンテンツ</h5>\n    \n<ul>\n<li>これももちろんJamstackといえる</li>\n<li>バージョン管理下において、テキストを修正するのみ</li>\n<li>少し大きな規模になるなら、ビルドツールなどを使えばよい</li>\n<li>コードを変更し、それをプッシュすると、CI/CDで配信される</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"CMS\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a></h5>\n    \n<ul>\n<li>Headless <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>の隆盛\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>もGitベースのものがでてきている</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>からデータを利用するためのものへ</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"Webアプリ\">Webアプリ</h5>\n    \n<ul>\n<li>XHRや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ajax\">Ajax</a>からその流れは加速した\n<ul>\n<li>新たな概念を生み出したという意味で、Jamstackにも親しい</li>\n</ul></li>\n<li>ページを読み込まずにデータが取得できるというのは革命的だった\n<ul>\n<li>ここ数年であらゆる認識を変えた</li>\n</ul></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"-フロントエンドの分離\">*** フロントエンドの分離</h3>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>のパフォーマンスが向上したので、SPAができるようになった</li>\n<li>しかし元来のSPAは、単にデータベースを利用するモノリシックなものだった\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Rails\">Rails</a>でEmberを埋め込んで返すような</li>\n</ul></li>\n<li>モダンなSPAは、そこが分離している\n<ul>\n<li>もはやバックエンドがいらない</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"巨大なサイト\">巨大なサイト</h5>\n    \n<ul>\n<li>事前にビルドする際の問題は、そのページ数\n<ul>\n<li>ビルド時間をいかに短くするかが問題</li>\n</ul></li>\n<li>サイトによっては、10分すらも待てないことがある\n<ul>\n<li>ビルドツールの高速化も進んではいるが・・</li>\n</ul></li>\n<li>Jamstackを採用できるかどうかは、このサイクルをどう捉えるか\n<ul>\n<li>コンテンツの公開スケジュールに縛られない場合は、多少はマシ</li>\n</ul></li>\n<li>数千ではなく、数百万くらいのページがある場合のみ、要検討になると考えている</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"ハイブリッド\">ハイブリッド</h5>\n    \n<ul>\n<li>サイト、ブログ、アプリなど、様々な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>がある</li>\n<li>従来の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>では、フロントエンドはバックエンドと密結合していた</li>\n<li>Jamstackなら、そのどんなケースにも対応できる\n<ul>\n<li>バックエンドに縛られないから</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"まとめ\">まとめ</h4>\n    \n<ul>\n<li>Jamstackがハマらないプロジェクトは、そんなに多くないはず\n<ul>\n<li>ツールやエコシステムが成熟していくにつれて、もっと広まっていくはず</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"3-Jamstackの優位性\">3. Jamstackの優位性</h3>\n    \n<div class=\"section\">\n    <h4 id=\"物事を単純化する\">物事を単<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BD%E3%B2%BD\">純化</a>する</h4>\n    \n<ul>\n<li>数多の抽象化によって、我々はいろんなことができる</li>\n<li>しかし抽象化は時に危うい\n<ul>\n<li>我々の手が届かないところで何が起きているかわからない</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"よりよい解釈とメンタルモデル\">よりよい解釈とメンタルモデル</h5>\n    \n<ul>\n<li>コンテンツをサーバーサイドで生成するのではなく事前にビルドする</li>\n<li>これによって、ランタイムの環境のことを考えなくてよくなる\n<ul>\n<li>少なくとも、同時には考えなくてよい</li>\n</ul></li>\n<li>メンタルモデルがクリアになり、何にフォーカスすべきかが明らかになる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"すべてに通ずる必要がない\">すべてに通ずる必要がない</h5>\n    \n<ul>\n<li>フロントエンドとバックエンドを分離することで、分業もできる\n<ul>\n<li>すべてを1人で覚える必要がなくなる</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4\">環境変数</a>ひとつで任意の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を使うことができる\n<ul>\n<li>開発用・ステージング・本番環境</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>としても、用途が明確で再利用性も高い</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"ランタイムの負担を減らす\">ランタイムの負担を減らす</h5>\n    \n<ul>\n<li>ランタイムで実行するコードも、事前にビルドできる\n<ul>\n<li>全てではないが</li>\n</ul></li>\n<li>何も実行しない = 最速であり、最適化である\n<ul>\n<li>ランタイムでやることが減るということは、障害点も減るということ</li>\n</ul></li>\n<li>ビルド時の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>は、誰にも悪い影響を与えない</li>\n<li>本当に避けられないもの以外は、サーバーサイドで動的に実行するべきではない</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"コスト\">コスト</h4>\n    \n<ul>\n<li>コストにはいろんな面がある</li>\n<li>そしてそれは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>に大きく依存する</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"おカネ\">おカネ</h5>\n    \n<ul>\n<li>これは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%D5%A5%A3%A5%C3%A5%AF\">トラフィック</a>の量によって決まることが多い</li>\n<li>たくさんの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%D5%A5%A3%A5%C3%A5%AF\">トラフィック</a>を捌くために、たくさんのリソースが必要になる\n<ul>\n<li>それを計算して、インフラを組む必要があった</li>\n</ul></li>\n<li>そしてそのインフラが複数必要になる（開発・テスト・本番など）</li>\n<li>Jamstackでは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%D5%A5%A3%A5%C3%A5%AF\">トラフィック</a>の問題は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>が保証する</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"チーム効率\">チーム効率</h5>\n    \n<ul>\n<li>複雑なスタックは、高度な技術力や人材を要する</li>\n<li>シンプルに作れば、属人化も回避できるし、少ない人数で済む\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>の設定は、インフラの設定+デプロイよりも簡単</li>\n</ul></li>\n<li>求められるスキルのレベルも下げられるし、一層注力もできる\n<ul>\n<li>この敷居を下げることが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%CE%A5%D9%A1%BC%A5%B7%A5%E7%A5%F3\">イノベーション</a>には重要</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"イノベーションの価値\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%CE%A5%D9%A1%BC%A5%B7%A5%E7%A5%F3\">イノベーション</a>の価値</h5>\n    \n<ul>\n<li>Jamstackでは、小さなパーツをゆるくつなげていく</li>\n<li>パーツはいつでも交換可能である\n<ul>\n<li>リファクタもできるし入れ替えることもできる</li>\n</ul></li>\n<li>もちろんこれに反して、がっちり接続することもできる\n<ul>\n<li>しかしそれは避けるべき方向性</li>\n</ul></li>\n<li>加えた変更による影響が、ビルド時に確認できるのもよい\n<ul>\n<li>ランタイムに影響がない（ことも確認できる）</li>\n</ul></li>\n<li>トータルで、あらゆるコストが下がるのである</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"スケールさせるために\">スケールさせるために</h4>\n    \n<ul>\n<li>スケールについてもっと詳しく</li>\n<li>どれだけ緻密に見積もっても、サイトの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%D5%A5%A3%A5%C3%A5%AF\">トラフィック</a>は突然跳ねる</li>\n<li>それに備えて監視したり、スケールできるように構成することをしていたはず</li>\n<li>これがそもそもコストであり、好ましい状態ではないということ</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"そのための静的サイト\">そのための静的サイト</h5>\n    \n<ul>\n<li>スケールさせるためには、やはりキャッシュが重要</li>\n<li>動的なサイトは、スケールさせるために、後から静的なキャッシングレイヤーを追加する\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>を動的に扱う仕組みを用意するはず</li>\n</ul></li>\n<li>Jamstackの場合は、そもそも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>が前提になってる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"地理の問題\">地理の問題</h5>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%D5%A5%A3%A5%C3%A5%AF\">トラフィック</a>の量だけでなく、どこからのアクセスかも問題になる</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>はもとよりこの問題を解決しようとするもの</li>\n<li>よい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>事業者は、世界中にノードを持っているはず</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"冗長性\">冗長性</h5>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>にデプロイすることで、冗長性を確保できる</li>\n<li>ビルドとデプロイを分けて考えられるメリットでもある</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"パフォーマンス\">パフォーマンス</h4>\n    \n<ul>\n<li>開発者なら誰でも、パフォーマンスを気にする必要がある\n<ul>\n<li>ネットワークの信頼性の違いや、回線速度なども</li>\n<li>デ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>の違いについても</li>\n</ul></li>\n<li>パフォーマンスの指標がある\n<ul>\n<li>FirstMeaningfulPaint / TimeToInteractive</li>\n</ul></li>\n<li>WPO: WebPerformanceOptimizaion\n<ul>\n<li><a href=\"https://wpostats.com/\">https://wpostats.com/</a></li>\n<li>たくさんの事例が公開されてる</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"どこから改善するか\">どこから改善するか</h5>\n    \n<ul>\n<li>一昔前は、パフォーマンスのすべてはサーバーサイドにあった</li>\n<li>しかし状況が変わり、フロントエンドでも数々の最適化が成されている\n<ul>\n<li>HTTPリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トの数を減らす</li>\n<li>メディアの最適化</li>\n<li>etc...</li>\n</ul></li>\n<li>ブラウザの進歩も相まって改善が見られる</li>\n<li>しかしサーバーサイドはどうか\n<ul>\n<li>最適化の余地はいたるところにある</li>\n<li>しかし、従来のサーバー構成だと、全てを改善する必要がある</li>\n<li>すべての要素がつながっているから</li>\n</ul></li>\n<li>Jamstackであれば、そのつながりを断ち、短くすることはできる\n<ul>\n<li>それぞれのエリアで、それぞれが最適化を行うから</li>\n<li>ともあれ、コードを書かないことが最速であることに変わりはない</li>\n</ul></li>\n<li>サーバーサイドで動的にコンテンツを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>するより\n<ul>\n<li>事前にビルドされたものを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>から返すほうが当然早い</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"必要なものを最適化しておく\">必要なものを最適化しておく</h5>\n    \n<ul>\n<li>事前ビルドするからこそ、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>から即レスポンスができる</li>\n<li>そしてこうすると、ビルド時、デプロイ時のエラーに悩むことはない\n<ul>\n<li>それはユーザーには気付かれないので</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"セキュリティ\">セキュリティ</h4>\n    \n<ul>\n<li>Jamstackによってシンプルな構成になると、セキュリティも強固になるおまけがつく</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"露出する面を減らす\">露出する面を減らす</h5>\n    \n<ul>\n<li>この考え方はセキュリティを考えるときも重要\n<ul>\n<li>攻撃できる箇所を減らすことができる</li>\n</ul></li>\n<li>Jamstackに則りスタックをシンプルにするだけで、それが達せられる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"読み取り専用にする\">読み取り専用にする</h5>\n    \n<ul>\n<li>例えば<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wordpress\">Wordpress</a>は、POSTリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トで受け付けたデータをデータベースに格納する</li>\n<li>ここが攻撃者の標的によくなる\n<ul>\n<li>もちろん対策は講じられるが、常に勝利し続けることは容易でない</li>\n</ul></li>\n<li>Jamstackであれば、そもそも標的にならない\n<ul>\n<li>そんな口がないから</li>\n</ul></li>\n<li>Jamstackでも、もちろん他の仕組みと連携することはできる\n<ul>\n<li>しかしそこでも確固たる手法により、安全にやり取りできる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"外部サービス\">外部サービス</h5>\n    \n<ul>\n<li>Jamstackでも動的にしたい部分はある</li>\n<li>そういうときにどうするか</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"-複雑性を切り出す\">*** 複雑性を切り出す</h3>\n    \n<ul>\n<li>JamstackのAは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>のAである</li>\n<li>外部サービスは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を介して利用する</li>\n<li>注意点はベンダー選び\n<ul>\n<li>as a Serive市場は急成長している</li>\n<li>自分たちのビジネスを任せられるかどうかがポイント</li>\n</ul></li>\n<li>ともあれ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>に分離しておくことがセキュリティ向上にもつながる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"-抽象化して切り離す\">*** 抽象化して切り離す</h3>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>でまかなえない要件もあるはず\n<ul>\n<li>外部サービスが要求を満たせない場合</li>\n<li>外部に預けたくないデータの場合など</li>\n</ul></li>\n<li>そういう場合は自作するしかない\n<ul>\n<li>それでもJamstackでビルドとデプロイを分けることでメリットがある</li>\n</ul></li>\n<li>重要なのはビルドプロセスからのみアクセスできるようにしておくこと</li>\n<li>Jamstackの原則\n<ul>\n<li>基本的に読み取り専用で露出する面を減らす</li>\n<li>ビルド環境からのみサービスは利用し、外からは見えないようにしておく</li>\n<li>独立して使える分離されたセキュアなサービスを利用する</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"どうやって勝つか\">どうやって勝つか</h5>\n    \n<ul>\n<li>複雑性を減らすことの意義について学んだ</li>\n<li>基本的には受け入れられるべき方針だが、もしかしたら開発効率が気になるかもしれない</li>\n<li>開発効率や開発体験は重要である\n<ul>\n<li>それによってプロジェクトの質も左右される</li>\n<li>長期的に見ればなおさら</li>\n</ul></li>\n<li>しかし開発者体験よりも、ユーザー体験のほうが重要</li>\n<li>開発体験もそこまで悪化しないと思っている\n<ul>\n<li>馴染みのツールを組み合わせて使うだけなので</li>\n</ul></li>\n<li>Jamstackは、どちらの体験も良くすることができるはず</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"4-Jamstackをはじめる\">4. Jamstackをはじめる</h3>\n    \n<ul>\n<li>Jamstackをはじめるにあたってのガイド\n<ul>\n<li>どのようにプロジェクトとコードを管理するか</li>\n<li>どこにコンテンツを保存するか</li>\n<li>なにを使ってビルドするか</li>\n<li>ビルドプロセスの自動化</li>\n<li>どこにサイトを公開するか</li>\n<li>どんな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>やサービスを使うか</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4 id=\"プロジェクトのセットアップ\">プロジェクトのセットアップ</h4>\n    \n<ul>\n<li>サーバーもデータベースも不要な場合、Jamstackはただのフォルダである</li>\n<li>しかしコンテンツはGitで管理されているほうがよい\n<ul>\n<li>たとえ個人プロジェクトだとしても</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"コンテンツマネジメント\">コンテンツマネジメント</h4>\n    \n<ul>\n<li>コンテンツがないとサイトは成り立たない</li>\n<li>そんなコンテンツをどのように管理するか</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"テキストファイル\">テキストファイル</h5>\n    \n<ul>\n<li>最も単純なやり方</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リを用意すればそれがURLのパスになる</li>\n<li>中身はHTMLでもいいが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Markdown\">Markdown</a>などがよく使われる\n<ul>\n<li>HTMLをそのまま書くのは大変なので</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/YAML\">YAML</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%C7%A1%BC%A5%BF\">メタデータ</a>を埋めることもできる</li>\n</ul></li>\n<li>サイトジェネレータで、汎用レイアウトに埋めたりする</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"GitベースCMS\">Gitベース<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a></h5>\n    \n<ul>\n<li>Gitに不慣れな人がコンテンツを制作することもあるはず</li>\n<li>その場合は、それを意識させない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>があるとよい</li>\n<li>これで開発者とコンテンツ編集者が同じGitフローに乗れる</li>\n<li>代表的な例\n<ul>\n<li>Netlify <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a></li>\n<li>Forestry.io</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"ヘッドレスCMS\">ヘッドレス<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a></h5>\n    \n<ul>\n<li>専用のサービスで、リッチなエディタがついてたりする</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>でコンテンツを取得し、表示は自分たちでやる</li>\n<li>ビルドのときにその<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を利用してサイトを生成する</li>\n<li>代表的な例\n<ul>\n<li>Contentful</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"CMSを自分でホストする\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>を自分でホストする</h5>\n    \n<ul>\n<li>既存の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wordpress\">Wordpress</a>などをそのままバックエンドにする\n<ul>\n<li>最近の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>はそれ用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が生えてたりもする</li>\n</ul></li>\n<li>コンテンツの制作フローはそのままに、セキュリティを向上できる</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"サイトジェネレータ\">サイトジェネレータ</h4>\n    \n<ul>\n<li>コンテンツを実際のHTMLに変換するところ</li>\n<li>サイトジェネレータはいろいろある\n<ul>\n<li>昔はJekyll一強だったが今はたくさんある</li>\n<li><a href=\"https://www.staticgen.com/\">https://www.staticgen.com/</a></li>\n</ul></li>\n<li>その中からどれを選ぶかが重要\n<ul>\n<li>選ぶポイントを見ていく</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"1-サイトの種類\">1: サイトの種類</h5>\n    \n<ul>\n<li>どんなサイト向けのジェネレータかが暗黙的に決まってる\n<ul>\n<li>ブログ向け、ドキュメントサイト向け、アプリ向けなど</li>\n</ul></li>\n<li>それぞれのサンプルを実際に触ってみて判断するとよい</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"2-プログラミング言語\">2: <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a></h5>\n    \n<ul>\n<li>だいたいのジェネレータは、その書かれた言語を知らずとも利用できる</li>\n<li>ただし独自の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>を書きたいなどの場合は、その知識が必要になる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"3-テンプレートのシンタックス\">3: テンプレートの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a></h5>\n    \n<ul>\n<li>Jamstackにおける開発のほとんどは、テンプレートの構築になるはず\n<ul>\n<li>なのでその<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>が開発効率に関わる</li>\n</ul></li>\n<li>ここは好みが分かれるところのはず\n<ul>\n<li>Jade, Pug, Handlebars, Liquid, etc...</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"4-ビルドの速度\">4: ビルドの速度</h5>\n    \n<ul>\n<li>コンテンツの変更は即ビルドにつなげたい</li>\n<li>Go製のHugoは、その速さで人気を博している</li>\n<li>クライアントで動く<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>のバンドルを用意する場合などは、どうしても時間がかかる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"5-開発ツール\">5: 開発ツール</h5>\n    \n<ul>\n<li>サイトはHTMLだけでは作れない\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>や画像や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>のファイルも必要</li>\n<li>それらは圧縮や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>などの最適化が必要</li>\n</ul></li>\n<li>ジェネレータによっては、そこまでカバーしているものもある</li>\n<li>ビルドの過程でLintをかけてくれるものもある\n<ul>\n<li>事前にエラー検知できるので重要</li>\n</ul></li>\n<li>ローカルで変更をプレビューできることも重要なポイント</li>\n<li>これらを踏まえた上で、自分たちにとってのベストを選ぶ必要がある\n<ul>\n<li>パソコン選びのようなもので、正解はない</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"自動化する\">自動化する</h4>\n    \n<ul>\n<li>Jamstackにおいて、ビルドの自動化は必須</li>\n<li>ビルドして自分でデプロイすることも不可能ではない\n<ul>\n<li>ただすぐにスケールしないことに気づく</li>\n</ul></li>\n<li>Gitの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>からWebHookでビルドを実行するのがよい\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>やGitLabやBitbucketなどにはある</li>\n</ul></li>\n<li>Gitのpushに対応して、ビルドプロセスを起動する</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"GiHub-PagesやGitLab-Pages\">GiHub PagesやGitLab Pages</h5>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>やGitLabを使っているなら、そのまま<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%B9%A5%C6%A5%A3%A5%F3%A5%B0\">ホスティング</a>もできる\n<ul>\n<li>カスタム<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>も使える</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a> Pagesは、もとは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OSS\">OSS</a>のドキュメントを置くためのものだった\n<ul>\n<li>ジェネレータとしては限定されたJekyllしか使えない</li>\n</ul></li>\n<li>GitLab Pagesは、いろんなジェネレータが使える\n<ul>\n<li>独自のCIパイプラインでデプロイもできる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"自分たちのインフラを使う\">自分たちのインフラを使う</h5>\n    \n<ul>\n<li>もちろん自分たちのサーバー、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VM\">VM</a>でビルドしてもよい</li>\n<li>CI/CDに慣れてるなら、Jamstackのビルドは容易い</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"ホスティングサービスを使う\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%B9%A5%C6%A5%A3%A5%F3%A5%B0\">ホスティング</a>サービスを使う</h5>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AWS\">AWS</a>などでもよいが、一時的なビルド環境を用意して、そこでビルドさせる</li>\n<li>各ビルドごとに依存関係はそれ用のファイルにまとまっているはず\n<ul>\n<li>`Gemfile`や`package.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>`など</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"CDNを選ぶ\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>を選ぶ</h4>\n    \n<ul>\n<li>どれだけ技術が進歩しても、時間と空間はまだ克服できない</li>\n<li>コンテンツの提供時間は、ビルドを事前に済ませることでほぼ0にできる</li>\n<li>しかしコンテンツとの空間的な距離は埋められない</li>\n<li>そこで、全世界に配置された<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>を使う</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>事業者の選び方を3つ紹介する</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"エッジのロケーション\">エッジのロケーション</h5>\n    \n<ul>\n<li>サイトの利用者に近いところで提供しているものを選ぶ</li>\n<li>いわゆる事業者なら、少なくとも10くらいの地域にはエッジがあるはず</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"即時アップデート\">即時アップデート</h5>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>のキャッシュは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/TTL\">TTL</a>によって制限される\n<ul>\n<li>これが長いと、コンテンツを更新しても、反映されない</li>\n<li>これをどう調整するかの戦略を決める必要があった</li>\n</ul></li>\n<li>ただし最近の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>には、即時アップデートできる仕組みがある\n<ul>\n<li>キャッシュをミリ秒の速さでパージできる</li>\n</ul></li>\n<li>この機能があれば、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/TTL\">TTL</a>の設定を調整する必要はない</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"マルチクラウド\">マルチ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9\">クラウド</a></h5>\n    \n<ul>\n<li>特定の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9\">クラウド</a>事業者がダウンすることが稀にある</li>\n<li>特定の地域のネットワークが不通になることもある</li>\n<li>これらの備えた事業者のほうがよいケースもあるかも</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"APIを提供する\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を提供する</h4>\n    \n<ul>\n<li>あらゆるものが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>で提供される昨今</li>\n<li>しかし、それらの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が本当に信頼できるのかは悩み\n<ul>\n<li>ただこれは、自作する場合でも同じ悩みになる</li>\n</ul></li>\n<li>ただ言えるのは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>ドリブンの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>や開発手法のほうが柔軟であるということ</li>\n<li>たとえば<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/EC%A5%B5%A5%A4%A5%C8\">ECサイト</a>\n<ul>\n<li>まず負荷への体制だがこれは問題ない</li>\n<li>そして画面レイアウトなどの柔軟性は、従来のECパッケージを使ったサイトとは比較にならない</li>\n</ul></li>\n<li>しかし<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/EC%A5%B5%A5%A4%A5%C8\">ECサイト</a>は動的である\n<ul>\n<li>検索やセール情報、在庫の確保など</li>\n<li>これらはすべて専用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>でまかなう</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/EC%A5%B5%A5%A4%A5%C8\">ECサイト</a>のビルドの例\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>を更新すると、ビルドがはじまる</li>\n<li>同時に、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B8%A1%BA%F7%A5%A8%A5%F3%A5%B8%A5%F3\">検索エンジン</a>へ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%C7%A1%BC%A5%BF\">メタデータ</a>を送る</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/EC%A5%B5%A5%A4%A5%C8\">ECサイト</a>のランタイムで動く<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>\n<ul>\n<li>検索フィールドに文字を入れたら検索<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>をたたく</li>\n<li>カートに商品を入れたら、購入用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>をたたく</li>\n<li>etc...</li>\n</ul></li>\n<li>このように、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を組み合わせてサイトを形成していく</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"5-メンタルモデルの移行\">5. メンタルモデルの移行</h3>\n    \n<div class=\"section\">\n    <h4 id=\"マインドセットとアプローチ\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%F3%A5%C9%A5%BB%A5%C3%A5%C8\">マインドセット</a>とアプローチ</h4>\n    \n<ul>\n<li>Jamstackでプロジェクトを進めるためには、まずそれが何かを知る必要がある</li>\n<li>静的にサイトを配信すればそれはJamstackだ、というのは間違い\n<ul>\n<li>間違いというか、端折りすぎた説明</li>\n</ul></li>\n<li>真に静的なサイトには、動的な部分は存在しない</li>\n<li>Jamstackでできたサイトには、動的な部分も組み込める\n<ul>\n<li>そして、それを支えるビルドの自動化や、外部<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>やサービスまでがセット</li>\n</ul></li>\n<li>ベストプ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ティスを6つ紹介する</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"1-CDNを使う\">1. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>を使う</h4>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>を利用することで得られるメリット\n<ul>\n<li>1. 物理的に近いサーバーからコンテンツを配信できてパフォーマンスがよくなる</li>\n<li>2. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%E9%C4%B9%B2%BD\">冗長化</a>が自動的に成される</li>\n<li>3. 自分たちのインフラがSPoFにならない</li>\n</ul></li>\n<li>突然の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%D5%A5%A3%A5%C3%A5%AF\">トラフィック</a>増にも、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>事業者が対応してくれる\n<ul>\n<li>これを自分たちでやるのはすごく大変</li>\n<li>そして動的なコンテンツの場合は、さらに難易度が上がる</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"CDNを使い倒すには\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>を使い倒すには</h5>\n    \n<ul>\n<li>UIは事前に静的に作っておき、クライアントのJSで動的にするパターンがよい\n<ul>\n<li>静的にプリ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>しておける部分は、多いほどよい</li>\n</ul></li>\n<li>Webアプリを設計するときに用いられる方法はだいたい3つ\n<ul>\n<li>しばしば混同されるので、区別しておくべき</li>\n</ul></li>\n<li>1. クライアントサイド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>\n<ul>\n<li>ブラウザがJSでDOMを構築するパターン（いわゆるSPA）</li>\n<li>しかしそこにはエラーの可能性を秘めている</li>\n<li>できれば事前に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>しておくほうがよい</li>\n</ul></li>\n<li>2. サーバー<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>\n<ul>\n<li>リク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トに応じて、コンテンツを生成するパターン</li>\n</ul></li>\n<li>3. プリ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>\n<ul>\n<li>サーバー<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>を、リク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トがくる前にやっておくパターン</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"2-イミュータブルでアトミックにデプロイ\">2. イミュータブルでアトミックにデプロイ</h4>\n    \n<ul>\n<li>事前に静的なコンテンツを用意することで、改善速度もあげられる</li>\n<li>ただしそのためには、たくさんの素材を、すばやくデプロイできなければならない</li>\n<li>リリースサイクルをいかに効率的にするかが、コンテンツが増えると課題になる</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"イミュータブルにする\">イミュータブルにする</h5>\n    \n<ul>\n<li>たとえば<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/FTP\">FTP</a>でサーバーにアップロードする場合を考える</li>\n<li>アップロードの途中で、サーバーの状態が変わることになる（ミュータブル）</li>\n<li>何か問題があったときに、切り戻しもできない\n<ul>\n<li>過去のどこで問題が起きたのかもわからない</li>\n</ul></li>\n<li>よって、変更とデプロイを同じ単位で考える必要がある</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"イミュータブルにデプロイする利点\">イミュータブルにデプロイする利点</h5>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A1%BC%A5%B8%A5%E7%A5%F3%B4%C9%CD%FD%A5%B7%A5%B9%A5%C6%A5%E0\">バージョン管理システム</a>の、特定の瞬間を切り出す\n<ul>\n<li>何にも依存しない、それだけで完結する塊</li>\n</ul></li>\n<li>それこそがイミュータブルの正体で、それをそのままデプロイする</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"-デプロイしたものを把握する\">*** デプロイしたものを把握する</h3>\n    \n<ul>\n<li>つまり、何がデプロイされるのかを把握すること\n<ul>\n<li>何がその環境に配置され、ユーザーに届けられるのか</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"-いつでもバージョン切り替え\">*** いつでもバージョン切り替え</h3>\n    \n<ul>\n<li>ちょっとした変更でも、すべてビルドをやり直す\n<ul>\n<li>無駄にも思えるが、これが重要</li>\n</ul></li>\n<li>これにより、ビルドされたものの信頼性があがる\n<ul>\n<li>ビルドプロセスが正常に機能していることの証明でもある</li>\n</ul></li>\n<li>いつでも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%EB%A5%D0%A5%C3%A5%AF\">ロールバック</a>できる</li>\n<li>ランタイムにエラーが発生しても、その影響を最小限にできる</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"イミュータブルなデプロイの位置づけ\">イミュータブルなデプロイの位置づけ</h5>\n    \n<ul>\n<li>Jamstackに移行することは、イミュータブルなデプロイを行うに等しい\n<ul>\n<li>ビルド時に利用するデータと、その後で利用する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>も分離されてる</li>\n</ul></li>\n<li>これらの性質があるからこそ、イミュータブルなデプロイが可能になるとも言える</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"アトミックなデプロイ\">アトミックなデプロイ</h5>\n    \n<ul>\n<li>イミュータブルに生成されたコンテンツは、アトミックにデプロイされる</li>\n<li>アトミックなデプロイとは、すべてをまとめてデプロイすること\n<ul>\n<li>変更した一部分の差分だけを更新するのではなく</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>はファイルの差分をハッシュなどでチェックでき、無駄なファイル転送を省いてくれる</li>\n<li>Jamstackは、こうした前提に基づいて、あらゆる複雜性を排除するデザイン</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"3-すべてをバージョン管理する\">3. すべてをバージョン管理する</h4>\n    \n<ul>\n<li>コードベースの管理に、Gitを採用することは一般的</li>\n<li>だがその考え方をデプロイにまで活かすことは、あまりされていない\n<ul>\n<li>Herokuはそれをやっている例で、人気を博した</li>\n</ul></li>\n<li>デプロイまでバージョン管理下に置くことで、不慮の事故を防ぐことができる\n<ul>\n<li>ステートフルなデータベースがあるとそれも難しいが、Jamstackにデータベースは存在しない</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"オンボーディングのコストを減らす\">オンボーディングのコストを減らす</h5>\n    \n<ul>\n<li>バージョン管理されていれば、新人が歴史をたどることもできる</li>\n<li>新人が仕事をはじめるまでの理想の流れはこう\n<ul>\n<li>コードへのアクセス権をもらう</li>\n<li>`README`などを読む</li>\n<li>ローカルにコードをクローンする</li>\n<li>依存関係を1つのコマンドでダウンロード</li>\n<li>1つのコマンドでビルドして確認</li>\n<li>1つのコマンドで任意の環境にデプロイ</li>\n</ul></li>\n<li>`README`のほか、`package.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>`なども昨今は便利な道標になる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"バージョン管理は背骨\">バージョン管理は背骨</h5>\n    \n<ul>\n<li>すべてをバージョン管理することが受け入れられたのは最近のこと</li>\n<li>Gitの概念が大衆化したのも最近のこと\n<ul>\n<li>ブランチ、コミット、プルリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トなど</li>\n</ul></li>\n<li>いわゆるモノリシックな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>で、Gitがやってることを実装してきたのも事実\n<ul>\n<li>すべてをバージョン管理するのではなく、特別なワークフローに載せる</li>\n<li>ただこれは学習コストがかかる</li>\n</ul></li>\n<li>CI/CDツールも、最近は基本的にGitによってトリガーされる</li>\n<li>それができるCI/CDサービスを選ぶべき</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"4-自動化とツール\">4. 自動化とツール</h4>\n    \n<ul>\n<li>単なる静的なサイトでなく、ビルドとデプロイの自動化までやるのがJamstackのカギ</li>\n<li>静的サイトジェネレータを使うことは、そもそもその自動化への第一歩でもある</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"サイト生成のパターン\">サイト生成のパターン</h5>\n    \n<ul>\n<li>ビルドを自動化するためのツールは、好きに選んでよい\n<ul>\n<li>GulpでもWebpackでも、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Bash\">Bash</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>やMakeでもよい</li>\n</ul></li>\n<li>一般的なJamstackのサイト生成の手順はこの通り\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を使って外部からデータを集める</li>\n<li>サイトジェネレータでそのデータを正規化</li>\n<li>正規化したデータを使ってページを生成</li>\n<li>アセットの最適化など</li>\n<li>テストの実行</li>\n<li>デプロイ</li>\n</ul></li>\n<li>この一連の流れを、どこからでも実行できるようにしておく</li>\n<li>Webhookなどを使って実行することが多い</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"リスク削減のために人間にやらせない\">リスク削減のために人間にやらせない</h5>\n    \n<ul>\n<li>自動化することで、人間のミスを減らすこともできる</li>\n<li>繰り返しの処理を、後から自動化することはよくある</li>\n<li>ただし後からではなく早い段階でやってしまうことをおすすめする</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"5-エコシステムを利用する\">5. エコシステムを利用する</h4>\n    \n<ul>\n<li>価値があり、利用できるツールは、どんどん利用していく\n<ul>\n<li>便利なツールやサービスが急速に生まれている</li>\n</ul></li>\n<li>Jamstackを、単なる静的なサイトのためのアプローチと言えなくなりつつある\n<ul>\n<li>これらのツールやサービスを利用することで、機能追加し動的にできるから</li>\n</ul></li>\n<li>そんなサービスを、Jamstackのプロジェクトで採用するためのポイントを紹介する</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"フォーム\">フォーム</h5>\n    \n<ul>\n<li>これのために、静的にサイトを作ることはできないとよく思われている\n<ul>\n<li>しかしそんなことはない</li>\n</ul></li>\n<li>実は内容をHTTPでリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トするだけでいい</li>\n<li>それができるサービスはたくさんある\n<ul>\n<li>Wufoo, Formkeep, Formcarry, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a> Forms, ...etc</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"検索\">検索</h5>\n    \n<ul>\n<li>簡単な検索であれば問題にならない\n<ul>\n<li>ただ、場合によっては複雜になり得る</li>\n</ul></li>\n<li>静的サイトジェネレータは、出力フォーマットを変えられるはず\n<ul>\n<li>それで検索用のインデックスを生成して、検索用のサービスに送る</li>\n<li>そしてそれを、クライアントのJSで索引すればよい</li>\n</ul></li>\n<li>それだけでなく、付加価値を提供するサービスもある\n<ul>\n<li>Algoliaなど</li>\n</ul></li>\n<li>そのほか、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>やDuck Duck Goで、サイト内検索を提供することもできる\n<ul>\n<li>JSが使えない環境でも利用できるし、実装コストも軽い</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"通知\">通知</h5>\n    \n<ul>\n<li>ユーザーに連絡するためには、しばしば複雜な仕組みが必要</li>\n<li>できればこれもサービスでなんとかしたい</li>\n<li>メール\n<ul>\n<li>SendGrid, Mailgun, ...etc</li>\n</ul></li>\n<li>Twilioは、SMSや音声通話なども<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>で提供している</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"認証\">認証</h5>\n    \n<ul>\n<li>認証と認可をどうするか</li>\n<li>特に個人情報を扱うためには、細心の注意が必要</li>\n<li>しかし場合によってはアウトソースできない事情もあるはず</li>\n<li>ただベストプ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ティスが確立されつつある\n<ul>\n<li>IDベースで認証や認可をする仕組みを使う</li>\n<li>これにより直接ユーザーの個人情報を管理する必要がなくなる</li>\n</ul></li>\n<li>そんなOAuthのサービスとしては、Auth0などがある</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"6-FaaSで最後の穴を埋める\">6. FaaSで最後の穴を埋める</h4>\n    \n<ul>\n<li>これまで見てきたように、たくさんのサービスがある</li>\n<li>基本的にそれらを再実装する必要はない</li>\n<li>とは言え、どうしても実装する必要がある場合もある</li>\n<li>そこで使えるのが、Functionのサービス\n<ul>\n<li>サーバーレス関数とも</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"脱モノリスするために\">脱<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CE%A5%EA%A5%B9\">モノリス</a>するために</h4>\n    \n<ul>\n<li>Web開発者は、その速度を落とすことなく学び続けなければならない</li>\n<li>ただ、すべてのことに精通する必要はない</li>\n<li>外部サービスを利用するということは、責任を預けるということ\n<ul>\n<li>最初はそれが落ち着かないかもしれない</li>\n</ul></li>\n<li>ただし、そうすることで得られるものも多い\n<ul>\n<li>安心感、開放感なども</li>\n<li>彼らも素人ではない</li>\n</ul></li>\n<li>自分たちの領域にその分だけ集中できる</li>\n<li>どの領域を3rdパーティのサービスに任せるかは、一考の余地がある\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CD%F8%CD%D1%B5%AC%CC%F3\">利用規約</a>は適切か</li>\n<li>サービスレベルの保証はあるか</li>\n<li>金銭的なコスト、実装のコストはどうなるか</li>\n</ul></li>\n<li>ただ基本的な考え方として、事業者もビジネスでやっていて、常に進歩している\n<ul>\n<li>自分たちで実装するよりも、任せてしまうほうが、往々にして良い結果になる</li>\n</ul></li>\n<li>次の章では、それを実践した経験について触れる</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"6-Jamstackを適用する\">6. Jamstackを適用する</h3>\n    \n<div class=\"section\">\n    <h4 id=\"ケーススタディ-Smashing-Magazineの場合\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B1%A1%BC%A5%B9%A5%B9%A5%BF%A5%C7%A5%A3\">ケーススタディ</a>: Smashing Magazineの場合</h4>\n    \n<ul>\n<li>Smashing Magazineは歴史あるフロントエンドの情報サイト\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/\">https://www.smashingmagazine.com/</a></li>\n</ul></li>\n<li>2017年の末、Jamstackに移行した</li>\n<li>この章は、そのショーケースである</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"チャレンジ\">チャレンジ</h4>\n    \n<ul>\n<li>サイトは10年も運用されていた\n<ul>\n<li>数千もの記事、20万のコメントがある<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wordpress\">Wordpress</a>の本体</li>\n<li>本やワークショップを販売するShopifyのEC</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails\">Ruby on Rails</a>でできたジョブボード</li>\n<li>カンファレンス用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/PHP\">PHP</a>のスタック</li>\n</ul></li>\n<li>ビジネスの成長にあわせて様々な機能が追加されてきた</li>\n<li>しかし、もうこれ以上は厳しいという段階だった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"キーポイント\">キーポイント</h4>\n    \n<ul>\n<li>パフォーマンスと安定性、セキュリティを改善したい</li>\n<li>同時に、メンバーシップの概念を導入したかった</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"重複するテンプレート\">重複するテンプレート</h5>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wordpress\">Wordpress</a>や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Rails\">Rails</a>など、技術スタックごとにテンプレが分散していた\n<ul>\n<li>内容は同じだが、分散せざるを得ない状況だった</li>\n</ul></li>\n<li>これらをまとめあげる必要があった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"パフォーマンス-1\">パフォーマンス</h5>\n    \n<ul>\n<li>同様に、パフォーマンスへの取り組みも分散していた\n<ul>\n<li>各言語ごとのライブラリやモジュールとして</li>\n</ul></li>\n<li>管理する対象が多くて、セキュリティ的な不安もあった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"メンバーシップ\">メンバーシップ</h5>\n    \n<ul>\n<li>新たな機能であり、リデザインのモチベーションでもあった</li>\n<li>メンバーシップによって得られる機能\n<ul>\n<li>広告無し</li>\n<li>ディスカウント</li>\n<li>相応のUI表示など</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"ツール選び\">ツール選び</h4>\n    \n<ul>\n<li>それらを実現するため、選ばれたのはJamstackでした</li>\n<li>そのコアとなる静的サイトジェネレータや、フロントエンドの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>を選ぶ</li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"静的サイトジェネレータ\">静的サイトジェネレータ</h5>\n    \n<ul>\n<li>生成するページは、様々なタイプがある\n<ul>\n<li>記事、イベント、著者、カテゴリ、などなど</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSS\">RSS</a>を生成する必要もあった</li>\n</ul></li>\n<li>あとはページ数がとにかく多い</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Gatsby\">Gatsby</a>やReactStaticを検討した\n<ul>\n<li>ページ数が増えるとパフォーマンスが悪かった</li>\n</ul></li>\n<li>パフォーマンスを考慮した結果、Hugoに決めた\n<ul>\n<li>数千ページを数秒で生成できた</li>\n</ul></li>\n<li>インクリメンタルビルドができるJS製のジェネレータより、Hugoが速かった\n<ul>\n<li>これを書いている時点では</li>\n</ul></li>\n<li>事前にビルドするものを限定し、あとはクライアントで生成するという手もあった\n<ul>\n<li>しかしコンテンツの性質上、事前ビルドは必須の要件だった</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"アセット管理\">アセット管理</h5>\n    \n<ul>\n<li>ブラウザに最適化されたアセットを届ける必要がある</li>\n<li>だいたいの静的サイトジェネレータは、その機能を含んでいたりする\n<ul>\n<li>しかしHugoにはない</li>\n</ul></li>\n<li>必要だったのは、JSのバンドル、コード分割、SCSSの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a></li>\n<li>webpackを検討した\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の扱いは十分だった</li>\n<li>しかし<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>のそれは、静的サイトというよりSPA向けの機能だった</li>\n</ul></li>\n<li>HTML/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>に長けたメンバーがいたので、その開発体験は損ねたくなかった</li>\n<li>結果、Victor Hugoという<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>を自作することにした\n<ul>\n<li><a href=\"https://github.com/netlify-templates/victor-hugo\">https://github.com/netlify-templates/victor-hugo</a></li>\n<li>GulpでSassとHugoを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>し、JSはwebpackで更新する</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5 id=\"フロントエンドのフレームワーク\">フロントエンドの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a></h5>\n    \n<ul>\n<li>静的なサイトの場合は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%EC\">プログレ</a>ッシブ・エンハンスメントでよいと思うかもしれない\n<ul>\n<li>そういうページも多いが、そうでもないページもある</li>\n</ul></li>\n<li>機能ごとにJSを書いてもいいが、UI<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>ごとにそれを管理したい\n<ul>\n<li>SPAでもないので、バンドルするよりも個別に管理したい</li>\n</ul></li>\n<li>そういうところには、Preactを採用した\n<ul>\n<li>ECのチェックアウトやログインなど</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"コンテンツの移行\">コンテンツの移行</h4>\n    \n<ul>\n<li>まずは既存コンテンツをエクスポートすることからはじめた\n<ul>\n<li>いろんなデータベースに別個に入っていたものを、テキストファイルとして<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リに整理</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wordpress\">Wordpress</a>からHugoへ移行するためのちょっとしたツールを使った\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RSS%A5%D5%A5%A3%A1%BC%A5%C9\">RSSフィード</a>を使ったツールも</li>\n</ul></li>\n<li>コンテンツの移行は、それぞれのプロジェクトごとにやり方を変える必要がある</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"コンテンツの構造\">コンテンツの構造</h4>\n    \n<ul>\n<li>それぞれの記事はテキストファイル\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/YAML\">YAML</a>のfrontmatterがあって、本文が続く</li>\n</ul></li>\n<li>10年分の記事はかなりの数があるが、それでもGitで管理できる\n<ul>\n<li>Lunux<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB\">カーネル</a>なんかに比べれば小さい</li>\n</ul></li>\n<li>しかし画像などのアセットはGitに入れられなかった\n<ul>\n<li>サイズが大きすぎて、cloneするのが大変</li>\n</ul></li>\n<li>それらは新しい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>に置き、パスなどの構造だけをGitで管理するようにした</li>\n<li>軽量なサイトを作るためには、これがベストな選択</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"大規模サイトであるがゆえ\">大規模サイトであるがゆえ</h4>\n    \n<ul>\n<li>Victor Hugoに移行してからの開発で問題になったことが1つある\n<ul>\n<li>テンプレを変更した際の自動リビルドが遅いこと</li>\n</ul></li>\n<li>それを回避するため、Gulpを導入して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>化した\n<ul>\n<li>作業時には、すべてではなく100くらいのビルド済の記事で構成されるサイトとした</li>\n</ul></li>\n<li>こうすることで、ローカルでの開発にHugoで毎回ビルドする必要がなくなった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"コアを作る\">コアを作る</h4>\n    \n<ul>\n<li>だいたいのス<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B1%A5%EB%A5%C8\">ケルト</a>ンができてきたので、コア部分を作ることにした\n<ul>\n<li>頻出パターンなど、サイトのテーマのメイン部分のこと</li>\n<li>テンプレで使えるパーシャルなど</li>\n</ul></li>\n<li>事前にビルドするがゆえに、全記事を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%C6%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3\">イテレーション</a>して抽出するなどの処理もできる\n<ul>\n<li>ランタイムでこれをやると、パフォーマンスがすごく悪い</li>\n</ul></li>\n<li>Hugoはテンプレのフィルタが優秀で助かった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"検索-1\">検索</h4>\n    \n<ul>\n<li>検索は事前にビルドできない</li>\n<li>ここでは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SaaS\">SaaS</a>としてのAlgoliaを利用した</li>\n<li>競合としては、Lunrがあった\n<ul>\n<li>こっちはインデックスを生成して、静的なファイルとして利用できる</li>\n<li>ただ大規模サイトには向かないと判断</li>\n</ul></li>\n<li>ビルドの過程で、Algoliaへインデックスを送信するようになっている</li>\n<li>フロントエンドはPreactとReduxで構成\n<ul>\n<li>`data`属性がついた要素に、Preactのアプリを描画する</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>が使えない環境では、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>のサイト内検索にフォールバック</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"コンテンツ管理\">コンテンツ管理</h4>\n    \n<ul>\n<li>Jamstackでのコンテンツ管理は、いろいろなやり方がある</li>\n<li>しかし中でも、ヘッドレス<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>の利用が革新的\n<ul>\n<li><a href=\"https://headlesscms.org/\">https://headlesscms.org/</a></li>\n<li>種類としては、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>ベースの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>と、Gitベースの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>に大別される</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>ベース\n<ul>\n<li>専用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GUI\">GUI</a>によってコンテンツの編集をするもの</li>\n<li>事前にコンテンツの型やリレーションを定義する</li>\n<li>ContentfulやDato <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>、GraphCMSなどが有名</li>\n</ul></li>\n<li>Gitベース\n<ul>\n<li>シンプルに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>などの連携するもの</li>\n<li>Netlify <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>やCloudcannon、Forestryなどが有名</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>ベースの利点は、さまざまなクライアントに、さまざまなデータを返せること\n<ul>\n<li>ただし、データの整形の手間が必要で、事前ビルドの時間が増える</li>\n</ul></li>\n<li>Gitベースの利点は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リがそのままソースになるところ\n<ul>\n<li>普段使っているツールや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>がそのまま使える</li>\n</ul></li>\n<li>Smashing Magazineでは、Netlify <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>を選んだ\n<ul>\n<li>ビルドの時間が短くなる</li>\n<li>普段使いのエディタでコードのようにコンテンツを編集できるのがよい</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"Netlify-CMS\">Netlify <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a></h4>\n    \n<ul>\n<li>従来の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>を使ってサイトを構成するというものだった\n<ul>\n<li>Netlify <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>では、サイトが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>を使える（データだけを引き出す）</li>\n</ul></li>\n<li>特定の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リに、同じ種類のコンテンツを格納し、コレクションとして扱う</li>\n<li>コンテンツを作成する画面は、ReactでできたSPAになっている\n<ul>\n<li>プレビュー画面などは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>で機能を拡張できる</li>\n<li>自分で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を用意すれば、独自のデザインでのプレビューも可能</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"大規模サイトのためのCMS\">大規模サイトのための<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a></h4>\n    \n<ul>\n<li>Netlifyは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を使ってコンテンツを取得する</li>\n<li>ただし大規模サイトにおいては、画像などのアセットは同様に管理しないほうがよい</li>\n<li>そのような場合のに備えて、Algoliaとの連携や、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>へのファイルアップロードができる</li>\n<li>Netlify <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>では、この拡張性によって、Gitベースでありながら大規模サイトにも対応できた</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"ユーザーとロール\">ユーザーとロール</h4>\n    \n<ul>\n<li>モノリシックな構成の場合、ユーザーの認証ももちろん組み込まれているはず\n<ul>\n<li>Smashing Magazineでも、複数のサイト向けに別々のユーザーの概念があった</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"JWTを使ったステートレスな認証\">JWTを使ったステートレスな認証</h5>\n    \n<ul>\n<li>従来の認証は、セッションIDを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Cookie\">Cookie</a>に含めて利用することが多かった\n<ul>\n<li>それによりサーバーでステートフルにユーザーを管理していた</li>\n</ul></li>\n<li>ステートレスな認証フローでは、代わりにユーザーの情報を送信する\n<ul>\n<li>これにより、各サービス側が、独自に必要な情報をチェックして認証することができる</li>\n</ul></li>\n<li>このユーザー情報をどのように画一的に扱うかが問題</li>\n<li>そのために存在するのがJWTである\n<ul>\n<li>特定のシークレットによって署名された<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>ンを使う</li>\n<li>`exp`プロパティで、期限を設定できるが、これが短めになっている</li>\n<li>そのために、リフレッシュ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>ンを別途用意するのが一般的</li>\n</ul></li>\n<li>Auth0がこの領域には詳しく、説明用のサイトもある\n<ul>\n<li><a href=\"https://jwt.io/\">https://jwt.io/</a></li>\n</ul></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"-APIゲートウェイとトークン\">*** <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%C8%A5%A6%A5%A7%A5%A4\">ゲートウェイ</a>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>ン</h3>\n    \n<ul>\n<li>各サービスが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>ンを検証するということは、検証機能を各サービスが持つということ</li>\n<li>検証用の設定値などが分散することで、セキュリティリスクになるかもしれない</li>\n<li>公開鍵と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C8%EB%CC%A9%B8%B0\">秘密鍵</a>の組み合わせで署名を作る方法で、そのリスクは低減できる</li>\n<li>クライアントとの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%C8%A5%A6%A5%A7%A5%A4\">ゲートウェイ</a>として、単一のエンドポイントを用意するという手もある</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3 id=\"-GoTrueによる認証\">*** GoTrueによる認証</h3>\n    \n<ul>\n<li>Smashing Magazineでは、GoTrueという<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OSS\">OSS</a>のマイクロサービスを使った\n<ul>\n<li><a href=\"https://github.com/netlify/gotrue\">https://github.com/netlify/gotrue</a></li>\n<li>`/signup`などのエンドポイントが立てられる</li>\n</ul></li>\n<li>クライアントでは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>からこの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SDK\">SDK</a>を利用する\n<ul>\n<li>ログインユーザーは`LocalStorage`に保存した</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4 id=\"EC\">EC</h4>\n    \n<ul>\n<li>Smashing Magazineの収入を支えるのがEC</li>\n<li>これまではShopifyを使っていたが、今回の移行で、GoCommerceという<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OSS\">OSS</a>を作った\n<ul>\n<li><a href=\"https://github.com/netlify/gocommerce\">https://github.com/netlify/gocommerce</a></li>\n<li>商品カタログのパスを渡して購入状態を作る<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>と、その購入に対する決済<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>ンを用意する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></li>\n<li>決済方法は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/PayPal\">PayPal</a>かStripeから選べる</li>\n</ul></li>\n<li>ビルド時に商品のカタログをHugoで生成し、それを利用する</li>\n<li>Preactのフロントエンドでカート情報を保持しつつ、裏でその<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を叩く</li>\n<li>購買フローを自由に設計できるのが強み</li>\n<li>この仕組みはデモの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>もある\n<ul>\n<li><a href=\"https://github.com/netlify/netlify-gocommerce-widget\">https://github.com/netlify/netlify-gocommerce-widget</a></li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5 id=\"ユーザーと注文\">ユーザーと注文</h5>\n    \n<ul>\n<li>GoCommerceも、他のサービスと同じで、JWTによって認証できる\n<ul>\n<li>これによって、認証済のユーザーのみが購買できる</li>\n<li>購買履歴を返すこともできる</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4 id=\"メンバーシップとサブスク\">メンバーシップとサブスク</h4>\n    \n<ul>\n<li>Smashing Magazineには、3段階の購読プランがある</li>\n<li>それによって、今まで紹介してきた各機能が協調するようになる</li>\n<li>そのための橋渡しをするために、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AWS\">AWS</a>のLambda関数がある\n<ul>\n<li>購読のタイミングで、ユーザーを認証する</li>\n<li>そしてメールの購読サービスに登録し、Slackに通知</li>\n<li>Stripeで定期購読するよう設定する</li>\n<li>最後に、認証サービスのユーザー情報も更新する</li>\n</ul></li>\n<li>これらの処理はシークレットの問題で、クライアントサイドではできない</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"GoCommerceでメンバー割引\">GoCommerceでメンバー割引</h4>\n    \n<ul>\n<li>GoCommerceにも、JWT<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>ンの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%C7%A1%BC%A5%BF\">メタデータ</a>として、購読プランを送るようにする\n<ul>\n<li>GoCommerce側では、割引設定が書かれた設定ファイルを見ている</li>\n<li>それによって、金額の割引が可能になる</li>\n</ul></li>\n<li>GoCommerceと、割引設定はあくまで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C2%B7%EB%B9%E7\">疎結合</a>であることが重要</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"ジョブボードとチケット\">ジョブボードとチケット</h4>\n    \n<ul>\n<li>ジョブボードも、メンバー割引と似たようなイメージでGoCommerceで対応した</li>\n<li>仕事を投稿する用の商品をGoCommerceで購入する\n<ul>\n<li>すると、WebHookにリク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トが発行されて、ジョブボードを更新する</li>\n</ul></li>\n<li>WebHookは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AWS\">AWS</a>のLambdaで受けるようになってて、それによって<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Markdown\">Markdown</a>ファイルが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>にコミットされる\n<ul>\n<li>そしてそれが新たなビルドのきっかけとなり、ジョブボードのページが更新される</li>\n</ul></li>\n<li>同様の仕組みで、イベントチケットを購入した参加者一覧は、Spreadsheetに転載されるようになってる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"ワークフローとAPIゲートウェイ\">ワークフローと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%C8%A5%A6%A5%A7%A5%A4\">ゲートウェイ</a></h4>\n    \n<ul>\n<li>この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B1%A1%BC%A5%B9%A5%B9%A5%BF%A5%C7%A5%A3\">ケーススタディ</a>で学んだこと\n<ul>\n<li>事前ビルドされたフロントエンド</li>\n<li>いくつものサービスを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C2%B7%EB%B9%E7\">疎結合</a>で利用する</li>\n<li>サービス間の取りまとめには、サーバーレス関数を使う</li>\n</ul></li>\n<li>これがJamstackでサイトを構成することの強みである</li>\n<li>そしてこれを支えるのが、確立されたワークフローとメンテナブルな構成要素</li>\n<li>サーバーレス関数での取りまとめは、ワークフローのためには必須であるともいえる</li>\n<li>Netlifyの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>は、エッジでJWTを検証できる\n<ul>\n<li>そこで検証をパスしたら、各サービス用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>ンを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%EF%A5%C3%A5%D7\">スワップ</a>したりもできる</li>\n</ul></li>\n<li>フロントエンドと同様に、各サービスも一緒にデプロイされるワークフローが、自動化されているというのが重要</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"サービスのデプロイと運用\">サービスのデプロイと運用</h4>\n    \n<ul>\n<li>それまではHerokuにすべてをデプロイし、DBもそこに1つだけあった</li>\n<li>この構成に変えてからは、各サービスがそれぞれのデータを抱える</li>\n<li>マイクロサービスの連携において、共通のDBを持つことは推奨されない</li>\n<li>それぞれのサービスを橋渡しするサービスも、最終的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AWS\">AWS</a>のLambda関数になった</li>\n<li>それより大きな規模であったり、永続化層が必要な場合は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Kubernetes\">Kubernetes</a>などに移行するのがよさそうである</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4 id=\"まとめ-1\">まとめ</h4>\n    \n<ul>\n<li>静的なフロントエンドと、そこから複数のサービスを利用する構成へ移行した</li>\n<li>自分たちで書いたサーバーサイドのコードは、たったの575行（3つのLambda関数）だった</li>\n<li>アクセス急増に備える必要もなくなり、本来のサービスと向き合う時間が増えた</li>\n<li>Gitベースの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>もうまくマッチしていて、日々の運用でも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>で簡単にファイルを処理できる</li>\n<li>急ごしらえの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/OSS\">OSS</a>にはまだ粗があるけど、これからに十分に期待できる</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"7-まとめ\">7. まとめ</h3>\n    \n<div class=\"section\">\n    <h4 id=\"最後にもう1つ\">最後にもう1つ</h4>\n    \n<ul>\n<li>Jamstackの利点だけを並べて説明するのは容易い</li>\n<li>しかしそそれ以上に、大事な哲学があることに触れておきたい</li>\n<li>Jamstackは、真にWebのためのものである</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iPhone\">iPhone</a>が世に出たあとで、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%E7%A5%D6%A5%BA\">ジョブズ</a>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Flash\">Flash</a>を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/HTML5\">HTML5</a>に置き換えた\n<ul>\n<li>そのときに、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Adobe\">Adobe</a>に向けた手紙を書いている</li>\n</ul></li>\n<li>だいたいこんな内容\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Flash\">Flash</a>は現在ひろく普及しているが、あれは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Adobe\">Adobe</a>でしか動かない</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Adobe\">Adobe</a>専用のものになってしまっている</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Apple\">Apple</a>もOSなど専用なものは作っているが、Webはオープンであるべき</li>\n<li>なので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Flash\">Flash</a>は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/HTML5\">HTML5</a>やその代替技術で置き換えられるべき</li>\n</ul></li>\n<li>Webは誰の手も借りずに、コンテンツを公開できる唯一の場所\n<ul>\n<li>しかしそこで十分な品質やUXを提供できない場合</li>\n<li>また<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Flash\">Flash</a>の二の舞になってしまう可能性がある</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>のAMPなどの取り組みもあるが、あるべき姿ではない</li>\n<li>Webの競争力を、健全なWebを保つために、過去の問題を解決しつつ、前に進む</li>\n<li>そのためのベストプ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ティス、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AC%A5%A4%A5%C9%A5%E9%A5%A4%A5%F3\">ガイドライン</a>であり制約であるのが、このJamstackである</li>\n</ul><p>現場からは以上です！</p><p>ちなみに、Jamstackな会社のサイトでもわかりやすく説明されてたりするので、よければそちらもどうぞ。（宣伝）</p>\n\n    <blockquote>\n        <p><a href=\"https://www.pxgrid.com/jamstack/\">Jamstack&#x3068;&#x306F;&#xFF1F; | &#x682A;&#x5F0F;&#x4F1A;&#x793E;&#x30D4;&#x30AF;&#x30BB;&#x30EB;&#x30B0;&#x30EA;&#x30C3;&#x30C9;</a></p>\n\n    </blockquote>\n\n</div>\n</div>"
}
