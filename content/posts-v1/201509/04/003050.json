{
  "title": "Polymer 1.0をさわってみて",
  "html": "<p>さて、ここにこういうサイトがあります。</p><p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fnodefest.jp%2F2015%2F\" title=\"東京Node学園祭2015\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://nodefest.jp/2015/\">nodefest.jp</a></cite></p><br />\n<p>実はこのサイト、噂のPolymerの1.0をふんだんに使ってます。<br />\nというわけで、そんなそこまでがっつり使い込んだわけではないですが、知見らしいものが一応たまったので・・。<br />\nまだ見ぬ未来のポリマリストのために書いておきます。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Polymer Starter Kit</h3>\n    <p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fpolymerelements%2Fpolymer-starter-kit\" title=\"Polymer/polymer-starter-kit\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/polymerelements/polymer-starter-kit\">github.com</a></cite></p><p>こういうのがありまして。<br />\nとりあえずcloneしてきてビルドすればそれっぽい雰囲気はすぐにつかめると思うので、さわってみたい人はここからはじめると良さそうです。</p>\n\n<div class=\"section\">\n    <h4>Gulp</h4>\n    <p>まずは外堀から埋めていきます。</p>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink><span class=\"synComment\"># localhost:3000 で開発(ビルドしない)</span>\ngulp serve\n\n<span class=\"synComment\"># localhost:3000 で開発(ビルドしたものは`dist`配下に)</span>\ngulp serve:dist\n\n<span class=\"synComment\"># ビルドするだけ(`dist`配下に)</span>\ngulp\n</pre><p>お世話になるのはこのコマンドたちです。<br />\ngulpfileは最初にひと通り見ておくとよいです。</p>\n\n    <blockquote>\n        <p><a href=\"http://qiita.com/ikkou/items/6a1e23f2e442f9ed650a\">Polymer Starter Kit &#x306E; gulpfile.js &#x3092;&#x8AAD;&#x307F;&#x89E3;&#x304F; - Qiita</a></p>\n\n    </blockquote>\n<p>というイカしたまとめがあることにさっき気付きました。</p><p>このタスクの中で特記するならこの2つかなー。</p>\n\n<div class=\"section\">\n    <h5>html</h5>\n    <p>このタスクの中で使われてる`gulp-useref`ってやつ、最初にこれを見つけたとき衝撃でした。</p><p>`app/index.html`の中身をなめて、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink> <span class=\"synComment\">&lt;!-- build:js scripts/main.min.js --&gt;</span>\n <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;scripts/lib/jquery.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;scripts/main.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n <span class=\"synComment\">&lt;!-- endbuild --&gt;</span>\n</pre><p>的なコメントブロックを見つけると、そこの指定通りにビルドしてくれるってやつです。</p><p>つまり、必要なものです！<br />\nなんだこの無駄に丁寧なコメント・・って思って無意識に消さないように注意です！！</p><p>ビルドのときに一緒にまとめてくれるので、自分で書いたコードを追加するならココに足すとよかです。</p>\n\n</div>\n<div class=\"section\">\n    <h5>vulcanize</h5>\n    <p>vulcanizeはPolymerやるなら避けて通れない概念です。</p><p>コンポーネントに分けまくって開発したり、外部のコンポーネントをインポートしたりすると、あちこちのファイルが細かくリクエストを飛ばしまくる地獄絵図が容易に想像できますよね。<br />\nそれをまとめることでリクエスト減らそうっていうタスクです。</p>\n\n    <blockquote>\n        <p>ヴァルカナイズとは、〈ゴムを〉硬化[加硫，硫化]するって意味らしいですよ。</p>\n\n    </blockquote>\n<p>さて、いよいよ踏み込みます。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>おれおれ要素を追加する</h4>\n    <p>独自な要素を追加する準備は整ってるので、いざ作るのみです。</p>\n\n    <blockquote>\n        <p><a href=\"https://elements.polymer-project.org/\">webcomponents.org - Discuss &amp; share web components</a></p>\n\n    </blockquote>\n<p>こういうのもあるので、ここから引っ張ってくるもよし、自分で作るもよし。</p><p>手順としては、</p>\n\n<ul>\n<li>めぼしいのを見つけて`bower i`</li>\n<li>もしくは自分で用意して配置</li>\n<li>`app/elements/elements.html`にパス追記</li>\n<li>HTML内で使う</li>\n</ul><p>ってだけです。<br />\nimportするの忘れると、もちろんですがおれおれ要素として認識してくれないので注意。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>How to カスタム要素</h3>\n    <p>サンプルあるので見ればわかると思いますが、いちおう。<br />\nこれが最小構成。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synComment\">&lt;!-- 最小カスタム要素 --&gt;</span>\n<span class=\"synIdentifier\">&lt;</span>dom-module<span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;my-elm&quot;</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">style</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synComment\">/* :hostがこの&lt;my-elm&gt;自体 */</span>\n    :host <span class=\"synIdentifier\">{</span> <span class=\"synType\">color</span>: <span class=\"synConstant\">tomato</span>; <span class=\"synIdentifier\">}</span> \n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">style</span><span class=\"synIdentifier\">&gt;</span>\n\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span> \n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>This is local DOM<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">    </span><span class=\"synComment\">// dom-moduleのidとあわせる</span>\n<span class=\"synSpecial\">    Polymer</span>(<span class=\"synIdentifier\">{</span><span class=\"synSpecial\">is: </span><span class=\"synConstant\">'my-elm'</span><span class=\"synIdentifier\">}</span>)<span class=\"synSpecial\">;</span>\n<span class=\"synSpecial\">  </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>dom-module<span class=\"synIdentifier\">&gt;</span>\n</pre><p>dom-moduleの#idと、Polymerの引数の`is`を一致させるだけで最低限の要素が完成。<br />\n1ファイルにHTML/CSS/JS全部書く流れがきてますねー。</p><p>構造としても、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>- dom-module\n  - style\n  - template\n  - script</pre><p>ってだけ守ればよしです。</p>\n\n    <blockquote>\n        <p>styleはtemplateの中に入れても良いとか、scriptはdom-moduleの外でも良いとか、サンプルが色々出てくるけど、今のところはこれが一番ベターだと思います。</p>\n\n    </blockquote>\n<p>何はともあれこれで、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>my-elm<span class=\"synIdentifier\">&gt;&lt;/</span>my-elm<span class=\"synIdentifier\">&gt;</span>\n</pre><p>ってできます。</p>\n\n<div class=\"section\">\n    <h4>スタイル</h4>\n    <p>GulpのタスクにはAutoPrefixerとかいましたが、ここには来てくれません。<br />\nインラインで書く = 自力でなんとかするなのは、Reactでもあんま変わらん印象。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/PolymerElements/polymer-starter-kit/issues/325\">Inline CSS Prefixer &middot; Issue #325 &middot; Polymer/polymer-starter-kit &middot; GitHub</a></p>\n\n    </blockquote>\n<p>ふーむ。<br />\nやはりビルドタスクでなんとかするしかない流れなのか・・。</p><p>ちなみにインラインでCSS書くと、あとで展開されるときに`.hoge.my-elm`的な感じで影響範囲を切ってくれてるのがheadのぞくとわかります。<br />\nこのコンポーネントに関するものはインラインで、レイアウトとか全体のスタイルにはstyles/**.cssに書くべし。</p>\n\n</div>\n<div class=\"section\">\n    <h4>テンプレート界隈</h4>\n    \n    <blockquote>\n        <p><a href=\"https://www.polymer-project.org/1.0/docs/devguide/templates.html\">Data binding helper elements - Polymer Project</a><br />\n<a href=\"https://www.polymer-project.org/1.0/docs/devguide/data-binding.html\">Data binding - Polymer Project</a></p>\n\n    </blockquote>\n<p>最初にコレらを読むと、事故率がだいぶ下がります。<br />\n{{hoge}} っていうのだけ見て、ふーん、Handlebars的な感じなんでしょってノリでいきなり書くと絶望します。</p><p>以下、そんな知ってればよかったTipsたちをお送りします。</p>\n\n<div class=\"section\">\n    <h5>id=\"hoge\" -> `this.$.hoge`</h5>\n    <p>お察しの通り、idを振っておくと参照する時に楽です。<br />\nVue.jsとかReactにもこういうのあったやんね。</p>\n\n</div>\n<div class=\"section\">\n    <h5>外から渡す</h5>\n    <p>SassのMixinのアレみたい。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>dom-module<span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;my-elm&quot;</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">ul</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>??<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span>content<span class=\"synIdentifier\">&gt;&lt;/</span>content<span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">ul</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">    Polymer</span>(<span class=\"synIdentifier\">{</span><span class=\"synSpecial\">is: </span><span class=\"synConstant\">'my-elm'</span><span class=\"synIdentifier\">}</span>)<span class=\"synSpecial\">;</span>\n<span class=\"synSpecial\">  </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>dom-module<span class=\"synIdentifier\">&gt;</span>\n</pre><p>からの</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>my-elm<span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>!!<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>my-elm<span class=\"synIdentifier\">&gt;</span>\n</pre><p>ってすると</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>my-elm<span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">ul</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>??<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>!!<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">li</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">ul</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>my-elm<span class=\"synIdentifier\">&gt;</span>\n</pre><p>ってできる。</p>\n\n</div>\n<div class=\"section\">\n    <h5>外から渡す 2</h5>\n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>my-elm<span class=\"synIdentifier\"> word=</span><span class=\"synConstant\">&quot;hello&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span>my-elm<span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span>my-elm<span class=\"synIdentifier\"> word=</span><span class=\"synConstant\">&quot;goodbye&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span>my-elm<span class=\"synIdentifier\">&gt;</span>\n</pre><p>ってのは、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>dom-module<span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;my-elm&quot;</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">p</span><span class=\"synIdentifier\">&gt;</span>Say <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>{{word}}<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">p</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">    Polymer</span>(<span class=\"synIdentifier\">{</span>\n<span class=\"synSpecial\">      is: </span><span class=\"synConstant\">'my-elm'</span><span class=\"synSpecial\">,</span>\n<span class=\"synSpecial\">      properties: </span><span class=\"synIdentifier\">{</span>\n<span class=\"synSpecial\">        word: </span><span class=\"synIdentifier\">{</span><span class=\"synSpecial\"> type: </span><span class=\"synType\">String</span><span class=\"synSpecial\"> </span><span class=\"synIdentifier\">}</span>\n<span class=\"synSpecial\">        </span><span class=\"synComment\">// OR word: String</span>\n<span class=\"synSpecial\">      </span><span class=\"synIdentifier\">}</span><span class=\"synSpecial\">,</span>\n<span class=\"synSpecial\">      ready: </span><span class=\"synIdentifier\">function</span>()<span class=\"synSpecial\"> </span><span class=\"synIdentifier\">{</span><span class=\"synSpecial\"> console.log</span>(<span class=\"synIdentifier\">this</span><span class=\"synSpecial\">.word</span>)<span class=\"synSpecial\">; </span><span class=\"synIdentifier\">}</span>\n<span class=\"synSpecial\">    </span><span class=\"synIdentifier\">}</span>)<span class=\"synSpecial\">;</span>\n<span class=\"synSpecial\">  </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>dom-module<span class=\"synIdentifier\">&gt;</span>\n</pre><p>React.propTypesみたいやね。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h5>dom-repeat</h5>\n    <p>配列まわしたいとき。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\"> is=</span><span class=\"synConstant\">&quot;dom-repeat&quot;</span><span class=\"synIdentifier\"> items=</span><span class=\"synConstant\">&quot;{{users}}&quot;</span><span class=\"synIdentifier\"> as=</span><span class=\"synConstant\">&quot;user&quot;</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>{{index}}<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>. <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>{{user.name}}<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>template万能すぎぃ。</p>\n\n<ul>\n<li>`as`で指定しなかったら`item.**`でアクセス。</li>\n<li>`index`はいわゆるインデックス。</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>dom-if</h5>\n    <p>条件分岐したいとき。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\"> is=</span><span class=\"synConstant\">&quot;dom-if&quot;</span><span class=\"synIdentifier\"> if=</span><span class=\"synConstant\">&quot;{{cond}}&quot;</span><span class=\"synIdentifier\">&gt;</span>\n  if\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\"> is=</span><span class=\"synConstant\">&quot;dom-if&quot;</span><span class=\"synIdentifier\"> if=</span><span class=\"synConstant\">&quot;{{!cond}}&quot;</span><span class=\"synIdentifier\">&gt;</span>\n  else\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>ちなみに、template要素はトップレベルに一つだけしか置いちゃダメです。<br />\nなので、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\"> is=</span><span class=\"synConstant\">&quot;dom-if&quot;</span><span class=\"synIdentifier\"> if=</span><span class=\"synConstant\">&quot;{{cond}}&quot;</span><span class=\"synIdentifier\">&gt;</span>\n    if\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\"> is=</span><span class=\"synConstant\">&quot;dom-if&quot;</span><span class=\"synIdentifier\"> if=</span><span class=\"synConstant\">&quot;{{!cond}}&quot;</span><span class=\"synIdentifier\">&gt;</span>\n    else\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>ってな具合にせないかんです。</p>\n\n</div>\n<div class=\"section\">\n    <h5>{{hoge}} vs \\[\\[hoge\\]\\]</h5>\n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>{{hoge}}<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span> vs <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>[[hoge]]<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>この違いは、データのバインディングが双方向か、一方向かの違い。</p>\n\n</div>\n<div class=\"section\">\n    <h5>必ず要素で囲う</h5>\n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synComment\">&lt;!-- ok --&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>{{hoge}}<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n\n<span class=\"synComment\">&lt;!-- ng --&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n  {{hoge}}\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n\n<span class=\"synComment\">&lt;!-- ng --&gt;</span>\n{{hoge}}\n</pre><p>そして</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synComment\">&lt;!-- ok --&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n  HOGE: <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>{{hoge}}<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n\n<span class=\"synComment\">&lt;!-- ng --&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>HOGE: {{hoge}}<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>Polymerまじ・・・。</p>\n\n</div>\n<div class=\"section\">\n    <h5>属性にも変数を</h5>\n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synComment\">&lt;!-- href --&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">a</span><span class=\"synIdentifier\"> href$=</span><span class=\"synConstant\">&quot;{{url}}&quot;</span><span class=\"synIdentifier\">&gt;</span>\n\n<span class=\"synComment\">&lt;!-- dataset --&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> </span><span class=\"synType\">data</span><span class=\"synIdentifier\">-bar$=</span><span class=\"synConstant\">&quot;{{baz}}&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>こういう書き方で書くと、内部的に`setAttribute`してくれるからこっちのが良いらしいですよ。</p>\n\n</div>\n<div class=\"section\">\n    <h5>文字列連結</h5>\n    <p>コレを見て察してください。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>dom-module<span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;my-tw&quot;</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">a</span><span class=\"synIdentifier\"> href$=</span><span class=\"synConstant\">&quot;{{_tw(id)}}&quot;</span><span class=\"synIdentifier\"> </span><span class=\"synType\">title</span><span class=\"synIdentifier\">$=</span><span class=\"synConstant\">&quot;{{id}}&quot;</span><span class=\"synIdentifier\">&gt;</span><span class=\"synUnderlined\">@</span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;</span><span class=\"synUnderlined\">{{id}}</span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">span</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">a</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">    Polymer</span>(<span class=\"synIdentifier\">{</span>\n<span class=\"synSpecial\">      is: </span><span class=\"synConstant\">'my-tw'</span><span class=\"synSpecial\">,</span>\n<span class=\"synSpecial\">      _tw: </span><span class=\"synIdentifier\">function</span>(<span class=\"synSpecial\">id</span>)<span class=\"synSpecial\"> </span><span class=\"synIdentifier\">{</span><span class=\"synSpecial\"> </span><span class=\"synStatement\">return</span><span class=\"synSpecial\"> </span><span class=\"synConstant\">'https://twitter.com/'</span><span class=\"synSpecial\"> + id; </span><span class=\"synIdentifier\">}</span>\n<span class=\"synSpecial\">    </span><span class=\"synIdentifier\">}</span>)<span class=\"synSpecial\">;</span>\n<span class=\"synSpecial\">  </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>dom-module<span class=\"synIdentifier\">&gt;</span>\n</pre><p>Polymerほんとまじ・・・。</p>\n\n</div>\n<div class=\"section\">\n    <h5>inner-h-t-m-l</h5>\n    <p>外部からHTMLをいれこみたいとかありますよね？？？？？？</p><p>Polymerでは基本的に全部エスケープされちゃうので、どうしようもないです！<br />\nお手上げです！ってなってたんですけど・・・。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>dom-module<span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;my-html&quot;</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> inner-h-t-m-l=</span><span class=\"synConstant\">&quot;{{htmlStr}}&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">    Polymer</span>(<span class=\"synIdentifier\">{</span>\n<span class=\"synSpecial\">      is: </span><span class=\"synConstant\">'my-html'</span><span class=\"synSpecial\">,</span>\n<span class=\"synSpecial\">      ready: </span><span class=\"synIdentifier\">function</span>()<span class=\"synSpecial\"> </span><span class=\"synIdentifier\">{</span><span class=\"synSpecial\"> </span><span class=\"synIdentifier\">this</span><span class=\"synSpecial\">.htmlStr = </span><span class=\"synConstant\">'&lt;p&gt;HTML!&lt;/p&gt;'</span><span class=\"synSpecial\">; </span><span class=\"synIdentifier\">}</span>\n<span class=\"synSpecial\">    </span><span class=\"synIdentifier\">}</span>)<span class=\"synSpecial\">;</span>\n<span class=\"synSpecial\">  </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>dom-module<span class=\"synIdentifier\">&gt;</span>\n</pre><p>なんだこれ。<br />\nドキュメント検索しても出てこないしドコ情報やねんって感じですけど、動きます。</p><p>ちなみに、</p>\n\n<ul>\n<li>o: inner-h-t-m-l=\"\"</li>\n<li>o: inner-H-T-M-L=\"\"</li>\n<li>o: inner-h-T-m-l=\"\"</li>\n<li>o: inner-h-t-M-l=\"\"</li>\n<li>o: inner-h-t-m-L=\"\"</li>\n<li>x: innerHTML=\"\"</li>\n<li>x: innerHtml=\"\"</li>\n<li>x: inner-HTML=\"\"</li>\n<li>x: inner-Html=\"\"</li>\n<li>x: inner-html=\"\"</li>\n</ul><p>ハイフンが重要です。<br />\nPolymer・・・ほんとまじ・・・。</p>\n\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3>ハマったとこ</h3>\n    \n<div class=\"section\">\n    <h4>上記の内容すべて</h4>\n    <p>面倒になって手探りではじめてしまったのがもったいなかった。(けど仕方ないと思う</p>\n\n</div>\n<div class=\"section\">\n    <h4>ドキュメント</h4>\n    \n<ul>\n<li>巨大で読む気失せる</li>\n<li>かといってコードはもっと巨大なので読む気(ry</li>\n<li>検索すると0.5の情報ばっか出てくる</li>\n<li>1.0のページで検索すると0.5の情報へのリンクが出てくる</li>\n<li>サンプルコードあったりなかったり</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>すべてはWebComponentsReadyから</h4>\n    <p>各要素をquerySelectorしたり、メソッド叩いて何かしたりする場合、このイベントを待ってからじゃないとダメです。</p><p>ブラウザによって`WebComponentsReady`の発火順が違ったり色々なので、<br />\nbodyの最後に読み込まれるjsで`WebComponentsReady`を待って、全部の処理を開始すべし。</p>\n\n</div>\n<div class=\"section\">\n    <h4>IE x dom-repeat x table is 死</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/Polymer/polymer/issues/1567\">Dom-repeat doesn&#39;t work in tables in IE &middot; Issue #1567 &middot; Polymer/polymer &middot; GitHub</a></p>\n\n    </blockquote>\n<p>そうやね、仕方ないね。<br />\nPolymer is currently in “developer preview.\" やし、仕方ないね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>コンポーネントのスコープ？</h4>\n    <p>言葉が不適切かもしれないけども。<br />\nSPAなんかでよくあるタブ切り替えのページを実装する場合。</p>\n\n<ul>\n<li>paper-tabs</li>\n<li>iron-pages</li>\n</ul><p>この2つを使うとしましょう。</p><p>これらの要素は、それぞれ`selected`ってプロパティにインデックスの数値を入れると、そこがアクティブになる・・って仕組みです。<br />\nで、どうやってこの`selected`を共有するかが問題。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>dom-module<span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;my-elm&quot;</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span>paper-tabs<span class=\"synIdentifier\"> </span><span class=\"synType\">selected</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;{{selected}}&quot;</span><span class=\"synIdentifier\">&gt;</span>\n      <span class=\"synIdentifier\">&lt;</span>paper-tab<span class=\"synIdentifier\">&gt;</span>Tab 1<span class=\"synIdentifier\">&lt;/</span>paper-tab<span class=\"synIdentifier\">&gt;</span>\n      <span class=\"synIdentifier\">&lt;</span>paper-tab<span class=\"synIdentifier\">&gt;</span>Tab 2<span class=\"synIdentifier\">&lt;/</span>paper-tab<span class=\"synIdentifier\">&gt;</span>\n      <span class=\"synIdentifier\">&lt;</span>paper-tab<span class=\"synIdentifier\">&gt;</span>Tab 3<span class=\"synIdentifier\">&lt;/</span>paper-tab<span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;/</span>paper-tabs<span class=\"synIdentifier\">&gt;</span>\n\n    <span class=\"synIdentifier\">&lt;</span>iron-pages<span class=\"synIdentifier\"> </span><span class=\"synType\">selected</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;{{selected}}&quot;</span><span class=\"synIdentifier\">&gt;</span>\n      <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>Page 1<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n      <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>Page 2<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n      <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>Page 3<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;/</span>iron-pages<span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">template</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">  Polymer</span>(<span class=\"synIdentifier\">{</span>\n<span class=\"synSpecial\">    is: </span><span class=\"synConstant\">'my-elm'</span><span class=\"synSpecial\">,</span>\n<span class=\"synSpecial\">    ready: </span><span class=\"synIdentifier\">function</span>()<span class=\"synSpecial\"> </span><span class=\"synIdentifier\">{</span>\n<span class=\"synSpecial\">      </span><span class=\"synIdentifier\">this</span><span class=\"synSpecial\">.selected = </span>0<span class=\"synSpecial\">;</span>\n<span class=\"synSpecial\">    </span><span class=\"synIdentifier\">}</span>\n<span class=\"synSpecial\">  </span><span class=\"synIdentifier\">}</span>)<span class=\"synSpecial\">;</span>\n<span class=\"synSpecial\">  </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>dom-module<span class=\"synIdentifier\">&gt;</span>\n</pre><p>この例みたく、同じ要素で閉じ込めちゃえば問題なし。<br />\nselectedはちゃんと同期します。</p><p>ただもしこれが、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>my-tabs<span class=\"synIdentifier\">&gt;</span><span class=\"synComment\">&lt;!-- こっちタブ --&gt;</span><span class=\"synIdentifier\">&lt;/</span>my-tabs<span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span>my-pages<span class=\"synIdentifier\">&gt;</span><span class=\"synComment\">&lt;!-- こっちページ --&gt;</span><span class=\"synIdentifier\">&lt;/</span>my-pages<span class=\"synIdentifier\">&gt;</span>\n</pre><p>こうしちゃった場合にどうすればいいか。<br />\nそのままではそれぞれの要素内で`selected`が存在するだけで、お互いには関係ないのでもちろん動きません。</p><p>まぁもうわかりそうですが、手動で同期させる必要があります。</p><p>Polymer Starter Kitのデモだと、page.jsを使ってやってます。<br />\n`app`って変数をbody直下に`dom-bind`して、それで同期させてます。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/PolymerElements/polymer-starter-kit/blob/master/app/elements/routing.html\">https://github.com/PolymerElements/polymer-starter-kit/blob/master/app/elements/routing.html</a></p>\n\n    </blockquote>\n<p>このへん見ればなるほどなーってなるかと。<br />\nただこのHTMLにあれこれ書くのがイヤで、今回はこのやり方採用しなかったです。</p>\n\n</div>\n<div class=\"section\">\n    <h4>paper-header-panel x scrollTop</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/PolymerElements/paper-header-panel\">GitHub - PolymerElements/paper-header-panel: A Material Design panel with top and bottom panes</a></p>\n\n    </blockquote>\n<p>これを使ってて、ページ内スクロールをjsでやりたい場合。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">window</span>.scrollTo(0, 0); <span class=\"synComment\">// なにもおきない</span>\n\n<span class=\"synComment\">// 別にquerySelectorとかでもいい</span>\n<span class=\"synComment\">// $('paper-header-panel').querySelector('#mainContainer').scrollTop = 0;</span>\n$(<span class=\"synConstant\">'paper-header-panel'</span>).lastElementChild.firstElementChild.scrollTop = 0;\n</pre>\n<ul>\n<li>paper-header-panelは、ヘッダとパネルの2つを子要素に持つマークアップをするもの</li>\n<li>パネルの中にはコンテナと装飾用の要素があるだけ</li>\n<li>このコンテナが実体なのでコレのscrollTopを変更する</li>\n</ul><p>ふーむ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>SEOとは</h4>\n    <p>あれもこれも独自要素にしてしまうことの欠点ですかね。</p><p>「ソースを表示」ってやるとすぐバレますが、独自で作ったカスタム要素は空っぽに見えちゃいます。<br />\nGoogleBotがどこまで解釈してくれるか知りませんが、たぶん期待できないので状況によっては注意かなーと。</p>\n\n</div>\n<div class=\"section\">\n    <h4>謎のWebFont</h4>\n    <p>答えがわかれば別に謎でもなんともないんですけど、いちおう。</p><p>最初の方に紹介したカタログの中にある、「Paper Elements」ってやつ。<br />\nいわゆるマテリアルデザインをさくっと取り入れられるよ！って要素たちです。</p><p>このシリーズのだいたいがpaper-stylesってのをdependenciesに持ってて、ここにRobotoのウェブフォントがいます。</p><p>まったく身に覚えないのに(最悪使ってないのに)ウェブフォントやら同じようなライブラリやらがロードされまくってページのロードがやけに遅い・・とか、WebComponentsの未来のあるあるが見えた気がした。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>さて、2週間ほどの短い期間ですが、Polymer 1.0に触れていろいろ感じた結果、熱い思いがあふれそうになったのでココに書き出してみた次第です。</p>\n\n<ul>\n<li>テンプレまわりはだいぶがっかりやった</li>\n<li>けど、全体的には思ってたより良かった</li>\n<li>コンポーネント指向ってのは納得できる</li>\n<li>ただServiceWorker用の要素とか、もはや要素とはなんやねんってなるのでやっぱ好きくない</li>\n<li>使いドコロが一番の問題で、楽できそうなら使えば良いと思う</li>\n<li>でも手軽ではない</li>\n<li>モバイルでは絶対使いたくない(個人の感想です)</li>\n<li>総じて設計の難易度は上がった感じする</li>\n</ul><p>以上、個人の感想でした。(どこかで誰かの参考になれば幸いです。</p>\n\n</div>"
}
