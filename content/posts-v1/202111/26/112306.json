{
  "title": "CDNエッジでSSR、ではなくSSG+αできないか",
  "html": "<p>なんだかんだここ半年くらいずっとCloudflare Workersを触ってます。<br />\nで、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>エッジでコードが動くことはわかった。制約があることも、それなりに速いこともわかった。</p><p>で、これをどう扱っていくのが人類にとって良いんかな〜？みたいなことをずっと考えてた折に、VercelやらRemixが「これからはエッジだ！」（意訳）みたいなメッセージを出してて、ふふ〜んってなった今日このごろ。</p>\n\n    <blockquote>\n        <p>We believe the modern Web is at the Edge and embraces the open Web platform.<br />\n<a href=\"https://vercel.com/blog/vercel-funding-series-d-and-valuation\">https://vercel.com/blog/vercel-funding-series-d-and-valuation</a></p><p>We leveraged distributed systems at the edge instead of static builds.<br />\n<a href=\"https://remix.run/docs/en/v1/guides/philosophy\">https://remix.run/docs/en/v1/guides/philosophy</a></p>\n\n    </blockquote>\n<p>なのでここで現状を整理して、少しでも自分の思考の足しにしたいなーと。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>エッジで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a></h3>\n    <p>SvelteKit w/ cloudflareアダプターとか、（Next.jsはまだCFWで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>できないはずなので代わりに）Flareactとか、Remixとかがやろうとしてるやつ。</p><p>まあ実行環境だけを見るならば、従来のFaaSでやるよりは速いはずなので、諸々の制限さえ問題にならないなら別にええんではって感じ。</p><p>Remixの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>に全振りする思想もわからんでもないし、エッジのおかげで妥協点のボーダーがいい感じになってきたのはあるかもしれない。RSCにしろ、Streaming <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>にしろ、従来のFaaSでやるよりかはエッジでやったほうが速くて嬉しいはずなので。</p><p>ただ、リク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トが実行環境に届くまでは速くなっても、そこから先が引き続き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF\">ボトルネック</a>になるならば、ユーザー体験としてはさほど変わりないのでは〜？と思ったりはする。</p><p>ことCFWに関して言えば、現状HTTPしか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%C8%A5%B3%A5%EB\">プロトコル</a>が使えないので、DBまわりへのアクセスで余計に遅くなったりしないだろうか？データのあるNW内で完結したほうが速かったり？とか。そもそもエッジで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>しまくるのが実用に足るものなのか？って話も、これから出てくる気はする。そもそも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>・・話も引き続き。</p><p>ただDBもエッジ側によってくるのは順当な流れな気がしていて、CFWにはKVやDOがあるし、MarcrometaとかDBをエッジで！って言ってるサービスもある。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.macrometa.com/\">Macrometa - Build Faster Real-Time Applications</a></p>\n\n    </blockquote>\n<p>まぁセンシティブなデータまでエッジDBに載せる未来はあんまし想像つかんけど。</p><p>まぁこのあたりは巷のポエムに任せるとして、Cloudflare Workersだからこそできそうな、その他の使い方はないのか？ってことを考えてるってのが本題。</p>\n\n</div>\n<div class=\"section\">\n    <h3>エッジでSSG+α</h3>\n    <p>Cloudflare Workersには、`HTMLRewriter`っていう知られざる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>があって、それをなんとか活用する方法はないか？って考えてた。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/runtime-apis/html-rewriter\">https://developers.cloudflare.com/workers/runtime-apis/html-rewriter</a></p>\n\n    </blockquote>\n<p>これはその名の通りHTMLをリライトして返せる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// これを</span>\n<span class=\"synStatement\">const</span> htmlStr = await htmlResp.body();\n<span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> Response(htmlStr.replace(<span class=\"synComment\">/* ... */</span>));\n\n<span class=\"synComment\">// こう書ける</span>\n<span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> HTMLRewriter()\n  .on(<span class=\"synConstant\">&quot;a&quot;</span>, anchorRewriter).transform(htmlResp);\n</pre><p>というように使える。</p><p>既存のHTMLがある前提の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>になってて、たとえば事前に生成してKVに保存しておいたHTMLを取り出して加工して返すことができる。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>ライクな<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>で対象の要素を見つけて、ピンポイントに書き換えができる。リライトするけど、ちゃんとストリーミングされたレスポンスがクライアントに返るところがポイント。チューニングがんばってるみたいな話も書いてあった。</p>\n\n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/html-parsing-1/\">A History of HTML Parsing at Cloudflare: Part 1</a><br />\n<a href=\"https://blog.cloudflare.com/html-parsing-2/\">Low Output Latency (LOL)HTML parser/rewriter</a></p>\n\n    </blockquote>\n<p>なのでこれを使って、</p>\n\n<ul>\n<li>SSGで事前生成したHTMLでマーキングしておき、それをKVに保存しておく</li>\n<li>Workers Sitesで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%B9%A5%C6%A5%A3%A5%F3%A5%B0\">ホスティング</a>して、KVから取り出して返す</li>\n<li>ユーザー情報とか動的な情報を`HTMLRewriter`で埋め込み</li>\n<li>そのままでいいページはそのまま返す</li>\n</ul><p>っていうパターンができる気がしていて、これは実用的か？ってのを考えてる。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>系<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>のアプローチの逆方向っぽいやつ。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>系の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>を使ってその上でSSGする場合、不要なJSから逃げられないことが多い（サイズも実行も）のが現状なので、SSG系の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>を使って、その上で動的部分を補うアプローチはどうだろうか、と。EleventyにしろAstroにしろ、動的部分はクライアントで処理するしかなくて不利で〜みたいなところをカバーできないかなーと。</p>\n\n<ul>\n<li>完全に静的な部分: SSGしてあるからよい</li>\n<li>初期表示でほしい動的な部分: リライトして対応、その上ストリーミングして返せる</li>\n<li>その後でいい動的な部分: SSGしたときに、(Partial)Hydrationするようにしたまま放置でよい</li>\n</ul><p>ってな感じのイメージ。（未検証）</p><p>考えられるデメリットは、</p>\n\n<ul>\n<li>SSGする層とリライトする層でコードが分散してしまう\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>として難易度が高いかも</li>\n<li>リライトする層でも結局<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>っぽいコードが必要</li>\n<li>好きなテンプレートエンジンも使えるけど、サーバー<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>してたあの頃みたい</li>\n</ul></li>\n<li>リライトした後のHydrationとかどうすんだ</li>\n<li>めちゃめちゃベンダーロックイン\n<ul>\n<li>いやまぁ・・</li>\n</ul></li>\n</ul><p>という感じで、考えてはみたものの、そこまでお手軽ではなさそう。</p><p>けど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%E9%A5%AF%A5%C6%A5%A3%A5%D6\">インタラクティブ</a>ではないがLCPに大きく関わる・・っていうポイントに絞って使うのであれば、ナシではないかなーとも。まぁ手札の一枚として。</p><p>そもそもSSG(+ (Partial)Hydration)する構成を選んだ時点で、LCPやTTIに影響があるような動的部分はSSGによって解消されてる前提があるはず。そういう意味では、後から動的にしたい部分はおとなしく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSR\">CSR</a>する覚悟や判断があったはず。どうしても描画してから返したいなら、そもそもそれはSSGが不適合なサイトだったってだけ。</p><p>というわけで・・、可能性はあった気がしたけど、やはり動的部分がメインのサイトに関しては、</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>する\n<ul>\n<li>エッジでやれるようになって速くなるならラッキー</li>\n</ul></li>\n</ul><p>もしくは、</p>\n\n<ul>\n<li>SSG + (Partial)Hydrationする\n<ul>\n<li>妥協点として</li>\n</ul></li>\n</ul><p>ってのが妥当な選択肢なんかなー。</p><p>現状の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>はパフォーマンスに問題があると思うけど、Reactの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>はそのへんも視野に入ってきてるぽいし。Svelteはまだそういう気配ないけど。そういえば既にStreaming <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>できる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Marko\">Marko</a>は、CFWで動くんやろうか？</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/reactwg/react-18/discussions/37\">New Suspense SSR Architecture in React 18 &middot; Discussion #37 &middot; reactwg/react-18 &middot; GitHub</a><br />\n<a href=\"https://github.com/sveltejs/svelte/issues/958\">Async/streaming SSR renderer &middot; Issue #958 &middot; sveltejs/svelte &middot; GitHub</a></p>\n\n    </blockquote>\n<p>ってもすぐには実用的なレベルにならんやろうし、Reactはそれ自体が相変わらず難しいし、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>自体の技術的難易度が高いことにも変わりはないし、クライアントに落ちるJSのサイズも極力減らしたいし・・。</p><p>やっぱエッジでSSG+αもとい、PartialSSRなこの路線、もう少し探求してみるべき・・・？いやでも・・、みたいなことを悶々と考えてるという話でした。</p>\n\n</div>"
}
