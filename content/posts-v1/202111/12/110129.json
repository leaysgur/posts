{
  "title": "Transitional Apps by Rich Harris の要点まとめ",
  "html": "\n    <blockquote>\n        <p><a href=\"https://jamstackconf.com/talk/c17544108e71/transitional-apps/\">Jamstack Conf Session: Transitional Apps</a></p>\n\n    </blockquote>\n<p>先月のJamstack Conf 2021のトークより。</p><p>ほんとはもっと早くまとめたかったけど、仕事のアレがアレでな・・。</p><p>内容としては、ちょっと前に書いてたこの記事にも縁がある感じの内容かも。</p>\n\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2021/08/12/103111\">&#x306A;&#x3093;&#x3067;&#x3082;SPA&#x306B;&#x3059;&#x308B;&#x3093;&#x3058;&#x3083;&#x306D;&#x3047;&#xFF01;&#x3068;&#x3044;&#x3046;&#x4E3B;&#x5F35;&#x306E;&#x305D;&#x306E;&#x5148; - console.lealog();</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>Webサイト・アプリをどう作るか？</h3>\n    \n<ul>\n<li>という議論が最近よくある\n<ul>\n<li>今も、今までも、きっとこれからも</li>\n</ul></li>\n<li>Traditionalに作るか、Modernに作るかの2軸になってることが多い</li>\n<li>つまりMPA vs SPA\n<ul>\n<li>この表現が正確かはさておき、それぞれの特徴をおさらい</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>MPA</h4>\n    \n<ul>\n<li>リクエストに応じてサーバーでHTMLを作って返すクラシックな方法\n<ul>\n<li>サーバーはRailsやPHPなど</li>\n<li>前段にCDNがあるかもしれない</li>\n</ul></li>\n<li>基本的にクライアントはそれを表示するだけ</li>\n<li>リンクを踏めばナビゲーションが起きて、またリクエストする</li>\n<li>とてもシンプルで、長く使われてきた</li>\n<li>しかしブラウザの進化もあり、ユーザーからの需要も高まってきた</li>\n<li>そうなるとどうなるか</li>\n<li>初期表示のためにHTMLをレンダリングしていたサーバーはそのままに、その後の表示を更新をするため、JSを配信するようになった\n<ul>\n<li>2つの言語が必要になった</li>\n<li>コードベースも違うのに、密結合を余儀なくされた</li>\n<li>開発体験もよくないし、運用も難しい</li>\n</ul></li>\n<li>そこで生み出されたのがSPA</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>SPA</h4>\n    \n<ul>\n<li>サーバーは、空っぽのHTMLと、JSだけを返す\n<ul>\n<li>クライアントがそれを使ってすべての画面を表示する</li>\n</ul></li>\n<li>リンクを踏んでもナビゲーションは起きない\n<ul>\n<li>クライアント内で完結して表示を更新する</li>\n<li>アプリっぽくて好評</li>\n</ul></li>\n<li>ただし問題もいろいろある\n<ul>\n<li>大量のJSコードが必要</li>\n<li>パフォーマンスの問題</li>\n<li>複雑さはバグを生む</li>\n<li>粗悪なアクセシビリティの問題</li>\n<li>必要なツールが多くて複雑</li>\n<li>ブラウザの本来の挙動にそぐわない</li>\n</ul></li>\n<li>悪い例: インスタ\n<ul>\n<li>JSなしで動作しない</li>\n<li>巨大なJSファイルが必要</li>\n<li>戻るボタンも期待通りに動作しない</li>\n</ul></li>\n<li>フォーカスやスクロールの管理の問題\n<ul>\n<li>フォーカス管理を放棄してるSPAがよくある</li>\n<li>ページバックで画面をスクロールしなおすアレも微妙</li>\n</ul></li>\n<li>ただ問題ばかりでもないし、SPAでしか実現できないこともある\n<ul>\n<li>メディアを再生しながらのページ回遊</li>\n<li>クライアントでの状態の保持</li>\n<li>アニメーションつきのページ遷移のUX</li>\n</ul></li>\n<li>3rdのJSも、SPAなら1度だけ評価すればいい\n<ul>\n<li>MPAだと全ページであの読み込みが必要になる・・</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>MPAとSPAのいいとこ取りをしたい</h4>\n    \n<ul>\n<li>できる</li>\n<li>MPA: 初期表示が早い</li>\n<li>MPA: JSなしでも動作する（はず）</li>\n<li>MPA: 本来のブラウザの動作に近い</li>\n<li>MPA: 好きな言語で開発できる（いちおう）</li>\n<li>SPA: コードベースが1つ</li>\n<li>SPA: ナビゲーションが早い</li>\n<li>SPA: 変わらない要素を永続化できる</li>\n<li>SPA: クライアントでの状態</li>\n<li>これを一挙に実現するものがあるとして、なんて名付ける？\n<ul>\n<li>TraditionalとModernのはざまで・・</li>\n</ul></li>\n<li>Transitionalデザインという単語がある\n<ul>\n<li>家具などのデザイン界隈で使われてる</li>\n</ul></li>\n<li>Transitional Appsだ！\n<ul>\n<li>ハッシュタグは `#transitionalapps` ね</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>Transitional Appsに対する反論</h3>\n    \n<ul>\n<li>まずは想定される反論に答えておきたい</li>\n</ul>\n<div class=\"section\">\n    <h4>1: そんなものは不要</h4>\n    \n<ul>\n<li>SPAの利点は、JSなしでもできる\n<ul>\n<li>たとえば、Hotwire</li>\n<li><a href=\"https://hotwired.dev/\">https://hotwired.dev/</a></li>\n</ul></li>\n<li>HTMLのカケラをサーバーで作って、それをWebSocketで配信する</li>\n<li>アイデアとしては良いけど、ネットワークの速さに依存してしまう</li>\n<li>他にも気になる点はある</li>\n<li>GitHubでも似たようなことをやってるが、バグが多い\n<ul>\n<li>closeしても消えない Issue(1)</li>\n<li>クライアントでの選択状態がリセットされる</li>\n<li>etc...</li>\n</ul></li>\n<li>気になって毎回手動でリロードしちゃう\n<ul>\n<li>（すごいわかる）</li>\n</ul></li>\n<li>HTMLをプッシュするとこうなってしまう</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>2: ドキュメントサイトかアプリか</h4>\n    \n<ul>\n<li>ドキュメントサイトを作るのに、アプリを作るツールは不要という論</li>\n<li>適切な道具を選ぼうという意味では同意できる</li>\n<li>ただ、サイト or アプリの2軸の比較に意味はあるか？\n<ul>\n<li>NYTなんかは、ニュースサイトでありつつ、インタラクティブな部分もある</li>\n</ul></li>\n<li>世の中にはそういう（サイト|アプリ）がたくさんある\n<ul>\n<li>静的な技術ブログサイトをやってたけど、自分のPodcastとか再生しつつ回遊できるようにしたいなってなったとき、アプリとして作り直すか？</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>3: そもそもJavaScriptが嫌</h4>\n    \n<ul>\n<li>という人たちも一定数いる\n<ul>\n<li>文化の問題</li>\n<li>言語的に好きくないとか</li>\n</ul></li>\n<li>エッジコンピューティングで解決って言うけど</li>\n<li>確かに好きな言語で書いたWASMも動く</li>\n<li>けど、結局はJSがベターでしょうね</li>\n<li>Transitional Appsは、サーバーでもクラウドでもエッジでもデプロイできる\n<ul>\n<li>もちろんクライアントでもServiceWorkerでもWebWorkerでも</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>4: JavaScript多すぎ</h4>\n    \n<ul>\n<li>3rdのスクリプトの話もしてたけど、それとはまた別</li>\n<li>サーバーでレンダリングして返しても、その後の更新のために、ハイドレーションのために、結局JSが必要になってしまう問題\n<ul>\n<li>既に表示が済んでいて、不変なコンポーネントでさえも、JSのコードとしてはダウンロードされてしまう</li>\n</ul></li>\n<li>これは確かに問題</li>\n<li>ただここは各種フレームワークが熱心に取り組んでいる分野でもある</li>\n<li>React: Server Components\n<ul>\n<li><a href=\"https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html\">https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html</a></li>\n</ul></li>\n<li>Marko: 部分的にハイドレーションができる\n<ul>\n<li><a href=\"https://dev.to/ryansolid/server-rendering-in-javascript-optimizing-performance-1jnk\">https://dev.to/ryansolid/server-rendering-in-javascript-optimizing-performance-1jnk</a></li>\n</ul></li>\n<li>Qwik: すべてを遅延ロードできる\n<ul>\n<li><a href=\"https://github.com/BuilderIO/qwik/blob/main/docs/LAZY_LOADING.md\">https://github.com/BuilderIO/qwik/blob/main/docs/LAZY_LOADING.md</a></li>\n</ul></li>\n<li>Astro: アイランドアーキテクチャ\n<ul>\n<li><a href=\"https://docs.astro.build/core-concepts/component-hydration/\">https://docs.astro.build/core-concepts/component-hydration/</a></li>\n</ul></li>\n<li>SvelteKit: ページレベルでハイドレーションするか選べる\n<ul>\n<li><a href=\"https://kit.svelte.dev/\">https://kit.svelte.dev/</a></li>\n</ul></li>\n<li>乞うご期待</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>今度こそ、Transitional Apps</h3>\n    \n<ul>\n<li>SvelteKitはTransitional Appsを作るためのフレームワーク</li>\n<li>そのデモだよ\n<ul>\n<li><a href=\"https://github.com/sveltejs/kit/tree/master/packages/create-svelte/templates/default/src\">https://github.com/sveltejs/kit/tree/master/packages/create-svelte/templates/default/src</a></li>\n</ul></li>\n<li>開発中はHMRが効いて快適</li>\n<li>ビルドすると、事前レンダリングされる\n<ul>\n<li>動的な部分は、ちゃんとハイドレーションされて動く</li>\n<li>Svelteなので、JSのサイズも必要最低限だけ</li>\n<li>動的な部分がないなら、JSは一切ダウンロードされないようにもできる</li>\n<li>JSをOFFにしても、TODOリストはただのformとして動作する</li>\n</ul></li>\n<li>というものを、好きなところにデプロイできる\n<ul>\n<li>サーバーでもクラウドでもエッジでも</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>感想</h3>\n    <p>という感じで、MPA or SPAではなくこれからは、Transitional Apps！</p><p>呼び方があるのは便利なのでそれでいいとして、あまり目新しい話はなかったな・・というのが個人的な感想。<br />\n弊社のクライアントワークではサーバーありきのソリューションに手を出しにくいせいもあって、いまいち追いきれてない世界線ってのもあるけど。</p><p>とはいえJSなし環境もちゃんと動くのが本来のWeb！みたいなところには共感できるし、理想のアーキテクチャを実現する方法は引き続き色々あるはずなので、要件にあわせてちゃんと選ぶことを諦めない姿勢が大事ってことかね〜。</p><p>そういえばRich氏、NYTを去りVercelに入ったんですって。SvelteのOSS活動をフルタイムでやってくそうな。おめでとうございます！</p><p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"en\" dir=\"ltr\">today is a big day for <a href=\"https://twitter.com/sveltejs?ref_src=twsrc%5Etfw\">@sveltejs</a>: i&#39;ve joined <a href=\"https://twitter.com/vercel?ref_src=twsrc%5Etfw\">@vercel</a> to work on it full time!<br><br>so happy about what this means for svelte&#39;s future. it&#39;ll be the same independent, pluralistic project as before, but with Vercel&#39;s backing we can get ✨ a m b i t i o u s ✨<a href=\"https://t.co/ytxj3I4Te0\">https://t.co/ytxj3I4Te0</a></p>&mdash; Rich Harris (@Rich_Harris) <a href=\"https://twitter.com/Rich_Harris/status/1458822051263823875?ref_src=twsrc%5Etfw\">2021年11月11日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p>\n\n</div>"
}
