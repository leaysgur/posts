{
  "title": "CloudflareのFull Stack Weekの発表まとめ",
  "html": "<p>Cloudflare社は、定期的に「なんたらWeek」って感じでまとめてアップデートを発表する取り組みをやってるっぽく、今回のテーマはフルスタック！<br />\nなんでもかんでもCloudflareでできるようにするよ！という強い意志を感じる発表たちだった。</p>\n\n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/tag/full-stack-week/\">Full Stack Week - The Cloudflare Blog</a></p>\n\n    </blockquote>\n<p>今回は実験的にTwitterでもまとめて流してたけど、やっぱりブログにまとめるほうがしっくりくるなってことで、改めて。</p>\n\n<ul>\n<li><a href=\"https://twitter.com/leader22/status/1460451057109127169\">https://twitter.com/leader22/status/1460451057109127169</a></li>\n<li><a href=\"https://twitter.com/leader22/status/1460772775010791430\">https://twitter.com/leader22/status/1460772775010791430</a></li>\n<li><a href=\"https://twitter.com/leader22/status/1461158193631936512\">https://twitter.com/leader22/status/1461158193631936512</a></li>\n<li><a href=\"https://twitter.com/leader22/status/1461592966682660864\">https://twitter.com/leader22/status/1461592966682660864</a></li>\n<li><a href=\"https://twitter.com/leader22/status/1461725844355698693\">https://twitter.com/leader22/status/1461725844355698693</a></li>\n</ul><p>ここでのまとめは発表順ではなく、カテゴリごとになってます。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Workers</h3>\n    \n<div class=\"section\">\n    <h4>MongoDB Atlas and Prisma support</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/workers-adds-support-for-two-modern-data-platforms-mongodb-atlas-and-prisma/\">Workers adds support for two modern data platforms: MongoDB Atlas and Prisma</a></p>\n\n    </blockquote>\n<p>タイトルだけ見たときは、ついにMongoの公式サポートきたか？！って思ったけど、よくよく読んでみるとそうではなかった。</p><p>MongoDBならばRealm、PrismaならばPrisma Data Proxyを使って、HTTPでアクセスできる口を自分で用意すれば、そこにWorkerからつなげるよって話。</p><p>これは別に前からできてたことなので、なぜ今さら？という感じではあった。単にベンダーとしてパートナーになったよっていう報告かなーと。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Durable Objects: GA</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/durable-objects-ga/\">Durable Objects &mdash; now Generally Available</a></p>\n\n    </blockquote>\n<p>ベータだったDOが、ついに一般利用できるようになった！</p><p>ただ未だにどう活用していけばいいのかわかってないので、これでユースケースがどんどん発掘されるようになったらいいな・・くらいの気持ち。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Database Connector</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/relational-database-connectors/\">Introducing Relational Database Connectors</a></p>\n\n    </blockquote>\n<p>これまで、Cloudflare Workersを使う上での大きな制約として、プロトコルがHTTPしか使えないというものがあった。</p><p>そのため、TCPでの接続を要求するだいたいのDBが使えなくて、どうしても連携したければ自分でHTTPを話せる層を用意しないといけなかったりと地味に不便だった。</p><p>それをなんとかするための方法を編み出したので紹介するよ！っていう話。</p><p>Cloudflareは既に`cloudflared`っていうネットワークトンネルを作る仕組みを持ってて、それを使うことでTCP over WebSocketができる、と。なのでそのトンネル経由でDBにつないで、Workerからは専用のクラスを使えば、まるでHTTPからDBを扱える！</p><p>ただ今のところこの作戦は、自分たちのDBサーバーに自分たちで`cloudflared`を常駐させる必要があって、まだ道半ばといったところ。<br />\n将来的にはこれをCloudflare側でホストすることも考えてて、その検証を手伝ってくれるパートナーを探してるよとのこと。</p><p>ちなみに、Workerで利用できる専用のクラスはドライバって呼ばれてて、Denoのコードを拝借してカスタマイズしたらしい。<br />\nPostgresとMySQLの2つがサンプルとして上がってる。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/cloudflare/worker-template-postgres/tree/master/src/driver/postgres\">https://github.com/cloudflare/worker-template-postgres/tree/master/src/driver/postgres</a><br />\n<a href=\"https://github.com/cloudflare/worker-template-mysql/tree/master/src/driver/mysql\">https://github.com/cloudflare/worker-template-mysql/tree/master/src/driver/mysql</a></p>\n\n    </blockquote>\n<p>コレも今はコピペして使ってねって状態。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Socket Workers</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/introducing-socket-workers/\">Making connections with TCP and Sockets for Workers</a></p>\n\n    </blockquote>\n<p>やっぱみんなTCP使いたいですよね・・となるときっとUDPも・・というわけで。</p><p>いっそのことWorkerから直で使えるようにしちゃう？ってことで動き出したのが、我らが`@jasnell`御大・・・！</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// use TCP</span>\n<span class=\"synStatement\">const</span> socket = <span class=\"synStatement\">new</span> Socket(<span class=\"synIdentifier\">{</span>\n  remote: <span class=\"synIdentifier\">{</span> address: <span class=\"synConstant\">'123.123.123.123'</span>, port: 1234 <span class=\"synIdentifier\">}</span>,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synStatement\">for</span> await (<span class=\"synStatement\">const</span> chunk of socket.readable) <span class=\"synIdentifier\">{</span>\n  console.log(chunk);\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// use UDP</span>\n<span class=\"synStatement\">const</span> socket = <span class=\"synStatement\">new</span> Socket(<span class=\"synIdentifier\">{</span>\n  type: <span class=\"synConstant\">'udp'</span>,\n  remote: <span class=\"synIdentifier\">{</span> address: <span class=\"synConstant\">'123.123.123.123'</span>, port: 1234 <span class=\"synIdentifier\">}</span>,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synStatement\">const</span> enc = <span class=\"synStatement\">new</span> TextEncoder();\n<span class=\"synStatement\">const</span> writer = socket.writable.getWriter();\nawait writer.write(enc.encode(<span class=\"synConstant\">'hello world'</span>));\nawait writer.close();\n</pre><p>ってな具合に、使えるようにしようと思っているとのこと。</p><p>で、こういう実装は既にNode.jsにもあるし、Denoにもある。<br />\nまたCFWで独自実装することもできるけど、Webとしては標準APIになってるほうが嬉しい。</p><p>ので、そういう標準化もあわせてやっていくそうです。（さすが！すごい！）</p><p>現在のドラフトはこちらに公開されてて、フィードバック募集中とのこと。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/jasnell/sockets-api\">GitHub - jasnell/sockets-api</a></p>\n\n    </blockquote>\n<p>これが実装されて、各DBベンダーがドライバのライブラリを公開し、我々がユーザーランドでデータを手にできるのは、いったいいつの日になるだろうか・・・！</p>\n\n</div>\n<div class=\"section\">\n    <h4>Services over Workers</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/introducing-worker-services/\">Introducing Services: Build Composable, Distributed Applications on Cloudflare Workers</a></p>\n\n    </blockquote>\n<p>Workerの上位概念として、Serviceというレイヤーが誕生した！</p><p>構成要素をざっくり表すと、今まではこう。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>- Worker A(for prod)\n  - Bindings(KV, DO, SECRETS, ENV)\n- Worker A(for dev)\n- Worker B(for prod)</pre><p>これが、こうなる。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>- Service A\n  - env: prod\n    - Worker\n    - Bindings\n  - env: dev\n- Service B</pre><p>ってな感じで、Workerをそのまま作るというより、Serviceをまず作るとその中にWorkerがある、みたいになった。<br />\n既存のWorkerたちは、envを1つだけ持つServiceとして移行されてて、そういう意味では何も変わらない。</p><p>envはそれぞれでバージョニングされて、ロールバックもできるし、特定のenvを別のenvにコピーしたりもできる。</p><p>というのは、現時点でもできるようになってること。<br />\nここからはまだ未実装やけど、この先に予定されてるやつ。</p><p>なんと、Serviceから別のServiceを呼べるようになる！<br />\n現状、Workerから別のWorkerを呼ぶのはストレートにはできないので、それができるようになるのはアツい。</p>\n\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2021/11/04/214157\">Cloudflare Workers&#x3067;&#x3001;Worker&#x304B;&#x3089;&#x5225;&#x306E;Worker&#x3092;&#x547C;&#x3073;&#x305F;&#x3044; - console.lealog();</a></p>\n\n    </blockquote>\n<p>そして、Service間の通信は同じCDNエッジで行われるがゆえに、いわゆるMicro Sercvicesにありがちな問題だったネットワーキングのコストを0にできる、と！</p><p>これ、認証用のServiceとかロギング用のServiceとか作っておけば、似たようなコードが重複することもなくなって超絶便利ってことなんよね〜〜というわけで、個人的には激アツな発表だった。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Modules Worker format</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/workers-javascript-modules\">JavaScript modules are now supported on Cloudflare Workers</a></p>\n\n    </blockquote>\n<p>Workerのコードの書き方として、今までもこの2つがあった。</p>\n\n<ul>\n<li>`addEventListener(\"fetch\")`\n<ul>\n<li>Service Workerライクなフォーマット</li>\n</ul></li>\n<li>`export default { fetch() {} }`\n<ul>\n<li>ESMの使えるフォーマット</li>\n</ul></li>\n</ul><p>で、後者のやつは長らくExperimentalな感じやったけど、晴れて公式な書き方に。</p><p>ESMで書く場合は、もちろん`import`がそのまま使えるので、ビルドせずにWorkerのコードを書くこともできる。<br />\nが、インターネットにあるURLを`import`できるわけではないので、まあビルドする事実に変わりはない感じ。</p><p>ESMフォーマットで書く場合、`wrangler.toml`にはこう書く必要がある。</p>\n<pre class=\"code toml\" data-lang=\"toml\" data-unlink>type = &#34;javascript&#34;\n\n[build.upload]\nformat = &#34;modules&#34;\ndir = &#34;./src&#34;\nmain = &#34;./worker.js&#34; # becomes &#34;./src/worker.js&#34;\n\n[[build.upload.rules]]\ntype = &#34;ESModule&#34;\nglobs = [&#34;**/*.js&#34;]\n\n# Uncomment if you have a build script.\n# [build]\n# command = &#34;npm run build&#34;</pre><p>SWのフォーマットがサポートされなくなるわけではないので、そこはご心配なくとのこと。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Wrangler CLI v2</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/wrangler-v2-beta\">wrangler 2.0 &mdash; a new developer experience for Cloudflare Workers</a></p>\n\n    </blockquote>\n<p>CLIツール`wrangler`のメジャーバージョンアップのお知らせ。（今はまだベータ）</p><p>0 configで使えるようになったのと、ChromeのDevTools連携が入ってデバッグがしやすくなった。</p><p>あとはローカルで開発するときには、MiniflareっていうNode.jsで書かれたCloudflare Workersのエミュレータを使うことがデファクトになってたけど、今回それがついに内部的に取り込まれた。</p><p>Miniflare自体がCloudflare傘下のリポジトリに入った時点でそういう予感はあったけども。</p><p>Miniflareの作者である`@_mrbbot`氏、いつの間にかCloudflareの人になってる？！って思ったら、どうやらインターン中らしい。<br />\nインターンってことは・・若者ってことやん・・マジすげーわ・・・。</p><p>ちなみに、`wrangler`のv1はRustで書かれてたけど、v2になるにあたり、TypeScriptになってました。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/cloudflare/wrangler2\">https://github.com/cloudflare/wrangler2</a></p>\n\n    </blockquote>\n<p>また今度コード読んでみよ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Workers Unbound updates</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/workers-now-even-more-unbound/\">Workers, Now Even More Unbound: 15 Minutes, 100 Scripts, and No Egress Fees</a></p>\n\n    </blockquote>\n<p>Cloudflare Workersの有料プランであるUnboundについて。</p>\n\n<ul>\n<li>AWSだと割と高くつくらしいEgress（転送量）にお金がかからなくなった</li>\n<li>CPU時間の上限が15分までに伸びた</li>\n<li>デプロイできるWorkerの数が100まで増えた</li>\n</ul><p>とのことで、利用者としてはただただ嬉しい話。<br />\nAWSのS3でそれなりにかかるコストがCloudflareのR2だとかからないとか、Egressフリーはこれからもやっていくとのこと。（すごい）</p><p>あとは、Workerとしてデプロイできるコードのサイズも拡張する予定しているとのこと。WASMとかじゃんじゃん使えるように。<br />\nこれは申請してもらえれば今からでも拡張してくれるらしい。</p><p>その勢いでサブリクエスト数も拡張してくれるようになりませんかね・・・！</p>\n\n</div>\n<div class=\"section\">\n    <h4>Native support for Stripe JS SDK</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/announcing-stripe-support-in-workers/\">Announcing native support for Stripe&rsquo;s JavaScript SDK in Cloudflare Workers</a></p>\n\n    </blockquote>\n<p>決済サービスのStripeのSDKは、ずっとNode.js用のパッケージだったので、Workerでは使えなかった。が、それが今回使えるようになった！</p><p>って書いてあって、もしやNodeのAPIが使えるようになったんか？！って思ったけど、これもそうではなかった。（初日のMongoのやつといい、ちょっと表現がアレではってなった）</p><p>中の人の働きかけもあって（？）、StripeのSDK側に修正がはいって、利用環境ごとに`fetch`の実装を変えられるようになった結果、Workersでも使えるようになったって話。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Pages</h3>\n    \n<div class=\"section\">\n    <h4>Pages Functions</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/cloudflare-pages-goes-full-stack/\">Cloudflare Pages Goes Full Stack</a></p>\n\n    </blockquote>\n<p>単なる静的サイトホスティングサービスだったPagesが、今回の機能追加でAPIまで置けるようになり、フルスタックなプラットフォームに進化した！</p><p>`functions`ディレクトリにファイルベースのルーティングでコードを置くと、それがAPIになるし、ミドルウェアの機構もある。<br />\n裏で動くAPIがCloudflare Workersってところがポイントで、KVやDOを使いつつエッジベースな構成が引き続き組める。</p><p>WorkersはPagesのお供としてシームレスに用意されるので、Workers側のダッシュボードになんか増えたりはしない。</p><p>今はまだオープンベータで、Functionsの実行回数に100000/日の制限がある。（これはダッシュボードからもう見れる）</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/pages/platform/functions#pricing-and-limits\">https://developers.cloudflare.com/pages/platform/functions#pricing-and-limits</a></p>\n\n    </blockquote>\n<p>APIが置けるようになったってことは、SSRするぜ系のフレームワークがそのまま置けるようになるってこと。<br />\nSvelteKitは既にアダプターの実装を済ませてて、今日からもう使える。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/kit/tree/master/packages/adapter-cloudflare\">https://github.com/sveltejs/kit/tree/master/packages/adapter-cloudflare</a></p>\n\n    </blockquote>\n<p>Nextとか他のフレームワークの対応も進めていきたいとのこと。<br />\nそういう意味でVercel以外の選択肢ができたのは、業界的にもよいのかもしれない。</p><p>こういうフレームワーク系は、Pagesが想定する`functions`ディレクトリとかのお作法に乗るのが難しい場合もあるので、ルートに`_worker.js`を置けば、それが使われるようにもできる。上述のSvelteKitのアダプターもそういう実装になってた。</p><p>というわけで、Workersをそのまま使う人は引き続き使うけど、多くの人にとって嬉しいちょっとだけAPI足したいみたいな用途をカバーしてるのは、上手いやり方やなーって思った。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Images</h3>\n    \n<div class=\"section\">\n    <h4>AVIF supports</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/images-avif-blur-bundle/\">Cloudflare Images introduces AVIF, Blur and Bundle with Stream</a></p>\n\n    </blockquote>\n<p>Cloudflare ImagesでもAVIFが使えるようになった。<br />\nというか、Imagesを利用してれば勝手に対応される。</p><p>そのほかBlur加工の指定もURLのパラメータから簡単にできるように。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Others</h3>\n    \n<div class=\"section\">\n    <h4>Developer Expert Program</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/developer-expert-program/\">The Cloudflare Developer Expert Program: apply today!</a></p>\n\n    </blockquote>\n<p>Cloudflareは開発者と一緒になって高速なサイクルでサービスを開発していきたいんじゃよって話。</p><p>エキスパート制度に登録すると、中の人とより近い距離で接することができて、お互いにWIN-WINだと思うので、みんなぜひ登録してねとのこと。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.cloudflare.com/developer-expert-program\">Cloudflare Developer Expert Program | Cloudflare</a></p>\n\n    </blockquote>\n<p>気にはなるけど、もう少し詳細が知りたいです！<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h4>Response headers modification</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/transform-http-response-headers/\">Modifying HTTP response headers with Transform Rules</a></p>\n\n    </blockquote>\n<p>サイト単位でまとめて有効可できるレスポンスヘッダのフィルタ。</p><p>いちいちWorkerを立ててプロキシしなくてよいので、設定する側としてはすごく楽になったかも。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h4>Network Performance Updates</h4>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/network-performance-update-full-stack-week/\">Network Performance Update: Full Stack Week</a></p>\n\n    </blockquote>\n<p>世界一速いネットワークを目指してるという話。</p><p>パフォーマンス測定は定期的にやってきてて、前回はAWSのLambda Edgeより210%速いことを発表してた。</p><p>今回はFastlyのCompute@Edgeと比較して、Cloudflare Workersのほうが196%速かったことを報告するよ、と。（ここで公開されてたのはTTFBの速さ）</p><p>というように、世界中で速さを追求するために、こういうことをしてましたっていうレポート記事。</p>\n\n<ul>\n<li>ペルーでのトラフィックがなぜかチリに流れてるせいで遅かったのを解決したとか</li>\n<li>スリランカのトラフィックもなぜかアメリカを経由してたとか</li>\n</ul><p>地道な努力でありすごいな・・って感想しかなかった。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>ベンダーロックインとかマルチクラウドどうすんねん的な話はさておき一蓮托生で使えるなら、ほんと全方位の便利プラットフォームになってきたなーって感じ。そして速い、速いは正義。</p><p>Cloudflareに乗り換えたらこんなにも速くなったぜ！みたいなことが言える仕事してみたいな・・。</p><p>ちなみにこのXxxWeek的な取り組み、2021年内にまだあと1回あるらしいですよ。</p>\n\n</div>"
}
