{
  "title": "CloudflareのDeveloper Week 2023の気になった発表のまとめ",
  "html": "<p>今年も祭りの季節がやってきましたね。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.cloudflare.com/developer-week/\">Developer Week 2023 | Cloudflare</a></p>\n\n    </blockquote>\n<p>というわけで、今年も個人的に気になったものを。</p><p>（発表されるのがだいたい<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/JST\">JST</a>深夜かつ最後が金曜日なので、どうやっても公開するの週明けになるんよな・・）<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"Introducing-Constellation-bringing-AI-to-the-Cloudflare-stack\">Introducing Constellation, bringing AI to the Cloudflare stack</h3>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/introducing-constellation/\">https://blog.cloudflare.com/introducing-constellation/</a></p>\n\n    </blockquote>\n\n<ul>\n<li>Workersで<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC\">機械学習</a>のモデルが動かせるようになったとのこと\n<ul>\n<li>プライベートβ</li>\n</ul></li>\n<li>サポートされているランタイムで動作するモデルであれば、自作のものでも、用意されてるものでもOK</li>\n<li>現状はONNX形式のみ対応\n<ul>\n<li><a href=\"https://github.com/onnx/models\">https://github.com/onnx/models</a></li>\n<li><a href=\"https://github.com/dmlc/xgboost/\">https://github.com/dmlc/xgboost/</a> はもうすぐ</li>\n</ul></li>\n<li>プライベートβでは、モデルのサイズは10MiBまで\n<ul>\n<li>ちっさくない？</li>\n</ul></li>\n<li>用意されてるモデルは、`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/wrangler\">wrangler</a> constellation catalog list`でみれる\n<ul>\n<li>そのアカウントでConstellationが有効可されてる必要あり</li>\n</ul></li>\n<li>コードとしては薄いラッパーを介して使う\n<ul>\n<li>`import { <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Tensor\">Tensor</a>, run } from \"@cloudflare/constellation\";`</li>\n<li>コードの置き場は見つけられなかったけど、中身は依存0で345行のちょっとしたコード</li>\n<li><a href=\"https://developers.cloudflare.com/constellation/platform/client-api/\">https://developers.cloudflare.com/constellation/platform/client-api/</a></li>\n</ul></li>\n</ul><p>ML界隈に詳しくないのでこれが実用的なのかはよくわからないけど、敷居が下がってくる分にはうれしい。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Introducing-Cursor-the-Cloudflare-AI-Assistant\">Introducing Cursor: the Cloudflare AI Assistant</h3>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/introducing-cursor-the-ai-assistant-for-docs/\">https://blog.cloudflare.com/introducing-cursor-the-ai-assistant-for-docs/</a></p>\n\n    </blockquote>\n\n<ul>\n<li>CloudflareのDocsについて教えてくれる<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/AI%A5%A2%A5%B7%A5%B9%A5%BF%A5%F3%A5%C8\">AIアシスタント</a>ができたよ\n<ul>\n<li>名前はCursorくん</li>\n<li><a href=\"https://developers.cloudflare.com/workers/ai/\">https://developers.cloudflare.com/workers/ai/</a></li>\n</ul></li>\n<li>どういう構成か\n<ul>\n<li>Workers, Durable Objects, OpenAI, Cloudflare developer docs</li>\n<li>OpenAIのドキュメントにもあるSearch-Askメソッドというパターン</li>\n<li>EmbeddingsとCompletionを併用するアレ</li>\n</ul></li>\n</ul><p>最近はこういう<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/AI%A5%A2%A5%B7%A5%B9%A5%BF%A5%F3%A5%C8\">AIアシスタント</a>がたけのこのように生まれとるね。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Smart-Placement-speeds-up-applications-by-moving-code-close-to-your-backend--no-config-needed\">Smart Placement speeds up applications by moving code close to your backend — no config needed</h3>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/announcing-workers-smart-placement/\">https://blog.cloudflare.com/announcing-workers-smart-placement/</a></p>\n\n    </blockquote>\n\n<ul>\n<li>Workerのロケーションを最適化してくれる機能</li>\n<li>たとえば\n<ul>\n<li>ユーザーが日本からアクセスすると、Workerは日本のエッジにアクセスする（近いし、そもそもそれがエッジWorker）</li>\n<li>ただ、そこから北米にあるDBサーバーにアクセスしてたとしたら？</li>\n<li>もしそれが1RTですまず、複数回のアクセスだったとしたら？</li>\n<li>この場合、Worker自体もDBのある北米に移してしまうほうが、パフォーマンスが向上するというわけ</li>\n</ul></li>\n<li>簡易的なAAで`-`をネットワーキングと表現するならば、\n<ul>\n<li>日本 - 日本 === 北米: =のところが遅い</li>\n<li>日本 --- 北米 = 北米: =のところが速いので結果的に速い</li>\n</ul></li>\n<li>というのを体感できるデモ\n<ul>\n<li><a href=\"https://smart-placement-demo.pages.dev\">https://smart-placement-demo.pages.dev</a></li>\n</ul></li>\n<li>そもそもエッジとしては、ユーザーに近いところでサクッと実行される想定だった\n<ul>\n<li>が、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>が拡大するにつれ、やはりデータベースありきだと気づいた</li>\n<li>なのでリージョンを指定できないことが逆に問題になるケースもあった</li>\n</ul></li>\n<li>もちろんKV，DO, D1みたいなCloudflareスタックであれば、その心配はもともとないけど</li>\n<li>機能を有効にするには、Workerごとにフラグを1つ立てるだけ\n<ul>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Dashboard\">Dashboard</a>からでも、`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>.toml`からでも</li>\n<li>ロケーションは自動的に賢く選んでもらえる\n<ul>\n<li>移転しないほうがパフォーマンスがよければ、移転しない</li>\n<li>そもそも1RTしかしてないなら、移転しない、などなど</li>\n</ul></li>\n</ul></li>\n<li><a href=\"https://developers.cloudflare.com/workers/platform/smart-placement/\">https://developers.cloudflare.com/workers/platform/smart-placement/</a></li>\n</ul><p>これは普通に嬉しいやつ。<br />\nDBが<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA\">アメリ</a>カにあるなら、日本のエッジでリク<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>ト受けても嬉しいことあんまないのでは？ってずっと思ってたので。</p><p>ただService bindingsとの使い分けとか、そのへんは気になるところ。自動でお手軽にやりたいならって感じ？</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Announcing-connect--a-new-API-for-creating-TCP-sockets-from-Cloudflare-Workers\">Announcing connect() — a new <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a> for creating <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/TCP\">TCP</a> sockets from Cloudflare Workers</h3>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/workers-tcp-socket-api-connect-databases/\">https://blog.cloudflare.com/workers-tcp-socket-api-connect-databases/</a></p>\n\n    </blockquote>\n\n<ul>\n<li>WorkerからOutboundの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/TCP\">TCP</a>が話せるようになった\n<ul>\n<li>`import { connect } from 'cloudflare:sockets'`</li>\n<li><a href=\"https://developers.cloudflare.com/workers/runtime-apis/tcp-sockets/\">https://developers.cloudflare.com/workers/runtime-apis/tcp-sockets/</a></li>\n<li>ただ25番ポートの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SMTP\">SMTP</a>は許可してないらしい</li>\n<li>1リク<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トで使える最大同時接続数6の1つにカウントされる</li>\n</ul></li>\n<li>`connect()`の<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>については、いろいろな経緯でこうなった\n<ul>\n<li>既存の実装もいろいろあって、どれかに合わせるべきかとか</li>\n<li>最終的にはオリジナルになったけど、WinterCGにフィードバックしていく予定</li>\n</ul></li>\n<li>このタイミングでは、PostgresDBがサポート済\n<ul>\n<li><a href=\"https://github.com/brianc/node-postgres/tree/master/packages/pg-cloudflare\">https://github.com/brianc/node-postgres/tree/master/packages/pg-cloudflare</a></li>\n</ul></li>\n<li>次は<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/MySQL\">MySQL</a>のサポートを進めているところ</li>\n<li>現状の課題として、1リク<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トごとに、1コネクションを開いて閉じる必要があることは認識してる\n<ul>\n<li>コネクションプーリングに代わる仕組みを検討中</li>\n</ul></li>\n<li>さらに今後\n<ul>\n<li>今はOutboundだけだが、いずれはInboundも</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/UDP\">UDP</a>やQUICも、前にアナウンスしてたSocketWorkerで対応したい</li>\n<li><a href=\"https://blog.cloudflare.com/introducing-socket-workers/\">https://blog.cloudflare.com/introducing-socket-workers/</a></li>\n</ul></li>\n<li>↑で紹介したSmart Placementにも対応予定</li>\n</ul><p>なんでもできるようになるな・・・！</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Improved-local-development-with-wrangler-and-workerd\">Improved local development with <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/wrangler\">wrangler</a> and workerd</h3>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/wrangler3/\">https://blog.cloudflare.com/wrangler3/</a></p>\n\n    </blockquote>\n\n<ul>\n<li>`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>` <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CLI\">CLI</a>がついにv3に</li>\n<li>`workerd`を使ってローカルで開発できるようになった\n<ul>\n<li>つまり本番とまったく同じランタイムってこと</li>\n</ul></li>\n<li>そして今度こそ、ローカルがデフォルトの挙動に</li>\n<li>内部的にはちょっと大変だった\n<ul>\n<li>KV, R2, D1なんかは引き続きMiniflareがNode上でシミュレートする</li>\n<li>ストレージは抽象化された<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SQLite\">SQLite</a>が一手に担う\n<ul>\n<li><a href=\"https://github.com/cloudflare/miniflare/discussions/525\">https://github.com/cloudflare/miniflare/discussions/525</a></li>\n</ul></li>\n</ul></li>\n<li>Miniflareのv2で実装された<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%E6%A5%CB%A5%C3%A5%C8%A5%C6%A5%B9%A5%C8\">ユニットテスト</a>の環境も\n<ul>\n<li>すべてがNode上にあった頃は、ランタイム<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>をモックするだけでよかった</li>\n<li>しかし`workerd`は別プロセスになるので、簡単にはいかない</li>\n<li>Nodeの`worker_threads`を使うように、`workerd`をスレッドとして扱えるようにした</li>\n<li>そしてやり取りはWebSocketでやるように</li>\n</ul></li>\n<li>そしてこのタイミングで、`workerd`が<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Windows\">Windows</a>でも動作するようになってる</li>\n</ul><p>めでたい！Great work! @mrbbot氏〜👏</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Making-Cloudflare-the-best-place-for-your-web-applications\">Making Cloudflare the best place for your web applications</h3>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/making-cloudflare-for-web/\">https://blog.cloudflare.com/making-cloudflare-for-web/</a></p>\n\n    </blockquote>\n\n<ul>\n<li>（CloudflareスタックはいいぞっていうPR & サマリ記事かと思ってたらちょっと違った）</li>\n<li>近いうちに、各種リミットを引き上げる予定\n<ul>\n<li>デプロイできるサイズを最大10MB（<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/gzip\">gzip</a>後）まで拡張</li>\n<li>スタートアップタイム（グロー<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D0%A5%EB%A5%B9\">バルス</a>コープの処理）を400msまで待つ</li>\n</ul></li>\n<li>C3: Create Cloudflare <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/CLI\">CLI</a>\n<ul>\n<li><a href=\"https://github.com/cloudflare/workers-sdk/tree/main/packages/create-cloudflare\">https://github.com/cloudflare/workers-sdk/tree/main/packages/create-cloudflare</a></li>\n<li>`npx <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>`のラッパー</li>\n</ul></li>\n</ul><p>リミット引き上げみたいな大事なことをしれっと書くんじゃない！ありがとうございます！</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Announcing-Cloudflare-Secrets-Store\">Announcing Cloudflare Secrets Store</h3>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/secrets-store/\">https://blog.cloudflare.com/secrets-store/</a></p>\n\n    </blockquote>\n\n<ul>\n<li>Secrets Store\n<ul>\n<li>シークレット aka <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4\">環境変数</a>をよしなに保存できるサービスはじめます</li>\n</ul></li>\n<li>現状、Workerにシークレットを登録することはできる\n<ul>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/GUI\">GUI</a>からでも`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/wrangler\">wrangler</a>`からでも</li>\n<li>入力したら暗号化されて平文では見れなくなる</li>\n</ul></li>\n<li>ただし、Workerごとに保存が必要\n<ul>\n<li>同じ外部サービスの同じキーだとしても、別々になる</li>\n</ul></li>\n<li>人間が個別に登録するみたいな不安定さもある\n<ul>\n<li>セキュリティ担当としては、もっとセキュアになってほしいはず</li>\n</ul></li>\n<li>それを解決したいし、野望としてはもっと広い\n<ul>\n<li>1Password相当のもの？</li>\n</ul></li>\n<li>アクセス可能な範囲を制御しつつ、ワンストップに管理できる</li>\n<li>アクセスを追跡したり、更新などは監査ログで見れるようにしたり</li>\n</ul><p>Cloudflareの使命は、よりよいインターネットを作ることって書いてあったけど、こういう手もあると。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Workers-Browser-Rendering-API-enters-open-beta\">Workers Browser Rendering <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a> enters open beta</h3>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/browser-rendering-open-beta/\">https://blog.cloudflare.com/browser-rendering-open-beta/</a></p>\n\n    </blockquote>\n\n<ul>\n<li>Worker上でブラウザが動かせるようになったよ\n<ul>\n<li>ブラウザというか<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Chromium\">Chromium</a>、というか`puppeteer`</li>\n<li>Workerとブラウザの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>間は、DevToolsProtocol over WebSocket</li>\n</ul></li>\n<li>`puppeteer`のフォークが動く\n<ul>\n<li><a href=\"https://github.com/cloudflare/puppeteer\">https://github.com/cloudflare/puppeteer</a></li>\n<li>一部の<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>を、CFWのランタイムのやつを呼ぶようにしてあるだけ</li>\n</ul></li>\n<li>特定のURLのキャプチャを返すエンドポイントとか作れる\n<ul>\n<li><a href=\"https://radar.cloudflare.com/scan\">https://radar.cloudflare.com/scan</a> でやってるような</li>\n</ul></li>\n<li>β期間における制限\n<ul>\n<li>2ブラウザ/分まで起動できる</li>\n<li>2ブラウザ/アカウントまで同時起動できる</li>\n<li>何もしないと60sで<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%A2%A5%A6%A5%C8\">タイムアウト</a></li>\n</ul></li>\n<li>これから\n<ul>\n<li>本家`puppeteer`への追従</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Chromium\">Chromium</a>以外の対応（Playwrightみたいに）</li>\n<li>WebDriver BiDi（<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Google%20I/O\">Google I/O</a>で言ってたやつね）</li>\n</ul></li>\n</ul><p>なんでもできるようになるなまじで・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Cloudflare-Queues-messages-at-your-speed-with-consumer-concurrency-and-explicit-acknowledgement\">Cloudflare Queues: messages at your speed with consumer concurrency and explicit acknowledgement</h3>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/messages-at-your-speed-with-concurrency-and-explicit-acknowledgement/\">https://blog.cloudflare.com/messages-at-your-speed-with-concurrency-and-explicit-acknowledgement/</a></p>\n\n    </blockquote>\n\n<ul>\n<li>`queue`イベントのあのCloudflare Queuesがパワーアップ\n<ul>\n<li>`fetch`, `scheduled`, `email`, `queue`のやつ</li>\n</ul></li>\n<li>キューを処理する（Consumer）側が並列実行されるように\n<ul>\n<li><a href=\"https://developers.cloudflare.com/queues/learning/consumer-concurrency/\">https://developers.cloudflare.com/queues/learning/consumer-concurrency/</a></li>\n<li>デフォルトは最大`10`らしい</li>\n<li>最初からというより、徐々に増えていく</li>\n</ul></li>\n<li>`max_concurrency`も指定できる（1〜10)</li>\n<li>細かくバッチの可否を制御できるようになった\n<ul>\n<li>`msg.ack()`, `msg.retry()`</li>\n<li>`batch.ackAll()`, `batch.retryAll()`</li>\n</ul></li>\n<li>これから\n<ul>\n<li>Workerだけでなく、R2をConsumerにして<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%D0%A5%B1%A5%C3%A5%C8\">バケット</a>に書き出せるようにしたい</li>\n<li>よしなにメッセージをPULLできる<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/REST%20API\">REST API</a>を用意したい</li>\n</ul></li>\n</ul><p>残念ながら使ったことはないけど、便利そうやなってずっと思ってる。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"More-Nodejs-APIs-in-Cloudflare-Workers--Streams-Path-StringDecoder\">More Node.js APIs in Cloudflare Workers — Streams, Path, StringDecoder</h3>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/workers-node-js-apis-stream-path/\">https://blog.cloudflare.com/workers-node-js-apis-stream-path/</a></p>\n\n    </blockquote>\n\n<ul>\n<li>Node.jsの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>サポートがまた増えた\n<ul>\n<li>少し前にまとめた記事がもう古くなったわ・・・</li>\n<li><a href=\"https://lealog.hateblo.jp/entry/2023/05/09/120122\">Cloudflare Workers&#x306E;&#x3001;Node.js&#x3068;&#x306E;&#x4E92;&#x63DB;&#x6027;&#x306B;&#x3064;&#x3044;&#x3066; - console.lealog();</a></li>\n</ul></li>\n<li>`node:stream`, `node:stream/consumers`, `node:stream/promises`\n<ul>\n<li>（<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/WHATWG\">WHATWG</a> Streamあるのに・・）</li>\n</ul></li>\n<li>`node:path`</li>\n<li>`node:string_decoder`\n<ul>\n<li>（`TextDecoder`あるのに・・）</li>\n</ul></li>\n</ul><p>やっぱ人類はNode.jsの遺産なしには生きられないって感じ？</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"D1-We-turned-it-up-to-11\">D1: We turned it up to 11</h3>\n    \n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/d1-turning-it-up-to-11/\">https://blog.cloudflare.com/d1-turning-it-up-to-11/</a></p>\n\n    </blockquote>\n\n<ul>\n<li>D1もアップデート</li>\n<li>裏側の<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>が新しくなって、パフォーマンスがめちゃあがった</li>\n<li>`--experimental-backend`としてDB作ればもう使える\n<ul>\n<li>近いうちにデフォルトになるけど</li>\n</ul></li>\n<li>`TEXT`型の文字列を<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/JSON\">JSON</a>パースして取り出したりできるようになった\n<ul>\n<li>`<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/json\">json</a>_extract('{\"temp\":\"78.3\", \"sunset\":\"20:44\"}', '$.temp')`で`\"78.3\"`になる</li>\n<li>そんなことが・・って思ったら<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SQLite\">SQLite</a>で元からできることらしい</li>\n<li><a href=\"https://www.sqlite.org/json1.html\">JSON Functions And Operators</a></li>\n</ul></li>\n<li>DBのロケーションを指定できるようになった\n<ul>\n<li>wnam: Western North America</li>\n<li>enam: Eastern North America</li>\n<li>weur: Western Europe</li>\n<li>eeur: Eastern Europe</li>\n<li>apac: Asia-Pacific</li>\n<li>今はこの5つで、デフォルトだとDB作成コマンドを叩いたロケーションに近いところ</li>\n</ul></li>\n<li>コストまわり\n<ul>\n<li>今年の末までは無料で、それ以降は課金対象に</li>\n<li><a href=\"https://blog.cloudflare.com/content/images/2023/05/Screenshot-2023-05-19-at-10.14.58.png\">https://blog.cloudflare.com/content/images/2023/05/Screenshot-2023-05-19-at-10.14.58.png</a></li>\n</ul></li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%EC%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3\">レプリケーション</a>対象がグローバルに広がっても、それで料金が増えたりはしない\n<ul>\n<li>今時点では<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%EC%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3\">レプリケーション</a>されてないこと忘れてたわ</li>\n</ul></li>\n<li>4KBのreadと1KBのwriteの単位で課金される\n<ul>\n<li>インデックスを貼ってデータを減らせば、その分コストが浮く</li>\n</ul></li>\n<li>新バックエンドでは、タイムトラベルが可能に\n<ul>\n<li>直近30日以内なら、分単位でリストアできる</li>\n<li><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SQLite\">SQLite</a>のWrite-Ahead Logを全部残してあるので可能なんですって</li>\n</ul></li>\n<li>これから\n<ul>\n<li>DBのサイズを1GBまでに for Paidプラン</li>\n<li>自動リードレプリカ</li>\n</ul></li>\n</ul><p>すごい（語彙力）</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"まとめ\">まとめ</h3>\n    <p>D1の足音が聞こえる・・・！</p><p>おそらく次のタイミングで、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%EC%A5%D7%A5%EA%A5%B1%A1%BC%A5%B7%A5%E7%A5%F3\">レプリケーション</a>とか整合性とかそのあたりに踏み込んだ内容が出てくるんやろな。</p>\n\n</div>"
}
