{
  "title": "Cloudflare Workersの、Node.jsとの互換性について",
  "html": "<p>3月くらいにもなんか発表されてた気がするけど、結局いまどういう状態やっけ？って思ったので、思い出しついでにまとめる。</p>\n\n    <blockquote>\n        <p><a href=\"https://blog.cloudflare.com/workers-node-js-asynclocalstorage/\">Node.js compatibility for Cloudflare Workers &ndash; starting with Async Context Tracking, EventEmitter, Buffer, assert, and util</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3 id=\"2パターンある\">2パターンある</h3>\n    <p>最初はよくわからなかったけど、どうやら、</p>\n\n<ul>\n<li>`nodejs_compat`</li>\n<li>`node_compat`</li>\n</ul><p>という2つのフラグが存在してる。最初はフラグ名くらい統一しろよ・・って思ってしまったけど、これらは別のやつ。</p><p>ちなみに、`node_compat`のほうはLegacy扱いらしく、これらを併用することはできなそう。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"nodejs_compat\">nodejs_compat</h3>\n    <p>Node.jsのAPIの一部を、CFWのランタイムでも動かせるようになるフラグ。</p><p>一部というのは、現状でいうと、</p>\n\n<ul>\n<li>`node:assert`</li>\n<li>`AsyncLocalStorage, AsyncResource` from `node:async_hooks`</li>\n<li>`Buffer` from `node:buffer`</li>\n<li>`EventEmitter` from `node:events`</li>\n<li>`promisify, callbackify, types` from `node:util`</li>\n</ul><p>だけ。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/runtime-apis/nodejs/\">Node.js Compatibility &middot; Cloudflare Workers docs</a></p>\n\n    </blockquote>\n<p>ポリフィルムではなくCFWとして実装されてるので、パフォーマンスもサイズもヨシってところがポイントで、今後の拡充にこうご期待という触れ込み。</p><p>`workerd`的にはこのへんに実装が増えていく。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/cloudflare/workerd/tree/main/src/node\">https://github.com/cloudflare/workerd/tree/main/src/node</a><br />\n<a href=\"https://github.com/cloudflare/workerd/tree/main/src/workerd/api/node\">https://github.com/cloudflare/workerd/tree/main/src/workerd/api/node</a></p>\n\n    </blockquote>\n<p>`wrangler dev`をローカルでやりたい場合は、通常の`--local`ではなく`--experimental-local`をあわせて使う必要がある。（そのうちexperimentalじゃなくなるらしい）</p><p>`wrangler@v2.20.0`時点では、`nodejs_compat`自体をCLIから渡す方法はなさそうで、`wrangler.toml`に書くしかない模様。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"node_compat\">node_compat</h3>\n    <p>こっちは、Node.jsのAPIポリフィルがロードされるようになるフラグ。</p><p>実態は、</p>\n\n<ul>\n<li>wranglerが内部で利用してるesbuildのプラグインである</li>\n<li>`@esbuild-plugins/node-globals-polyfill`と</li>\n<li>`@esbuild-plugins/node-modules-polyfill`が依存してる\n<ul>\n<li><a href=\"https://github.com/remorses/esbuild-plugins\">https://github.com/remorses/esbuild-plugins</a></li>\n</ul></li>\n<li>`rollup-plugin-node-polyfills`\n<ul>\n<li><a href=\"https://github.com/ionic-team/rollup-plugin-node-polyfills\">https://github.com/ionic-team/rollup-plugin-node-polyfills</a></li>\n</ul></li>\n</ul><p>ってだけ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/cloudflare/workers-sdk/blob/738e52f13f141a5d8ba13a299cf106a9477b9df2/packages/wrangler/src/bundle.ts#L409\">https://github.com/cloudflare/workers-sdk/blob/738e52f13f141a5d8ba13a299cf106a9477b9df2/packages/wrangler/src/bundle.ts#L409</a></p>\n\n    </blockquote>\n<p>さっきのと違って、これは単なるポリフィルなので、ファイルサイズも増えるし、思わぬ挙動の差異に出くわすかもしれない。</p><p>こっちは`--node-compat`っていうCLI引数がある。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"おまけ-Outbound-TCP\">おまけ: Outbound TCP</h3>\n    <p>思い返せば2021年末くらいの話だったが、まだ一般人向けではなく、アクセスフォームがあるだけ。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.cloudflare.com/database-connectors-early-access/\">https://www.cloudflare.com/database-connectors-early-access/</a></p>\n\n    </blockquote>\n<p>ただ内部的には着々と進んでる感があって、先日も中の人たちが盛り上がってたので、近いうちにナニカあるかもしれない？</p>\n\n    <blockquote>\n        <p><a href=\"https://twitter.com/CherryJimbo/status/1654505957316018177\">James Ross on Twitter: &quot;Cloudflare is looking at releasing TCP Workers very soon, allowing users to connect to any TCP service using Workers. This can include things like databases, such as in this example. It&#39;s going to be super exciting to see what everyone builds with this! &#x1F389; The native API is&hellip; https://t.co/LLEYHCPGeE&quot; / Twitter</a></p>\n\n    </blockquote>\n\n</div>"
}
