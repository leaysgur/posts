{
  "title": "達人プログラマー（第2版） 読んだ",
  "html": "<p>久しぶりに物理本を読んだけど、やっぱ物理<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A4%CF%A4%A8\">はえ</a>えな・・かさばるとこ以外。</p><p>せっかくなので読書感想文と、特に印象に残った部分を、章ごとに書いておく。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>第1章: 達人の哲学</h3>\n    <p>この本を読んでいくにあたって、そもそも達人とはなんぞやという話がメイン。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC\">プログラマー</a>というより、いわゆる社会人としてこうあれみたいなテーマで書かれてて、なんかみんな読んだらいいのではと思いました。</p><p>物事をうまく進捗させるために、</p>\n\n<ul>\n<li>まず何を言いたくて</li>\n<li>その結果どうしたいのかまで考えて</li>\n<li>相手の状況やタイミングを見計らって</li>\n</ul><p>コミュニケーションを実行する・されると、あれこれスムーズにいきますよっていう。</p><p>このテクは中々に便利で、日常生活でもそれこそ夫婦間とかのコミュニケーションでも使える話かなーと思ってて。<br />\nただ自分の場合はこれをやりすぎて、質問してるはずが誘導尋問みたいになっちゃうときがたまにある・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>第2章: 達人のアプローチ</h3>\n    \n<div class=\"section\">\n    <h4>ETC: Easier To Change</h4>\n    <p>何をするにも簡単に変えられるようにしとけってやつ。</p><p>個人的にも、「とにかくシンプルに作る」ってことをここ数年ずっと思ってて、達人的にはETCって言うんですね〜ってなった。<br />\n何を作るにしても、不必要に複雑さを持ち込みがちな昨今、さらにその気持ちは強まってるところがある・・。</p><p>プログラムを書いてなくても、この決断は後で取り返しが効くやつか？って考えて判断基準にできたりもするし。</p>\n\n</div>\n<div class=\"section\">\n    <h4>曳光弾（えいこうだん）</h4>\n    <p>（漢字が読めんかった・・・！）</p><p>銃の弾倉の何発かに1発入ってて、光を発して射線を描いてくれるやつらしい。</p><p>要件がでかすぎる案件とか、何も決まってない案件で使えるテク。</p><p>とりあえず簡単に動くものを作ってみて、そこから、肉付けするなり方向性を調整したりすることをいうらしい。（プロトタイピングは作ったあとで捨てるけど、こっちは捨てずに生き続けるところが違うとのこと）</p><p>今やってる！これやってる！ってなった。</p><p>昔はこれをやるにしても、1発目をどこに定めて撃つかが難しくてな〜さっさと仕様決めてくれ〜みたいに思ってた。</p><p>けど、往々にして仕様は待ってても決まらんので、よしなにできるよう（試されてるということで）取り計らって、さっさと決められるよう材料を提供してあげるってのが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%DE%A4%AC%A4%D0%B2%F3%A4%EC\">急がば回れ</a>で結局いいなと思ってる今日このごろ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>第3章: 基本的なツール</h3>\n    <p>プレーンテキスト信者たれとか、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GUI\">GUI</a>より<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CLI\">CLI</a>ですよねとか、やはり自分は達人だったのか〜ってまたなった。</p><p>いわゆる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>に取り組むときの心構えとか小技とかも、それやるやる〜って感じだった。</p>\n\n</div>\n<div class=\"section\">\n    <h3>第4章: 妄想の達人</h3>\n    <p>章タイトルの意味はよくわからなかった・・！</p><p>先のことなんか見えるもんではないので、あまり予言したり想像したりせず、着実とやれることをやっていけという話。</p><p>そういう心意気をコードに表すときの注意点としては、</p>\n\n<ul>\n<li>さっさとクラッシュさせる</li>\n<li>catchでログはいてthrowするな</li>\n<li>リソースは責任もって解放までしろ</li>\n<li>できる限り影響を局所的にせよ</li>\n<li>etc...</li>\n</ul><p>これも割と普段から意識してることなので（以下略</p>\n\n</div>\n<div class=\"section\">\n    <h3>第5章: 柳に雪折れ無し</h3>\n    <p>雪折れしない柳のように、柔軟なコードを書くために気をつけるべきことは？というテーマ。</p>\n\n<ul>\n<li>分離できるところは分けろ</li>\n<li>シングルトンやめろ</li>\n<li>FSMはいいぞ</li>\n<li>リアクティブにPub/Subしよう</li>\n<li>状態を溜め込むな</li>\n<li>継承やめろ</li>\n</ul><p>といった、現世のベストプ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ティスみたいなものについての章。</p><p>これも（ｒｙ</p><p>FSM、ものを考えるやり方としてはわかりやすいけど、実装になると冗長さがどうしても気になってしまって、そこまで厳密にやる必要ある？ってなるな〜と思ってたけど、本書でもそのまま導入するのは難しいかもねって書いてあって安心した。</p>\n\n</div>\n<div class=\"section\">\n    <h3>第6章: 並行性</h3>\n    <p>この章はそのまんま並行処理の話。<br />\nただいわゆる、独立した非同期処理は並行でっていうのではなく、さらに大きなスコープの話。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%DE%A5%D5%A5%A9\">セマフォ</a>ー、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B6%A5%AF%A5%B7%A5%E7%A5%F3\">トランザクション</a>を経て、人類は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BF%A1%BC%A5%E2%A5%C7%A5%EB\">アクターモデル</a>にたどり着いたのじゃよ・・という流れについて書かれてた。</p><p>ただ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BF%A1%BC%A5%E2%A5%C7%A5%EB\">アクターモデル</a>も気持ちはわかるけど、FSMと一緒でコードにすると中々に厳しいな〜って思っちゃう。</p><p>なのでこれは、実際に自分のいる領域ではそこまでの並行性を必要としていないからなんやろうなと思った。</p><p>Rustみたいな言語がスコープごとに所有権を区切ってるのは、言語レベルから並行性を重視してるからなのだなあ〜と実感した。</p>\n\n</div>\n<div class=\"section\">\n    <h3>第7章: コーディング段階</h3>\n    <p>個人的にイチオシだったのがこの章。</p><p>この本的にはここからが実際にコードを書くにあたっての話らしい。</p>\n\n<div class=\"section\">\n    <h4>爬虫類脳からの声に耳を傾ける</h4>\n    <p>つまり？ってなるけど、読むと納得。</p><p>PRのレビューとかで、なんかすごい嫌な感じがする・・（言葉で説明しようとすればもちろんできる、ただ自分の中で当たり前過ぎて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B8%C0%B8%EC%B2%BD\">言語化</a>するのにエネルギーを消費する・・）みたいなことが、誰しもあるはず。</p><p>この本能的な直感みたいなものを育てていけという話。</p><p>この感覚を洗練させていけば、コードを書く前の段階でも、要件を聞いただけでも危険予知ができていいぞ！と。</p>\n\n</div>\n<div class=\"section\">\n    <h4>偶発的なコード</h4>\n    <p>なんでそうしたのか説明できないコードを書くなという話。</p><p>身近な例だと、Reactでなんでもかんでもメモ化しちゃうのとか。<br />\nコピペで持ってきたコードをそのまんま何も考えずに使うとか、そういうのをやめなさいという話。</p><p>他には、とあるライブラリを採用してるのに、使いこなせてなかったりするケース。使いこなせてないならまだしも、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が存在することすら知らない場合とか。</p>\n\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0\">アルゴリズム</a>のスピード</h4>\n    <p>ループのネストとかをカジュアルに書きがちな皆さんへのセクション。</p><p>エンジニアたるもの、競プロは当然やってますよね〜とは言わんけど、ある程度の知識は持ってるべきよなあと、最近は思ってる・・。（勉強します・・）</p>\n\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0\">リファクタリング</a></h4>\n    <p>息を吸うように、すきあらばコードを改善していけという話。</p><p>何を隠そう、めちゃめちゃリファクタする勢としては（ry</p><p>悪いところ、欠陥があったから直すだけではなく、少しでも洗練する余地があればやるってことをやらないと、コードはどんどん陳腐化していく。現状維持は衰退のはじまり。</p><p>一日の仕事をはじめる前に、机の上を掃除するのと同じくらいカジュアルにリファクタしていきたい。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>第8章: プロジェクトを始める前に</h3>\n    <p>前の章もよかったけど、この章もなかなかによかった。<br />\n特に前半の、コーディングするべき仕様を明らかにするまでのフェーズについての部分。</p>\n\n<div class=\"section\">\n    <h4>要求の落とし穴</h4>\n    <p>エンジニアやってると言いがちな「仕様を決めてくれ」っていうやつ、これはないものねだりなのでやめろという話。</p><p>依頼者も実は何もわかってなくて、ただぼんやりと「あれやりたい」って言ってるだけ。むしろエンジニアリングの仮定でセラピーとして、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC\">プログラマー</a>側から仕様を引き出していくしかない、と。</p><p>認めたくなかった現実がココにあった・・・！って感じ。</p><p>もちろん案件にも依るけど、実装するフェーズのことも考えた上でやりたいことを出してくれる人って、ほんとに貴重な存在やったんやな〜。</p><p>というわけで、淡い期待は捨て自分でなんとかしろ、そこでどれだけ情報を引き出せるかが腕の見せどころっていう話。<br />\nコードを書くことだけを生業としてる・したい人にとっては、中々に耳が痛い内容なんじゃないかなーと思った。</p><p>自分がこういう視点とか可能性とかに気づけるのは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SIer\">SIer</a>で上流工程ばっかやってたからこそな気もしてて、自分のキャリアをちょっと見直すなどした。</p>\n\n</div>\n<div class=\"section\">\n    <h4>アジリ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%A3%A1%BC\">ティー</a>の本質</h4>\n    <p>キミが盲信するそれは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB\">アジャイル</a>ではない！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>第9章: 達人のプロジェクト</h3>\n    <p>プロジェクトを遂行するチームそのものについての章。</p><p>これも中々痛快な章だったと思う。チームは編成して終わりじゃないし、人が多すぎれば\"群れ\"ができただけで終わる。</p>\n\n<div class=\"section\">\n    <h4>ココナツでは解決できない</h4>\n    <p>どこぞの成功例をそっくりそのまま持ち込んでも、ワークしませんよっていう話。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%B4%A5%AB%A5%EB%A5%C8\">カーゴカルト</a>って単語ははじめて知ったけど、すごいしっくりきた。</p>\n\n    <blockquote>\n        <p><a href=\"https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%BC%E3%82%B4%E3%83%BB%E3%82%AB%E3%83%AB%E3%83%88%E3%83%BB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0\">&#x30AB;&#x30FC;&#x30B4;&#x30FB;&#x30AB;&#x30EB;&#x30C8;&#x30FB;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0; - Wikipedia</a></p>\n\n    </blockquote>\n<p>コードを書く行為だけでなく、日々の営みにも当てはまるので気をつけないといけない。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>感想</h3>\n    <p>個人的には割と好きなジャンルの本だった。</p><p>ただこれにすごく共感できたり、自分の中で重要度を上げて反芻できるのは、30も過ぎた今だからこそかなーと思ったりもした。</p><p>タイトルは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC\">プログラマー</a>って付いてるけど、エンジニアリングという職域を担ってる人は、一通り読んでおいて損はないのではと思う。<br />\nただ内容を実践できるようになるためには、それなりの時間が必要なので、まぁじっくりコトコト。</p><p>また忘れた頃に読み物として読み直そっと。</p>\n\n</div>"
}
