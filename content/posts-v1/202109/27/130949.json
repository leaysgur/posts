{
  "title": "JSDoc TSでジェネリクスを使う",
  "html": "<p>あんまり知られてないかもしれんけど、JSDocのコメントを書くことでもTypeScriptの恩恵は受けられる。</p><p>より正確には、</p>\n\n<ul>\n<li>JSDocコメントを書くことで</li>\n<li>`.js`ファイルであっても</li>\n<li>TypeScriptのLanguage Serverの機能を（一部）利用できる</li>\n</ul><p>というわけ。</p><p>で、これが結構便利で最近はよく使ってるのです。</p><p>ただ、いわゆるジェネリクスを扱いたいときに困ったことがあったので、それについてのメモを。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>ジェネリクスは不完全なサポート</h3>\n    <p>たとえば、コレは動作する。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">/**</span>\n<span class=\"synComment\"> * @template T</span>\n<span class=\"synComment\"> * @param {T} x</span>\n<span class=\"synComment\"> * @return {T}</span>\n<span class=\"synComment\"> */</span>\n<span class=\"synIdentifier\">function</span> id(x) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> x;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">const</span> a = id(<span class=\"synConstant\">&quot;string&quot;</span>);\n<span class=\"synStatement\">const</span> b = id(123);\n<span class=\"synStatement\">const</span> c = id(<span class=\"synIdentifier\">{}</span>);\n</pre><p>`@template`で予め名前を宣言しておけば、こんな風に関数をジェネリクスで定義することはできる。<br />\nTSで書くと、`function id(x: T): T { return x; };`相当のもの。</p><p>けど、それ以外のジェネリクスに関することができなくて、単に型だけを定義することもできない。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">type</span> Result<span class=\"synStatement\">&lt;</span>Resp<span class=\"synStatement\">&gt;</span> <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">{</span> ok: <span class=\"synConstant\">true</span><span class=\"synStatement\">,</span> data: Resp <span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n</pre><p>こういう型は定義できないし、クラスでも同様に使えない。</p><p>どうやらこれは現状の仕様らしい。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/microsoft/TypeScript/issues/27387\">Allow to explicitly pass type parameters via JSDoc &middot; Issue #27387 &middot; microsoft/TypeScript &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>困った例</h3>\n    <p>具体的な例でいうと、Reactの`useState()`を使うときに、その値が推論できない場合。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 推論できる</span>\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>count, setCount<span class=\"synIdentifier\">]</span> = useState(0);\n\n<span class=\"synComment\">// 推論できない</span>\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>items, setItems<span class=\"synIdentifier\">]</span> = useState(<span class=\"synIdentifier\">[]</span>); <span class=\"synComment\">// Item[]</span>\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>error, setError<span class=\"synIdentifier\">]</span> = useState(<span class=\"synStatement\">null</span>); <span class=\"synComment\">// or Error</span>\n</pre><p>TSだったならばこう書けるところ、JSDoc TSではそれができない。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>items<span class=\"synStatement\">,</span> setItems<span class=\"synIdentifier\">]</span> <span class=\"synStatement\">=</span> useState<span class=\"synStatement\">&lt;</span>Item<span class=\"synIdentifier\">[]</span><span class=\"synStatement\">&gt;(</span><span class=\"synIdentifier\">[]</span><span class=\"synStatement\">);</span>\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>error<span class=\"synStatement\">,</span> setError<span class=\"synIdentifier\">]</span> <span class=\"synStatement\">=</span> useState<span class=\"synStatement\">&lt;</span><span class=\"synSpecial\">Error</span> | <span class=\"synType\">null</span><span class=\"synStatement\">&gt;();</span>\n</pre><p>これを解決するための方法は現状ないらしく、ワークアラウンドとしてはこうするしかない。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">/** @type {Item[]} */</span>\n<span class=\"synStatement\">const</span> initItems = <span class=\"synIdentifier\">[]</span>;\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>items, setItems<span class=\"synIdentifier\">]</span> = useState(initItems);\n\n<span class=\"synComment\">// or</span>\n\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>error, setError<span class=\"synIdentifier\">]</span> = useState(\n  <span class=\"synComment\">/** @type {Error | null} */</span> (<span class=\"synStatement\">null</span>)\n);\n</pre><p>というように、</p>\n\n<ul>\n<li>別の所で推論できるようにした変数を渡す</li>\n<li>キャストする</li>\n</ul><p>このどっちかしかないらしい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>それでも便利なので</h3>\n    <p>訳あってTSが使えない・使いたくないときに、局所的にでも手堅く書ける選択肢があるというのは嬉しいこと。<br />\n型の補完ができるのであれば、設定ファイルをわざわざTSで書く必要もないし、必要十分ってわけで。</p><p>これだとJSのまま書けるので、TSにコンパイルされたときのオーバーヘッドもないので、コードを小さく保ちたいライブラリを作る時とかにも便利。<br />\n（いまどきどれだけの人がコンパイル後のコードを意識しながらコードを書いてるのやらって感じではあるけど）<br />\n（そういえば昔Flowっていうのがあったな・・元気かな・・）</p><p>いきなりTSはちょっと・・っていう初学者にもとてもいいと思うし、割とオススメかなと思ってる今日この頃。</p><p>まぁ最初からTSでやればよかった・・ってなったら、その時は素直にTSにしましょう！</p>\n\n</div>"
}
