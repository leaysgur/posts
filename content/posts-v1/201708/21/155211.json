{
  "title": "getUserMedia()で指定できるMediaTrackConstraintsのよもやま",
  "html": "\n    <blockquote>\n        <p><a href=\"https://w3c.github.io/mediacapture-main/\">Media Capture and Streams</a></p>\n\n    </blockquote>\n<p>この仕様書をだらーっと流し読みしたので、知らんかったことをメモ。<br />\nあとついでに気になった指定について調べたことも。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>MediaTrackConstraints</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>navigator.mediaDevices.getUserMedia(<span class=\"synIdentifier\">{</span>\n  video: <span class=\"synIdentifier\">{}</span>, <span class=\"synComment\">// &lt;- この引数</span>\n  audio: <span class=\"synIdentifier\">{}</span>, <span class=\"synComment\">// &lt;- この引数</span>\n<span class=\"synIdentifier\">}</span>); \n</pre><p>ざっくり`true`指定しかしたことなかったけど、実は細かく指定ができる。<br />\n見ればわかるけど、定数のconst(ants)ではなく制約というconst(raints)と捉えるとイメージしやすいかも。</p>\n\n<div class=\"section\">\n    <h4>指定できるもの</h4>\n    <p>仕様書より。</p>\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink>dictionary MediaTrackConstraintSet {\n  ConstrainLong      width;\n  ConstrainLong      height;\n  ConstrainDouble    aspectRatio;\n  ConstrainDouble    frameRate;\n  ConstrainDOMString facingMode;\n  ConstrainDouble    volume;\n  ConstrainLong      sampleRate;\n  ConstrainLong      sampleSize;\n  ConstrainBoolean   echoCancellation;\n  ConstrainBoolean   autoGainControl;\n  ConstrainBoolean   noiseSuppression;\n  ConstrainDouble    latency;\n  ConstrainLong      channelCount;\n  ConstrainDOMString deviceId;\n  ConstrainDOMString groupId;\n};\n</pre><p>将来的にはこれらは拡張可能であるとか書いてあるけど、どういう風に拡張可能であるとかは書いてない。</p>\n\n</div>\n<div class=\"section\">\n    <h4>あわせてよくみるキーワード</h4>\n    <p>プロパティに対して値を直接指定する以外に、いろいろキーワードが出てくる。</p>\n\n<ul>\n<li>ideal</li>\n<li>min</li>\n<li>max</li>\n<li>exact</li>\n<li>advanced</li>\n</ul><p>`ideal`は、直接指定するのと同じ意味。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">{</span>\n  video: <span class=\"synIdentifier\">{</span> width: 1600 <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n<span class=\"synComment\">// 同じ</span>\n<span class=\"synIdentifier\">{</span>\n  video: <span class=\"synIdentifier\">{</span> width: <span class=\"synIdentifier\">{</span> ideal: 1600 <span class=\"synIdentifier\">}</span> <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>`ideal`は理想的には・・なので、ブラウザが合致するメディアデ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>がないと見なした場合は無視される。</p><p>`min`と`max`と`exact`は、必ずこの制約を守れ！という指定。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">{</span>\n  video: <span class=\"synIdentifier\">{</span>\n    width: <span class=\"synIdentifier\">{</span> min: 320, ideal: 1280, max: 1920 <span class=\"synIdentifier\">}</span>,\n    facingMode: <span class=\"synIdentifier\">{</span> exact: <span class=\"synConstant\">'environment'</span> <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>この場合、`facingMode`に`exact`がツイてるので、リアカメラがない端末の場合は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Reject\">Reject</a>される。<br />\n`width`でも`height`でもなんでも、ブラウザの都合が悪ければ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Reject\">Reject</a>されちゃう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>advanced</h4>\n    <p>最後に`advanced`。<br />\nこれは値として定義するものではないので、少し毛色が違う。</p><p>これは`ideal`みたいなもんではあるが、適うなら適用してくれーっていうリストにできるやつ。<br />\n指定できる中身は一緒。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">{</span>\n  video: <span class=\"synIdentifier\">{</span>\n\n    <span class=\"synComment\">// 基本の制約をココにした上で</span>\n\n    advanced: <span class=\"synIdentifier\">[</span>\n      <span class=\"synComment\">// このリスト内での値の直指定はexactと同じになる</span>\n      <span class=\"synIdentifier\">{</span> aspectRatio: 1.3333333333 <span class=\"synIdentifier\">}</span>,\n      <span class=\"synComment\">// 同じものを指定しておくとフォールバックとして使える</span>\n      <span class=\"synIdentifier\">{</span> aspectRatio: 1 <span class=\"synIdentifier\">}</span>,\n\n      <span class=\"synComment\">// widthだけOKでも、heightがNGなら、両方NGになる</span>\n      <span class=\"synIdentifier\">{</span> width: 1920, height: 1280 <span class=\"synIdentifier\">}</span>,\n    <span class=\"synIdentifier\">]</span>\n  <span class=\"synIdentifier\">}</span>,\n<span class=\"synIdentifier\">}</span>\n</pre><p>細かいところはこういう感じ。</p><p>基本の制約と違って、見合わない環境ならスルーされるだけで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/reject\">reject</a>されることはないのがポイント。</p>\n\n</div>\n<div class=\"section\">\n    <h4>流れのまとめ</h4>\n    <p>なので`getUserMedia()`した時の流れとしては、</p>\n\n<ul>\n<li>`min` / `max` / `exact`の必須な指定をみる\n<ul>\n<li>問題あればここで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Reject\">Reject</a></li>\n</ul></li>\n<li>`advanced`な指定をみる\n<ul>\n<li>有効なものは反映</li>\n</ul></li>\n<li>余ってるのを`ideal`、直指定で埋める</li>\n<li>指定がないもの、指定されたものをブラウザがよしなにする</li>\n<li>Resolve</li>\n</ul><p>みたいなイメージ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>最終的にはブラウザが決める</h4>\n    <p>例えばこういう相容れ合い3つが指定された時どうなるか。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">{</span>\n  video: <span class=\"synIdentifier\">{</span>\n    width: 1280,\n    height: 720,\n    aspectRatio: 1.5,\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>1280x720ならアス比は1.777になるので、3つ同時には満たせない。</p><p>この場合の組合せは 3C2 なので3通り。</p>\n\n<ul>\n<li>1280x720</li>\n<li>1280とアス比1.5</li>\n<li>720とアス比1.5</li>\n</ul><p>どれになるかはブラウザ次第。<br />\n手元では1280x720になったので、できるだけ多くの制約を満たすようにしようとする・・？</p>\n\n    <blockquote>\n        <p><a href=\"https://w3c.github.io/mediacapture-main/#constrainable-interface\">Media Capture and Streams</a></p>\n\n    </blockquote>\n<p>この章さえ読んで理解できれば完璧！（あとはブラウザにその通りに実装されてれば</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ブラウザは指定した通りに動くのか</h3>\n    <p>制約の指定の仕方はわかったけど、実際に動くの？っていう肝心なとこ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>navigator.mediaDevices.getSupportedConstraints();\n</pre><p>一応これすると、このブラウザでサポートされてるプロパティがわかるらしい。<br />\nなので、`getUserMedia()`でいきなり指定する前に、これで可否を確認してから使うべしと仕様書には書いてある。</p>\n\n<div class=\"section\">\n    <h4>たとえば width</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">{</span>\n  video: <span class=\"synIdentifier\">{</span>\n    width: 100,\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>サイズ指定してない`video`要素に対してこれで取得したストリームを表示しても、指定通りちっさく表示されたのは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>だけ。<br />\nどのブラウザも`getSupportedConstraints()`ではサポートしてる！って返ってくる。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>にいたってはいざ指定すると`ideal`なのにエラーにしてくるひどい。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>とEdgeは、指定を無視してきます。</p>\n\n<div class=\"section\">\n    <h5><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a></h5>\n    <p>`width`の指定に関して、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>はさらに謎の挙動を示す。<br />\n`width: 452`を指定すると320になるし、`width: 453`だと640になる・・というように、なんか独自の区切りを持ってそう。</p><p>てか、320 / 640 / 1280の3段階しかないような挙動になる。</p><p>あと普段は効かないのに、`mediaSource`で画面共有を指定したときだけ`frameRate`が設定できたりもする・・謎・・。</p>\n\n</div>\n<div class=\"section\">\n    <h5><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a></h5>\n    <p>`width`の指定に関して、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>は・・まったく謎の挙動を以下略。</p><p>`ideal`の指定だとしても、そのカメラの最大解像度以上の値以外は全て<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Reject\">Reject</a>してくるし、最大解像度以上の値を入れてもその解像度にしかならないっぽい。</p>\n\n</div>\n<div class=\"section\">\n    <h5>Edge</h5>\n    <p>`width`の指定に関して、Edgeも以下略。</p><p>こいつも640 / 1280 みたいな区切りしか持って無さそう。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Reject\">Reject</a>されない分、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>と同じ挙動って感じ。</p>\n\n</div>\n</div>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>`getSupportedConstraints()`でサポートしてるということと、`ideal`な制約を受け入れてくれることは、イコールではない。（ただし<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>はクソ）</p><p>うーん、でもこれ同じカメラやし<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>とEdgeも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>みたくなってくれると嬉しいんやけどなー。</p>\n\n</div>\n<div class=\"section\">\n    <h3>おまけ: googXxxx</h3>\n    <p>さすが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>さん、仕様書にないけど指定できる謎プロパティをいっぱい持ってる。<br />\n各種サービスもどこにも記載されてないけど、風の噂で使えそうなやつ使ってる感がある・・。</p><p>なんやねんコレ・・ってちょっと気になったのでちょっと調べてみた。</p>\n\n<div class=\"section\">\n    <h4>Discord</h4>\n    \n    <blockquote>\n        <p><a href=\"https://discordapp.com/\">Discord - Free Voice and Text Chat for Gamers</a></p>\n\n    </blockquote>\n<p>DiscordというWebRTCを使ったボイチャのサービスで使われてた例。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">{</span>\n  advanced: <span class=\"synIdentifier\">[{</span>\n    echoCancellation: <span class=\"synIdentifier\">{</span>\n      exact: <span class=\"synConstant\">true</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n    googEchoCancellation: <span class=\"synIdentifier\">{</span>\n      exact: <span class=\"synConstant\">true</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n    googExperimentalEchoCancellation: <span class=\"synIdentifier\">{</span>\n      exact: <span class=\"synConstant\">true</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n    googNoiseSuppression: <span class=\"synIdentifier\">{</span>\n      exact: <span class=\"synConstant\">true</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n    googExperimentalNoiseSuppression: <span class=\"synIdentifier\">{</span>\n      exact: <span class=\"synConstant\">true</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n    googAutoGainControl: <span class=\"synIdentifier\">{</span>\n      exact: <span class=\"synConstant\">true</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n    googExperimentalAutoGainControl: <span class=\"synIdentifier\">{</span>\n      exact: <span class=\"synConstant\">true</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n    googHighpassFilter: <span class=\"synIdentifier\">{</span>\n      exact: <span class=\"synConstant\">true</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n    googTypingNoiseDetection: <span class=\"synIdentifier\">{</span>\n      exact: <span class=\"synConstant\">true</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n    googAudioMirroring: <span class=\"synIdentifier\">{</span>\n      exact: <span class=\"synConstant\">false</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n    deviceId: <span class=\"synIdentifier\">{</span>\n      exact: <span class=\"synIdentifier\">[</span><span class=\"synConstant\">&quot;default&quot;</span><span class=\"synIdentifier\">]</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}]</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a> ハングアウト</h4>\n    \n    <blockquote>\n        <p><a href=\"https://hangouts.google.com\">Google &#x30CF;&#x30F3;&#x30B0;&#x30A2;&#x30A6;&#x30C8;</a></p>\n\n    </blockquote>\n<p>なんか思ってた以上にいろいろ使ってたので表にまとめてみた。</p><p>まず`video`の。</p>\n\n<table>\n    <tr>\n    <td>名前</td>\n    <td>型</td>\n    </tr>\n    <tr>\n    <td>enableDtlsSrtp</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>enableRtpDataChannels</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>googCpuOveruseDetection</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>googCpuOveruseEncodeUsage</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>googCpuUnderuseThreshold</td>\n    <td> number</td>\n    </tr>\n    <tr>\n    <td>googCpuOveruseThreshold</td>\n    <td> number</td>\n    </tr>\n    <tr>\n    <td>googScreencastMinBitrate</td>\n    <td> number</td>\n    </tr>\n    <tr>\n    <td>oogHighStartBitrate</td>\n    <td> number</td>\n    </tr>\n    <tr>\n    <td>googPayloadPadding</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>googNoiseReduction</td>\n    <td> bool</td>\n    </tr>\n</table><p>次に`audio`の。</p>\n\n<table>\n    <tr>\n    <td>名前</td>\n    <td>型</td>\n    </tr>\n    <tr>\n    <td>googEchoCancellation</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>googExperimentalEchoCancellation</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>googAutoGainControl</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>googExperimentalAutoGainControl</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>googNoiseSuppression</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>googHighpassFilter</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>googAudioMirroring</td>\n    <td> bool</td>\n    </tr>\n    <tr>\n    <td>googExperimentalNoiseSuppression</td>\n    <td> bool</td>\n    </tr>\n</table><p>ちなみにDiscordで使われてる`googTypingNoiseDetection`は使われてなかったので、もしかしたら存在しなかったりして・・。</p><p>と、なんか気になってブラウザのコード追ってみたら他にもいっぱい出てきて心が折れました。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chromium\">Chromium</a>\n<ul>\n<li><a href=\"https://cs.chromium.org/chromium/src/third_party/webrtc/api/mediaconstraintsinterface.h?sq=package:chromium\">https://cs.chromium.org/chromium/src/third_party/webrtc/api/mediaconstraintsinterface.h?sq=package:chromium</a></li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>\n<ul>\n<li><a href=\"https://dxr.mozilla.org/mozilla-central/source/dom/media/webrtc/MediaTrackConstraints.h\">https://dxr.mozilla.org/mozilla-central/source/dom/media/webrtc/MediaTrackConstraints.h</a></li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>(<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Webkit\">Webkit</a>)\n<ul>\n<li><a href=\"https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/mediastream/MediaConstraints.h?rev=218464\">https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/mediastream/MediaConstraints.h?rev=218464</a></li>\n</ul></li>\n</ul><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>は他にも見たこと無いのが色々あって、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>は仕様書通りで余計なプロパティは見てない風？</p>\n\n</div>\n<div class=\"section\">\n    <h4>googXxxxは使うべきか</h4>\n    <p>個人的には使わない。そもそも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>でしか動かんし。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chromium\">Chromium</a>のコードサーチでは色々見つかったけど、これが実際に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>に載ってるかどうかの判断がつかなかったのもある。</p><p>たとえば`/src/third_party/webrtc/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/api\">api</a>/mediaconstraintsinterface.h`に、</p>\n\n    <blockquote>\n        <p>This interface is being deprecated in <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>, and may be removed from WebRTC too.<br />\n<a href=\"https://bugs.chromium.org/p/webrtc/issues/detail?id=5617\">https://bugs.chromium.org/p/webrtc/issues/detail?id=5617</a></p>\n\n    </blockquote>\n<p>とか書いてあるし。<br />\n似たような指定が `/src/third_party/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/WebKit\">WebKit</a>/Source/modules/mediastream/MediaConstraintsImpl.cpp`にもあるからそっちを使えって意味・・？</p><p>なんしかご利用の際は覚悟を持って自己責任でどうぞ。</p>\n\n    <blockquote>\n        <p>まあこの業界で仕事してるなら、仕様書もブラウザの実装もどっちも半信半疑でかかるやろうし、全部自分で動かして確かめるまで信用しないはずよね！</p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おまけ: Constraintsその後</h3>\n    <p>最初に`getUserMedia()`で指定したConstraintsはその後どうなるか。最終的にどうなったのか。</p><p>取得したMediaStreamに内包されるMediaStreamTrackからその後を確認（？）できる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>navigator.mediaDevices.getUserMedia(<span class=\"synIdentifier\">{</span>\n  video: <span class=\"synIdentifier\">{</span>\n    aspectRatio: 1,\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>)\n  .then(stream =&gt; <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>track<span class=\"synIdentifier\">]</span> = stream.getVideoTracks();\n\n    <span class=\"synComment\">// 1. どういう指定でgUMされたか</span>\n    track.getConstraints();\n    <span class=\"synComment\">// 2. このデバイスで指定できる値の範囲</span>\n    track.getCapabilities();\n    <span class=\"synComment\">// 3. 最終的にどんな指定になったか</span>\n    track.getSettings();\n  <span class=\"synIdentifier\">}</span>)\n  .<span class=\"synStatement\">catch</span>(console.error);\n</pre><p>というようにSpecには書いてあるけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>とEdgeでそれぞれ実装はバラバラっぽい・・。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>では[2]が空オブジェクトになる</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>も[2]は実装されてなくてエラーになる</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>は[1]が空オブジェクトになる</li>\n</ul><p>ちなみに[3]もブラウザによって、同じカメラを使ってても4者4様のオブジェクトが返ってきます(˘ω˘ )</p>\n\n</div>\n<div class=\"section\">\n    <h3>おまけ: applyConstraints()</h3>\n    <p>`getUserMedia()`で取得したMediaStreamに含まれるMediaStreamTrackは、後から`applyConstraints()`することで設定を変更できる（らしい）。<br />\nなので、まず最低限の内容で許可を取って、後で拡張するみたいにできる（らしい）。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 最初は雑に</span>\nnavigator.mediaDevices.getUserMedia(<span class=\"synIdentifier\">{</span>\n  video: <span class=\"synConstant\">true</span>\n<span class=\"synIdentifier\">}</span>)\n  .then(stream =&gt; <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>track<span class=\"synIdentifier\">]</span> = stream.getVideoTracks();\n\n    <span class=\"synComment\">// これと</span>\n    console.log(track.getSettings());\n\n    track.applyConstraints(<span class=\"synIdentifier\">{</span>\n      aspectRatio: <span class=\"synIdentifier\">{</span> exact: 1 <span class=\"synIdentifier\">}</span>,\n    <span class=\"synIdentifier\">}</span>)\n    .then(() =&gt; <span class=\"synIdentifier\">{</span>\n      <span class=\"synComment\">// これの結果が変えられるってこと</span>\n      console.log(track.getSettings();\n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>);\n</pre><p>とりあえずデ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>取って、そのデ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>に設定できる値を確認して、それから理想の値をセット・・できそうに見えるけど、今のところEdgeでしかそれらしく動かない(˘ω˘ )冒頭のらしい連呼はこれのせい。</p><p>ちなみに、Edgeでも、`facingMode`みたいな違うデ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>に変えるのはダメっぽい。`width`とか`aspectRatio`とかなら変わる。</p><p>あと、</p>\n\n<ul>\n<li>`applyConstraints()`の内容は、RTCPeerConnectionでつながった先には影響しない\n<ul>\n<li>最初につなげた時のままなので、その場合は、再接続が必要</li>\n<li>localのConsumer（`video`要素とか）は、即時で影響を受ける</li>\n</ul></li>\n</ul><p>と、仕様書は仰っておられた。</p><p>まあ、そのとおりに実装されてる保証はどこにもないんやけど・・。</p>\n\n</div>"
}
