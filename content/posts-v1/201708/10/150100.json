{
  "title": "ChromeのMediaStreamTrackとvideo要素の組合せには罠がある話",
  "html": "<p>WebRTC界隈で、</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>の`video.srcObject = stream`はバグってるから使っちゃダメ</li>\n<li>代わりに`video.src = URL.createObjectURL(stream)`を使え</li>\n</ul><p>という噂があって。</p><p>とはいっても、</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Safari\">Safari</a>では`URL.createObjectURL(stream)`がエラーになる</li>\n<li><a href=\"https://www.fxsitecompat.com/ja/docs/2017/url-createobjecturl-stream-has-been-deprecated/\">URL.createObjectURL(stream) &#x304C;&#x5EC3;&#x6B62;&#x4E88;&#x5B9A;&#x3068;&#x306A;&#x308A;&#x307E;&#x3057;&#x305F; | Firefox &#x30B5;&#x30A4;&#x30C8;&#x4E92;&#x63DB;&#x6027;&#x60C5;&#x5831;</a></li>\n</ul><p>などなど事情もあるのでそろそろ`srcObject`だけ使いたい！<br />\nそのためにもどういうケースでバグってるとか、この噂の真意を確かめたいなーと思って調べてたのが事の発端。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>よくわからなかった</h3>\n    <p>実際に`srcObject`を使ってるコードでストリームが止まる謎の挙動を示すケースが実際にあった。<br />\nただ代わりに`createObjectURL()`だと大丈夫かというと、だいたい大丈夫やけど大丈夫じゃない時もあるという不安定な感じで。</p><p>そして午前中は問題ないのに午後になるとダメだったり・・（この時点で何か別のものを疑うべきな気もするけどｗ）。<br />\n↑の例でいうと、結局は関係ないコードをリファクタしたらストリームが止まることがなくなったりと本当に謎。</p>\n\n</div>\n<div class=\"section\">\n    <h3>でも実際バグってた</h3>\n    <p>あれこれ調べてて偶然見つけた。</p>\n\n    <blockquote>\n        <p><a href=\"https://stackoverflow.com/questions/41189036/stopping-2nd-webrtc-stream-in-chrome-breaks-all-webrtc-streams\">javascript - Stopping 2nd webrtc stream in Chrome breaks all webrtc streams - Stack Overflow</a></p>\n\n    </blockquote>\n<p>ここに上がってる再現デモ -> <a href=\"https://jsfiddle.net/kqjmt7a0/1/\">https://jsfiddle.net/kqjmt7a0/1/</a></p><p>どういうデモかというと、</p>\n\n<ul>\n<li>`video`要素を2つ用意する（AとBとする）</li>\n<li>`getUserMedia()`してストリームをAの`video`にいれておく\n<ul>\n<li>Aはその後ほったらかし</li>\n</ul></li>\n<li>Bの`video`要素にも`getUserMedia()`してストリームを追加\n<ul>\n<li>この時、既にストリームがあればそれを止めてから再度追加</li>\n</ul></li>\n<li>このBに対する停止・追加を2回やると、関係ないはずのAが止まる\n<ul>\n<li>そしてBにも追加されない</li>\n<li>そしてこれ以降はストリームを使って何もできなくなる</li>\n</ul></li>\n</ul><p>というもの。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Firefox\">Firefox</a>では再現しなくて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>でだけ再現する。<br />\n現時点の最新のCanary 62.0.3179.0（Official Build）でもダメ。</p>\n\n    <blockquote>\n        <p><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=674965\">674965 - MediaStreamTrack::stop() can break unrelated WebRTC streams - chromium - Monorail</a></p>\n\n    </blockquote>\n<p>この人は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>にもバグ報告してくれてて、中の人も認知はしてるっぽい。<br />\nただ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>的には直したことになってるぽいけど、ステータスはWontFixのままやし、実際直ってないし、たぶんずっと直らん気がする・・。</p><p>このデモは`createObjectURL()`で書かれててダメなので、`srcObject`がマズいというよか、やっぱり組合せに罠がある気がする。<br />\n`createObjectURL()`使っててもダメな時はダメ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>何がダメなのか</h3>\n    <p>Workaroundがないわけではない。<br />\nあれこれ触ってみると微妙に傾向が見えてきて、どうやら特定のコードの組合せで動かなくなるっぽい。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">function</span> stop(videl, stream) <span class=\"synIdentifier\">{</span>\n  videl.src = <span class=\"synConstant\">''</span>;\n\t\n  <span class=\"synIdentifier\">var</span> tracks = stream.getTracks();\n  <span class=\"synStatement\">for</span>(<span class=\"synIdentifier\">var</span> i = 0; i &lt; tracks.length; ++i) <span class=\"synIdentifier\">{</span>\n    tracks<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span>.stop();\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>このデモのコードにおいては、`src = ''`が悪い。<br />\nたとえばこの行を、</p>\n\n<ul>\n<li>`track.stop()`が終わった後に回す</li>\n<li>そもそも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%E1%A5%F3%A5%C8%A5%A2%A5%A6%A5%C8\">コメントアウト</a></li>\n</ul><p>すると問題は起きない。<br />\n`video.onload`で`revokeObjectURL()`しても関係なくダメ。</p><p>ちなみに本来の目的どおり、`srcObject`を使ってみても解決しない。</p>\n\n<ul>\n<li>`track.stop()` -> `srcObject = null`だと大丈夫</li>\n<li>`srcObject = null` -> `track.stop()`だと止まる</li>\n</ul><p>という感じ。</p><p>なので、「`video`要素に代入されてる`MediaStreamTrack`を、`video`からの参照を切ってから`stop()`しようとするとダメになる」っぽい。</p><p>`MediaStreamTrack`は`stop()`してから、`video`から外すが正しい手順。挙動がおかしくなるのは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Chrome\">Chrome</a>だけやけど・・・。</p><p>もちろん律儀に`video`を解放しない場合 = `src`も`srcObject`も放置する場合は、問題にならない。<br />\nなのでそんなにハマってる人がいないのかなーとも思ったり・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>何を学ぶべきか</h3>\n    <p>少なくともこういう挙動を示すことがあるという知識を持っておく。</p><p>あとはこのメディア周りは本当にブラウザの挙動が不定で色々苦労するので、その覚悟をもつ。<br />\nなんかこういうのは勘と運で切り抜けるしかないなーという感じ。</p>\n\n</div>"
}
