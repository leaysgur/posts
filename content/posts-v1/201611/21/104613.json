{
  "title": "0からはじめる MobX Part.4",
  "html": "<p>さて、4回目です。<br />\n今回の目録はこちら。</p>\n\n<ul>\n<li>computed</li>\n<li>autorun</li>\n</ul>\n<div class=\"section\">\n    <h3>computed</h3>\n    <p>Observableな値を定義するときにあわせて使う便利なやつです。<br />\nたとえば、こんな具合に。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> user = observable(<span class=\"synIdentifier\">{</span>\n  firstName: <span class=\"synConstant\">'Taro'</span>,\n  lastName:  <span class=\"synConstant\">'Yamada'</span>,\n\n  fullName: computed(() =&gt; <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> `$<span class=\"synIdentifier\">{this</span>.firstName<span class=\"synIdentifier\">}</span> $<span class=\"synIdentifier\">{this</span>.lastName<span class=\"synIdentifier\">}</span>`;\n  <span class=\"synIdentifier\">}</span>),\n<span class=\"synIdentifier\">}</span>);\n</pre><p>既存の値から`compute` = 計算して作る値ですね。<br />\nこれがあると「本当に操作すべき値」とそうでない付随する値を明確に分けられるので良いです。</p><p>完了したTODOだけのリストとか、特定条件でフィルタしたリストとか、何もかも宣言的に書ける！</p><p>ちなみにDecoratorsを使ったクラスにするとこうなる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> User <span class=\"synIdentifier\">{</span>\n  @observable firstName = <span class=\"synConstant\">'Taro'</span>;\n  @observable lastName  = <span class=\"synConstant\">'Yamada'</span>;\n\n  @computed get fullName() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> `$<span class=\"synIdentifier\">{this</span>.firstName<span class=\"synIdentifier\">}</span> $<span class=\"synIdentifier\">{this</span>.lastName<span class=\"synIdentifier\">}</span>`;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// Non Decorators ver.</span>\n<span class=\"synStatement\">class</span> User <span class=\"synIdentifier\">{</span>\n  constructor() <span class=\"synIdentifier\">{</span>\n    extendObservable(<span class=\"synIdentifier\">this</span>, <span class=\"synIdentifier\">{</span>\n      firstName: <span class=\"synConstant\">'Taro'</span>,\n      lastName:  <span class=\"synConstant\">'Yamada'</span>,\n\n      fullName: computed(() =&gt; <span class=\"synIdentifier\">{</span>\n        <span class=\"synStatement\">return</span> `$<span class=\"synIdentifier\">{this</span>.firstName<span class=\"synIdentifier\">}</span> $<span class=\"synIdentifier\">{this</span>.lastName<span class=\"synIdentifier\">}</span>`;\n      <span class=\"synIdentifier\">}</span>),\n    <span class=\"synIdentifier\">}</span>)\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>あと地味に書き方にパターンがあって、`extendObservable()`に引数なしの関数を定義すると`computed`な値として扱われたり、<br />\nES5のGetterでも定義できたりします。（明示したいので使ってないけど</p>\n\n</div>\n<div class=\"section\">\n    <h3>autorun</h3>\n    <p>MobXのコア機能ですが今更の紹介に・・・！</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// さっきのUser</span>\n<span class=\"synStatement\">const</span> user = <span class=\"synStatement\">new</span> User();\n\nautorun(() =&gt; <span class=\"synIdentifier\">{</span>\n  console.log(user.lastName);\n<span class=\"synIdentifier\">}</span>);\n\nuser.lastName = <span class=\"synConstant\">'Sato'</span>;\n\n<span class=\"synComment\">// ↓ consoleのログ↓</span>\n<span class=\"synComment\">// Yamada</span>\n<span class=\"synComment\">// Sato</span>\n</pre><p>コードを見ればわかる通り、Observableな値の更新にフックしてコールバックされる仕組みです。<br />\nキモとしては初回実行されるところと、その初回実行時にアクセスされたプロパティの更新のみを監視するところ。</p><p>当たり前ですが上記の例で`user.firstName`を変更しても何も起きません。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> user = observable(<span class=\"synIdentifier\">{</span>\n  name: <span class=\"synConstant\">'leader22'</span>,\n  age: 29\n<span class=\"synIdentifier\">}</span>)\n\nautorun(() =&gt; <span class=\"synIdentifier\">{</span>\n  console.log(user.name); <span class=\"synComment\">// logged</span>\n<span class=\"synIdentifier\">}</span>)\n\nuser.name = <span class=\"synConstant\">'foooo'</span>; <span class=\"synComment\">// logged</span>\nuser = <span class=\"synIdentifier\">{</span> name: <span class=\"synConstant\">'bar'</span>, age: 10 <span class=\"synIdentifier\">}</span>; <span class=\"synComment\">// not logged</span>\n</pre><p>最後のがログに出ない理由がわかれば、もうMobXを制したようなものです！<br />\n（正解を言うと、再代入してる`user.name`は、`autorun()`内で最初にマークした`.name`とは違うから</p><p>詳しくはリファレンスを！</p>\n\n    <blockquote>\n        <p><a href=\"https://mobxjs.github.io/mobx/best/react.html\">Understanding what MobX reacts to | MobX</a></p>\n\n    </blockquote>\n<p>これが使えるので、いわゆるViewは何を選んでもいいのです。<br />\n前に紹介した`mobx-react`の`observer()`も、この`autorun()`の拡張みたいなものって言うとピンとくるかな・・？</p>\n\n<ul>\n<li>Observableな値をStateとして定義\n<ul>\n<li>その際に関連する値は`computed`で区別</li>\n</ul></li>\n<li>`autorun()`でStateを更新する関数を定義</li>\n<li>然るべきタイミングで値を更新</li>\n</ul><p>これだけ覚えてればそれなりの規模のアプリは書けちゃう。</p>\n\n</div>"
}
