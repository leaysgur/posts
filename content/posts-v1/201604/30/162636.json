{
  "title": "ng-kyoto Angular Meetup #4 に行ってきたメモ #ng_kyoto",
  "html": "<p>実家に帰るついでに行ってきた && 話してきました。</p><p>話した資料はこちらです。</p>\n\n    <blockquote>\n        <p><a href=\"http://leader22.github.io/slides/ng_kyoto-4/\">&#x77E5;&#x3063;&#x3066;&#x3066;&#x5F97;&#x3059;&#x308B;Vanilla JS</a></p>\n\n    </blockquote>\n<p>以降、他の皆さんの発表メモ。<br />\n電池がアレなのでLT分はありません！<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Observable触らんかね？ by @pastelinc</h3>\n    <p>Angular 2の中で使われてるRx.jsもとい、Observableについて。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>の検索フォームを考える\n<ul>\n<li>文字列いれたら動的に表示するやつ</li>\n</ul></li>\n<li>実装するなら\n<ul>\n<li>クエリをサーバーに投げる関数を用意</li>\n<li>keyupでその関数を叩く</li>\n</ul></li>\n<li>リクエスト飛びまくるのでタイマー制御をしよう\n<ul>\n<li>キー入力があったらタイマー止めておく</li>\n</ul></li>\n<li>同じクエリになる場合は無視したい\n<ul>\n<li>クエリと結果のキャッシュをもっておいて、随時チェック</li>\n</ul></li>\n<li>リクエストした順で、表示も保証したい\n<ul>\n<li>つらそう</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4\">複数</a>のプロセスでも状態の同期が必要そう</li>\n</ul><p>そこでObservable！<br />\nこれは、DOMイベントやタイマーなどのpush型のイベントソースをモデル化する概念。</p><p><a href=\"https://github.com/Reactive-Extensions/RxJS\">GitHub - Reactive-Extensions/RxJS: The Reactive Extensions for JavaScript</a> のREADMEによると、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> $input = $(<span class=\"synConstant\">'#input'</span>);\n<span class=\"synStatement\">const</span> $results = $(<span class=\"synConstant\">'#results'</span>);\n\n<span class=\"synComment\">/* Only get the value from each key up */</span>\n<span class=\"synIdentifier\">var</span> keyups = Rx.Observable.fromEvent($input, <span class=\"synConstant\">'keyup'</span>)\n  .pluck(<span class=\"synConstant\">'target'</span>, <span class=\"synConstant\">'value'</span>)\n  .filter(text =&gt; text.length &gt; 2 );\n\n<span class=\"synComment\">/* Now debounce the input for 500ms */</span>\n<span class=\"synIdentifier\">var</span> debounced = keyups\n  .debounce(500 <span class=\"synComment\">/* ms */</span>);\n\n<span class=\"synComment\">/* Now get only distinct values, so we eliminate the arrows and other control characters */</span>\n<span class=\"synIdentifier\">var</span> distinct = debounced\n  .distinctUntilChanged();\n\n<span class=\"synIdentifier\">function</span> searchWikipedia (term) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> $.ajax(<span class=\"synIdentifier\">{</span>\n    url: <span class=\"synConstant\">'https://en.wikipedia.org/w/api.php'</span>,\n    dataType: <span class=\"synConstant\">'jsonp'</span>,\n    data: <span class=\"synIdentifier\">{</span>\n      action: <span class=\"synConstant\">'opensearch'</span>,\n      format: <span class=\"synConstant\">'json'</span>,\n      search: term\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>).promise();\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synIdentifier\">var</span> suggestions = distinct\n  .flatMapLatest(searchWikipedia);\n\nsuggestions.subscribe(\n  data =&gt; <span class=\"synIdentifier\">{</span>\n    $results\n      .empty()\n      .append($.map(data<span class=\"synIdentifier\">[</span>1<span class=\"synIdentifier\">]</span>, value =&gt;  $(<span class=\"synConstant\">'&lt;li&gt;'</span>).text(value)))\n  <span class=\"synIdentifier\">}</span>,\n  error=&gt; <span class=\"synIdentifier\">{</span>\n    $results\n      .empty()\n      .append($(<span class=\"synConstant\">'&lt;li&gt;'</span>))\n        .text(<span class=\"synConstant\">'Error:'</span> + error);\n  <span class=\"synIdentifier\">}</span>);\n</pre><p>こういう感じ。</p>\n\n<ul>\n<li>まだ仕様は提案中なので、ライブラリが必須\n<ul>\n<li>上述のRxJSとか</li>\n<li>ちなみに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ECMA\">ECMA</a>のObservableとRxJSの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>はまだ同等ではないので注意</li>\n</ul></li>\n</ul><p>Angular 2のテンプレートからもさくっと`subscribe()`できるそうな。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Angular 2 でアプリ作ってみた by @armorik83</h3>\n    <p>スライドはない！が、Gistはある！</p>\n\n    <blockquote>\n        <p><a href=\"https://gist.github.com/armorik83/f29547a529fc7bb7f9b0c2a25cb412ac\">ng-kyoto Angular Meetup #4 &#x8CC7;&#x6599; &middot; GitHub</a></p>\n\n    </blockquote>\n\n<ul>\n<li>Angular 2でもアプリは作れまぁす！</li>\n<li>ただどう作るか</li>\n<li>MVVMではなさそう\n<ul>\n<li><a href=\"https://speakerdeck.com/laco0416/angular2tomvvm\">Angular2&#x3068;MVVM // Speaker Deck</a></li>\n</ul></li>\n<li>Fluxなのでは\n<ul>\n<li><a href=\"http://azu.github.io/slide/react-meetup/flux.html\">10&#x5206;&#x3067;&#x5B9F;&#x88C5;&#x3059;&#x308B;Flux</a></li>\n<li>Reactみたいな描画速いやつだから使えるパターンでもある</li>\n<li>Angular 2も速いよ！</li>\n</ul></li>\n<li>Angular 2 x Fluxの先駆け\n<ul>\n<li><a href=\"http://victorsavkin.com/post/137821436516/managing-state-in-angular-2-applications\">Managing State in Angular 2 Applications | Victor Savkin</a></li>\n<li>でも複雑・・</li>\n</ul></li>\n<li><a href=\"http://azu.github.io/slide/2016/child_process_sushi/almin-javascript-architecture.html\">Almin.js | JavaScript&#x30A2;&#x30FC;&#x30AD;&#x30C6;&#x30AF;&#x30C1;&#x30E3;</a> も参考に</li>\n<li>そして自分でも作った(そのうち公開)</li>\n</ul><p>作ったWalts(そのうち公開)について。</p>\n\n<ul>\n<li>View / Action / Store の3拍子\n<ul>\n<li>概観はまぁふつうのFlux</li>\n</ul></li>\n<li>Action叩くと同期でも常にPromiseが返るようにしてる</li>\n<li>描画のイベントはRxJSで間引くことでパフォーマンス担保</li>\n</ul><p>で、作ったアプリ。</p>\n\n<ul>\n<li>使ったお金を管理するアプリ</li>\n<li>indexedDBつかった\n<ul>\n<li><a href=\"http://dexie.org/\">Dexie.js - Minimalistic IndexedDB Wrapper</a></li>\n<li>それでも正規化しまくると大変でAsync/Await祭になる</li>\n</ul></li>\n</ul><p>まとめると、Scoped Stylesいいよ！</p>\n\n</div>\n<div class=\"section\">\n    <h3>Angular 2 のRendererをイジってみる by @_likr</h3>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Not%20yet\">Not yet</a> documentedなAngular 2のRendererについて。</p>\n\n<ul>\n<li>RootRenderer</li>\n<li>Renderer\n<ul>\n<li>デフォルトはDomRenderer</li>\n<li>WorkerRenderer とかも用意されてる</li>\n<li>抽象化されてるので自分でも実装できる</li>\n</ul></li>\n<li>ただし20近い<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が必要・・・\n<ul>\n<li>`createElement()`とか</li>\n</ul></li>\n<li>実装すれば3Dグラフィックも出せるのでは！</li>\n<li>THREE.jsベースのRenderer作ってみた\n<ul>\n<li>ChangeDetectionも効く！</li>\n<li>ngForで書ける！</li>\n<li>イベント拾ってどうこうも同じようにできる</li>\n</ul></li>\n<li>Angular 2: One Frameworkとは\n<ul>\n<li>UIぽい何かを作るものなのでは？！！</li>\n</ul></li>\n</ul><p>でもこういうことするものじゃないとのことｗ</p>\n\n</div>\n<div class=\"section\">\n    <h3>Httpの話 by @shin_v1</h3>\n    <p>Angular 2のhttp部分の話。</p>\n\n<ul>\n<li>`http.get(url).subscribe(res)`する</li>\n<li>Angular 1のときはPromiseだったが2ではObservable\n<ul>\n<li>`http.get(url).toPromise()`もできる</li>\n</ul></li>\n<li>Content-Typesは自分で指定しないとダメ</li>\n</ul><p>ソースを読めばわかる！らしい。</p>\n\n</div>"
}
