{
  "title": "ElixirでNode.jsのAPIサーバーを書き直してみたメモ",
  "html": "<p>っても、個人プロジェクトなのですごく小さいけど・・。</p><p>そもそもElixirを学ぶところからはじめて、だいたい1週間くらい。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>そもそもなぜElixir？</h3>\n    <p>仕事でWebRTCなことをやってると、他の事例とかも気になるもので。<br />\nで、そのサービスの性質からか、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%B0%A5%CA%A5%EA%A5%F3%A5%B0\">シグナリング</a>サーバーとかバックエンドに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a>やらElixirが使われることが多いと知る。</p><p>というわけでまあどんな感じか知っておいて損はないかなーというのと、最近フロントエンドに飽きがきてるのも否めなくて、いっちょ他の言語でもさわってみるかーという感じ。</p><p>関数型に思い入れとかはないですｗ</p>\n\n</div>\n<div class=\"section\">\n    <h3>やったこと</h3>\n    \n<ul>\n<li>とりあえず言語のクセを把握する</li>\n<li>思想や生い立ちをざっくり把握する\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a>のバックグラウンド</li>\n<li>OTPってそもそも何なのか</li>\n<li>Node.jsとの比較記事とか</li>\n<li>各社の利用例とかあれこれ</li>\n</ul></li>\n<li>Node.jsで書いた個人サービスの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>サーバーを書き換え\n<ul>\n<li>Node: <a href=\"https://github.com/leader22/mmss-server\">https://github.com/leader22/mmss-server</a></li>\n<li>Elixir: <a href=\"https://github.com/leader22/mmss-server-ex\">https://github.com/leader22/mmss-server-ex</a></li>\n</ul></li>\n</ul><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>サーバーは、自分で作ったmp3のストリーミングサービスのバックエンド。</p>\n\n<ul>\n<li>ルートは4つ\n<ul>\n<li>うち2つはログインしないと叩けない</li>\n</ul></li>\n<li>オンメモリでログイン認証</li>\n<li>パラメータでもらったパスからmp3ファイルをまるっと返す</li>\n</ul><p>というまあとりあえず学ぶにしてはほどよい感じ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>書き換えてみて</h3>\n    \n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Phoenix\">Phoenix</a>しか選択肢がないのか</h4>\n    <p>「Elixir <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>サーバー」って検索すると、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Phoenix\">Phoenix</a>を使う内容ばっかし出て来る。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Phoenix\">Phoenix</a>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>でいう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Rails\">Rails</a>とのことで、</p>\n\n<ul>\n<li>今回のケースではオーバースペックだなーと思った</li>\n<li>たぶん<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Phoenix\">Phoenix</a>使ったらスグ書き換えられるけど、それじゃ勉強にならん</li>\n</ul><p>というわけで、その一歩手前（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Phoenix\">Phoenix</a>も中で使ってる）のPlugでいろいろ書いてみることにした。<br />\n結果としては完成したけど、冗長なコードとかも多くなったので、大人しく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Phoenix\">Phoenix</a>にしててもよかったかもなーという気持ちもある。（Pipelineとか使いたかった）</p><p>Node.jsエンジニア向けに書くと、Plugは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2\">ミドルウェア</a>なしの素のExpressよりもさらに機能を削ったやつって感じ。<br />\n立ち位置的には、素のExpressって言ってしまってよさそう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Elixirという言語</h4>\n    <p>言語自体は覚えればいいだけなのでそこまで苦労はしてない。<br />\nただ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>ばっかやってるせいで、そもそもの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%AD%A5%B9%A5%C8%A5%B9%A5%A4%A5%C3%A5%C1\">コンテキストスイッチ</a>が大変だった。</p>\n\n<ul>\n<li>スネークケースとか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リの構成とか</li>\n<li>関数型特有のコードで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2\">再帰</a>とか状態をどこで持つかとか</li>\n<li>パターンマッチ</li>\n</ul><p>特にパターンマッチはElixirのキモみたいな感じで、これをフルに活用する = コードの雰囲気が勝手に関数型っぽくなる感じかなーと。<br />\nあとは関数が名前・引数の組合せで区別できるやつ、すごい便利やん・・・！</p>\n\n</div>\n<div class=\"section\">\n    <h4>そして行き着く<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a>/OTP</h4>\n    <p>ちょっとElixirを書いてみただけでもわかります。<br />\nまじめにやるなら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a>できないとあかんやつやコレ、OTPも無視できひんやつやんコレー！</p><p>ちょっと前にDiscordがこんなブログ出してましたね。</p>\n\n    <blockquote>\n        <p><a href=\"https://blog.discordapp.com/scaling-elixir-f9b8e1e7c29b\">How Discord Scaled Elixir to 5,000,000 Concurrent Users</a></p>\n\n    </blockquote>\n<p>具体的な数字もいっぱい書いてあって、Elixirすげーな！俺らも使うか！ってなりそう。<br />\nただコレよくよく読むと、「素のElixirではパフォーマンスが冴えないやつもあるので、根っこの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a>/OTPまで降りていって検証し、1から書き直したライブラリ使ってこの境地に立った」記事なのよね・・。</p><p>あとはSupervisorでどういう感じに使って子プロセスをどんな感じにして・・とか、こういう実装にはOTPのアレを使ったほうがいいなとか、そういうコアなところを知ってないと、あくまでプログラミングやったことあります程度の人では使いこなせない言語なのだなぁという感想。</p><p>まあ逆にいえばNodeみたくアレもコレもnpmで調達しなくとも、だいたいコアなやつは用意されてて便利。まあこれも言語としての出自の問題か。</p>\n\n</div>\n<div class=\"section\">\n    <h4>開発環境</h4>\n    <p>ツールの充実度はNode（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>）の方が勝ってるかなーという印象。<br />\n↓を見つけ出すまでずっと悶々としてた。</p>\n\n<ul>\n<li>nodemon的なもの\n<ul>\n<li><a href=\"https://github.com/falood/exsync\">https://github.com/falood/exsync</a></li>\n</ul></li>\n<li>ESLint的なもの\n<ul>\n<li><a href=\"https://github.com/rrrene/credo\">https://github.com/rrrene/credo</a></li>\n<li><a href=\"https://github.com/lpil/dogma\">https://github.com/lpil/dogma</a></li>\n</ul></li>\n<li>Prettier的なもの\n<ul>\n<li><a href=\"https://github.com/lpil/exfmt\">https://github.com/lpil/exfmt</a></li>\n<li>Elixirの1.6から付属のコードフォーマッタが安定ぽい</li>\n</ul></li>\n<li>Flow的なもの\n<ul>\n<li><a href=\"https://github.com/jeremyjh/dialyxir\">https://github.com/jeremyjh/dialyxir</a></li>\n</ul></li>\n</ul><p>それでもMixはとてもよくできてると思った。ApplicationとかConfigとか。強いて言えば`npm-scripts`的な機能が欲しかった。</p><p>あと`@spec`とか`@moduledoc`とか、こういうのが言語機能に入ってるのはすごく理にかなってると思った。</p>\n\n</div>\n<div class=\"section\">\n    <h4>やり残し</h4>\n    <p>デプロイまわり。<br />\n<a href=\"https://github.com/bitwalker/distillery\">https://github.com/bitwalker/distillery</a> とか使ってパッケージするの試したかった。</p><p>わざわざDockerで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ubuntu\">Ubuntu</a>のイメージ作ってElixirの1.6を入れて・・っていうのが面倒で・・。<br />\n1.6が公式リリースされたらまた考える。</p><p>てかうちの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VPS\">VPS</a>、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Erlang\">Erlang</a>のrebar3？かなんかが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>できず、結局ローカルでしか試せてないっていう。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>次にやる</h3>\n    <p>あとは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Phoenix\">Phoenix</a>も少し見ておきたいなーと。</p>\n\n<ul>\n<li>とりあえずさわる\n<ul>\n<li>Channelsまわり</li>\n<li>付属のJS使わずにアクセスできないかとか</li>\n</ul></li>\n</ul><p>まあ結局のところ仕事で使わない = 趣味プロONLYとなると、今の自分のスキルセットから見ると別にNode.jsでいいかな・・という感じではある。<br />\nどっかにそういう仕事ないかなー。</p>\n\n</div>"
}
