{
  "title": "ElixirでNode.jsのAPIサーバーを書き直してみたメモ",
  "html": "<p>っても、個人プロジェクトなのですごく小さいけど・・。</p><p>そもそもElixirを学ぶところからはじめて、だいたい1週間くらい。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>そもそもなぜElixir？</h3>\n    <p>仕事でWebRTCなことをやってると、他の事例とかも気になるもので。<br />\nで、そのサービスの性質からか、シグナリングサーバーとかバックエンドにErlangやらElixirが使われることが多いと知る。</p><p>というわけでまあどんな感じか知っておいて損はないかなーというのと、最近フロントエンドに飽きがきてるのも否めなくて、いっちょ他の言語でもさわってみるかーという感じ。</p><p>関数型に思い入れとかはないですｗ</p>\n\n</div>\n<div class=\"section\">\n    <h3>やったこと</h3>\n    \n<ul>\n<li>とりあえず言語のクセを把握する</li>\n<li>思想や生い立ちをざっくり把握する\n<ul>\n<li>Erlangのバックグラウンド</li>\n<li>OTPってそもそも何なのか</li>\n<li>Node.jsとの比較記事とか</li>\n<li>各社の利用例とかあれこれ</li>\n</ul></li>\n<li>Node.jsで書いた個人サービスのAPIサーバーを書き換え\n<ul>\n<li>Node: <a href=\"https://github.com/leader22/mmss-server\">https://github.com/leader22/mmss-server</a></li>\n<li>Elixir: <a href=\"https://github.com/leader22/mmss-server-ex\">https://github.com/leader22/mmss-server-ex</a></li>\n</ul></li>\n</ul><p>APIサーバーは、自分で作ったmp3のストリーミングサービスのバックエンド。</p>\n\n<ul>\n<li>ルートは4つ\n<ul>\n<li>うち2つはログインしないと叩けない</li>\n</ul></li>\n<li>オンメモリでログイン認証</li>\n<li>パラメータでもらったパスからmp3ファイルをまるっと返す</li>\n</ul><p>というまあとりあえず学ぶにしてはほどよい感じ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>書き換えてみて</h3>\n    \n<div class=\"section\">\n    <h4>Phoenixしか選択肢がないのか</h4>\n    <p>「Elixir APIサーバー」って検索すると、Phoenixを使う内容ばっかし出て来る。</p><p>PhoenixはRubyでいうRailsとのことで、</p>\n\n<ul>\n<li>今回のケースではオーバースペックだなーと思った</li>\n<li>たぶんPhoenix使ったらスグ書き換えられるけど、それじゃ勉強にならん</li>\n</ul><p>というわけで、その一歩手前（Phoenixも中で使ってる）のPlugでいろいろ書いてみることにした。<br />\n結果としては完成したけど、冗長なコードとかも多くなったので、大人しくPhoenixにしててもよかったかもなーという気持ちもある。（Pipelineとか使いたかった）</p><p>Node.jsエンジニア向けに書くと、Plugはミドルウェアなしの素のExpressよりもさらに機能を削ったやつって感じ。<br />\n立ち位置的には、素のExpressって言ってしまってよさそう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Elixirという言語</h4>\n    <p>言語自体は覚えればいいだけなのでそこまで苦労はしてない。<br />\nただJavaScriptばっかやってるせいで、そもそものコンテキストスイッチが大変だった。</p>\n\n<ul>\n<li>スネークケースとかディレクトリの構成とか</li>\n<li>関数型特有のコードで再帰とか状態をどこで持つかとか</li>\n<li>パターンマッチ</li>\n</ul><p>特にパターンマッチはElixirのキモみたいな感じで、これをフルに活用する = コードの雰囲気が勝手に関数型っぽくなる感じかなーと。<br />\nあとは関数が名前・引数の組合せで区別できるやつ、すごい便利やん・・・！</p>\n\n</div>\n<div class=\"section\">\n    <h4>そして行き着くErlang/OTP</h4>\n    <p>ちょっとElixirを書いてみただけでもわかります。<br />\nまじめにやるならErlangできないとあかんやつやコレ、OTPも無視できひんやつやんコレー！</p><p>ちょっと前にDiscordがこんなブログ出してましたね。</p>\n\n    <blockquote>\n        <p><a href=\"https://blog.discordapp.com/scaling-elixir-f9b8e1e7c29b\">How Discord Scaled Elixir to 5,000,000 Concurrent Users</a></p>\n\n    </blockquote>\n<p>具体的な数字もいっぱい書いてあって、Elixirすげーな！俺らも使うか！ってなりそう。<br />\nただコレよくよく読むと、「素のElixirではパフォーマンスが冴えないやつもあるので、根っこのErlang/OTPまで降りていって検証し、1から書き直したライブラリ使ってこの境地に立った」記事なのよね・・。</p><p>あとはSupervisorでどういう感じに使って子プロセスをどんな感じにして・・とか、こういう実装にはOTPのアレを使ったほうがいいなとか、そういうコアなところを知ってないと、あくまでプログラミングやったことあります程度の人では使いこなせない言語なのだなぁという感想。</p><p>まあ逆にいえばNodeみたくアレもコレもnpmで調達しなくとも、だいたいコアなやつは用意されてて便利。まあこれも言語としての出自の問題か。</p>\n\n</div>\n<div class=\"section\">\n    <h4>開発環境</h4>\n    <p>ツールの充実度はNode（JavaScript）の方が勝ってるかなーという印象。<br />\n↓を見つけ出すまでずっと悶々としてた。</p>\n\n<ul>\n<li>nodemon的なもの\n<ul>\n<li><a href=\"https://github.com/falood/exsync\">https://github.com/falood/exsync</a></li>\n</ul></li>\n<li>ESLint的なもの\n<ul>\n<li><a href=\"https://github.com/rrrene/credo\">https://github.com/rrrene/credo</a></li>\n<li><a href=\"https://github.com/lpil/dogma\">https://github.com/lpil/dogma</a></li>\n</ul></li>\n<li>Prettier的なもの\n<ul>\n<li><a href=\"https://github.com/lpil/exfmt\">https://github.com/lpil/exfmt</a></li>\n<li>Elixirの1.6から付属のコードフォーマッタが安定ぽい</li>\n</ul></li>\n<li>Flow的なもの\n<ul>\n<li><a href=\"https://github.com/jeremyjh/dialyxir\">https://github.com/jeremyjh/dialyxir</a></li>\n</ul></li>\n</ul><p>それでもMixはとてもよくできてると思った。ApplicationとかConfigとか。強いて言えば`npm-scripts`的な機能が欲しかった。</p><p>あと`@spec`とか`@moduledoc`とか、こういうのが言語機能に入ってるのはすごく理にかなってると思った。</p>\n\n</div>\n<div class=\"section\">\n    <h4>やり残し</h4>\n    <p>デプロイまわり。<br />\n<a href=\"https://github.com/bitwalker/distillery\">https://github.com/bitwalker/distillery</a> とか使ってパッケージするの試したかった。</p><p>わざわざDockerでUbuntuのイメージ作ってElixirの1.6を入れて・・っていうのが面倒で・・。<br />\n1.6が公式リリースされたらまた考える。</p><p>てかうちのVPS、Erlangのrebar3？かなんかがコンパイルできず、結局ローカルでしか試せてないっていう。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>次にやる</h3>\n    <p>あとはPhoenixも少し見ておきたいなーと。</p>\n\n<ul>\n<li>とりあえずさわる\n<ul>\n<li>Channelsまわり</li>\n<li>付属のJS使わずにアクセスできないかとか</li>\n</ul></li>\n</ul><p>まあ結局のところ仕事で使わない = 趣味プロONLYとなると、今の自分のスキルセットから見ると別にNode.jsでいいかな・・という感じではある。<br />\nどっかにそういう仕事ないかなー。</p>\n\n</div>"
}
