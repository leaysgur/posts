{
  "title": "HTML5 Conference 2017 に行ってきたメモ #html5j",
  "html": "<p>今年もいってきたので。</p><p>JRが安定の電車遅延で基調講演はすべりこみだったのでメモなし。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Nintendo SwitchとWeb</h3>\n    \n    <blockquote>\n        <p>資料はたぶんこない</p>\n\n    </blockquote>\n<p>SNSと写真撮影NG = 聞いた内容は公開しないで・・ってこと・・よね？<br />\nなので、メモは取ったけどココには書きません。</p>\n\n</div>\n<div class=\"section\">\n    <h3>大規模運用で見えるWebプロトコルの理想と現実、そして今後</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.slideshare.net/techblogyahoo/web-html5j-html5jb\">&#x5927;&#x898F;&#x6A21;&#x904B;&#x7528;&#x3067;&#x898B;&#x3048;&#x308B;Web&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x306E;&#x7406;&#x60F3;&#x3068;&#x73FE;&#x5B9F;&#x3001;&#x305D;&#x3057;&#x3066;&#x4ECA;&#x5F8C; #html5j #html5j_b</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Yahoo!のproxy</h4>\n    \n<ul>\n<li>一般的な構成\n<ul>\n<li><a href=\"https://techblog.yahoo.co.jp/operation/2015-6-yahoojapan-cdn/\">&#x30E4;&#x30D5;&#x30FC;&#x306E;&#x753B;&#x50CF;&#x914D;&#x4FE1;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#xFF08;CDN&#xFF09;&#x306E;&#x7D39;&#x4ECB; - Yahoo! JAPAN Tech Blog</a></li>\n</ul></li>\n<li>2010年\n<ul>\n<li>Disk I/O不足</li>\n<li>HDD -> SSD</li>\n</ul></li>\n<li>2011年\n<ul>\n<li>帯域が不足</li>\n<li>NW強化・DC追加</li>\n</ul></li>\n<li>2013年\n<ul>\n<li>pushスパイク問題</li>\n<li>Yahoo!内でのトラフィック</li>\n</ul></li>\n<li>2015年\n<ul>\n<li>SSL CPU不足</li>\n<li>システム入れ替え</li>\n<li>AOSSL対応</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>AOSSL</h4>\n    \n<ul>\n<li>ドメインが1000以上あった</li>\n<li>ドメインの統合などを進めていった</li>\n<li>要件\n<ul>\n<li>4,000,000rps</li>\n<li>400Gbps</li>\n<li>これを冗長化</li>\n</ul></li>\n<li>処理性能と電力消費のバランス</li>\n<li>HTTP/2にもした</li>\n<li>とある日の1時間のリクエストを見てみた</li>\n<li>56%はHTTP/2\n<ul>\n<li>対応できてないのはWin7 IE11, Win 8.1のIE11など・・</li>\n</ul></li>\n<li>今はEV SSL対応</li>\n<li>2017年の稼働率は100％！\n<ul>\n<li>それでも年間50分くらいは落ちる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>deploy</h4>\n    \n<ul>\n<li>chef enterprise x screwdriver</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>HTTP/2の現実</h4>\n    \n<ul>\n<li>HTTP/1.1の欠点\n<ul>\n<li>1Req 1TCP接続</li>\n<li>ブラウザは6本くらいしか同時接続できないので後は詰まる</li>\n</ul></li>\n<li>HTTP/2は速い？\n<ul>\n<li>大きめのファイル（1．5MBの動画）は確かに速くなってる</li>\n<li>ただHTTP/2対応ブラウザ = 速いブラウザなのでそのせいの影響も・・？</li>\n<li>小さいファイル（11KBの画像）はほとんど変わらん</li>\n</ul></li>\n<li>サーバー側からみると、よくわからん</li>\n<li>クライアントからはどうか\n<ul>\n<li>DOMCLまでの時間はほぼ変わってない</li>\n<li>プロトコルだけ変えてもそんなに効果はないと思われる</li>\n</ul></li>\n<li>新規接続 vs 再接続の割合\n<ul>\n<li>HTTP/2: 1:9</li>\n<li>HTTP/1.1: 4:6</li>\n<li>サーバー負荷は下がってる</li>\n</ul></li>\n<li>結局どうだったの\n<ul>\n<li>導入で大したトラブルはなかった</li>\n<li>効果があったかはこれからやっていくところ</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>TLSの現実</h4>\n    \n<ul>\n<li>TLS1.0がまだ5％くらいいる\n<ul>\n<li>Win7 IE.., Android 4.x 標準ブラウザ...</li>\n</ul></li>\n<li>ECDHE-RSA-AESが70％くらい\n<ul>\n<li>NIST-P256</li>\n</ul></li>\n<li>落とし穴\n<ul>\n<li>ドメイン抜け漏れ・typoなどがリスク</li>\n<li>OSのアップデートで挙動が変わったり</li>\n<li>認証局側の事件・事故</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>TLS1.3 / QUIC</h4>\n    \n<ul>\n<li>常時TLS時代</li>\n<li>TSL1.2の負債</li>\n<li>モバイル時代に配慮した性能の向上などが必要</li>\n<li>TLS1.3\n<ul>\n<li>仕様はほぼ完了</li>\n<li>Chromeはフラグを立てると使える</li>\n<li>後方互換に難あり？</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>QUIC</h4>\n    \n<ul>\n<li>UDP上でTCP, TL, HTTP/2の一部を実現する</li>\n<li>インターネット全体の7％が既に</li>\n<li>Googleの性能評価をみると\n<ul>\n<li>8％表示が早くなった</li>\n<li>遅いところが速くなった</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>今後</h4>\n    \n<ul>\n<li>TLS1.2は枯れたが1.3とQUICはそうはいかない</li>\n<li>エイヤで試すのではなくちゃんと土台を用意して</li>\n</ul><p>Yahoo!では一緒にtcpdumpしたい人を募集していますだそうですｗ</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>詳解 WebRTC</h3>\n    \n    <blockquote>\n        <p><a href=\"https://gist.github.com/voluntas/a9dc017ea85aea5ffb7db73af5c6b4f9\">&#x8A73;&#x89E3; WebRTC &middot; GitHub</a></p>\n\n    </blockquote>\n<p>またも写真撮影NGだそうで。<br />\nまあ↑のリンクに書いてある内容そのままだったのでメモいらないかと。</p>\n\n</div>\n<div class=\"section\">\n    <h3>React v16 and beyond React Fiber</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/koba04/react-v16-and-beyond-react-fiber\">React v16 and beyond React Fiber // Speaker Deck</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>React v16</h4>\n    \n<ul>\n<li>1年ぶりのメジャーアップデート\n<ul>\n<li>v15.6からはスムーズにアップデートできるはず</li>\n</ul></li>\n<li>ライセンスがMITに</li>\n<li>文字列や配列がコンポーネントとして返せるように\n<ul>\n<li>配列は引き続き`key`をつける必要あり</li>\n<li>JSXでサポートされるかも・・？</li>\n</ul></li>\n<li>`componentDidCatch()`で子のエラーを拾えるように\n<ul>\n<li>エラーが起きると`ReactDOM.render()`したルートからunmountされる（拾ってなかったら</li>\n</ul></li>\n<li>`ReactDOM.createPortal()`\n<ul>\n<li>モーダルとかの表示用に、別の場所に`ReactDOM.render()`しなくてよくなる</li>\n</ul></li>\n<li>RollupでFlatにビルドされるように\n<ul>\n<li>ファイルサイズが削減</li>\n<li>内部モジュールは直接参照できなくなる</li>\n</ul></li>\n<li>SSR\n<ul>\n<li>独立したRendererに</li>\n<li>StreamRendering</li>\n<li>`ReactDOM.render(SSRされたやつ)`の代わりに、`ReactDOM.hydrate()`</li>\n<li>ReactElementの単位でチェックされるように（v15までは全部使う or 全部捨てるだった</li>\n</ul></li>\n<li>ホワイトリストにない属性もDOMに反映されるように</li>\n<li>Map / Set / rAFが必須に</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Fiberとは</h4>\n    \n<ul>\n<li>コアアルゴリズム（の再実装</li>\n<li>既存の再帰 x 同期レンダリングは重い・遅い\n<ul>\n<li>コンポーネントのアップデートサイクルをスケジューリングできるように</li>\n</ul></li>\n<li>UIのレスポンス性を改善するもの</li>\n<li>Scheduling\n<ul>\n<li>`requestIdleCallback`での時間ベース</li>\n<li>Sync, Task, High, Low, OffScreenといった優先度ベース</li>\n</ul></li>\n<li>Fiber = Componentの単位</li>\n<li>LinkedList\n<ul>\n<li>ルートからレンダリングしている途中でも、どこからでも中断・再開できる</li>\n</ul></li>\n<li>Begin -> Complete -> Commitのフェーズ\n<ul>\n<li>`componentDidMount()`はBegin, `componentDidUpdate()`はCommitのように</li>\n<li>Beginは非同期にレンダリングされる場合、複数回起こりうる</li>\n</ul></li>\n<li>ただこれらの非同期レンダリングは、v16のデフォルトでは有効ではない\n<ul>\n<li>試すことはできる</li>\n</ul></li>\n<li>CustomRenderer\n<ul>\n<li>Consoleに吐くコンポーネントとか、`say()`で動くVoiceRendererとか作れる</li>\n<li>preactとかinfernoみたいに自作しなくても差し替えられる！</li>\n</ul></li>\n<li>WASMで書き換えられる未来もあるかも</li>\n</ul><p>v17待ちかなー。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>The State of Web Components</h3>\n    \n    <blockquote>\n        <p>資料は見つけたら</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Web Components</h4>\n    \n<ul>\n<li>HTML + CSSで作るつらさ\n<ul>\n<li>スコープがない</li>\n<li>再利用しにくい(+ JS)</li>\n<li>仕組みがないので意識するしかない</li>\n</ul></li>\n<li>Shadow DOM / Templates / HTML Imports / Custom Elements\n<ul>\n<li>HTML Imports は ES Modulesへ</li>\n</ul></li>\n<li>1. Shadow DOM\n<ul>\n<li><a href=\"https://www.w3.org/TR/shadow-dom/\">Shadow DOM</a></li>\n<li>スコープを区切るもの</li>\n<li>`shadowRoot`を生成し、その中に影響範囲を留める</li>\n<li>`el.attachShadow({ mode: 'open' })`</li>\n</ul></li>\n<li>2. Custom Elements\n<ul>\n<li><a href=\"https://www.w3.org/TR/custom-elements/\">Custom Elements</a></li>\n<li>独自のHTML要素をつくる</li>\n<li>`connectedCallback()`などライフサイクルメソッドが使える</li>\n</ul></li>\n<li>Shadow DOMとCustom Elementsを組み合わせることで、scopedなコンポーネントに</li>\n<li>3. Templates\n<ul>\n<li>いままで`display: hidden`で用意したり、`script type:text`内に書いたりしてたアレ</li>\n<li><a href=\"https://html.spec.whatwg.org/#the-template-element\">HTML Standard</a></li>\n</ul></li>\n<li>4. ES Modules\n<ul>\n<li>HTML Importsがお亡くなりになった</li>\n<li>HTML Modulesなる動きもあるが果たして・・</li>\n<li><a href=\"https://ponyfoo.com/articles/es6-modules-in-depth\">ES6 Modules in Depth</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>関連Topics</h4>\n    \n<ul>\n<li><a href=\"https://1000ch.github.io/webcomponents-sandbox/\">Web Components sandbox</a></li>\n<li>ブラウザーサポート\n<ul>\n<li>Chrome と Safariは4つともOK（つまりモバイルはほぼOK）</li>\n<li>Firefoxは一部対応中</li>\n<li>Edgeはお察し</li>\n</ul></li>\n<li>YouTubeがWeb Componentsを採用した\n<ul>\n<li>が、Shadow DOMは使ってない様子</li>\n<li>Polymer -> webComponents.js</li>\n</ul></li>\n<li>アクセシビリティ\n<ul>\n<li>通常のHTMLを書くときと一緒</li>\n<li>WAI-AREAとか`inert`属性とか</li>\n</ul></li>\n<li>パフォーマンス\n<ul>\n<li>コンポーネントは`script`でロードするのでHTTP/2とか</li>\n<li>`type=module`は`defer`されちゃうので、最適化は必要かも？</li>\n</ul></li>\n<li>レンダリング\n<ul>\n<li>LightDOMとShadowDOMの差</li>\n<li>大差はないと思うが、ブラウザに委ねられる</li>\n<li>Reactなどからも通常の要素と同じように使える</li>\n<li>VirtualDOMのように差分描画は自分で</li>\n<li><a href=\"https://github.com/PolymerLabs/lit-html\">GitHub - PolymerLabs/lit-html: HTML template literals in JavaScript</a></li>\n</ul></li>\n</ul><p>さすがのわかりやすさやった・・・！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりというかぼやき</h3>\n    <p>こういうカンファレンスの撮影NGとSNS禁止って、何を意味してるの・・？</p>\n\n<ul>\n<li>内容をインターネットに放流しないでってこと？</li>\n<li>顔出しNGってこと？</li>\n<li>撮影音うるさい・まぶしいからやめてってこと？</li>\n<li>スライド内に著作物があるからだめよ（メモはいいよ）ってこと？</li>\n</ul><p>はっきりせんし、いろいろ類推するのも面倒やし、なにもしないのが一番ええやろってことで、今回は、そういうの聞くと一切メモを残さないスタンスでいきました。</p>\n\n</div>"
}
