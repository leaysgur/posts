{
  "title": "MobX 6.0.0 について",
  "html": "<p>出ました。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/mobxjs/mobx/blob/mobx6/CHANGELOG.md#600\">mobx/CHANGELOG.md at mobx6 &middot; mobxjs/mobx &middot; GitHub</a></p>\n\n    </blockquote>\n<p>目玉機能！みたいなのはないです。<br />\nそれだけ安定してるという意味でもある。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>decorate() から makeObservable() へ</h3>\n    <p>APIにおける一番の変更がコレ。</p><p>v4とv5では、いわゆるStoreはこんな風に作ってた。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> decorate, observable <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'mobx'</span>;\n\n<span class=\"synStatement\">class</span> FooStore <span class=\"synIdentifier\">{</span>\n  foo = <span class=\"synConstant\">'text'</span>;\n  shallowObj = <span class=\"synIdentifier\">{}</span>;\n  shallowArr = <span class=\"synIdentifier\">[]</span>;\n<span class=\"synIdentifier\">}</span>\n\ndecorate(FooStore, <span class=\"synIdentifier\">{</span>\n  foo: observable,\n  shallowObj: observable.shallow,\n  shallowArr: observable.shallow,\n<span class=\"synIdentifier\">}</span>);\n</pre><p>`class`を作ったあとで、`decorate()`という関数でもってObservableにする。</p><p>この`decorate()`が廃止されて、代わりに`makeObservable()`と`makeAutoObservable()`という関数に。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> makeObservable, observable <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'mobx'</span>;\n\n<span class=\"synStatement\">class</span> FooStore <span class=\"synIdentifier\">{</span>\n  foo = <span class=\"synConstant\">'text'</span>;\n  shallowObj = <span class=\"synIdentifier\">{}</span>;\n  shallowArr = <span class=\"synIdentifier\">[]</span>;\n\n  constructor() <span class=\"synIdentifier\">{</span>\n    makeObservable(<span class=\"synIdentifier\">this</span>, <span class=\"synIdentifier\">{</span>\n      foo: observable,\n      shallowObj: observable.shallow,\n      shallowArr: observable.shallow, \n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>まあそのまんまですね。</p><p>`observable.shallow`とか、`observable.ref`とかを使わないなら、`makeAutoObservable(this)`だけでもよいです。</p><p>`computed`や`action`なども、全部自分で明示するなら`makeObservable()`で。</p><p>TypeScriptの場合はこうしないと型エラーになるので注意。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> makeObservable<span class=\"synStatement\">,</span> observable <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">'mobx'</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">class</span> FooStore <span class=\"synIdentifier\">{</span>\n  foo <span class=\"synStatement\">=</span> <span class=\"synConstant\">'text'</span><span class=\"synStatement\">;</span>\n  shallowObj <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">{}</span><span class=\"synStatement\">;</span>\n  shallowArr <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">[]</span><span class=\"synStatement\">;</span>\n\n  <span class=\"synStatement\">constructor()</span> <span class=\"synIdentifier\">{</span>\n    makeObservable<span class=\"synStatement\">&lt;</span>FooStore<span class=\"synStatement\">&gt;(</span><span class=\"synIdentifier\">this</span><span class=\"synStatement\">,</span> <span class=\"synIdentifier\">{</span>\n      foo: observable<span class=\"synStatement\">,</span>\n      shallowObj: observable.shallow<span class=\"synStatement\">,</span>\n      shallowArr: observable.shallow<span class=\"synStatement\">,</span> \n    <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3>ドキュメントが一新された</h3>\n    <p>正直いままでのドキュメントは、お世辞にもわかりやすいとは言えませんでした。</p><p>新規でMobXに興味をもった人も、離脱するんじゃねーかってくらいに・・。</p><p>しかしそれも！今回で！！</p>\n\n    <blockquote>\n        <p><a href=\"https://mobx.js.org/README.html\">About MobX &middot; MobX</a></p>\n\n    </blockquote>\n<p>というわけで、めちゃくちゃ読みやすくなったので、ぜひ読んでください。</p>\n\n</div>\n<div class=\"section\">\n    <h3>MobX x React</h3>\n    <p>MobXユーザーはだいたいReactユーザーだと思うので、そっちも触れておく。</p><p>古いコードベースじゃない限りは、`mobx-react`ではなく、`mobx-react-lite`というパッケージを使ってください。</p>\n\n    <blockquote>\n        <p><a href=\"https://mobx.js.org/react-integration.html\">React integration &middot; MobX</a></p>\n\n    </blockquote>\n<p>で、今回のアップデートではAPIの追加というよりも、DepricatedになったAPIのほうが多いです。</p><p>なんならこのパッケージからは4つのAPIしか利用を推奨しません。</p>\n\n<ul>\n<li>`observer()` HoC</li>\n<li>`Observer` コンポーネント</li>\n<li>`useLocalObservable()` フック</li>\n<li>`enableStaticRendering()`</li>\n</ul><p>これだけ。</p>\n\n<div class=\"section\">\n    <h4>コンポーネントで使う</h4>\n    <p>コンポーネントをReactiveにするための方法が、いままでは3つあったんですが、それが2つになります。</p>\n\n<ul>\n<li>`observer()` HoC</li>\n<li>`Observer` コンポーネント</li>\n</ul><p>この2つのどっちかを使う。</p><p>前者は、Functionコンポーネントに対してのみ使えて、後者はどちらの中でも使えます。（正確には、`mobx-react`パッケージの`observer()`は、Classコンポーネントにも使えるけど）</p><p>個人的には、HoCより、再描画させたい範囲を明示的に区切るために`Observer`を使いたい派です。</p>\n\n</div>\n<div class=\"section\">\n    <h4>コンポーネント内で、Observableな値をつくる</h4>\n    <p>`useState()`があるのでそこまで活躍の機会はないけど。</p><p>直接`mobx`パッケージから`observable()`を持ってきてもいいけど、フックでそれを定義できるというのが`useLocalObservable()`です。</p><p>ドキュメントにも書いてあるけど、ただのショートハンド。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>state<span class=\"synIdentifier\">]</span> = useState(() =&gt; observable(initializer(), annotations, <span class=\"synIdentifier\">{</span> autoBind: <span class=\"synConstant\">true</span> <span class=\"synIdentifier\">}</span>))\n</pre>\n</div>\n<div class=\"section\">\n    <h4>SSR</h4>\n    <p>最後に`enableStaticRendering()`について。</p><p>SSR環境では、Reactiveなコンポーネントも意味をなさないので、何もしなくていいですを伝えるためのAPIです。</p><p>いままでは`useStaticRendering()`って名前だったせいで、フックと勘違いされてESLintに怒られるっていうトラップがあった・・ｗ</p>\n\n</div>\n</div>"
}
