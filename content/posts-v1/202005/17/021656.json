{
  "title": "MobX作者による、RecoilとMobXについての簡単なまとめ",
  "html": "\n    <blockquote>\n        <p><a href=\"http://github.com/facebookexperimental/recoil\">http://github.com/facebookexperimental/recoil</a></p>\n\n    </blockquote>\n<p>先日のReactEuropeで発表されたてホヤホヤの、ExperimentalなReact向けの状態管理ライブラリであるRecoil。</p><p>ただ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>とかやりたいことを見てると、「MobXファミリーとの違いってなんぞ・・？」って個人的になってました。<br />\nインターネットでも同じような印象を受けた人はいるらしく、なんやろな〜と思っていた矢先。</p><p>MobXの作者である `@mwestrate` 氏が、さくっと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Tweet\">Tweet</a>してるじゃありませんか！</p><p>なのでこの記事では、その<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Tweet\">Tweet</a>を引用して、翻訳+ざっくりまとめをしておきます。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>元<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Tweet\">Tweet</a>はこちら</h3>\n    <p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/MobX?src=hash&amp;ref_src=twsrc%5Etfw\">#MobX</a> or <a href=\"https://twitter.com/recoiljs?ref_src=twsrc%5Etfw\">@recoiljs</a>? Saw a lot of questions on whether they&#39;re the same, so a quick thread. First of all, Recoil &amp; MobX solve the same problem: efficient render widely shared state. This is a problem React (Context), Redux and <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/most\">most</a> state management libs don&#39;t solve.</p>&mdash; Michel Weststrate (@mweststrate) <a href=\"https://twitter.com/mweststrate/status/1261369870152871937?ref_src=twsrc%5Etfw\">2020年5月15日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> <br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h3>ざっくり日本語訳</h3>\n    <p>MobXとRecoil、その違いがなにか気になってる人も多いと思うので、さくっとスレッドに書いてみます。</p><p>まず最初に、RecoilとMobXは同じ問題を解決してくれる。<br />\nその目的は、広く共有されたステートを、効率よく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>すること。</p><p>これはReact（とContext）の問題で、Reduxやその他の状態管理ライブラリはそれを解決してくれない。</p><p>単語として、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>や依存ツリーなどの表現は、RecoilにもMobXにも登場する。<br />\nMobX語を使ってRecoilを表現するなら、`observable.box` + `computed` + `useObserver`って感じ。</p><p>違いは、RecoilがReactが提供する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>の上に成り立っているというところで、Concurrentモードなどにも適応しやすいはず。</p><p>MobXはより汎用的なライブラリで、React以外のプロジェクトでも使えるし、Flutterなど別の言語でも利用できる。</p><p>Recoil同様、MobXも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>という概念を使うけど、それらはオブジェクトやMapや配列にラップされていてるので、簡単に組み合わせられる。<br />\nコレクション（ids）と、その中身を別の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>として表現する必要もない。</p><p>配列なら`observable.array`がそれを実現してくれてるし、なんならすべてのプロパティを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>にしてくれる。</p><p>つまりとあるオブジェクトのプロパティAが変更されても、それを使っていない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>は再描画されないということ。</p><p>もちろん同じことはRecoilでもできるけど、それらを自分で記述する必要がある。（Selectorを書いたり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>の細分化をしたり）<br />\nここが最大の違いで、Recoilを使う場合、欲しいものはすべて自分で調達する必要がある。</p><p>わかりやすいとも言えるし、理想的ではないとも言えるかもしれない。</p><p>React Hooksの性質上、それらは宣言的にでないといけない（もしくは追加のSelector）。<br />\n`{user.loggedIn ? user.name : \"\"}`というコードがあったときに、MobXは`loggedIn`が`true`のときだけ`name`を監視するけど、これを手動で実現するのは難しいと思う。</p><p>まとめると、RecoilとMobXは似てるところがある。</p><p>多数の、または個別に監視される<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>（アプリケーションの状態の一部分）を使って（Reduxは常にこれが1つ）、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の更新と必要なデータの導出やメモ化ができる。</p><p>MobXは、より抽象化されたMapや配列といった概念の上で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>を利用して、それらを端的に追跡できる。</p><p>Recoilは、よりReact自身に近いもので、簡素。</p><p>免責: これらは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>を見て思ったことであり、まだ実際のプロジェクトで試したりはしてない。<br />\n個人的になにが同じように感じて、なにが違うのか知りたかっただけ。</p><p>みんなも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>をチェックしよう！</p>\n\n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=_ISAA_Jt9kI\">https://www.youtube.com/watch?v=_ISAA_Jt9kI</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>特にまとめることがないくらいまとまった<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Tweet\">Tweet</a>でしたわ。</p><p>氏がいつのまにか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>の中の人になってたのは知ってたので、最初はもしやMobXの後継か？！とか最初は思ってたんですが、そうではないみたいですねー。（コミットログにいなかった）</p><p>最近の氏は、ReactNativeに傾倒されているご様子。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=vULQgfiQvrw\">https://www.youtube.com/watch?v=vULQgfiQvrw</a></p>\n\n    </blockquote>\n<p>こっちの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>も要チェックや！</p>\n\n</div>"
}
