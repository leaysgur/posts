{
  "title": "今さらcanvasにフリーハンドで絵が書けるライブラリ",
  "html": "\n    <blockquote>\n        <p>20161119 追記: まさか使ってる人がいると思ってなかったけどいたので、`npm`から利用できるようにしときました</p>\n\n    </blockquote>\n<p>を書いてました。<br />\nなんと7月に下書きしてたのでもはや覚えてません。</p><p>でもきっとこの世の誰かの役には立つかもしれないので、いちおう記事にしておきます。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/simple-drawing-board.js\">GitHub - leader22/simple-drawing-board.js: Just simple minimal canvas drawing.</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>特長とモチベーション</h3>\n    \n<ul>\n<li>依存ライブラリなし</li>\n<li>モバイルでも動く</li>\n<li>7KBと軽量</li>\n</ul><p>この手のcanvasのライブラリって探してみるとドンピシャなのが意外に少なくて、</p>\n\n<ul>\n<li>先人によるjQueryのプラグインとか</li>\n<li>UIパーツもセットになってるのとか</li>\n<li>めっちゃ高機能で持て余すやつとか</li>\n</ul><p>はあるんですけど、<br />\n昨今の流行りもそうですが、あれこれ詰め込むのはあまり好きじゃないし、<br />\n最低限で良いの！っていう気持ちがあったので作りました。</p><p>というわけでこちらは、<br />\nブラウザで「canvasにフリーハンドでちょろっと何か書く」っていう用途に限定したライブラリとなっております！</p>\n\n</div>\n<div class=\"section\">\n    <h3>開発時のハマりどころ / メモ</h3>\n    \n<div class=\"section\">\n    <h4>透明とは</h4>\n    <p>いわゆる消しゴム的な処理とか、綺麗さっぱり消したいときとかにどうするか。<br />\n背景に色が付いてるならその色で塗ればいいだけなんですが、背景が透明の場合。<br />\n透明で塗る、とは・・？ってなるかもですが、これ実は簡単にできます。</p><p>canvasコンテキストに、globalCompositeOperationってプロパティがあって、それを使います。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>ctx.globalCompositeOperation = <span class=\"synConstant\">'destination-out'</span>;\n</pre><p>これだけで新しく描いた部分が(正確には新しく描かれることで重なった古い部分が)消せます。<br />\n色とか別になんでもいいです。</p><p>一つ気をつけるなら、値を戻し忘れないようにすることで、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 消す準備</span>\n<span class=\"synIdentifier\">var</span> oldGCO = ctx.globalCompositeOperation;\nctx.globalCompositeOperation = <span class=\"synConstant\">'destination-out'</span>;\n\n<span class=\"synComment\">// 消す処理</span>\n\n<span class=\"synComment\">// 消し終わったら戻す</span>\nctx.globalCompositeOperation = oldGCO;\n</pre><p>これ忘れると書けない！ナンデ！ってなります。</p>\n\n    <blockquote>\n        <p><a href=\"http://www.html5.jp/canvas/ref/property/globalCompositeOperation.html\">http://www.html5.jp/canvas/ref/property/globalCompositeOperation.html</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>canvasの便利メソッド</h4>\n    <p>コード書いてて地味に便利やな・・ってなったのでメモ。</p>\n\n<div class=\"section\">\n    <h5>toDataURL</h5>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>ctx.canvas.toDataURL(<span class=\"synConstant\">'image/png'</span>);\n</pre><p>ってするだけで、そう！<br />\ncanvasの状態をbase64な画像URLで取得できてしまうんですねー。</p>\n\n<ul>\n<li>履歴の保存に使ったり</li>\n<li>書いた内容をサーバーに保存したり</li>\n</ul><p>に使えます。</p><p>これも一つ気をつけるなら、外部の画像を取り込んで表示とかしてる場合、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>Uncaught SecurityError: Failed to execute &#39;toDataURL&#39; on &#39;HTMLCanvasElement&#39;: tainted canvases may not be exported</pre><p>って言われてしまいます。</p>\n\n    <blockquote>\n        <p><a href=\"https://developer.mozilla.org/ja/docs/Web/HTML/CORS_enabled_image\">&#x753B;&#x50CF;&#x3068;&#x30AD;&#x30E3;&#x30F3;&#x30D0;&#x30B9;&#x3092;&#x30AA;&#x30EA;&#x30B8;&#x30F3;&#x9593;&#x3067;&#x5229;&#x7528;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B; - HTML: HyperText Markup Language | MDN</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h5>drawImage</h5>\n    <p>これも便利ですね！</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>ctx.drawImage(img, 0, 0, ctx.canvas.width, ctx.canvas.height)\n</pre><p>5つの引数のうち、後ろ4つは描画する範囲で、<br />\n最初の1つが描画したい内容なんですがコレがなんと。</p>\n\n<ul>\n<li>HTMLImageElement: 画像も</li>\n<li>HTMLCanvasElement: Canvasも！</li>\n<li>HTMLVideoElement: Videoも！！</li>\n</ul><p>なので再生中のvideoのシーンキャプチャも取れるっていうことです。<br />\nWebRTCとか組み合わせると夢が広がりますね。</p>\n\n    <blockquote>\n        <p><a href=\"https://developer.mozilla.org/ja/docs/Web/API/CanvasRenderingContext2D/drawImage\">CanvasRenderingContext2D.drawImage() - Web API | MDN</a></p>\n\n    </blockquote>\n<p>toDataURLした文字列を使えば、簡単にcanvasを復元できます！便利！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>座標の計算</h4>\n    <p>こういうライブラリ書いてて一番ありそうなのは、マウスの位置と描画位置がズレる・・ってやつかなーと。</p>\n\n<ul>\n<li>canvasにはwidth/heightをしっかり指定する</li>\n<li>getBoundingClientRectなりでcanvasの位置を特定する</li>\n<li>スクロール位置も加味する</li>\n</ul><p>と、マウスの位置ぴったりに描画できるようになるはず。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// canvas位置が動かないなら、getBoundingClientRect/scrollの値はキャッシュすべし</span>\nev.pageX - (ctx.canvas.getBoundingClientRect().left + <span class=\"synStatement\">window</span>.scrollX)\n</pre>\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>というわけで、何かあればお気軽にどうぞ。</p>\n\n</div>"
}
