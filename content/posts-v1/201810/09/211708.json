{
  "title": "WebRTC Meetup Tokyo #19 に行ってきたメモ #webrtcjp",
  "html": "\n    <blockquote>\n        <p><a href=\"https://atnd.org/events/100272\">&#x3010;&#x5897;&#x54E1;&#xFF01;&#x3011;WebRTC Meetup Tokyo #19 : ATND</a></p>\n\n    </blockquote>\n<p>俺の中でわかりにくい会場オブ・ザ・イヤー回。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Android/USBカメラでWebRTC by 馬場さん from インフィニテグラ社</h3>\n    \n    <blockquote>\n        <p><a href=\"https://docs.google.com/presentation/d/1r8Pxl6z9duII3hCZ5EJr048VOsi-0RcoLxPNnhfBlWs/edit#slide=id.p1\">WebRTC Meetup#19 Android&#x3068;USB&#x30AB;&#x30E1;&#x30E9;&#x3067;WebRTC - Google &#x30B9;&#x30E9;&#x30A4;&#x30C9;</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>RazVision WR</h4>\n    \n<ul>\n<li><a href=\"http://www.infinitegra.co.jp/razvision/wr.htm\">&#x30A4;&#x30F3;&#x30D5;&#x30A3;&#x30CB;&#x30C6;&#x30B0;&#x30E9;&#x682A;&#x5F0F;&#x4F1A;&#x793E; | RazVision WR</a></li>\n<li>ウェアラブルなUSBカメラ for Android</li>\n<li>PCはChromeから</li>\n<li>バックエンドはRails</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Androidで外付けUSBカメラ</h4>\n    \n<ul>\n<li>v8.xまでは要ライブラリ\n<ul>\n<li>なので自社でつくった</li>\n<li><a href=\"http://www.infinitegra.co.jp/solution/AndCamULib.htm\">&#x30A4;&#x30F3;&#x30D5;&#x30A3;&#x30CB;&#x30C6;&#x30B0;&#x30E9;&#x682A;&#x5F0F;&#x4F1A;&#x793E; | Android USB&#x30AB;&#x30E1;&#x30E9; | &#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA; &quot;AndCam-ULib Pro&quot;</a></li>\n</ul></li>\n<li>v9.xからは標準で対応</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>仕組み</h4>\n    \n<ul>\n<li>独自のアプリのWebViewからUSBカメラを呼び出し</li>\n<li>USBカメラの映像は`canvas`に描画される</li>\n<li>そこから`captureStream()`して`MediaStream`に\n<ul>\n<li>音声は普通に`getUserMedia()`</li>\n</ul></li>\n<li>それをWebRTCで送信</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>問題: 時間経過で解像度が下がってく</h4>\n    \n<ul>\n<li>たった数分でHDから1/16くらいに低下</li>\n<li>Chromeの実装に、CPUの負荷が高いと解像度を下げる処理があった\n<ul>\n<li>内蔵カメラに比べて、USBカメラはCPU使用率が高い</li>\n</ul></li>\n<li>`RTCPeerConnection`に、Chrome独自のオプションを渡して解決\n<ul>\n<li>`{ googCpuOveruseDetection: false }`</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>WebRTCの大規模配信への活用 by Chen Gongさん from Agora.io社</h3>\n    \n    <blockquote>\n        <p><a href=\"https://www.slideshare.net/ssuser9fb585/agoraio-webrtc-meetup-tokyo-118851766\">Agora.io WebRTC Meetup Tokyo</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Agora.io</h4>\n    \n<ul>\n<li><a href=\"https://offers.istudy.co.jp/agora\">Agora.io &#x30D3;&#x30C7;&#x30AA;&#x901A;&#x8A71;&#x30FB;&#x30E9;&#x30A4;&#x30D6;&#x914D;&#x4FE1;SDK | iStudy</a></li>\n<li>中国で開発してる</li>\n<li>SDKがある\n<ul>\n<li>voice / video / live</li>\n<li>mobile / web両対応</li>\n</ul></li>\n<li>2Bのユーザーがいて、300M+mins/dayで使われてる</li>\n<li>WebRTCは24.3%のCAGR（年平均成長率）の市場予測が出てる in 2016</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>WebSDK</h4>\n    \n<ul>\n<li>SafariからEdgeまで対応</li>\n<li>80M+ユーザーがいて、10M+mins/dayで使われてる\n<ul>\n<li>ソーシャルユースやゲーム関連で</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>仕組み</h4>\n    \n<ul>\n<li>ブラウザは最寄りのゲートウェイに接続\n<ul>\n<li>ゲートウェイどうしはCloudでつながってる</li>\n</ul></li>\n<li>シグナリングはNginx（socks）でやってる</li>\n<li>TURNも使える</li>\n<li>ゲートウェイは世界中にある</li>\n<li>SD-RTN: Software-Defined, Real-Time Network\n<ul>\n<li><a href=\"https://www.agora.io/en/network/\">Agora: The Global Leader in Real Time Communications</a></li>\n<li>200地点以上</li>\n<li>遅くても100msくらいでつながるように</li>\n<li>普通にP2Pするより速い</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>計測</h4>\n    \n<ul>\n<li>MediaServerやSDKの`getStats()`、ロギングで貯めてる</li>\n<li>それをDevOpsやらで利用できるようにしてる</li>\n<li>モニタリングしたりとかも\n<ul>\n<li>Precallというダッシュボードもある</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>QoSへの取り組み</h4>\n    \n<ul>\n<li>ゲートウェイとの通信品質がよくない場合（NACK / REMBとか）にも協調できる</li>\n<li>Simulcastで低解像度のものを送るようにしたりとか</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>DataChannels を利用したホワイボードアプリ開発事例 by @kunitoo , @hide_nba from 永和システムマネジメント社</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/hidenba/datachannel-woli-yong-sita-howaitobodoapurikai-fa-shi-li\">DataChannel &#x3092;&#x5229;&#x7528;&#x3057;&#x305F; &#x30DB;&#x30EF;&#x30A4;&#x30C8;&#x30DC;&#x30FC;&#x30C9;&#x30A2;&#x30D7;&#x30EA;&#x958B;&#x767A;&#x4E8B;&#x4F8B; - Speaker Deck</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Linkup</h4>\n    \n<ul>\n<li><a href=\"https://linkup.world/\">linkup</a></li>\n<li>リモートコラボレーションのツール\n<ul>\n<li>リモートワークをしている中で欲しかったツールを作った</li>\n<li>最初はappear.inを使ってたが、当時は機能に不満があった</li>\n</ul></li>\n<li>ホワイトボードの前にみんなが集まってくるイメージ\n<ul>\n<li>画面共有しながらココ！って指差したりできる</li>\n<li>ふせんを貼るUIもあったり</li>\n</ul></li>\n<li>Webhookもあるので、定例とか朝会とかにも使える</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>仕組み</h4>\n    \n<ul>\n<li>React</li>\n<li><a href=\"http://fabricjs.com/\">Fabric.js Javascript Canvas Library</a></li>\n<li>SkyWay</li>\n<li>Rails</li>\n<li>GraphQL</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>DataChannelの活用</h4>\n    \n<ul>\n<li>クライアント情報の共有\n<ul>\n<li>表示名とか</li>\n</ul></li>\n<li>ココさす機能\n<ul>\n<li>`canvas`のクリック座標を飛ばして、`video`の上に重ねて表示</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ホワイトボード機能</h4>\n    \n<ul>\n<li>手書き</li>\n<li>ふせん</li>\n<li>画像貼り付け</li>\n<li>ホワイトボードの画像ダウンロード</li>\n<li>ホワイトボードの書き込みは、それぞれオブジェクトとして管理\n<ul>\n<li>fabric.jsにそういう機能が元からある</li>\n<li>それをJSONにシリアライズして送る</li>\n<li>送られてきたほうはそれをデシリアライズして描画</li>\n<li>移動 = 削除 + 新規作成を同期する</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>LT: シングルボードコンピュータでWebRTCを使ってみた話 by @sublimer</h3>\n    \n    <blockquote>\n        <p><a href=\"https://docs.google.com/presentation/d/1BjbdzapJzIk0tp43PtSVHxD4HMfXTHJ_G0YDOqQC2E0/edit#slide=id.p\">&#x30B7;&#x30F3;&#x30B0;&#x30EB;&#x30DC;&#x30FC;&#x30C9;&#x30B3;&#x30F3;&#x30D4;&#x30E5;&#x30FC;&#x30BF;&#x3067;WebRTC&#x3092;&#x4F7F;&#x3063;&#x3066;&#x307F;&#x305F;&#x8A71; - Google &#x30B9;&#x30E9;&#x30A4;&#x30C9;</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>シングルボードコンピュータとは</h4>\n    \n<ul>\n<li>れっきとしたパソコン</li>\n<li>基盤の上に端子むき出しになってる</li>\n<li>RashPi2とROCK64\n<ul>\n<li><a href=\"https://qiita.com/sublimer/items/72ecb38dde23126135c3\">ROCK64&#x3092;&#x4F7F;&#x3063;&#x3066;&#x307F;&#x305F;</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Janus on Docker on ROCK64</h4>\n    \n<ul>\n<li>janusはSTUNの設定記述が必要</li>\n<li>小規模なSFUとしては使えそう\n<ul>\n<li>少しラグがある</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>THETA Sから360度配信</h4>\n    \n<ul>\n<li>UV4Lを使うと、Janusにつなげる部分が楽\n<ul>\n<li><a href=\"https://www.linux-projects.org/uv4l/\">UV4L &ndash; (advanced) Projects</a></li>\n<li>GETのリクエストで配信開始できる</li>\n</ul></li>\n<li>CPU使用率200％とかで、動かない場合も多かった</li>\n<li>これを使って高専プロコンの作品をつくった</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>LT: WebRTCと既存サービスを仲良くさせる方法 by @mato_kata from div社</h3>\n    \n    <blockquote>\n        <p><a href=\"https://note.mu/inoue_ryuichi/n/n531a8669f92c?magazine_key=meca7d0fd9e2a\">TECH::CAMP&#x306E;&#x30AA;&#x30F3;&#x30E9;&#x30A4;&#x30F3;&#x8CEA;&#x554F;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3092;&#xFF13;&#x30F6;&#x6708;&#x3067;&#x30EA;&#x30D7;&#x30EC;&#x30A4;&#x30B9;&#x3057;&#x305F;&#x8A71;&#xFF5C;Inoue Ryuichi&#xFF5C;note</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>TECH::CAMP</h4>\n    \n<ul>\n<li><a href=\"https://tech-camp.in/\">TECH::CAMP(&#x30C6;&#x30C3;&#x30AF;&#x30AD;&#x30E3;&#x30F3;&#x30D7;) - &#x4EBA;&#x751F;&#x3092;&#x5909;&#x3048;&#x308B;&#x30C6;&#x30AF;&#x30CE;&#x30ED;&#x30B8;&#x30FC;&#x30B9;&#x30AF;&#x30FC;&#x30EB;</a></li>\n<li>プログラミングのスクール</li>\n<li>このサービスにWebRTCを組み込んだ話\n<ul>\n<li>今までもオンラインでも参加できたが、チャットの対応だった</li>\n<li>オフラインとの差を埋めたかった</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>仕組み</h4>\n    \n<ul>\n<li>声や表情がわかるようにビデオ通話</li>\n<li>通話できないときはチャット</li>\n<li>PCを遠隔操作\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/chrome-remote-desktop/gbchcmhmhahfdphkhkmpfmihenigjmpp?hl=ja\">Chrome &#x30EA;&#x30E2;&#x30FC;&#x30C8; &#x30C7;&#x30B9;&#x30AF;&#x30C8;&#x30C3;&#x30D7; - Chrome &#x30A6;&#x30A7;&#x30D6;&#x30B9;&#x30C8;&#x30A2;</a></li>\n</ul></li>\n<li>フロントはVue、サーバーはRails（w/ ActionCable）</li>\n<li>SkyWay使ってる\n<ul>\n<li>自前でも試したけど、やはり安心感があるので</li>\n</ul></li>\n<li>既存のログイン情報を使えるように、段階的にリリースしていった\n<ul>\n<li>まずはElastiCache（Redis）で既存サービスのセッションを管理</li>\n<li>ALBで特定のドメインを新サービスへ</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>LT: THETAプラグインでWebRTCやってみた by 城さん from リコー社</h3>\n    \n    <blockquote>\n        <p><a href=\"https://qiita.com/shrhdk_/items/fa7bb0feab443e3037e8\">THETA V &#x5358;&#x4F53;&#x3067; 360&deg; &#x6620;&#x50CF;&#x3092;&#x30EA;&#x30A2;&#x30EB;&#x30BF;&#x30A4;&#x30E0;&#x914D;&#x4FE1;&#x3059;&#x308B;</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>THETA V</h4>\n    \n<ul>\n<li>中身はAndroidベース\n<ul>\n<li>画面がないけど</li>\n</ul></li>\n<li>つまりAndroidのアプリが動く\n<ul>\n<li>これがTHETAプラグイン</li>\n<li><a href=\"https://pluginstore.theta360.com/\">RICOH THETA Plug-in Store</a></li>\n</ul></li>\n<li>今まではUSBカメラモードで使って、配信PCから配信してた\n<ul>\n<li>プラグインで配信PCを捨てられる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>RICOH Live Streaming API</h4>\n    \n<ul>\n<li>SFUのサービスがある</li>\n<li>そこにTHETAからWiFiでつないでストリーミングできる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>THETA側の設定</h4>\n    \n<ul>\n<li>既存の配信アプリはそのまま使えない\n<ul>\n<li>開発はAndroidStadioから普段どおりできる</li>\n</ul></li>\n<li>THETAのシステムアプリのカメラ権限が必要\n<ul>\n<li>ブロードキャストインテント</li>\n</ul></li>\n<li>カメラのモード設定が必要\n<ul>\n<li>AndroidのCamera APIでTHETA用のパラメータを指定</li>\n</ul></li>\n<li>THETAの360度の音声がそのまま使えない\n<ul>\n<li>AudioManager APIでモノラルに指定</li>\n</ul></li>\n</ul>\n</div>\n</div>"
}
