{
  "title": "Astroで名前付きスロットが使えるのは、同系統のコンポーネント間だけ",
  "html": "<p>つまり、名前付きスロットを`.astro`なコンポーネントで使うとき、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink>---\nimport Layout from &quot;...&quot;;\n---\n\n<span class=\"synIdentifier\">&lt;</span>Layout<span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">h2</span><span class=\"synIdentifier\"> slot=</span><span class=\"synConstant\">&quot;after-header&quot;</span><span class=\"synIdentifier\">&gt;</span>After header<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">h2</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">h2</span><span class=\"synIdentifier\">&gt;</span>Default slot<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">h2</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">h2</span><span class=\"synIdentifier\"> slot=</span><span class=\"synConstant\">&quot;after-footer&quot;</span><span class=\"synIdentifier\">&gt;</span>After footer<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">h2</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>Layout<span class=\"synIdentifier\">&gt;</span>\n</pre><p>これが想定通りに動作するのは、`Layout`コンポーネントも`.astro`のときだけ、という話。</p><p>たとえば`Layout`コンポーネントが`.svelte`だったりすると、名前付きスロットに渡したコンポーネントが表示されないのです。（それどころか、名前なしスロットの部分まで表示されなかったりする）</p>\n\n    <blockquote>\n        <p>ちなみに、Astroのバージョンは`1.0.0-beta.17`のときの話です</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>仕様らしい</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/withastro/astro/issues/2238\">&#x1F41B; BUG: Named Slots are not forwarded to Svelte Components &middot; Issue #2238 &middot; withastro/astro &middot; GitHub</a></p>\n\n    </blockquote>\n<p>コンパイラの仕様なら仕方ないか・・とは思いつつ。</p><p>まとめると、</p>\n\n<table>\n    <tr>\n    <th>Where</th>\n    <th>Layout</th>\n    <th>Works?</th>\n    </tr>\n    <tr>\n    <td> .astro  </td>\n    <td> .astro       </td>\n    <td>  Yes   </td>\n    </tr>\n    <tr>\n    <td> .astro  </td>\n    <td> .svelte/.vue </td>\n    <td>   No   </td>\n    </tr>\n    <tr>\n    <td> .svelte </td>\n    <td> .svelte      </td>\n    <td>  Yes   </td>\n    </tr>\n    <tr>\n    <td> .vue </td>\n    <td> .vue      </td>\n    <td>  Yes   </td>\n    </tr>\n</table><p>ってこと。</p><p>もちろん`.svelte`の中では、他のタイプのコンポーネントは読み込めない。</p><p>名前付きではないただのスロットなら使えるし、他のタイプ同士を混ぜ込むことすらできる。</p>\n\n    <blockquote>\n        <p><a href=\"https://docs.astro.build/en/core-concepts/framework-components/#nesting-framework-components\">https://docs.astro.build/en/core-concepts/framework-components/#nesting-framework-components</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>ワークアラウンド</h3>\n    <p>幸い自分のケースは軽傷で、こんな風なコンポーネントを`.svelte`で作ってた。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> </span><span class=\"synType\">class</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;layout&quot;</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">slot</span><span class=\"synIdentifier\"> </span><span class=\"synType\">name</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;main&quot;</span><span class=\"synIdentifier\"> /&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">slot</span><span class=\"synIdentifier\"> </span><span class=\"synType\">name</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;sub&quot;</span><span class=\"synIdentifier\"> /&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">style</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">.layout</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synType\">display</span>: grid;\n    <span class=\"synType\">grid</span>-template-<span class=\"synType\">columns</span>: <span class=\"synConstant\">1</span>fr <span class=\"synConstant\">300px</span>;\n    gap: <span class=\"synConstant\">16px</span>;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">style</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>というように、2カラムにしたいだけだった。<br />\nなので、名前付き`slot`を使わずに、単一の`slot`だけでもなんとかなった。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> </span><span class=\"synType\">class</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;layout&quot;</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">slot</span><span class=\"synIdentifier\"> /&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">style</span><span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">.layout</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synType\">display</span>: grid;\n    <span class=\"synType\">grid</span>-template-<span class=\"synType\">columns</span>: <span class=\"synConstant\">1</span>fr <span class=\"synConstant\">300px</span>;\n    gap: <span class=\"synConstant\">16px</span>;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">style</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>使う側はこう。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>Layout<span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">Main</span><span class=\"synIdentifier\"> /&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">Sub</span><span class=\"synIdentifier\"> /&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>Layout<span class=\"synIdentifier\">&gt;</span>\n</pre><p>ただし、`Main`も`Sub`も単一の要素を返すという暗黙の前提が生まれてしまうけど・・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Render propsもダメ</h3>\n    <p>`.astro`はJSXモドキなので、Propsでコンポーネントごと渡せばワンチャンあるか？！って思ったけど、ぜんぜんダメだった。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>Layout\n<span class=\"synIdentifier\">  main=</span><span class=\"synConstant\">{&lt;Main</span><span class=\"synIdentifier\"> /&gt;</span>}\n  sub={<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">Sub</span><span class=\"synIdentifier\"> /&gt;</span>}\n/<span class=\"synError\">&gt;</span>\n</pre><p>めちゃめちゃコンパイルエラーがでた。</p><p>おとなしくレイアウトは`.astro`でやれって話でした。</p>\n\n</div>"
}
