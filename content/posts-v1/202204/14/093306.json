{
  "title": "Astro のコードを読む Part.1",
  "html": "\n    <blockquote>\n        <p><a href=\"https://github.com/withastro/astro\">GitHub - withastro/astro: Build fast websites, faster. &#x1F680;&#x1F9D1;&zwj;&#x1F680;&#x2728;</a></p>\n\n    </blockquote>\n<p>読みはじめた時点でのコミットは`21926278ba664d8362694efe51943968dfcb4b26`で、バージョンでいうと`1.0.0-beta.9`です。（めちゃめちゃ頻繁に更新されるので、今はもう最新ではないはず）<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>はじめに</h3>\n    <p>最近のAstroですが、順調にメジャーリリースを目指して開発中です。</p>\n\n    <blockquote>\n        <p>the official Astro v1.0.0 release will be available on June 8, 2022.<br />\n<a href=\"https://astro.build/blog/astro-1-beta-release/\">https://astro.build/blog/astro-1-beta-release/</a></p>\n\n    </blockquote>\n<p>という感じなので、コードを読むのにも丁度いいかなと。</p><p>もちろんバグやら挙動不審なところは散見されるものの、Partial HydrationできるSSGとしてのアイデンティティを確立しつつ、SSRもできるようになったりと、なかなか筋がいいなと思ってる今日この頃。</p><p>では本題へ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>リポジトリ構造</h3>\n    <p>モノレポ。開発するには`pnpm`を使ってねって書いてあった。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>❯ tree -d -L 2\n.\n├── assets\n│   ├── brand\n│   └── social\n├── examples\n│   ├── blog\n│   ├── blog-multiple-authors\n│   ├── component\n│   ├── docs\n│   ├── env-vars\n│   ├── framework-alpine\n│   ├── framework-lit\n│   ├── framework-multiple\n│   ├── framework-preact\n│   ├── framework-react\n│   ├── framework-solid\n│   ├── framework-svelte\n│   ├── framework-vue\n│   ├── integrations-playground\n│   ├── minimal\n│   ├── non-html-pages\n│   ├── portfolio\n│   ├── ssr\n│   ├── starter\n│   ├── subpath\n│   ├── with-markdown\n│   ├── with-markdown-plugins\n│   ├── with-markdown-shiki\n│   ├── with-nanostores\n│   ├── with-tailwindcss\n│   └── with-vite-plugin-pwa\n├── packages\n│   ├── astro\n│   ├── astro-prism\n│   ├── create-astro\n│   ├── integrations\n│   ├── markdown\n│   └── webapi\n├── patches\n└── scripts\n    ├── cmd\n    ├── memory\n    ├── notify\n    ├── smoke\n    ├── stats\n    └── utils</pre><p>Exampleが豊富に用意されてることが伺える！</p><p>今回の主旨としての読みたいコードは、`packages`配下にあるものたち。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>❯ tree -d -L 2 packages\npackages\n├── astro\n│   ├── components\n│   ├── src\n│   └── test\n├── astro-prism\n├── create-astro\n│   ├── src\n│   └── test\n├── integrations\n│   ├── deno\n│   ├── lit\n│   ├── netlify\n│   ├── node\n│   ├── partytown\n│   ├── preact\n│   ├── react\n│   ├── sitemap\n│   ├── solid\n│   ├── svelte\n│   ├── tailwind\n│   ├── turbolinks\n│   ├── vercel\n│   └── vue\n├── markdown\n│   └── remark\n└── webapi\n    ├── run\n    ├── src\n    └── test</pre><p>ざっくり見てみる。</p>\n\n<ul>\n<li>`astro`\n<ul>\n<li>Astroの実装の本体</li>\n</ul></li>\n<li>`astro-prism`\n<ul>\n<li>`import { Prism } from \"@astrojs/prism\";`して使う</li>\n<li>PrismでシンタックスハイライトできるAstroコンポーネント</li>\n<li>今のところ、別途でインストールしなくても使える</li>\n</ul></li>\n<li>`create-astro`\n<ul>\n<li>いわゆるスターター</li>\n<li>`npm init astro`するやつ</li>\n</ul></li>\n<li>`integrations/xxx`\n<ul>\n<li>Astroと組み合わせて使うもの</li>\n<li>レンダラとしてコンポーネント利用できるものや</li>\n<li>ライブラリとして利用するもの、Astroを拡張するものなど</li>\n</ul></li>\n<li>`markdown`\n<ul>\n<li>`@astrojs/markdown-remark`</li>\n<li>Astro用に拡張された`remark`で、Markdownを扱う各所で使われる</li>\n<li>`import { Markdown } from \"astro/components\";`でも使われてる</li>\n</ul></li>\n<li>`webapi`\n<ul>\n<li>Nodeのランタイムでも、いわゆるWebのAPIを使えるようにする自作ポリフィル集</li>\n<li>これだけでお腹いっぱいになるレベルのやつ</li>\n<li>Fetch APIまわりや、SSR時に困らないようにDOM系も</li>\n</ul></li>\n</ul><p>というわけで、</p>\n\n<ul>\n<li>`astro`</li>\n<li>`integrations/xxx`のレンダラ系</li>\n</ul><p>この2つを重点的に読んでいきたい。</p>\n\n</div>\n<div class=\"section\">\n    <h3>astroパッケージ</h3>\n    <p>まずはディレクトリ構造から。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>❯ tree -d -L 2\n.\n├── components\n├── src\n│   ├── @types\n│   ├── adapter-ssg\n│   ├── cli\n│   ├── core\n│   ├── integrations\n│   ├── runtime\n│   ├── template\n│   ├── vite-plugin-astro\n│   ├── vite-plugin-astro-postprocess\n│   ├── vite-plugin-astro-server\n│   ├── vite-plugin-build-css\n│   ├── vite-plugin-build-html\n│   ├── vite-plugin-config-alias\n│   ├── vite-plugin-env\n│   ├── vite-plugin-integrations-container\n│   ├── vite-plugin-jsx\n│   ├── vite-plugin-markdown\n│   └── vite-plugin-scripts\n└── test\n    ├── benchmark\n    └── fixtures</pre><p>Astroは、基本的にはSSGのためのCLIでありつつ、Partial HydrationするためのCSR用、SSR用など一部ランタイムを提供してる。</p><p>ビルドや開発用にはヘビーにViteを使ってて、そのためのプラグインがいっぱいある感じ。</p><p>`core`はさておき、他の枝を見ておく。</p>\n\n<div class=\"section\">\n    <h4>components</h4>\n    <p>これは、`import {} from \"astro/components\";`して使えるコンポーネントたちで、現状は3つある。</p>\n\n<ul>\n<li>`Code`</li>\n<li>`Markdown`</li>\n<li>`Debug`</li>\n</ul><p>さっきチラ見した`Prism`は、ココにコードがないだけでこの仲間。</p>\n\n    <blockquote>\n        <p><a href=\"https://docs.astro.build/en/reference/api-reference/#built-in-components\">https://docs.astro.build/en/reference/api-reference/#built-in-components</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>cli</h4>\n    <p>そのまんま、CLIとしてのコード。</p><p>CLIで利用できるサブコマンドは次のとおり。</p>\n\n<ul>\n<li>`add`\n<ul>\n<li>各integrationsを利用する設定を、`astro.config.mjs`に追加してくれるやつ</li>\n</ul></li>\n<li>`docs`\n<ul>\n<li>ドキュメントのサイトをブラウザで開くだけ（いる？！）</li>\n</ul></li>\n<li>`dev`\n<ul>\n<li>開発用のサーバーを起動する</li>\n</ul></li>\n<li>`build`\n<ul>\n<li>本番用のビルドの実行</li>\n</ul></li>\n<li>`preview`\n<ul>\n<li>SSGビルド済のファイルを、ローカルでプレビューするサーバーを建てる</li>\n</ul></li>\n<li>`check`\n<ul>\n<li>ビルドできるかチェックする</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>runtime</h4>\n    <p>`client`と`server`の2つがあった。</p><p>`client`は、Partial Hydrationを実現するために実際にクライアントサイドで実行されるものたち。Qwikのそれみたいに、`querySelector`で対象を探してイベントを貼りその時を待つ。</p>\n\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2022/01/11/142734\">Qwik&#x3068;&#x3044;&#x3046;&#x30D5;&#x30EC;&#x30FC;&#x30E0;&#x30EF;&#x30FC;&#x30AF;&#x306B;&#x3064;&#x3044;&#x3066; - console.lealog();</a></p>\n\n    </blockquote>\n<p>`server`は、ViteでのSSRで利用されるものたち。各フレームワークの判別や、`client:xxx`のハンドリングなど。</p><p>詳細は追々でよさそう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>integrations</h4>\n    <p>この後で紹介する、Astroとあわせて使うフレームワークなどのための仕組み。</p>\n\n<ul>\n<li>`astro:config:setup`</li>\n<li>`astro:config:done`</li>\n<li>`astro:server:setup`</li>\n<li>`astro:server:start`</li>\n<li>`astro:server:done`</li>\n<li>`astro:build:setup`</li>\n<li>`astro:build:start`</li>\n<li>`astro:build:done`</li>\n</ul><p>これらのタイミングにフックできるようになってる。</p>\n\n</div>\n<div class=\"section\">\n    <h4>vite-plugin-xxx</h4>\n    <p>すごいいっぱいあるので、まずはざっくり。</p>\n\n<ul>\n<li>`vite-plugin-astro`</li>\n<li>`vite-plugin-astro-postprocess`\n<ul>\n<li>`.astro`ファイルのサポート用</li>\n</ul></li>\n<li>`vite-plugin-astro-server`\n<ul>\n<li>`dev`コマンドで利用するローカルサーバー</li>\n</ul></li>\n<li>`vite-plugin-build-css`</li>\n<li>`vite-plugin-build-html`\n<ul>\n<li>`build`コマンドで利用する</li>\n<li>ViteのビルドはRollupなので、実質Rollupプラグイン</li>\n</ul></li>\n<li>`vite-plugin-config-alias`\n<ul>\n<li>パスのエイリアスを貼るアレ</li>\n</ul></li>\n<li>`vite-plugin-env`\n<ul>\n<li>Viteの`.env`サポートの拡張ver</li>\n</ul></li>\n<li>`vite-plugin-integrations-container`\n<ul>\n<li>各integrationsをViteから参照できるようにする箱</li>\n</ul></li>\n<li>`vite-plugin-jsx`\n<ul>\n<li>ViteのJSXサポートの拡張ver</li>\n<li>ReactとPreactとSolidを一様に扱うためのもの</li>\n</ul></li>\n<li>`vite-plugin-markdown`\n<ul>\n<li>`.md`ファイルのサポート用</li>\n</ul></li>\n<li>`vite-plugin-scripts`\n<ul>\n<li>記述されたJSがそれぞれどんなコンテキストで書かれたかを判別してる風</li>\n<li>まだよくわからない</li>\n</ul></li>\n</ul><p>`vite-plugin-astro-server`は`dev`コマンドでだけ利用される。</p><p>この他にも、</p>\n\n<ul>\n<li>`core/build/vite-plugin-hoisted-scripts.ts`</li>\n<li>`core/build/vite-plugin-internals.ts`</li>\n<li>`core/build/vite-plugin-pages.ts`</li>\n<li>`core/build/vite-plugin-ssr.ts`</li>\n</ul><p>という4つがあって、これは`build`コマンドのみ利用されてる。どれもビルド時に生成するファイルをよしなにするための一手間っぽい感じだった。固定のテンプレ部をくっつけて吐き出すとかそういう。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>integrations/xxxパッケージ</h3>\n    <p>Astro本体と組み合わせて使える公式パッケージ群。</p><p>npmから別途でインストールして、設定ファイルである`astro.config.mjs`でその指定をする。</p><p>ジャンルごとに大別すると、4つある。</p>\n\n<ul>\n<li>レンダラー</li>\n<li>ライブラリ</li>\n<li>アダプター</li>\n<li>その他</li>\n</ul><p>integrationsの仕組みとしては、Astroの各プロセスごとにフックが呼ばれるようになっていて、そのタイミングで実行コンテキストに介入したり、Viteの設定を更新したり、成果物をいじったりできる。</p><p>それぞれ見ていく。</p>\n\n<div class=\"section\">\n    <h4>レンダラー</h4>\n    <p>いわゆるコンポーネントに利用できるUIフレームワークたち。</p><p>単にSSGするためのテンプレートエンジンという意味では、`.astro`ファイルでコンポーネントが作れるので、絶対に必要なものではない。</p><p>クライアントでJSを使って動作させたいUIがあったりしたときに、はじめて必要になる。</p>\n\n<ul>\n<li>`lit`</li>\n<li>`preact`</li>\n<li>`react`</li>\n<li>`solid`</li>\n<li>`svelte`</li>\n<li>`vue`</li>\n</ul><p>現状はこの6種がサポートされていて、それぞれの方法でSSRした結果が、SSGで生成されて使われる。</p><p>コンセプト的には、この中の複数を一緒に使うこともできる（それぞれネストできるわけではないけど）という！<br />\n基本的にはSvelteを使うけど、あのReact製のUIライブラリが使いたくて・・みたいなのも叶うってこと。</p><p>コードも眺めてみたけど、SSRして静的なマークアップを出力するコードは6者6様なので、だいたいの雰囲気は似てるにしても、これメンテするの大変やろうな〜って感想。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ライブラリ</h4>\n    <p>場合によっては利用したくなるかもしれないものたち。</p>\n\n<ul>\n<li>`partytown`</li>\n<li>`tailwind`</li>\n<li>`turbolinks`</li>\n</ul><p>`astro.config.mjs`でViteの設定は追加できるけど、それだけで済まない場合や、もっと踏み込んで最適化されるべきな場合に、用意されるものかなーと。</p>\n\n</div>\n<div class=\"section\">\n    <h4>アダプター</h4>\n    <p>いわゆるSSR用のレイヤー。</p>\n\n<ul>\n<li>`deno`</li>\n<li>`netlify`</li>\n<li>`node`</li>\n<li>`vercel`</li>\n</ul><p>現状はこれだけしかないけど、他にも増やしていくという話だった。</p><p>これらを追加すると、SSGで静的なHTMLやらが出力される代わりに、各環境で動作するコード一式が出力されるようになる。</p><p>SSR用のアダプターを指定しない場合、デフォルトのSSG用のものが使われるようになってる。今の時点では、SSRとSSGを併用することはできない。（残念無念）</p>\n\n    <blockquote>\n        <p><a href=\"https://docs.astro.build/en/reference/adapter-reference/#building-an-adapter\">https://docs.astro.build/en/reference/adapter-reference/#building-an-adapter</a></p>\n\n    </blockquote>\n<p>Cloudflare Workers用のものはまだない。そしてざっとコードを見た感じだと、`miniflare`を使って動かすの無理では・・？という一抹の不安を感じている・・・！</p>\n\n</div>\n<div class=\"section\">\n    <h4>その他</h4>\n    <p>その他。</p>\n\n<ul>\n<li>`sitemap`</li>\n</ul><p>ライブラリっぽいけど、まあAstro拡張みたいなイメージかと。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>次回へ続く</h3>\n    <p>という感じで、概観はわかったかなーと。めちゃめちゃ外枠だけやけど。</p><p>ただまぁAstroといえば、やっぱりCLIの`dev`と`build`コマンドがメインなので、続きは暇を見てそこを追っていこうかと。</p>\n\n</div>"
}
