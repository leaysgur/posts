{
  "title": "jQuery Plugin Design Patterns",
  "html": "<p>って検索したのにコレだ！って情報が出てこなかったので、自分でメモしておく。</p>\n\n<ul>\n<li>jQueryのプラグインを書くにあたり、そもそもどういうやり方があるのか</li>\n<li>気をつけるべきポイントはどこなのか</li>\n</ul><p>みたいなことのメモ。<br />\nイマサラ感は気にしない。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>書き方は2パターン</h3>\n    \n<ul>\n<li>$(elm).hoge();</li>\n<li>$.hoge()</li>\n</ul><p>見慣れた記法ですね。<br />\njQueryさまさま。</p>\n\n<div class=\"section\">\n    <h4>$(elm).hoge();</h4>\n    <p>セレクターでひっかけてきた要素に対して何かしたい場合はコレ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 基本形</span>\n$.fn.myPlugin = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{}</span>;\n\n<span class=\"synComment\">// いっぱいあるならこうするのがきれい</span>\n$.fn.extend(<span class=\"synIdentifier\">{</span>\n  myPlugin: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{}</span>,\n  myPlugin2: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{}</span>,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// サンプル</span>\n$.fn.colorRed = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// thisが$(elm)</span>\n  <span class=\"synIdentifier\">this</span>.css(<span class=\"synConstant\">'color'</span>, <span class=\"synConstant\">'red'</span>);\n  <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>;\n<span class=\"synIdentifier\">}</span>;\n\n$(<span class=\"synConstant\">'h1'</span>).colorRed();\n</pre>\n</div>\n<div class=\"section\">\n    <h4>$.hoge()</h4>\n    <p>これは $.ajax() みたく、別に対象の要素がない場合。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 直接プロパティにくっつける</span>\n$.myPlugin = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{}</span>;\n\n<span class=\"synComment\">// extendでも一緒</span>\n$.extend(<span class=\"synIdentifier\">{</span>\n  myPlugin: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{}</span>,\n  myPlugin2: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{}</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// サンプル</span>\n$.alertNow = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">var</span> d = <span class=\"synStatement\">new</span> <span class=\"synType\">Date</span>;\n  <span class=\"synStatement\">alert</span>(d.toLocaleString());\n<span class=\"synIdentifier\">}</span>;\n$.alertNow();\n</pre>\n</div>\n</div>\n<div class=\"section\">\n    <h3>そのほか</h3>\n    \n<div class=\"section\">\n    <h4>基本</h4>\n    <p>お行儀よくするために、ちゃんとスコープはしぼる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>;(<span class=\"synIdentifier\">function</span> ($, <span class=\"synStatement\">window</span>, <span class=\"synStatement\">document</span>, <span class=\"synStatement\">undefined</span>) <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// your plugin here..</span>\n<span class=\"synIdentifier\">}</span>)(jQuery, <span class=\"synStatement\">window</span>, <span class=\"synStatement\">document</span>);\n</pre>\n</div>\n<div class=\"section\">\n    <h4>競合してないか</h4>\n    <p>どこまで厳密にやるかです。</p>\n\n<ul>\n<li>$に既に同名で拡張がされてないか</li>\n<li>$.data() とかで要素をマーキングしておく</li>\n</ul><p>などすることが多い模様。</p>\n\n</div>\n<div class=\"section\">\n    <h4>return this</h4>\n    <p>特定の要素に対してなんかするとき、チェーンさせたいですよね！ということで。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>$(elm).colorRed().addClass(<span class=\"synConstant\">'piyo'</span>);\n<span class=\"synComment\">// ってできるように</span>\n\n$.fn.colorRed = <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">this</span>.css(<span class=\"synConstant\">'color'</span>, <span class=\"synConstant\">'red'</span>);\n  <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>; <span class=\"synComment\">// jQueryなやつを返す</span>\n  <span class=\"synComment\">// return this.css('color', 'red'); でもOK</span>\n<span class=\"synIdentifier\">}</span>;\n</pre>\n</div>\n<div class=\"section\">\n    <h4>複数要素を前提に</h4>\n    <p>jQueryな要素にjQueryなことするだけなら気にしなくてもいいけど、違う場合に困ります。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>$.fn.myPlugin = <span class=\"synIdentifier\">function</span> ( options ) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>.each(<span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">new</span> Plugin(<span class=\"synIdentifier\">this</span>, options);\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>;\n</pre><p>基本的にeachしちゃっていいと思う。</p>\n\n</div>\n<div class=\"section\">\n    <h4>オプション</h4>\n    <p>直接は関係ないけど。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> defaultOption = <span class=\"synIdentifier\">{</span>\n  hoge: 1,\n  fuga: <span class=\"synConstant\">'piyo'</span>\n<span class=\"synIdentifier\">}</span>;\n\n$.extend(defaultOption, option);\n</pre><p>ってな具合に必要なオプションだけ上書きできるしコードもすっきり。<br />\nオプションのネスト具合には注意。</p>\n\n</div>\n<div class=\"section\">\n    <h4>jQuery.UIに学ぶ</h4>\n    <p>ここに書いた内容では漠然とした不安がある・・もっともっと厳密にやるべき・・な場合もきっとあるはずで、<br />\nそういうときは以下のリンクが参考になる気がしました。</p>\n\n    <blockquote>\n        <p>参考: <a href=\"https://github.com/jquery-boilerplate/jquery-patterns\">https://github.com/jquery-boilerplate/jquery-patterns</a></p>\n\n    </blockquote>\n<p>jQuery.UI の $.widget のライトなやつないかしら。</p>\n\n</div>\n<div class=\"section\">\n    <h4>イベント系にフックするなら</h4>\n    <p>jQuery.event.specialとかそのへんから見るとよさげ。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://benalman.com/news/2010/03/jquery-special-events/\" target=\"_blank\" title=\"Ben Alman » jQuery special events\">Ben Alman » jQuery special events</a></p>\n\n    </blockquote>\n\n</div>\n</div>"
}
