{
  "title": "Backboneで作ったSPAをMarionette化してみた",
  "html": "<p>こないだ作ったのをMarionette使ってみよう！というわで、Marionette化してみました。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/leader22/simple-pokedex\" target=\"_blank\" title=\"leader22/simple-pokedex\">leader22/simple-pokedex</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>かかった時間</h3>\n    <p>なんやかんや調べたりしたのと、あわせていろいろ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0\">リファクタリング</a>してたので、だいたい半日くらいかかった。<br />\nでも一回やってだいたいの流れは掴んだので、次はその半分くらいでいけそう。<br />\nまあモデルもコレクションもその他諸々、ビュー周り以外は全部そのままやしね。</p><p>次は最初からMarionetteでってなったら、Backbone版を作ったときの2/3くらいでいけそう。<br />\n効率は上がるけど、まあこの程度の規模ならあんま変わらんですね・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>ハマったとこ</h3>\n    \n<div class=\"section\">\n    <h4>モデルもコレクションも使わないビュー</h4>\n    <p>ってあると思うんですけど。<br />\nでもデータはなんかしらあって、それを表示したい。<br />\nそんな場合に、どうやってデータをテンプレに渡すか。</p><p>こういうHTMLで、</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;my-region&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">id</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;my-view&quot;</span><span class=\"synIdentifier\"> </span><span class=\"synType\">type</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;x-my-tmpl&quot;</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synSpecial\">  myVar: &lt;%= myVar %&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>こういうjs書けば良さそう。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> App = <span class=\"synStatement\">new</span> Marionette.Application();\n\n<span class=\"synComment\">// ...</span>\n\n<span class=\"synIdentifier\">var</span> View = Marionette.ItemView.extend(<span class=\"synIdentifier\">{</span>\n  template: <span class=\"synConstant\">'#my-view'</span>,\n  <span class=\"synComment\">// serializeDataをオーバーライドして、データをcompileに渡す</span>\n  serializeData: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">var</span> data = <span class=\"synIdentifier\">{</span> myVar: <span class=\"synConstant\">'hoge'</span> <span class=\"synIdentifier\">}</span>;\n    <span class=\"synStatement\">return</span> data;\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synComment\">// もしくは、templateをオーバーライドして固定のテンプレを返しちゃう</span>\n  <span class=\"synComment\">/*</span>\n<span class=\"synComment\">  template: function () {</span>\n<span class=\"synComment\">    var $tmpl = $('#my-view').html();</span>\n<span class=\"synComment\">    var data = { myVar: 'hoge' };</span>\n<span class=\"synComment\">    return _.template($tmpl, data);</span>\n<span class=\"synComment\">  }</span>\n<span class=\"synComment\">  */</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// ...</span>\n\nApp.addRegions(<span class=\"synIdentifier\">{</span>\n  myRegion: <span class=\"synConstant\">'#my-region'</span>\n<span class=\"synIdentifier\">}</span>);\nApp.myRegion.show(<span class=\"synStatement\">new</span> View());\n</pre>\n<div class=\"section\">\n    <h5>もしくは</h5>\n    <p>ItemViewじゃなくて、Viewを使うってやり方もいけました。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">var</span> View = Marionette.View.extend(<span class=\"synIdentifier\">{</span>\n  template: $(<span class=\"synConstant\">'#my-view'</span>).html(),\n  render: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">var</span> tmpl = _.template(<span class=\"synIdentifier\">this</span>.template);\n    <span class=\"synIdentifier\">var</span> data = <span class=\"synIdentifier\">{</span> myVar: <span class=\"synConstant\">'hoge'</span> <span class=\"synIdentifier\">}</span>;\n    <span class=\"synIdentifier\">this</span>.$el.html(<span class=\"synIdentifier\">this</span>.template, data);\n    <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n<span class=\"synComment\">// ...</span>\n</pre><p>しかしもはや！</p>\n\n    <blockquote>\n        <p>Note: The Marionette.View type is not intended to be used directly. It exists as a base view for other view types to be extended from, and to provide a common location for behaviors that are shared across all views.</p>\n\n    </blockquote>\n<p>まあでも公式がこう申されておるので、ItemView使って、serializeDataをオーバーライドするのが良いっぽいね。<br />\nあとはMarionette.Renderer.renderをオーバーライドしてたらしてたで・・とか、やり方は色々編み出せそう。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JST\">JST</a>使いたい</h4>\n    <p>これは一応公式にも記載がありました。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/marionettejs/backbone.marionette/wiki/Using-jst-templates-with-marionette\" target=\"_blank\" title=\"Using jst templates with marionette · marionettejs/backbone.marionette Wiki\">Using jst templates with marionette · marionettejs/backbone.marionette Wiki</a></p>\n\n    </blockquote>\n<p>こんなコードで、Backbone.Marionette.Renderer.render を上書きすれば良いとのこと。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// Backbone.Marionette.Renderer.renderをオーバーライド</span>\nBackbone.Marionette.Renderer.render = <span class=\"synIdentifier\">function</span>(template, data)<span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">if</span> (!JST<span class=\"synIdentifier\">[</span>template<span class=\"synIdentifier\">]</span>) <span class=\"synStatement\">throw</span> <span class=\"synConstant\">&quot;Template '&quot;</span> + template + <span class=\"synConstant\">&quot;' not found!&quot;</span>;\n  <span class=\"synStatement\">return</span> JST<span class=\"synIdentifier\">[</span>template<span class=\"synIdentifier\">]</span>(data);\n<span class=\"synIdentifier\">}</span>\n</pre><p>あとはビューのtemplateで、なんてテンプレ名かを文字列で渡すだけでOK。<br />\n※先述のモデルもコレクションも使わないテンプレで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JST\">JST</a>使いたい場合は、selializeDataを上書きするパターンしか使えません。</p><p>とはいえどっかで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JST\">JST</a>読みこめば、もうグローバルに触れるので、なんとでもなるわなーって気もする。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>思ったこと</h3>\n    <p>いわゆるBackbone使って何か作る！ってなって、まず何から・・？ってなる感が薄くなったのはいいなと思いました。<br />\nあとはリージョンが変われば古いリージョンのイベントはがしてくれるとか、そのへんはMarionetteさまを信じて祈りを捧げることで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BF%B4%CD%FD%C5%AA\">心理的</a>負担はだいぶ下がる気がする。<br />\nもはやSPA作るの、別に難しくないですね。（作るだけで良いなら</p><p>やっぱキモはリージョンとビューの重みづけですかねー。</p>\n\n    <blockquote>\n        <p>正直、アプリケーション単位でしかリージョンもないし、ビューが入れ子で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A4%AA%A4%EC%A4%AC%A4%A2%A4%A4%A4%C4%A4%C7%A4%A2%A4%A4%A4%C4%A4%AC%A4%AA%A4%EC%A4%C7\">おれがあいつであいつがおれで</a>みたいなカオティックゾーンでは元からないので、真価は発揮できてない感はあります。</p>\n\n    </blockquote>\n<p>気になったトコとしては、こういうライブラリのお作法に従って、どこまで行儀よくコードを書くべきなのか否か問題。<br />\n1つのDOMつかんで、都度都度なんかするのすらもビューとしてやるべきなのか、ただの便利関数にしちゃって良いのかとか、結構悩みました。<br />\nこのへん、どう着地するのが一番しあわせになれるんでしょうねー。</p><p>あと、Require.jsとうまく付き合うためにどうすればええの論ももやもやあるのですが、それはまたの機会に・・。</p>\n\n</div>"
}
