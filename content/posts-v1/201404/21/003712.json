{
  "title": "Backbone.Marionetteのコード読んで日本語コメントをつけた",
  "html": "<p>バージョンは1.8.1です。<br />\n(この記事書いてる間に最新バージョンが1.8.2になっててちょっとかなしかった。)</p><p>Marionetteにはソースコメントつきのコードが見れるとこがあるのです。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://marionettejs.com/docs/backbone.marionette.html\" target=\"_blank\" title=\"backbone.marionette.js\">backbone.marionette.js</a></p>\n\n    </blockquote>\n<p>それを、こう。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://leader22.github.io/backbone.marionette-ja/\" target=\"_blank\" title=\"backbone.marionette-ja.js\">backbone.marionette-ja.js</a></p>\n\n    </blockquote>\n<p>普通にBackbone使うより良いらしいと聞くものの、実際にどんなもんなのかはわからず・・。<br />\n検索しても日本語の情報がほとんどないので、とりあえずソース読んでみようということで。</p><p>どうせ読むならコメントを日本語にしよう！と思い。<br />\n訳自体は直訳気味のものが多いので、ソース読んでみての学びも一緒にメモっておく。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Backbone.Marionetteとは</h3>\n    <p>公式にも説明があるように、Backbone.jsをベースにしたライブラリで、<br />\njsで大規模なアプリケーションを作る！ってケースに「よくある実装パターン」を集めたもの。</p>\n\n<div class=\"section\">\n    <h4>依存するライブラリ</h4>\n    <pre class=\"code\" data-unlink>Marionette\n　└Backbone.BabySitter\n　└Backbone.Wreqr\n　　└Backbone\n　　　└underscore\n　　　└jQuery</pre><p>てな感じかな？<br />\nばうわー いんすとーる まりおねっと すれば全部はいります。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Backbone.BabySitter</h4>\n    <p>Backbone.Viewの親子関係を管理するコンテナを提供するライブラリ。<br />\nコードも150行くらいしかなくて、すぐに読めると思います。</p>\n<pre class=\"code\" data-unlink><span class=\"synComment\">// いつもどおりビューを定義して</span>\n<span class=\"synIdentifier\">var</span> SomeView = Backbone.View.extend(<span class=\"synIdentifier\">{}</span>);\n<span class=\"synIdentifier\">var</span> AnotherView = Backbone.View.extend(<span class=\"synIdentifier\">{}</span>);\n<span class=\"synComment\">// インスタンス作って</span>\n<span class=\"synIdentifier\">var</span> someView = <span class=\"synStatement\">new</span> SomeView();\n<span class=\"synIdentifier\">var</span> anotherView = <span class=\"synStatement\">new</span> AnotherView();\n\n<span class=\"synComment\">// BabySitterはBackbone.ChildViewContainerをエクスポートするので</span>\n<span class=\"synIdentifier\">var</span> container = <span class=\"synStatement\">new</span> Backbone.ChildViewContainer();\n\n<span class=\"synComment\">// 管理をお任せする</span>\ncontainer.add(someView);\ncontainer.add(anotherView);\n</pre><p>コンテナにaddして、使うときはfindして、いらなくなったらremoveして・・みたいな。<br />\nそれだけ。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/marionettejs/backbone.babysitter\" target=\"_blank\" title=\"marionettejs/backbone.babysitter\">marionettejs/backbone.babysitter</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>Backbone.Wreqr</h4>\n    <p>これはBackboneとMarionetteアプリケーションの橋渡しをするモジュール群。<br />\nBackbone.Eventsを継承したイベントのハンドラ、メッセージングの仕組みとか。</p><p>またも公式のコードを拝借すると、</p>\n<pre class=\"code\" data-unlink><span class=\"synIdentifier\">var</span> vent = <span class=\"synStatement\">new</span> Backbone.Wreqr.EventAggregator();\n\nvent.on(<span class=\"synConstant\">&quot;foo&quot;</span>, <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">&quot;foo event&quot;</span>);\n<span class=\"synIdentifier\">}</span>);\n\nvent.trigger(<span class=\"synConstant\">&quot;foo&quot;</span>); <span class=\"synComment\">// &quot;foo event&quot;</span>\n</pre><p>みたいなイベントハンドラさんや、</p>\n<pre class=\"code\" data-unlink><span class=\"synIdentifier\">var</span> commands = <span class=\"synStatement\">new</span> Backbone.Wreqr.Commands();\n\ncommands.setHandler(<span class=\"synConstant\">&quot;foo&quot;</span>, <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">&quot;the foo command was executed&quot;</span>);\n<span class=\"synIdentifier\">}</span>);\n\ncommands.execute(<span class=\"synConstant\">&quot;foo&quot;</span>); <span class=\"synComment\">// &quot;the foo command was executed&quot;</span>\n</pre><p>みたいなコマンドを固めておくやつ、</p>\n<pre class=\"code\" data-unlink><span class=\"synIdentifier\">var</span> reqres = <span class=\"synStatement\">new</span> Backbone.Wreqr.RequestResponse();\n\nreqres.setHandler(<span class=\"synConstant\">&quot;foo&quot;</span>, <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> <span class=\"synConstant\">&quot;foo requested. this is the response&quot;</span>;\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synIdentifier\">var</span> result = reqres.request(<span class=\"synConstant\">&quot;foo&quot;</span>);\nconsole.log(result); <span class=\"synComment\">// &quot;foo requested. this is the response&quot;</span>\n</pre><p>というようなリクエストに対してレスポンスする受け口を用意できる、と。</p><p>コードは割愛しますが、この3つをRadio/Channelって概念で分けて使えたりもする。<br />\nなんしか、Backbone.Eventsの拡張版ぽい。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/marionettejs/backbone.babysitter\" target=\"_blank\" title=\"marionettejs/backbone.babysitter\">marionettejs/backbone.babysitter</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>Backbone.Marionette</h4>\n    <p>このBabySitterとWreqrを使って、Backboneあるあるをふんだんに実装したのがMarionetteであると。</p><p>以下でくわしく。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Marionette</h3>\n    <p>BabySitterとWreqrをそれなりに使ってどうこうする・・というよりは、<br />\nMarionetteとしても実装がだいぶ存在してて、むしろコードの行数でいうと、ほとんどがそうでした。</p>\n\n<ul>\n<li>BabySitterが150行</li>\n<li>Wreqrが400行</li>\n<li>Marionetteが2500行</li>\n</ul><p>まあ規模感の参考まで。</p>\n\n    <blockquote>\n        <p>そもそもココで気付くべきやった。<br />\n2500行の実装にコメント打つとか作者がやるもんや・・。</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Marionetteが提供する機能</h4>\n    <p>ドキュメントは、公式のGithubにまとまってます。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/marionettejs/backbone.marionette/tree/master/docs\" target=\"_blank\" title=\"backbone.marionette/docs at master · marionettejs/backbone.marionette\">backbone.marionette/docs at master · marionettejs/backbone.marionette</a></p>\n\n    </blockquote>\n<p>でも多すぎて心折れるので、ざっと機能群をまとめておくと以下。<br />\nまとめの単位は私の独断と偏見です！</p>\n\n<ul>\n<li>ビュー</li>\n<li>リージョン</li>\n<li>ビヘイビア</li>\n<li>アプリケーション</li>\n<li>ルーター</li>\n<li>コールバック</li>\n</ul><p>日本語にするとコレジャナイ感が半端ない！<br />\nけど紛らわしいので無理やり押し通す。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ビュー</h4>\n    <p>いわゆるビューで、4種類ある模様。<br />\n(ほんとは5種類で、全ての元となる\"View\"ってのがあるけど。)</p>\n\n<ul>\n<li>ItemView: 単一のモデル/コレクションを使うビュー(いわゆる子)</li>\n<li>CollectionView: コレクションを扱うビューで、イテレートするそれぞれはItemViewのインスタンスになる(いわゆる親)</li>\n<li>CompositeView: 上記2つをまとめて扱いたいときに使うビュー(いわゆる親戚)</li>\n<li>Layout: 後述するリージョンを内包するItemViewに準ずるビュー</li>\n</ul><p>それぞれその時々で最適なやつを使うべしとのこと。</p>\n\n<div class=\"section\">\n    <h5>コードすっきり</h5>\n    <p>なんとBackbone.Viewでやってた、<br />\nrenderで自身のelにテンプレをコンパイルしてデータとって・・の実装を書かなくても、これでOK。</p>\n<pre class=\"code\" data-unlink><span class=\"synComment\">// Marionette</span>\n<span class=\"synIdentifier\">var</span> MyView1 = Backbone.Marionette.ItemView.extend(<span class=\"synIdentifier\">{</span>\n  template: <span class=\"synConstant\">'#my-template'</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// Backbone</span>\n<span class=\"synIdentifier\">var</span> MyView2 = Backbone.View.extend(<span class=\"synIdentifier\">{</span>\n  template: <span class=\"synConstant\">'#my-template'</span>,\n    render: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">var</span> inner = $(<span class=\"synIdentifier\">this</span>.template).html();\n      <span class=\"synIdentifier\">this</span>.$el.html(inner);\n      <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>;\n    <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>その差は歴然ーというやつですね。<br />\nそのうえテンプレのコンパイルとかなんやかんやまとめてやっといてくれるイケメン。</p><p>ビューの定義時にまとめて設定できるものは他にもあるます。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.view.md\" target=\"_blank\" title=\"backbone.marionette/docs/marionette.view.md at master · marionettejs/backbone.marionette\">backbone.marionette/docs/marionette.view.md at master · marionettejs/backbone.marionette</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h5>@ui</h5>\n    <p>これは便利ー。</p>\n<pre class=\"code\" data-unlink>MyView = Backbone.Marionette.ItemView.extend(<span class=\"synIdentifier\">{</span>\n  ui: <span class=\"synIdentifier\">{</span>\n    cat: <span class=\"synConstant\">&quot;.dog&quot;</span>,\n    checkbox: <span class=\"synConstant\">&quot;input[type=checkbox]&quot;</span>\n  <span class=\"synIdentifier\">}</span>,\n  events: <span class=\"synIdentifier\">{</span>\n    <span class=\"synConstant\">&quot;click @ui.cat&quot;</span>: <span class=\"synConstant\">&quot;bark&quot;</span> <span class=\"synComment\">// &quot;click .dog&quot;したのと同じ</span>\n  <span class=\"synIdentifier\">}</span>,\n  onRender: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">if</span> (<span class=\"synIdentifier\">this</span>.model.get(<span class=\"synConstant\">'selected'</span>)) <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">this</span>.ui.checkbox.addClass(<span class=\"synConstant\">'checked'</span>); <span class=\"synComment\">// this.ui.でjQueryオブジェクトが取れるように</span>\n    <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n</pre>\n</div>\n<div class=\"section\">\n    <h5>CompositeViewってなんぞ問題</h5>\n    <p>いい記事がありました！</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://lxyuma.hatenablog.com/entry/2013/12/03/230652\" target=\"_blank\" title=\"Marionette.jsのCompositeViewって、どこで使えばいいの？問題 - lxyuma BLOG\">Marionette.jsのCompositeViewって、どこで使えばいいの？問題 - lxyuma BLOG</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h5>Layoutってなんぞ問題</h5>\n    <p>いい記事がありました！！</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://stackoverflow.com/questions/10521266/whats-the-difference-between-a-marionette-layout-and-a-region\" target=\"_blank\" title=\"backbone.js - What&apos;s the difference between a Marionette Layout and a Region? - Stack Overflow\">backbone.js - What&apos;s the difference between a Marionette Layout and a Region? - Stack Overflow</a></p>\n\n    </blockquote>\n<p>リージョンってやつとの兼ね合いを押さえる必要があるっぽいですね。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>リージョン</h4>\n    <p>ビューと違ってテンプレートやDOMは持たず、自らに属するビュー達の表示/非表示など\"管理\"に徹するものぽい。<br />\n各ビューではなく、リージョン側で表示/非表示をコントロールすることで、ビューがゴテゴテになるのを防ぐことができる、と。</p>\n<pre class=\"code\" data-unlink>var myView = new MyView();\n\n// showするとview.render()されて、DOMに落ちる\nMyApp.mainRegion.show(myView);\n\n// closeでDOMからさよなら\nMyApp.mainRegion.close();</pre><p>そしてこのリージョンをも管理するリージョンマネージャーってのもあります。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ビヘイビア</h4>\n    <p>つい最近のバージョンで追加されたそうな。</p><p>いろんなViewで似たような処理があった場合に、<br />\n「こいつら共通化できるやろ！・・けど継承するような関係ではないし、うーん。」<br />\nって時に使うといいよってな実装。</p><p>説明するより・・、<br />\nいい記事がありました！！！</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://blog.koba04.com/post/2014/03/23/marionette-behaivors/\" target=\"_blank\" title=\"Marionette Behaivors (1.7 feature) - blog.koba04.com\">Marionette Behaivors (1.7 feature) - blog.koba04.com</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>アプリケーション</h4>\n    <p>誰しもが作るであろうアプリケーションのオブジェクトです。</p>\n<pre class=\"code\" data-unlink><span class=\"synIdentifier\">var</span> MyApp = <span class=\"synStatement\">new</span> Backbone.Marionette.Application();\n\n<span class=\"synComment\">// addInitializerで処理を積んでおいて</span>\nMyApp.addInitializer(<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// さらにあっちこっちで積んでおいて</span>\nMyApp.addInitializer(<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">new</span> MyAppRouter();\n  Backbone.history.start();\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// startしたら積んだ処理が随時走ってアプリ起動！</span>\nMyApp.start();\n</pre><p>で、この本丸はWreqrの機能も継承して持ってるので、</p>\n<pre class=\"code\" data-unlink>MyApp.vent.on(<span class=\"synConstant\">'hoge'</span>, <span class=\"synIdentifier\">function</span>(someData)<span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">'Received'</span>, someData);\n<span class=\"synIdentifier\">}</span>);\n\nMyApp.vent.trigger(<span class=\"synConstant\">'hoge'</span>, <span class=\"synConstant\">'YEAHHHH'</span>); <span class=\"synComment\">// Recieved YEAHHH</span>\n</pre><p>ってなグローバルな用途にも使えて便利。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h4>ルーター</h4>\n    <p>Backbone.Routerより用途が明確になった感じかな？</p>\n<pre class=\"code\" data-unlink><span class=\"synIdentifier\">var</span> MyController = Marionette.Controller.extend(<span class=\"synIdentifier\">{</span>\n  doFoo: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{}</span>,\n  doBar: <span class=\"synIdentifier\">function</span>(id) <span class=\"synIdentifier\">{}</span>\n<span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">var</span> myController = <span class=\"synStatement\">new</span> MyController();\n\n<span class=\"synIdentifier\">var</span> MyRouter = Marionette.AppRouter(<span class=\"synIdentifier\">{</span>\n  controller: myController,\n  appRoutes: <span class=\"synIdentifier\">{</span>\n    <span class=\"synConstant\">&quot;foo&quot;</span>: <span class=\"synConstant\">&quot;doFoo&quot;</span>, <span class=\"synComment\">// myController.doFoo のこと</span>\n    <span class=\"synConstant\">&quot;bar/:id&quot;</span>: <span class=\"synConstant\">&quot;doBar&quot;</span> <span class=\"synComment\">// myController.doBar のこと</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n<span class=\"synStatement\">new</span> MyRouter();\n</pre><p>さり気なく使ってみたけど、MarionetteにはControllerもあります。</p>\n\n</div>\n<div class=\"section\">\n    <h4>コールバック</h4>\n    <p>このカタカナのコレジャナイ感！<br />\nようは、コールバックをよしなに貯めて実行できるキューみたいなのがあります。</p>\n<pre class=\"code\" data-unlink><span class=\"synIdentifier\">var</span> callbacks = <span class=\"synStatement\">new</span> Backbone.Marionette.Callbacks();\n\ncallbacks.add(<span class=\"synIdentifier\">function</span>(options)<span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">alert</span>(<span class=\"synConstant\">&quot;I'm a callback with &quot;</span> + options.value + <span class=\"synConstant\">&quot;!&quot;</span>);\n<span class=\"synIdentifier\">}</span>);\n\ncallbacks.run(<span class=\"synIdentifier\">{</span>value: <span class=\"synConstant\">&quot;options&quot;</span><span class=\"synIdentifier\">}</span>, someContext);\n</pre><p>addしてaddして..さいごにrunする。<br />\naddする度にコンテキストを指定できるので、1つインスタンス作れば全部いけそう。<br />\n内部的には、初期化処理を貯めてるシーンが多かったです。</p>\n\n</div>\n<div class=\"section\">\n    <h4>他にも内部では</h4>\n    <p>ここで挙げた以外にも、Marionetteオブジェクトにはいろいろくっついてます。<br />\n御大へのリンク、置いておきます。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://github.com/marionettejs/backbone.marionette\" target=\"_blank\" title=\"marionettejs/backbone.marionette\">marionettejs/backbone.marionette</a></p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>コード読んでみて</h3>\n    \n<div class=\"section\">\n    <h4>使い方</h4>\n    <p>大枠を知りたい場合に、コードを一から全部読むのは時間かかるので、あまりオススメしないです。(普通はせーへんか<br />\nわかる人はサクッとをわかるんでしょうが(●･̆⍛･̆●)</p><p>バージョンはだいぶ古いですが、この動画はわかりやすいと思ったのでおすすめです。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"https://tutsplus.com/lesson/backbone-marionette/\" target=\"_blank\" title=\"Tuts+ Premium Course: Advanced Backbone Patterns and Techniques - Backbone.Marionette\">Tuts+ Premium Course: Advanced Backbone Patterns and Techniques - Backbone.Marionette</a></p>\n\n    </blockquote>\n\n<ul>\n<li>アプリケーションつくる</li>\n<li>モデルとかコレクションとか用意する</li>\n<li>ビューとか用意する</li>\n<li>リージョンとしてビューをアプリケーションにくっつける</li>\n<li>いざ起動</li>\n</ul><p>わかりやすいですねー。</p>\n\n</div>\n<div class=\"section\">\n    <h4>感想</h4>\n    <p>Backboneの拡張性って偉大やな・・って思う程にBackboneを使い倒す気概が感じられるコードでした。<br />\nただコードとしては読めるけど、なんでそういうコードになってるのかまで押さえないと使いこなせないなーという感じ。</p><p>基本的にMarionetteのクラスは全部extendできるようになってるとか、<br />\nonShow/onCloseなどなどライフサイクルが一定してて扱いやすい風とか、<br />\nなんだかんだBackbone.Eventsってすげーなって感じを受けました。</p><p>あと、複数人で書いてるからか、コードのスタイルとコメントのスタイルが統一されてないのが気になるｗ</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>Backbone的デザパタ欲しさにMarionetteに手を出したものの、<br />\n今度はMarionette的デザパタが欲しくなっｔ・・・。</p><p>いかんせんとっつきにくさが残るのは、サンプルがあまり見当たらないからかね。<br />\nこんど実際使ってみようと思いますです。</p><p>リージョンとかビューまわりことがもっと知りたいなーと。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://www.slideshare.net/ryumatsukano/backbonemarionette\" target=\"_blank\" title=\"実践Backbone.Marionette 現場の悩みと解決まで\">実践Backbone.Marionette 現場の悩みと解決まで</a></p>\n\n    </blockquote>\n\n</div>"
}
