{
  "title": "Node学園 30時限目 に行ってきたメモ #tng30",
  "html": "\n    <blockquote>\n        <p><a href=\"https://nodejs.connpass.com/event/83639/\">Node&#x5B66;&#x5712; 30&#x6642;&#x9650;&#x76EE; - connpass</a></p>\n\n    </blockquote>\n<p>＼祝30回／</p><p>リクルートの41F、いっつも2回目のエレベーター乗り換えあたりで迷子になりそうになる・・。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>祝Node-v10リリース。これまでのNodeの振り返り by Shigeki Ohtsu</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/shigeki/zhu-node-v10ririsu-koremadefalsenodefalsezhen-rifan-ri\">&#x795D;Node-v10&#x30EA;&#x30EA;&#x30FC;&#x30B9; &#x3053;&#x308C;&#x307E;&#x3067;&#x306E;Node&#x306E;&#x632F;&#x308A;&#x8FD4;&#x308A; // Speaker Deck</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>Node.js</h4>\n    \n<ul>\n<li>semverで運用</li>\n<li>v4.xは4/30でEndOfLife\n<ul>\n<li>LTSになったバージョンは2年半くらいがサポート期間</li>\n</ul></li>\n<li>あらゆるOS x CPUで動く</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Node v10でアップデートされるV8の新機能</h4>\n    \n<ul>\n<li>V8が6.2から6.6に</li>\n<li>AsyncItelator\n<ul>\n<li>`for await (const x of y) {}`できるように</li>\n<li>Stream系の処理と相性がよい</li>\n</ul></li>\n<li>`Promise.prototype.finally()`</li>\n<li>RegExp\n<ul>\n<li>キャプチャグループに名前付けられるやつ</li>\n<li>Unicodeプロパティ</li>\n</ul></li>\n<li>`catch(err) {}` を `catch {}`と書けるように</li>\n<li>`String.prototype.trim(Start|End)()`</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Node v10.x</h4>\n    \n<ul>\n<li>Depricatedいろいろ\n<ul>\n<li>`require('assert').strict`</li>\n<li>`util.type.isXxx()`を使おう</li>\n</ul></li>\n<li>`Error.code`が付与されるように\n<ul>\n<li>今後は`message`ではなく`code`を見るように</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>クラス図から読む</h4>\n    \n<ul>\n<li><a href=\"https://github.com/darai0512/node-class-diagram\">GitHub - darai0512/node-class-diagram: Licensed by Creative Commons.</a></li>\n<li>EventEmitter\n<ul>\n<li>ついに`off()`が`removeListener()`のエイリアスに</li>\n<li>`_events`の代わりに`rawListener()`</li>\n</ul></li>\n<li>Stream\n<ul>\n<li>ReadableStreamに`Symbol.asyncIterator`が（Experimental）</li>\n<li>`finished`により途中でabortされても拾えるように</li>\n<li>`pipeline()`でまとめてエラー処理</li>\n</ul></li>\n<li>net / http</li>\n<li>fs\n<ul>\n<li>`require('fs/promises')`で、Promise化されたものが使えるように</li>\n<li>`util.promisify()`しなくてもネイティブ化されたパフォーマンスの良いもの</li>\n</ul></li>\n<li>assert\n<ul>\n<li>`require('assert').strict`</li>\n<li>`null`と`undefined`が判別できたり</li>\n</ul></li>\n<li>isXxx\n<ul>\n<li>`process.binding('util').isXxx()`が、`util.types.isXxx()`に</li>\n</ul></li>\n<li>`URL`, `URLSearchParams`が追加</li>\n<li>他にもいろいろ\n<ul>\n<li>N-API</li>\n<li>ESM</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>振り返り</h4>\n    \n<ul>\n<li>2009年に誕生</li>\n<li>2015年にio.jsの分裂、からのNode Foundation</li>\n<li>v4.xがEOLになることで、はじめてリリースラインを全うしたことに\n<ul>\n<li>最初は誰も3年メンテできると思ってなかった</li>\n</ul></li>\n<li>おこった変化\n<ul>\n<li>民主化によってコントリビューターが増えた</li>\n</ul></li>\n<li>semver, LTS\n<ul>\n<li>V8（Google）の協力も大きい</li>\n</ul></li>\n<li>Issueが増えたり要求が増えたりいい話ばかりではない\n<ul>\n<li>新しいことをやるのも難しい</li>\n</ul></li>\n</ul><p>過渡期を越えたNode.jsのこれからに乞うご期待！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>off the main thread with workers by Mariko Kosaka</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/kosamari/off-the-main-thread-with-workers\">Off the main thread with workers ! // Speaker Deck</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>ES2018</h3>\n    \n<ul>\n<li>ES2018のDraftが固まった\n<ul>\n<li>細かい部分を修正したり、利権まわり</li>\n<li>あとは承認されるのを待つのみ</li>\n</ul></li>\n<li>〜APIの紹介は割愛〜</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>Smoosh事件</h3>\n    \n<ul>\n<li>`flatten`がMooToolsの名前と衝突した</li>\n<li>`smoosh`にリネームすることに・・</li>\n<li>今後もNOT break the Webな方向になりそう</li>\n<li>TC39のイメージを向上させる動きも\n<ul>\n<li><a href=\"https://github.com/tc39/tc39-web-draft\">GitHub - tc39/tc39-web-draft: Get involved in specifying ECMAScript</a></li>\n</ul></li>\n</ul><p>ここからが発表の本題。</p>\n\n<div class=\"section\">\n    <h4>Worker</h4>\n    \n<ul>\n<li>JavaScriptでマルチスレッド処理をする</li>\n<li>惑星DOMから打ち上げられた衛星WebWorker</li>\n<li>最近のWebアプリはだいたい非同期で取ってきたJSONをこねて画面を出す\n<ul>\n<li>そこをWorkerでやればワンチャン・・？</li>\n<li>って思ったけど、使いづらい</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ポイント1</h4>\n    \n<ul>\n<li>スケジューリングや複数のWorkerを協調させる部分は自前でやるしかない\n<ul>\n<li>Parallel JSというプロポーザルもあった</li>\n<li>C#とかRxKotlinやらErlangから学べないか模索中</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ポイント2</h4>\n    \n<ul>\n<li>`postMessage()`以外で結果を共有できない\n<ul>\n<li>さよなら`SharedArrayBuffer`</li>\n<li><a href=\"https://webkit.org/blog/7846/concurrent-javascript-it-can-work/\">Concurrent JavaScript: It can work! | WebKit</a></li>\n<li>`TransferableStream`</li>\n</ul></li>\n<li>ライブラリもいろいろある\n<ul>\n<li><a href=\"https://github.com/GoogleChromeLabs/comlink\">https://github.com/GoogleChromeLabs/comlink</a></li>\n<li><a href=\"https://github.com/GoogleChromeLabs/clooney\">https://github.com/GoogleChromeLabs/clooney</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ポイント3</h4>\n    \n<ul>\n<li>WebWorkerは別ファイルにしないといけなくて面倒</li>\n<li>JavaScript Tagged Blocks\n<ul>\n<li>Tagged Templateみたいに書くと、その部分が別スレッドで動くように</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ポイント4</h4>\n    \n<ul>\n<li>スレッドモデルかタスクモデルか</li>\n</ul><p>マルチスレッドでどういうコードを書きたいか・・ブラウザ作ってる人たちは、Webエンジニアのご意見を絶賛募集中だそうです！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>LAPIs by Jxck</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/jxck/web-over-layered-apis\">web over layered apis // Speaker Deck</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h4>LAPIs</h4>\n    \n<ul>\n<li>LayeredAPIs</li>\n<li>2014年頃にあったExtensibleWebという動き</li>\n<li>高レイヤーな部分は標準化のスコープではやらない</li>\n<li>低レイヤーな部分を標準化する = 整理する\n<ul>\n<li>Encoding, URL, Fetch, Stream, CustomElement, etc.</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>AsyncLocalStoreage</h4>\n    \n<ul>\n<li>WorkerでLocalStorageが使えない\n<ul>\n<li>非同期ではないから</li>\n</ul></li>\n<li>ちょっとしたデータを保存するのにIndexDB使いたくない</li>\n<li>Cache APIの汎用性のなさ</li>\n<li>別にDOMでも同期のAPIを使いたいわけではない</li>\n<li>提案したけどあしらわれたあの頃\n<ul>\n<li>それxxでできるよ</li>\n</ul></li>\n<li>すると1年後に改めてプロポーザルが出てきた\n<ul>\n<li><a href=\"https://domenic.github.io/async-local-storage/\">Async Local Storage</a></li>\n<li>そこで触れられてたのがLAPIs</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>LAPIs</h4>\n    \n<ul>\n<li><a href=\"https://github.com/drufball/layered-apis\">GitHub - drufball/layered-apis: A new standards effort for collaborating on high-level features.</a></li>\n<li>LowLevelなAPIの策定が進んできた今こそ</li>\n<li>ややHighLevelなものも標準化の流れに取り込んでもいいのでは？という動き\n<ul>\n<li>もちろん一般的なFWほど具体的なものはしない</li>\n</ul></li>\n<li>たとえば`import`も数が多すぎるとwebpackのパフォーマンスに勝てない\n<ul>\n<li>こういうのも標準化すれば、ネットワークコストやパフォーマンスの向上にも</li>\n</ul></li>\n<li>`std:`プレフィックスをつけて`import`することで使えるように\n<ul>\n<li>`import { storage } from \"std:async-local-storage|<a href=\"https://other.cdn.com/async-local-storage.js\">https://other.cdn.com/async-local-storage.js</a>\";`</li>\n<li>使いたい人だけが使う</li>\n<li>Polyfillできないものはダメ</li>\n<li>`window.xxx`も`xxx.prototype.xxx`も拡張しない方針</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>これから</h4>\n    \n<ul>\n<li>とりあえずGoogleが「やっていこう」と表明したくらいの進捗</li>\n<li>async-local-storage\n<ul>\n<li><a href=\"https://github.com/domenic/async-local-storage\">https://github.com/domenic/async-local-storage</a></li>\n</ul></li>\n<li>infinite-list\n<ul>\n<li><a href=\"https://github.com/domenic/infinite-list-study-group\">https://github.com/domenic/infinite-list-study-group</a></li>\n</ul></li>\n<li>tasklets\n<ul>\n<li><a href=\"https://github.com/GoogleChromeLabs/tasklets\">https://github.com/GoogleChromeLabs/tasklets</a></li>\n</ul></li>\n<li>premature-polyfill問題\n<ul>\n<li>いざブラウザにその機能が載った時、そのPolyfillと挙動が違ったら・・・？</li>\n</ul></li>\n</ul><p>🍕がきてしまったのでメモはココまで！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>LT: 10分で、SSRを高速化してみる by shibukawa</h3>\n    \n    <blockquote>\n        <p><a href=\"https://docs.google.com/presentation/d/1-BkXudPa_AEahJuoB9Qk0bwuDwBZgVNkPYIgCDmZZHI/edit#slide=id.p3\">10&#x5206;&#x3066;&#x3099;SSR&#x3092;&#x9AD8;&#x901F;&#x5316;&#x3057;&#x3066;&#x307F;&#x308B;.pptx - Google &#x30B9;&#x30E9;&#x30A4;&#x30C9;</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>LT: BigInt あれこれ by shimataro</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/shimataro/overview-about-bigint\">BigInt &#x3042;&#x308C;&#x3053;&#x308C; / overview about BigInt // Speaker Deck</a></p>\n\n    </blockquote>\n\n</div>"
}
