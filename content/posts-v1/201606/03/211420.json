{
  "title": "AWS Summit Tokyo 2016 3日目に行ってきたメモ #AWSSummit",
  "html": "<p>昨日の反省を活かし、今日はトラックを固定で攻めました。<br />\nというわけで、DevCon UseCase Trackに張り付いてました。</p><p>というか、人が多すぎて移動する気にならん！<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Docker だらけの FRESH な動画配信プラットフォーム</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/stormcat24/docker-darakefalse-fresh-nadong-hua-pei-xin-puratutohuomu\">Docker &#x3060;&#x3089;&#x3051;&#x306E; FRESH &#x306A;&#x52D5;&#x753B;&#x914D;&#x4FE1;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; // Speaker Deck</a></p>\n\n    </blockquote>\n<p>いま各所で話題のAbemaTV FRESH!の事例。</p>\n\n<ul>\n<li>プロダクションでDockerを使ってる</li>\n<li>可用性を重視した構成\n<ul>\n<li>サービス全停止を避ける</li>\n<li>デプロイでダウンタイムを作らない</li>\n<li>一部が障害を起こしても、配信と試聴はできるように</li>\n</ul></li>\n<li>スケーラビリティ\n<ul>\n<li>人気番組でも劣化させない</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>そこでMicroservices</h4>\n    \n<ul>\n<li>ドメインによってシステムを分ける\n<ul>\n<li>User API, Broadcast, Chat, etc..</li>\n</ul></li>\n<li>Amazon RDSもサービス別なので、個別にメンテできる\n<ul>\n<li>呼ぶ側でのケアが必要（xxは現在利用できません）</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Docker</h4>\n    \n<ul>\n<li>Immutable Infrastructureとの親和性</li>\n<li>ポータビリティの高さ</li>\n<li>コンテナに焦点をあてて運用</li>\n<li>ECS at TokyoでDocker1.10.3、Ubuntu < Alpine Linux</li>\n<li>データストア以外をコンテナにまとめる</li>\n<li>ログはホスト -> fluentd -> S3</li>\n<li>設定ファイルはもたず、環境変数でやる</li>\n<li>ECSクラスタの構成管理ツール\n<ul>\n<li><a href=\"https://github.com/stormcat24/ecs-formation\">GitHub - stormcat24/ecs-formation: Tool to build Docker cluster composition for Amazon EC2 Container Service(ECS)</a></li>\n<li>ECS > EC2 > Taskという粒度で考える</li>\n</ul></li>\n<li>クラスタを役割で分ける方式を採用</li>\n<li>このクラスタの単位が各Microservice</li>\n<li>パブリックな部分\n<ul>\n<li>Task: Nginx + API</li>\n<li>前でELBが捌く</li>\n</ul></li>\n<li>HAProxyを各Taskに入れる\n<ul>\n<li>HAProxyが落ちたら他のコンテナも一緒に落ちるように</li>\n</ul></li>\n<li>assetsはNodeのコンテナでNginxでgzip</li>\n<li>内部の通信はInternal ELB経由のREST（gRPCではない</li>\n<li>JobはSQSに貯める\n<ul>\n<li>定期処理はCronからEnqueue</li>\n</ul></li>\n<li>Wowza Streaming Engine\n<ul>\n<li>RTMPで配信して、HLSで試聴</li>\n<li>.ts / .m3u8はS3</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>運用体制</h4>\n    \n<ul>\n<li>サーバーサイド x 6 + インフラ x 1</li>\n<li>サービス:開発者 = N:N</li>\n<li>ドキュメントなど可用性を重視してる\n<ul>\n<li>Microservices Map、ポート対応表など</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>今後やりたいこと</h4>\n    \n<ul>\n<li>HTTP/2対応</li>\n<li>リソース最適化</li>\n<li>Circuit Breacker Pattern</li>\n<li>サービス粒度の改善</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Blue Green Deployment</h4>\n    \n<ul>\n<li>ELBの向き先を変えるだけ</li>\n<li>サービス名の変更の対応もダウンタイム0で</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Dockerつかってこ</h4>\n    \n<ul>\n<li>コンテナ運用のよさ</li>\n<li>開発環境で動いてるなら本番でも動くので心配無用</li>\n<li>地雷もだいぶ踏まれてきてる</li>\n</ul><p>仕事でやらんから実際はさっぱりやけど、このへんの知識ばっかり無駄に増えてきてる感がある今日このごろ・・。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>ドワンゴが AWS を使ってメディアストレージ基盤を開発してみた</h3>\n    \n    <blockquote>\n        <p><a href=\"http://niconare.nicovideo.jp/watch/kn1493\">&#x30C9;&#x30EF;&#x30F3;&#x30B4;&#x304C;AWS&#x3092;&#x4F7F;&#x3063;&#x3066;&#x30E1;&#x30C7;&#x30A3;&#x30A2;&#x30B9;&#x30C8;&#x30EC;&#x30FC;&#x30B8;&#x57FA;&#x76E4;&#x3092;&#x958B;&#x767A;&#x3057;&#x3066;&#x307F;&#x305F; / Numb &#x3055;&#x3093; - &#x30CB;&#x30B3;&#x30CA;&#x30EC;</a></p>\n\n    </blockquote>\n\n<ul>\n<li><a href=\"http://qiita.com/namusyaka/items/e805d1098827a4bd6835\">Ruby&#x3068;AWS&#x3067;&#x3064;&#x304F;&#x308B;&#x30E1;&#x30C7;&#x30A3;&#x30A2;&#x30B9;&#x30C8;&#x30EC;&#x30FC;&#x30B8;&#x57FA;&#x76E4; - Qiita</a></li>\n<li>車輪の再発明を避ける\n<ul>\n<li>チームの枠を越えて共通で使えるものは共通で使う</li>\n</ul></li>\n<li>メディアストレージ基盤\n<ul>\n<li>画像・PDF・音声・動画、あわせてメディアファイル</li>\n<li>投稿・変換・配信をまとめてやる</li>\n</ul></li>\n<li>ジョブをDynamoDBに貯めて捌く\n<ul>\n<li>DynamoのRuby用ORMつくった</li>\n<li><a href=\"http://qiita.com/namusyaka/items/cf75dba11d71ed19d75f\">DynamoDB&#x306E;&#x305F;&#x3081;&#x306E;dinamo&#x3068;&#x3044;&#x3046;&#x7C21;&#x6613;&#x7684;&#x306A;ORM&#x3092;&#x304B;&#x3044;&#x305F; - Qiita</a></li>\n</ul></li>\n<li>使ってるOSSは、Grape, dinamo, rabi, shoryukenなどなど</li>\n</ul>\n<div class=\"section\">\n    <h4>アップロードの流れ</h4>\n    \n<ul>\n<li>ユーザーがCredentialを取得\n<ul>\n<li>GetFederationToken</li>\n</ul></li>\n<li>アップ用S3にアップロード\n<ul>\n<li>Lambdaでバリデーションして、問題なければ配信用S3へ</li>\n<li>PDFならPDFを画像に分ける処理がある</li>\n<li>音声・動画はElasticEncoderが動く</li>\n<li>どちらも処理が重いのでSQSにいったん貯める</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>配信の流れ</h4>\n    \n<ul>\n<li>まずCloudFrontで受ける\n<ul>\n<li>サムネが必要なパスならELBが捌いてサムネを作る</li>\n<li>それ以外は配信用S3が返す</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>つくった機能</h4>\n    \n<ul>\n<li>リトライAPI\n<ul>\n<li>ASW::Lambda::Client#invoke</li>\n</ul></li>\n<li>サスペンドAPI\n<ul>\n<li>配信用S3からバックアップS3に退避 + Invalidation</li>\n</ul></li>\n<li>プライベートコンテンツ配信API\n<ul>\n<li>署名付きCookie</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>よかったところ</h4>\n    \n<ul>\n<li>1人でこの規模を設計・開発・運用できる</li>\n<li>オンプレより融通が利く</li>\n<li>EC2ではないのでコストの削減にも</li>\n<li>アプリ担当者のインフラへの敷居が下がった</li>\n<li>AWSのサポートが手厚い・レスも速い</li>\n<li>SDKが提供されてる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>苦労したところ</h4>\n    \n<ul>\n<li>AWSの各サービスへの事前知識が必要</li>\n<li>VPCやネットワークへの知識は必要なまま</li>\n<li>テストの実装をどうしていくか（3rdのモックは古かったりする）</li>\n<li>CloudFormationが未整備</li>\n<li>aws-sdkのドキュメントから読めない部分が多い</li>\n</ul><p>ドワンゴはオンプレもAWSもできるし、新人でも色々できる会社です！とのこと。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>秒間数万のログをいい感じにするアーキテクチャ</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/kanny/miao-jian-shu-mo-falseroguwoiigan-zinisuruakitekutiya\">&#x79D2;&#x9593;&#x6570;&#x4E07;&#x306E;&#x30ED;&#x30B0;&#x3092;&#x3044;&#x3044;&#x611F;&#x3058;&#x306B;&#x3059;&#x308B;&#x30A2;&#x30FC;&#x30AD;&#x30C6;&#x30AF;&#x30C1;&#x30E3; // Speaker Deck</a></p>\n\n    </blockquote>\n<p>恵比寿のC社より。</p>\n\n<ul>\n<li>CookpadはRuby + Ruby on Rails</li>\n<li>Dockerで半数以上動いてる</li>\n<li>2011年にAWSに完全移行</li>\n<li>ピーク時は15000req/sをさばく</li>\n</ul>\n<div class=\"section\">\n    <h4>ログを採る理由</h4>\n    \n<ul>\n<li>何が起きたかを示す</li>\n<li>サービス改善に使う\n<ul>\n<li>数値なくして改善判断もできない</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ログに求める要件</h4>\n    \n<ul>\n<li>確実に配送される</li>\n<li>遅延が少ない</li>\n<li>サンプリングの必要がない</li>\n<li>分析しやすいフォーマットで保持する</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Cookpadのログ</h4>\n    \n<ul>\n<li>いまは500-700GB/日のログをfluentdで捌いてる</li>\n<li>2010: MySQLに貯めてた</li>\n<li>2011: fluentd -> mongo</li>\n<li>2012: TreasureData -> S3にも</li>\n<li>2013: Amazon Redshift</li>\n<li>2014, 2015: Elasticsearchへの送信も</li>\n<li>あれこれ増えていき、集約ノードへの負担が・・・\n<ul>\n<li>fluentdがマルチコアで動かないのでプロセスを分けたり・・</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Amazon Kinesis Streams</h4>\n    \n<ul>\n<li>分散メッセージング</li>\n<li>フルマネージド\n<ul>\n<li>Apache Kafkaとの違いはココ</li>\n</ul></li>\n<li>pull型送信\n<ul>\n<li>suspend, resumeできる</li>\n</ul></li>\n<li>ストリームとして保持できる</li>\n<li>とにかく安全な土管に送り続ければいい\n<ul>\n<li>fluent-plugin-kinesis</li>\n</ul></li>\n<li>ただし集約ノードの負荷は高いまま\n<ul>\n<li>直接Kinesisに送るように</li>\n</ul></li>\n<li>レコード数多すぎなくせに、1レコードの容量（1MB）を持て余してた\n<ul>\n<li>Kinesis Producer Library</li>\n</ul></li>\n<li>導入によりレコード数が激減 + シャード数も減らせた</li>\n<li>Lambdaで集計して、速報データはDynamoDBやRedshiftへ</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>運用</h4>\n    \n<ul>\n<li>合計40シャード\n<ul>\n<li>動的に増減はさせてない</li>\n</ul></li>\n<li>IDS、WAFログも収集していきたい</li>\n</ul><p>専門外すぎてどの情報を注視すべきかって勘が効かないのがつらいなー。<br />\n話自体はおもしろそうやなーと思って聞いてたけど。<br />\n<br />\n</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>GREE 流！AWS をお得に使う方法</h3>\n    <p>GREEのモバイルの某RPGゲームの話。</p>\n\n<ul>\n<li>Webサーバー: 12-50台</li>\n<li>アクセス: 3000 - 30000 / min</li>\n</ul>\n<div class=\"section\">\n    <h4>DynamoDBのいいところ</h4>\n    \n<ul>\n<li>AtomicCounterで競合しない</li>\n<li>Conditional updateできる</li>\n<li>コストが可視化できる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>安く抑えるには</h4>\n    \n<ul>\n<li>writeはreadの10倍高いのを意識\n<ul>\n<li>deleteせずに済むならしない</li>\n<li>Secondary indexを乱用しない</li>\n</ul></li>\n<li>read capacityを抑える\n<ul>\n<li>randomにitem取得</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>運用ででた問題</h4>\n    \n<ul>\n<li>Throttling問題\n<ul>\n<li>ThroughputがCapacityを超えた時に発生</li>\n<li>過去5分のあまりで補填（Burst）してくれるがそれでもスグ枯渇する</li>\n<li>Partitionを分けると、Capacityも分かれてしまう</li>\n<li>均一に振り分けないと、一部でThrottlingしてしまう</li>\n<li>あまりに同じキーが読まれるなら、DynamoDBの外にキャッシュすべし</li>\n<li>あまりに同じキーに書き込むなら、テーブル単位でシャーディングする</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Dynamic Dynamo</h4>\n    \n<ul>\n<li><a href=\"https://github.com/sebdah/dynamic-dynamodb\">GitHub - sebdah/dynamic-dynamodb: Dynamic DynamoDB provides auto scaling for AWS DynamoDB</a></li>\n<li>CloudWatchのメトリクスを元に、自動的にCpacityの調整をしてくれる</li>\n<li>Partitionが割れてスケールダウンしたときにThrottlingしないよう注意</li>\n<li>Hotキー問題は相変わらず</li>\n<li>大規模なものはやはり手動で対応</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Amazon Aurora</h4>\n    \n<ul>\n<li>MySQLと完全互換</li>\n<li>RDS for MySQLよりIOPSが低くなる（binlogを吐いてないから？）</li>\n<li>MasterがダウンするとSlaceが数秒間使えないのに注意</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>GREE Ads DSP</h4>\n    \n<ul>\n<li>広告配信サービス</li>\n<li>バッチサーバ -> ECS -> EMR -> S3 -> Redshift</li>\n<li>もとは`json`だったが`ltsv`にしたら集計が速くなった</li>\n<li>fluentdでS3に直接アップロード\n<ul>\n<li>リアルタイムの要件がないのでkinesisではない</li>\n</ul></li>\n<li>バッチ処理はECSでDocker</li>\n<li>EMRのスポットインスタンスが安い\n<ul>\n<li>上がらない時のハンドリングが面倒</li>\n</ul></li>\n<li>Redshiftは使う時だけ上げる\n<ul>\n<li>なのでS3からインポートして集計</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>インフラ</h4>\n    \n<ul>\n<li>EC2やRDSは高い</li>\n<li>その他は比較的安い</li>\n<li>EC2で処理してたスナップショットの取得をLambdaでやるように</li>\n<li>Lambdaは失敗する可能性がある</li>\n<li>同時実行される可能性もあるので悲観的ロックを</li>\n<li>関数は最大5分しか動かないので、関数を分ける</li>\n<li>EC2、API Gatewayも使わない</li>\n<li>SDKとCredentialを直接埋め込んで、Lambdaを実行する\n<ul>\n<li>Credentialの取り扱い注意！</li>\n</ul></li>\n<li>非同期処理にして実行時間を短縮する</li>\n<li>EC2は平日の出勤時間帯だけ使うとか</li>\n<li>RDSよりオンプレMySQLのがちょっとだけ安い（3割くらい？）</li>\n<li>Lambda安い！使ってこ！</li>\n</ul><p>ちょっとした処理（試算するまでもなく無料で収まる）でしかLambda使ったことなかったけど、もっと負荷のある処理でもいけそうやねー。<br />\n仕事でなんかもっと使いみちないかな・・。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>タウンワークにおけるサーバレスアーキテクチャデザイン</h3>\n    \n<ul>\n<li>Core Teachnology Labプロジェクト\n<ul>\n<li>データサイエンス + エンジニアリング + インフラのプロジェクト型組織</li>\n<li>データサイエンティストが主導する組織</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>タウンワークの特徴・要件</h4>\n    \n<ul>\n<li>週次で入れ替わる求人</li>\n<li>応募したら離脱するユーザー\n<ul>\n<li>ECなどで使われる従来のレーティングなどの手法は使えない</li>\n<li>ユーザーの行動をもとに特徴量を計算して、最適な求人を予想</li>\n</ul></li>\n<li>月曜に発行されるのでアクセスもそこが一番多い</li>\n<li>リアルタイムな予測をする必要があった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ログ基盤の整備が必要</h4>\n    \n<ul>\n<li>貯めるだけではなく</li>\n<li>多様に処理できる必要があった\n<ul>\n<li>アクセスごとに特徴量を更新する処理</li>\n<li>予測モデルを定期的に作成</li>\n</ul></li>\n<li>Kinesis x Lambdaで！</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>特徴量の更新・予測を高速に処理する</h4>\n    \n<ul>\n<li>高速にR/WできるDB</li>\n<li>変更に柔軟に対応できるDB</li>\n<li>NoSQLにしたいが運用はしたくない</li>\n<li>最終的にDynamoDB x ElasticCacheを使うことに</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>運用どうしてるか</h4>\n    \n<ul>\n<li>特徴量の更新は影響範囲がデカい</li>\n<li>そこでBlue-Green Deployment</li>\n<li>ただしDBまわりがネック</li>\n<li>そこでCloudFormation\n<ul>\n<li>jsonでオーケストレーションできる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Lambdaの利用例</h4>\n    \n<ul>\n<li>ログの保存</li>\n<li>cronの代わり</li>\n<li>CloudWatchからSNSトピックを発行してSlackに通知\n<ul>\n<li>AWSの使用料通知するの良い</li>\n</ul></li>\n</ul><p>「インフラ経験のないデータサイエンティスト（ただし最近のITに疎いとは言ってない）」すげーな・・。<br />\nにしてもフルマネージドなのでAWSにしました！っていう事例の多さよ！</p>\n\n</div>\n</div>"
}
