{
  "title": "0からはじめるFlow Part.1",
  "html": "<p>こないだReactで書きなおしたウデマエアーカイブに、Flowをいれてみようと思って、しばらく色々と試したことのメモ、もとい奮闘記です。</p>\n\n    <blockquote>\n        <p><a href=\"https://flowtype.org/\">Flow | A static type checker for JavaScript</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>事前準備</h3>\n    <pre class=\"code\" data-lang=\"\" data-unlink>npm i --save-dev babel-plugin-transform-flow-strip-types\nnpm i -g flow-bin</pre><p>まず最初に、`babel-plugin-transform-flow-strip-types`をいれる。<br />\n型についての記載を実コードから削ってくれるやつ。</p><p>次に、グローバルに`flow-bin`をインストールしておく。</p><p>最後にエディタをいい感じに。<br />\n開発はVimでやるので、SyntasticとFlowを連携させる。</p>\n<pre class=\"code lang-vim\" data-lang=\"vim\" data-unlink><span class=\"synStatement\">let</span> <span class=\"synIdentifier\">g:syntastic_javascript_checkers</span> <span class=\"synStatement\">=</span> [<span class=\"synConstant\">'eslint'</span>, <span class=\"synConstant\">'flow'</span>]\n</pre><p>ってな具合に指定するだけ。</p>\n\n    <blockquote>\n        <p>というわけで現在Flowを使うには、Babelを使う前提があるというわけではある</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>事前準備の補足</h3>\n    <p>公式とか検索して出てくるものは、`transform-flow-strip-types`さえいれればOK！ってなってるけど、ちょっと罠があります。</p><p>それは、使ってるモジュールの仕組みがES Modulesか、CommonJSかで違います。<br />\nあと、`transform-class-properties`を使ってるかどうかも関係するので、以下の表で当てはまるやつを準備する。</p>\n\n<table>\n    <tr>\n    <th>Module</th>\n    <th>transform-class-properties</th>\n    <th>どうすればいいか</th>\n    </tr>\n    <tr>\n    <td>CommonJS </td>\n    <td> してる </td>\n    <td> `transform-flow-strip-types`足す</td>\n    </tr>\n    <tr>\n    <td>CommonJS </td>\n    <td> してない </td>\n    <td> `transform-class-properties`も足す OR `passPerPreset`で先に`transform-flow-strip-types`する</td>\n    </tr>\n    <tr>\n    <td>ES Modules </td>\n    <td> してる </td>\n    <td>`transform-flow-strip-types`足す</td>\n    </tr>\n    <tr>\n    <td>ES Modules </td>\n    <td> してない </td>\n    <td> `transform-class-properties`するしかない（`passPerPreset`で先に`transform-flow-strip-types`してもNG）</td>\n    </tr>\n</table><p>ちなみにコレ、Classに型をつけるまでは問題になりません、ってのが罠やと思うの・・。</p>\n\n<div class=\"section\">\n    <h4>`passPerPreset`</h4>\n    <p>Babel 6.5から入ったExperimentalな機能。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/babel/babel/blob/master/CHANGELOG.md#a-traversal-per-preset-experimental\">babel/CHANGELOG.md at master &middot; babel/babel &middot; GitHub</a></p>\n\n    </blockquote>\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink><span class=\"synSpecial\">{</span>\n  <span class=\"synError\">passPerPreset</span>: <span class=\"synConstant\">true</span>,\n  <span class=\"synError\">presets</span>: <span class=\"synSpecial\">[</span>\n    <span class=\"synSpecial\">{</span>\n      &quot;<span class=\"synStatement\">plugins</span>&quot;: <span class=\"synSpecial\">[</span> &quot;<span class=\"synConstant\">babel-plugin-transform-flow-strip-types</span>&quot; <span class=\"synSpecial\">]</span>\n    <span class=\"synSpecial\">}</span>,\n    &quot;<span class=\"synConstant\">es2015</span>&quot;,\n    &quot;<span class=\"synConstant\">react</span>&quot;\n  <span class=\"synSpecial\">]</span>\n<span class=\"synSpecial\">}</span>\n</pre><p>`.babelrc`にこう書けばいい。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>.flowconfig</h3>\n    <p>準備ができたらいざ型付け！<br />\nということで、Flowの設定ファイル`.flowconfig`を用意する。</p>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>flow init\n</pre><p>Flowをグローバルにインストールしたらこのコマンドが使えるので、これで生成してもいい。<br />\nちな現在の`.flowconfig`はこんな感じ。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>[ignore]\n.*/node_modules/.*\n.*/dist/.*\n\n[include]\n\n[libs]\n./src/script/_decls\n\n[options]\nsuppress_comment= \\\\(.\\\\|\\n\\\\)*\\\\flow-disable-line</pre>\n<div class=\"section\">\n    <h4>ハマりどころ1</h4>\n    <p>これを生成した時点では、`.flowconfig`が置かれたルートから全ファイルをチェックしにいってしまう。<br />\nもちろん`node_modules`配下も例外ではないわけで、だいたい型が指定されてないよエラーで爆散するはず。</p><p>というわけで`ignore`する。<br />\nbuildしたファイルも見なくていいので`ignore`する。</p><p>ここのパスの書き方がOCamlの正規表現らしく、ちょっと慣れない感じ。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>flow ls</pre><p>これでいまFlowがターゲットとしてるファイルのリストが出るので、確認しながら調整すればOK。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ハマりどころ2</h4>\n    <p>`node_modules`を無視したので、読み込んだライブラリにも自分で型をつける必要が出てくる。<br />\nその定義を置いておくのが`libs`で指定したディレクトリ。</p><p>この指定したディレクトリ配下においた`**.js`を、型定義として読み込んでくれる。<br />\n1つのファイルに全部書くぜ！って場合は、「ファイル名をフルパス」で指定すればOK。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>[libs]\n./src/script/_decls    # ディレクトリ指定なら\n./src/script/_decls.js # ファイル指定なら</pre>\n</div>\n<div class=\"section\">\n    <h4>ハマりどころ3</h4>\n    <p>せっかく型を付けられるようになったし、できれば全ファイルで`@flow`って書きたいところ。<br />\nでも中にはどうしようもないやつもいて・・、たとえばGoogleAnalyticsのコード。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>(<span class=\"synIdentifier\">function</span>(i,s,o,g,r,a,m)<span class=\"synIdentifier\">{</span>i<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'GoogleAnalyticsObject'</span><span class=\"synIdentifier\">]</span>=r;i<span class=\"synIdentifier\">[</span>r<span class=\"synIdentifier\">]</span>=i<span class=\"synIdentifier\">[</span>r<span class=\"synIdentifier\">]</span>||<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span> (i<span class=\"synIdentifier\">[</span>r<span class=\"synIdentifier\">]</span>.q=i<span class=\"synIdentifier\">[</span>r<span class=\"synIdentifier\">]</span>.q||<span class=\"synIdentifier\">[]</span>).push(<span class=\"synIdentifier\">arguments</span>);<span class=\"synIdentifier\">}</span>,i<span class=\"synIdentifier\">[</span>r<span class=\"synIdentifier\">]</span>.l=1*<span class=\"synStatement\">new</span> <span class=\"synType\">Date</span>();a=s.createElement(o), m=s.getElementsByTagName(o)<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>;a.async=1;a.src=g;m.parentNode.insertBefore(a,m); <span class=\"synIdentifier\">}</span>)(<span class=\"synStatement\">window</span>,<span class=\"synStatement\">document</span>,<span class=\"synConstant\">'script'</span>,<span class=\"synConstant\">'//www.google-analytics.com/analytics.js'</span>,<span class=\"synConstant\">'ga'</span>);\n</pre><p>これがすごい怒られる。<br />\n1行ずつ分解してあるべきところに型をつけて・・ってやっていくと通るけど、なんでそんなことをせなあかんのかという気持ちが強い。</p><p>そこで、ESLintにある「この行はLintしなくていいよコメント」みたいなのないかなー？と思ってたらあった。<br />\n`.flowconfig`の`options`に、`suppress_comment`ってのを指定する。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>[options]\nsuppress_comment= \\\\(.\\\\|\\n\\\\)*\\\\flow-disable-line</pre><p>こう書いたうえで、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// flow-disable-line</span>\n(<span class=\"synIdentifier\">function</span>(i,s,o,g,r,a,m)<span class=\"synIdentifier\">{</span>i<span class=\"synIdentifier\">[</span><span class=\"synConstant\">'GoogleAnalyticsObject'</span><span class=\"synIdentifier\">]</span>=r;i<span class=\"synIdentifier\">[</span>r<span class=\"synIdentifier\">]</span>=i<span class=\"synIdentifier\">[</span>r<span class=\"synIdentifier\">]</span>||<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span> (i<span class=\"synIdentifier\">[</span>r<span class=\"synIdentifier\">]</span>.q=i<span class=\"synIdentifier\">[</span>r<span class=\"synIdentifier\">]</span>.q||<span class=\"synIdentifier\">[]</span>).push(<span class=\"synIdentifier\">arguments</span>);<span class=\"synIdentifier\">}</span>,i<span class=\"synIdentifier\">[</span>r<span class=\"synIdentifier\">]</span>.l=1*<span class=\"synStatement\">new</span> <span class=\"synType\">Date</span>();a=s.createElement(o), m=s.getElementsByTagName(o)<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>;a.async=1;a.src=g;m.parentNode.insertBefore(a,m); <span class=\"synIdentifier\">}</span>)(<span class=\"synStatement\">window</span>,<span class=\"synStatement\">document</span>,<span class=\"synConstant\">'script'</span>,<span class=\"synConstant\">'//www.google-analytics.com/analytics.js'</span>,<span class=\"synConstant\">'ga'</span>);\n</pre><p>これで無視できるようになった。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>いざ型付け！</h3>\n    <p>ファイルの先頭に`@flow`コメントを入れると、Flowがチェックしてくれるようになる。</p><p>むしろ、このコメントがないとチェックしてくれない。</p><p>行コメントでもいいし、複数行コメントでもいいけど、他のどんなコード記述よりも前である必要がある。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">/**</span>\n<span class=\"synComment\"> * このファイルは....</span>\n<span class=\"synComment\"> * なんたらかんたら...</span>\n<span class=\"synComment\"> *</span>\n<span class=\"synComment\"> * @flow</span>\n<span class=\"synComment\"> */</span>\n</pre><p>これでもOK。</p><p>というわけで、</p>\n\n<ul>\n<li>1ファイルずつ、`@flow`コメントいれる</li>\n<li>Flowに怒られる部分があるので、そこをなおす</li>\n<li>より厳密にしたい部分に型を付けていく</li>\n</ul><p>という手順でやっていきます。</p><p>やってみての学びは、また次のPart.2に書きます！</p>\n\n</div>"
}
