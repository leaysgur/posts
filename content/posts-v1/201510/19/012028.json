{
  "title": "次世代 Web カンファレンス に行ってきたメモ #nextwebconf",
  "html": "<p><iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fnextwebconf.connpass.com%2Fevent%2F19699%2F\" title=\"次世代 Web カンファレンス (2015/10/18 09:00〜)\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://nextwebconf.connpass.com/event/19699/\">nextwebconf.connpass.com</a></cite></p><p>聴いたやつは以下。</p>\n\n<ul>\n<li>server_perf</li>\n<li>server_arch</li>\n<li>webrtc</li>\n<li>http2</li>\n<li>front_arch</li>\n</ul><p>フロントエンドエンジニアやってますがクライアントまわりは身の回りに聴いてる人いっぱいいそうなので、最後以外はサーバーサイドに寄ってみた。<br />\n資料があるわけじゃないので箇条書きまとめ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>server_perf</h3>\n    \n<div class=\"section\">\n    <h4>はじめに</h4>\n    \n<ul>\n<li>ページ返してた時代からAPI時代へ</li>\n<li>処理は軽くなったが量が増えた</li>\n<li>3-4万リクエストを1台でさばけるように</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>パフォーマンスのあげかた</h4>\n    \n<ul>\n<li>どーしてもパフォーマンスが上げられない処理は、仕様から変えるのもあり</li>\n<li>キャッシュは効くけど運用がつらくなる</li>\n<li>メモリ負荷も上がるので、表示頻度との兼ね合いで</li>\n<li>ユーザー単位でキャッシュ作るのも一例として</li>\n<li>ABテストはしづらくなる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>言語</h4>\n    \n<ul>\n<li>1CPUあたりの性能は頭打ちしてるので、マルチコアで並立処理できる言語を使いたい</li>\n<li>APIサーバーにRailsはやりすぎ</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>周辺技術</h4>\n    \n<ul>\n<li>Edge Side Includes / <a href=\"http://www.slideshare.net/xcir/varnishesi\">http://www.slideshare.net/xcir/varnishesi</a></li>\n<li>nginScriptはまだ実用的には使えない</li>\n<li>Varnishはhttp2をサポートするらしい(TLSは最小限で</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ネットワークの安定しない海外アクセス</h4>\n    \n<ul>\n<li>アプリは別にすることが多い</li>\n<li>世界相手だとどこにサーバー置いても遅いのでus-east</li>\n<li>AWSすごい / <a href=\"https://aws.amazon.com/jp/blogs/aws/latency-based-multi-region-routing-now-available-for-aws/\">https://aws.amazon.com/jp/blogs/aws/latency-based-multi-region-routing-now-available-for-aws/</a></li>\n<li>インドネシアではなんとOperaMiniが強い</li>\n<li>OperaのProxyが画像をリサイズしたりjsをサーバーサイドで実行したやつ返したりしてるらしい</li>\n<li>日本のガラケー的存在でインドネシアのエンジニアを疲弊させている</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>これから</h4>\n    \n<ul>\n<li>スマホアプリAPIをいかにさばくかが今後の課題</li>\n<li>CDNを使わざるを得ない状況</li>\n<li>ボトルネックもサーバーからフロントへ</li>\n<li>CDNがアプリっぽい振る舞いをするようになる・・？</li>\n</ul>\n    <blockquote>\n        <p>サーバーサイドのエンジニアの皆様は、いまはアプリからのAPIリクエストと戦ってるんですねー。</p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>server_arch</h3>\n    \n<div class=\"section\">\n    <h4>grpc-gateway</h4>\n    \n<ul>\n<li>gRPCは良いもの / <a href=\"https://github.com/grpc/grpc\">https://github.com/grpc/grpc</a></li>\n<li>従来型のRESTのAPIとgRPCを仲立ちするgateway</li>\n<li>やってることは内部で効率よく処理することもできる内容だが、これは外部通信向けに作ったもの</li>\n<li>10年メンテしないといけないプロジェクトではgRPCには手を出せない(SIer視点</li>\n<li>gRPCでもSOAPの用途の80%はカバーできると思う</li>\n<li>ただトランザクション系はgRPCだとつらそう</li>\n<li>コネクションをプールできる実装</li>\n<li>DBとそれができるのは現在Javaしかない？</li>\n<li>http2がベースになれば、その上でカスタムプロトコルを展開できる</li>\n<li>Thriftとはなんだったのか</li>\n<li>RMI(Remote Method Invocation)</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Reactive Streams</h4>\n    \n<ul>\n<li><a href=\"http://takezoe.hatenablog.com/entry/20150217/p1\">http://takezoe.hatenablog.com/entry/20150217/p1</a></li>\n<li>gRPCにはいわゆるBackpressureみたいな機能はない</li>\n<li>Rubyは送られすぎると死んじゃう</li>\n<li>ハードで解決できないくらいスケールしないといけない時代のReactive</li>\n<li>ネットワークに限界を感じたらGCP</li>\n<li>それでも厳しいと感じたら海底ケーブルを自前で・・</li>\n<li>並行処理プログラミングは簡単じゃない</li>\n<li>Goはそのへん楽にしてくれる(けどやりすぎ注意</li>\n<li>Scalaもそのへん頑張ってる</li>\n<li>ErlangもElixirも隣の芝生は青い(と思う</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Microservices</h4>\n    \n<ul>\n<li>内部通信と外部通信を分けたうえで、内部に使いたい</li>\n<li>非同期が必要なのもこれのため</li>\n<li>なんちゃってなものは巷に多い(http叩いてるだけとか</li>\n<li>非機能要件(デプロイ・モニタリング)も互換性が必要</li>\n<li>Docker用のDockerビルダーも欲しくなってくる</li>\n<li>サービス間通信に比重がよる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>まとめ</h4>\n    \n<ul>\n<li><a href=\"http://prometheus.io/\">http://prometheus.io/</a> よくてきてるので使え</li>\n</ul>\n    <blockquote>\n        <p>聞いたことあるけど詳しく知らん単語と、まったく知らん単語とをつなぐのに必死なセッションだったｗ</p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>webrtc</h3>\n    \n<div class=\"section\">\n    <h4>はじめに</h4>\n    \n<ul>\n<li>現状は割とつらい</li>\n<li>プラットフォーム(SkyWayとか)も頑張ってるけどつらい</li>\n<li>ブラウザ別対応するのもつらいけど、ブラウザの自動アップデートもつらい</li>\n<li>バージョンアップ後、自動的に動かなくなる事案が発生する</li>\n<li>つらい</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>運用のつらい話</h4>\n    \n<ul>\n<li>SDP / candidateがわからんと何もできない</li>\n<li>UDPのパケロスで動画が汚い</li>\n<li>コーデック対応してない環境とかある</li>\n<li>Edgeのなんか独自なやつとか</li>\n<li>社内NWよりモバイルネットワークの方がまだつながる</li>\n<li>UDPが抜けない環境も意外にある(社内NWだと)</li>\n<li>SDP読む担当が運用で専任でいないときつい</li>\n<li>しかもSDPの実装はChromeとFireFoxでまったく違う</li>\n<li>WebRTCやるならFireFoxのSDPがキレイで良い</li>\n<li>サイマルキャストどうする問題</li>\n<li>いまは画質を1つしか選べない</li>\n<li>Chromeには独自の実装があったりする(Hangout向け？</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>MCU / SFU</h4>\n    \n<ul>\n<li>P2Pの限界を感じるとこっちを模索する</li>\n<li>いまはMultipoint Control Unit(MCU)が最適解</li>\n<li>動画の変換は重いのでそこがネック</li>\n<li>Selective Forwarding Unit (SFU)だと暗号化が重い</li>\n<li>もうこれRTCPからってなる</li>\n<li>UDPはロストするものなのでそれをなんとかしないといけない</li>\n<li>それに全員が全員にフルで送信すると負荷もやばい</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>組み込みRTC</h4>\n    \n<ul>\n<li>クライアントは固定したい</li>\n<li>Electronは固定できていい</li>\n<li>RaspberryPIでも割と動く</li>\n<li>ただ録画はやめとこ</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ORTC</h4>\n    \n<ul>\n<li><a href=\"http://iwashi.co/2015/08/13/ortc-and-webrtc/\">http://iwashi.co/2015/08/13/ortc-and-webrtc/</a></li>\n<li>やるにしてもSDKを使え</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>これからやるにも</h4>\n    \n<ul>\n<li>つながらない問題はなくならない</li>\n<li>LANケーブル抜けてる人ほんとにいるから！</li>\n<li>P2Pのメリットはサーバーいらないところのみ</li>\n<li>それ以上にやりたいことはあるはずなので、基本的にはMCU / SFUありき</li>\n<li>PolycomのWebRTCはよくできてる</li>\n<li>最初はP2P、人増えたらMCU、モバイルがきてもMCUに移行する</li>\n<li>SVC(Scalable Video Coding)はMCUでもやれんことはないが・・・SFUで</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>まとめ</h4>\n    \n<ul>\n<li>サイマルキャストの仕様がきっと固まる</li>\n<li>それまではMCUで頑張る</li>\n<li>サイマルキャストきたらSFUに</li>\n<li>その次はSVCをなんとかしたいが帯域推定つらい</li>\n<li>海外はEdgeが強いのでORTCもはじまってる</li>\n<li>海外ではWebRTCが実は流行ってる</li>\n<li>いいSDKを選べば利用者としては幸せになれるもの</li>\n<li>お金にはな・・る？</li>\n</ul>\n    <blockquote>\n        <p>1:1通信程度なら数行で書けて夢あふれまくり！やけどその先は闇ですって。<br />\n私はまだ一握りくらいの闇しか見ておりません。</p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>http2</h3>\n    \n<div class=\"section\">\n    <h4>はじめに</h4>\n    \n<ul>\n<li>無事に仕様としては固まった</li>\n<li>主要なブラウザはHTTP/2に対応完了！</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ほんとに速いのか</h4>\n    \n<ul>\n<li>同期接続数6の制限はなくなった</li>\n<li>が、あれこれあべこべに返ってくるようになってむしろファーストペイントが遅くなる環境もある</li>\n<li>priorityをクライアントでもちゃんと実装しないとダメ</li>\n<li>いまはFireFoxだけ実装されてる</li>\n<li>h2oだとデフォルトでMIME-TYPEからそれを判別してたりする</li>\n<li>asyncなものもあるので、src=\"~.js?priority=high\"とかもありかも</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>サーバーPush</h4>\n    \n<ul>\n<li>1RTT削るだけ</li>\n<li>日本だとRTTがボトルネックにはならないので、そこまで恩恵がないかも</li>\n<li>キャッシュ用途に使うとか？</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>速さ以外のメリットは</h4>\n    \n<ul>\n<li>httpはブラウザ用のものではなく、プロトコルなのでその意味で拡張は歓迎</li>\n<li>複数TCPを1つにできるのはやはり大きい</li>\n<li>数%遅くなると売上が下がるとかそういうケースには効く</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>HTTP/3・・？</h4>\n    \n<ul>\n<li>それよりTLS1.3をなんとか</li>\n<li>HTTP/2はreq x resな形式</li>\n<li>gRPCは複数本のコネクションを貼るものなので、HTTP/2が必要</li>\n<li>WebSocketはHTTP/2では使えない</li>\n<li>QUICならUDP上でTCP+TLS相当のことができる</li>\n<li>UDPでやりとりできる = レイテンシが下がる = 幸せ</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Webのプロトコル</h4>\n    \n<ul>\n<li>HTTP/1.1はサポートしつつ、いつしかHTTP/5までサポートみたいな未来に？</li>\n<li>FTPも使われてるし、HTTP/1.0もまだいる</li>\n<li>jsのライブラリみたいな短ライフサイクルではないので、プロトコルのセマンティクスが変わったとしても追従コストはそこまで変わらない</li>\n</ul>\n    <blockquote>\n        <p>こう聞いてるとまだまだどう使われるか、どう対応していくか想像がつかんなーという印象。<br />\nフロントエンドでどう活用するか戦略みたいなのは結構かわると思うので、要チェックですねー。</p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>front_arch</h3>\n    \n<div class=\"section\">\n    <h4>はじめに</h4>\n    \n<ul>\n<li>フロントエンドのjsの話</li>\n<li>フレームワークの特徴とか</li>\n<li>Reactは単純</li>\n<li>当時のAngularの双方向バインディングの画期的感ったら</li>\n<li>単方向だとシンプルになる</li>\n<li>FireFoxOSでも使えるWebComponents</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Router</h4>\n    \n<ul>\n<li>Angularはng-routerよりはui-router</li>\n<li>React-routerは宣言的！に書ける</li>\n<li>結局HistoryAPIのラッパなので、FWが用意する必然性はない</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>記法まわり</h4>\n    \n<ul>\n<li>ReactはJSX x Babelで書いていく</li>\n<li>AngularはTypeScriptやBabel</li>\n<li>PolymerもES6で書ける</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>速さ</h4>\n    \n<ul>\n<li>Angularは1.4時点でもReactと同じくらい速い</li>\n<li>速さを求めてReactは選ばない</li>\n<li>DOMが遅い！ってなるのはゲームくらい</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>アーキテクチャ</h4>\n    \n<ul>\n<li>全て揃ってる = 足かせになることもある</li>\n<li>Angular2はFluxっぽい</li>\n<li>ReactはHot reloadとかできる</li>\n<li>ComponentにStateをもたせるべきか</li>\n<li>データはどこにあっても良いのでは</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>イベントの管理</h4>\n    \n<ul>\n<li>Streamの概念はこれから</li>\n<li>まずはPromise</li>\n<li>ES-Observableとかも期待</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>これから</h4>\n    \n<ul>\n<li>フロントエンドフロントエンドとフロントエンドバックエンド(二槽式!)</li>\n<li>コンポーネント・リクエスト・イベントから成るのがフロントエンド</li>\n<li>jsじゃなくても別にいいし、ServiceWorkerでやったりとか(二槽式!)</li>\n<li>仕様があるから比較ができ議論ができる</li>\n</ul>\n    <blockquote>\n        <p>なんかいろいろあるみたいですけど、誰が喋ってもあの話の流れではああなると思います。</p>\n\n    </blockquote>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p><blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">blog に書くまでが <a href=\"https://twitter.com/hashtag/nextwebconf?src=hash\">#nextwebconf</a> らしいですよ！！</p>&mdash; Takuto Wada (@t_wada) <a href=\"https://twitter.com/t_wada/status/655737844892241920\">2015, 10月 18</a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><p>書きました！</p>\n\n</div>"
}
