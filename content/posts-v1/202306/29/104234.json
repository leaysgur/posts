{
  "title": "Cloudflare Workers + KVだけで、ベクトル検索を実現する",
  "html": "<p>力ずくで。</p><p>やってやれんことはないし、データの件数によってはナシではないって感じか。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"あらすじ\">あらすじ</h3>\n    \n<ul>\n<li>とあるメディアの記事を、Embeddingsのベクトルにして検索したい</li>\n<li>Embeddingsのベクトルをどこに保存して検索するかが問題</li>\n<li>いわゆるベクトルDBを用意するのが普通かもしれないが、もっとコンパクトにやりたい</li>\n<li>Cloudflare Workers + KVでなんとかできないか？</li>\n</ul><p>という流れ。</p><p>有限ではあるがそれなりの数のベクトル集合から、いかに対象のベクトルに近しいものを見つけ出すのかが問題。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"データが少ないなら\">データが少ないなら</h3>\n    <p>データが1000件未満って程度であれば、特に問題はない。</p>\n\n<ul>\n<li>KVにベクトルをそのまま保存しておき</li>\n<li>Workerから`KV.list()`して全件取得</li>\n<li>対象のベクトルとそれぞれを`KV.get(key)`して比較</li>\n<li>並べ替えして、topKを選んで返す</li>\n</ul><p>というような愚直な方法でも、まあなんとかやれる。</p><p>1000件未満としたのは、1Workerリク<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トでKVにアクセスできる回数が制限されていて、それが1000回だから。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/platform/limits/#kv-limits\">https://developers.cloudflare.com/workers/platform/limits/#kv-limits</a></p>\n\n    </blockquote>\n<p>`Operations/worker invocation`ってやつ。Paidプランでも変わらず。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"データが多いなら\">データが多いなら</h3>\n    <p>データが1000件を超える場合、1Workerリク<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>ト内で全件を取得しきれない。</p><p>これは、Workerを多段構成にすれば回避できる。（ここが力ずくポイント）<br />\nメインのWorkerでリク<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トを受けたら、サブのWorkerに対象のベクトルを投げて、それぞれにKVにあるベクトルと比較させる。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink>Main\n - Sub1 - KV: 1000件まで\n - Sub2 - KV: 1000件まで\n - ...\n - SubN - KV: 1000件まで</pre><p>SubのWorkerへのサブリク<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トを並列で行えば、パフォーマンスという意味ではさっきと変わらず処理できる。</p><p>ちなみに、このパターンで対応できるのは、データの件数が50000件未満 or 1000000件未満の場合。<br />\nというのも、1Workerリク<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トで外部リソースに`fetch()`できる回数が制限されているから。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/platform/limits\">https://developers.cloudflare.com/workers/platform/limits</a></p>\n\n    </blockquote>\n<p>`Subrequest`ってやつ。Freeなら50回、Paid:Bundledも50回、Paid:Unboundなら1000回まで。</p><p>注意点としては、Workerから別のWorkerを呼ぶ必要があるが、</p>\n\n<ul>\n<li>同じゾーンに配置することはできない\n<ul>\n<li>Pages Functions + WorkersとかならOK</li>\n</ul></li>\n<li>Service bindingsは使えない\n<ul>\n<li>あれはこういった制限をオフロードできるものではないから</li>\n</ul></li>\n</ul><p>うーむ、力ずくだわ。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"気になる制限\">気になる制限</h3>\n    <p>効率的な検索<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0\">アルゴリズム</a>を使うわけではなく、気合で全走査してるわけなので。</p>\n\n<div class=\"section\">\n    <h4 id=\"KV\">KV</h4>\n    <p>1検索のたびに、N000回もREADするとなると、そのコストはどうなるかも知っておく必要がある。</p><p>そもそもREADできる回数は、Freeプランだと100000READ/日だが、Paidでは無制限。神。</p><p>コストは、現状のPaidプランで`10 million/month, + $0.50/million`とのこと。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/platform/pricing/#workers-kv\">https://developers.cloudflare.com/workers/platform/pricing/#workers-kv</a></p>\n\n    </blockquote>\n<p>なので1検索で1000件を走査する場合は、10000回検索するまでは範囲内で、そこから追加で課金される。さすがの安さだわ。</p><p>もし可能であれば、1ベクトル/キーで保存するのではなく、Nベクトル/キーで保存するようにすれば、READの回数は減らせる。</p>\n\n</div>\n<div class=\"section\">\n    <h4 id=\"Worker\">Worker</h4>\n    <p>1Workerリク<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トで使えるメモリが128MBまで。</p><p>なので、KVから1000件を読み出せるにしても、それが溢れない範囲でやらないといけない。</p><p>OpenAIのEmbeddingsであれば、たとえばInt16の範囲で<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%CE%CC%BB%D2%B2%BD\">量子化</a>したりすると、そのサイズは<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/JSON\">JSON</a>でも19kbから7kbくらいに減るので、少しは楽になれるはず。</p><p>Embeddingsのベクトルと、そのベクトルが表すテキスト自体も、最初から別のKVに分けておくなども吉かと。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3 id=\"というわけで\">というわけで</h3>\n    <p>ベクトルDBのサービスを用意しなくても、KVだけでなんとかベクトル検索もできなくはない・・ということをやってみた。</p><p>1000件ぽっちならともかく、やっぱある程度以上のデータ量になると、高尚な<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0\">アルゴリズム</a>やらインデックスを工夫する方面を頑張ったほうがいいのは間違いない。<br />\nただそれをエッジまわりだけで手軽にやる方法を見つけられなかったので、こういう力ずくの方法を試してみたという話。</p><p>そのうち、KVでRedisのベクトル検索の拡張みたいなのが使えたり、D1で<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SQLite\">SQLite</a>のベクトル検索の拡張みたいなのが使えたりするようになりません？</p>\n\n</div>"
}
