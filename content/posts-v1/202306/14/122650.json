{
  "title": "Solid/Svelte/(P)Reactで、それぞれリストを描画するコードの比較",
  "html": "\n<div class=\"section\">\n    <h3 id=\"お題\">お題</h3>\n    \n<ul>\n<li>配列に詰まったアイテムをそれぞれ表示する</li>\n<li>アイテムを表示するコンポーネントには副作用がある\n<ul>\n<li>つまり、不要なre-renderを避けたい</li>\n<li>今回は単に初期表示時点の`Date.now()`</li>\n</ul></li>\n<li>アイテムは増減する</li>\n</ul><p>という、あるあるな要件を、それぞれのフレームワークだとどう書くことになるか。</p><p>端的には、アイテムを増減させても、関係のない各アイテムのコンポーネントはそっとしておいてほしい。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Solid\">Solid</h3>\n    <pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> For<span class=\"synStatement\">,</span> createSignal <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;solid-js&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synType\">const</span> Item <span class=\"synStatement\">=</span> <span class=\"synStatement\">(</span>props<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">(</span>\n  <span class=\"synStatement\">&lt;</span>div<span class=\"synStatement\">&gt;</span>\n    #<span class=\"synIdentifier\">{</span>props.item<span class=\"synIdentifier\">}</span> at <span class=\"synIdentifier\">{</span><span class=\"synSpecial\">Date</span>.now<span class=\"synStatement\">()</span><span class=\"synIdentifier\">}</span>\n    <span class=\"synStatement\">&lt;</span>button <span class=\"synSpecial\">onClick</span><span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>props.<span class=\"synStatement\">delete</span><span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span>DEL<span class=\"synStatement\">&lt;</span>/button<span class=\"synStatement\">&gt;</span>\n  <span class=\"synStatement\">&lt;</span>/div<span class=\"synStatement\">&gt;</span>\n<span class=\"synStatement\">);</span>\n\n<span class=\"synType\">const</span> App <span class=\"synStatement\">=</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">const</span> <span class=\"synIdentifier\">[</span>items<span class=\"synStatement\">,</span> setItems<span class=\"synIdentifier\">]</span> <span class=\"synStatement\">=</span> createSignal<span class=\"synStatement\">(</span><span class=\"synIdentifier\">[</span><span class=\"synConstant\">1</span><span class=\"synIdentifier\">]</span><span class=\"synStatement\">);</span>\n  <span class=\"synType\">const</span> addItem <span class=\"synStatement\">=</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> setItems<span class=\"synStatement\">((</span>prev<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">[</span>...prev<span class=\"synStatement\">,</span> prev.length + <span class=\"synConstant\">1</span><span class=\"synIdentifier\">]</span><span class=\"synStatement\">);</span>\n  <span class=\"synType\">const</span> deleteItem <span class=\"synStatement\">=</span> <span class=\"synStatement\">(</span>idx<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span>\n    setItems<span class=\"synStatement\">((</span>prev<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">[</span>...prev.filter<span class=\"synStatement\">((</span>_<span class=\"synStatement\">,</span> i<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> idx <span class=\"synStatement\">!==</span> i<span class=\"synStatement\">)</span><span class=\"synIdentifier\">]</span><span class=\"synStatement\">);</span>\n\n  <span class=\"synStatement\">return</span> <span class=\"synStatement\">(</span>\n    <span class=\"synStatement\">&lt;&gt;</span>\n      <span class=\"synStatement\">&lt;</span>button <span class=\"synSpecial\">onClick</span><span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>addItem<span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span>ADD<span class=\"synStatement\">&lt;</span>/button<span class=\"synStatement\">&gt;</span>\n      <span class=\"synStatement\">&lt;</span>hr /<span class=\"synStatement\">&gt;</span>\n      \n      <span class=\"synStatement\">&lt;</span>For each<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>items<span class=\"synStatement\">()</span><span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span>\n        <span class=\"synIdentifier\">{</span><span class=\"synStatement\">(</span>item<span class=\"synStatement\">,</span> idx<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">(</span>\n          <span class=\"synStatement\">&lt;</span>Item item<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>item<span class=\"synIdentifier\">}</span> <span class=\"synStatement\">delete=</span><span class=\"synIdentifier\">{</span><span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> deleteItem<span class=\"synStatement\">(</span>idx<span class=\"synStatement\">())</span><span class=\"synIdentifier\">}</span> /<span class=\"synStatement\">&gt;</span>\n        <span class=\"synStatement\">)</span><span class=\"synIdentifier\">}</span>\n      <span class=\"synStatement\">&lt;</span>/For<span class=\"synStatement\">&gt;</span>\n    <span class=\"synStatement\">&lt;</span>/<span class=\"synStatement\">&gt;</span>\n  <span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n</pre><p>`For`コンポーネントでループを表現するだけで、不要なre-renderがスキップされるところがポイント。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"Svelte\">Svelte</h3>\n    <pre class=\"code svelte\" data-lang=\"svelte\" data-unlink>&lt;!-- ================== item.svelte ===================== --&gt;\n&lt;script&gt;\n  export let item;\n&lt;/script&gt;\n\n&lt;div&gt;\n  #{item} at {Date.now()}\n  &lt;button on:click&gt;DEL&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;!-- ================== app.svelte ===================== --&gt;\n&lt;script&gt;\n  import Item from &#34;./item.svelte&#34;;\n\n  let items = [1];\n  const addItem = () =&gt; {\n    items = [...items, items.length + 1];\n  };\n  const deleteItem = (idx) =&gt; {\n    items = [...items.filter((_, i) =&gt; idx !== i)];\n  };\n&lt;/script&gt;\n\n&lt;button on:click={addItem}&gt;ADD&lt;/button&gt;\n&lt;hr&gt;\n\n{#each items as item, idx}\n  &lt;Item {item} on:click={() =&gt; deleteItem(idx)} /&gt;\n{/each}</pre><p>こちらも`#each`で書けばre-renderされない。`on:click`って書くだけでイベントがdelegateできるのも嬉しい。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"PReact\">(P)React</h3>\n    <pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> useState<span class=\"synStatement\">,</span> memo <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;react&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synType\">const</span> Item <span class=\"synStatement\">=</span> memo<span class=\"synStatement\">(</span>\n  <span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span> item<span class=\"synStatement\">,</span> <span class=\"synStatement\">delete</span>: del <span class=\"synIdentifier\">}</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">(</span>\n    <span class=\"synStatement\">&lt;</span>div<span class=\"synStatement\">&gt;</span>\n      #<span class=\"synIdentifier\">{</span>item<span class=\"synIdentifier\">}</span> at <span class=\"synIdentifier\">{</span><span class=\"synSpecial\">Date</span>.now<span class=\"synStatement\">()</span><span class=\"synIdentifier\">}</span>\n      <span class=\"synStatement\">&lt;</span>button <span class=\"synSpecial\">onClick</span><span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>del<span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span>DEL<span class=\"synStatement\">&lt;</span>/button<span class=\"synStatement\">&gt;</span>\n    <span class=\"synStatement\">&lt;</span>/div<span class=\"synStatement\">&gt;</span>\n  <span class=\"synStatement\">),</span>\n  <span class=\"synStatement\">(</span>a<span class=\"synStatement\">,</span> b<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> a.item <span class=\"synStatement\">===</span> b.item\n<span class=\"synStatement\">);</span>\n\n<span class=\"synType\">const</span> App <span class=\"synStatement\">=</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synType\">const</span> <span class=\"synIdentifier\">[</span>items<span class=\"synStatement\">,</span> setItems<span class=\"synIdentifier\">]</span> <span class=\"synStatement\">=</span> useState<span class=\"synStatement\">(</span><span class=\"synIdentifier\">[</span><span class=\"synConstant\">1</span><span class=\"synIdentifier\">]</span><span class=\"synStatement\">);</span>\n  <span class=\"synType\">const</span> addItem <span class=\"synStatement\">=</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> setItems<span class=\"synStatement\">((</span>prev<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">[</span>...prev<span class=\"synStatement\">,</span> prev.length + <span class=\"synConstant\">1</span><span class=\"synIdentifier\">]</span><span class=\"synStatement\">);</span>\n  <span class=\"synType\">const</span> deleteItem <span class=\"synStatement\">=</span> <span class=\"synStatement\">(</span>idx<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> \n    setItems<span class=\"synStatement\">((</span>prev<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">[</span>...prev.filter<span class=\"synStatement\">((</span>_<span class=\"synStatement\">,</span> i<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> idx <span class=\"synStatement\">!==</span> i<span class=\"synStatement\">)</span><span class=\"synIdentifier\">]</span><span class=\"synStatement\">);</span>\n\n  <span class=\"synStatement\">return</span> <span class=\"synStatement\">(</span>\n    <span class=\"synStatement\">&lt;&gt;</span>\n      <span class=\"synStatement\">&lt;</span>button <span class=\"synSpecial\">onClick</span><span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>addItem<span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span>ADD<span class=\"synStatement\">&lt;</span>/button<span class=\"synStatement\">&gt;</span>\n      <span class=\"synStatement\">&lt;</span>hr /<span class=\"synStatement\">&gt;</span>\n      <span class=\"synIdentifier\">{</span>items.map<span class=\"synStatement\">((</span>item<span class=\"synStatement\">,</span> idx<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">(</span>\n        <span class=\"synStatement\">&lt;</span>Item item<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>item<span class=\"synIdentifier\">}</span> <span class=\"synStatement\">delete=</span><span class=\"synIdentifier\">{</span><span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> deleteItem<span class=\"synStatement\">(</span>idx<span class=\"synStatement\">)</span><span class=\"synIdentifier\">}</span> key<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>item<span class=\"synIdentifier\">}</span> /<span class=\"synStatement\">&gt;</span>\n      <span class=\"synStatement\">))</span><span class=\"synIdentifier\">}</span>\n    <span class=\"synStatement\">&lt;</span>/<span class=\"synStatement\">&gt;</span>\n  <span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n</pre><p>`memo()`でラップして、どういう条件ならre-renderしなくていいかを指定するのがポイント。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"まとめ\">まとめ</h3>\n    \n<ul>\n<li>Solid\n<ul>\n<li>JSXなので、`map()`で書くこともでき（その場合はre-renderしちゃう）、そういうところは中途半端</li>\n<li>必要なところだけ使えばいい、選べて嬉しいという見方もできる</li>\n</ul></li>\n<li>Svelte\n<ul>\n<li>ループを表現するには`#each`しかなく、それで最適化がなされるのでわかりやすい</li>\n<li>手数が最も少なくて素敵だが、コンポーネントはかさばる</li>\n</ul></li>\n<li>(P)React\n<ul>\n<li>良くも悪くも何もしてくれない</li>\n<li>そういうのは全部手動でやらないといけないので、もっと条件が複雑になったら？みたいな話になる</li>\n<li>Reactの場合は別途`react-dom`税がかかる</li>\n</ul></li>\n</ul><p>Vue派の人はすいません。けどたぶん`v-for`を使ったときはよしなにしてくれるので、Solidに近い体験な気がする。</p>\n\n</div>"
}
