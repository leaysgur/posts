{
  "title": "Svelteコンパイラのコードを読む Part.1",
  "html": "<p>気になるもののコードは読むべし、ということで。</p><p>ちなみにコードを読み始めた時点でのバージョンは、`v3.23.2`です。</p><p>自分のコードリーディング用のメモ記事なので、他の人が読んでわかりやすいかは保証できません！<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>読みすすめ方</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte\">GitHub - sveltejs/svelte: Cybernetically enhanced web apps</a></p>\n\n    </blockquote>\n<p>Svelteには、`runtime`と`compiler`のコードがある。</p><p>いずれはどっちにも目を通すつもりでいるけど、まずは`compiler`から読んでいく。</p><p>ただ`compiler`のコードをそのまま使うことはほぼないと思うので、実際にモジュールとしてどういう使われ方をするのかが知りたい場合は、Rollupなどバンドラーのプラグインのコードも見ることになりそう。</p><p>この記事ではコードの中身を1行ずつ（もちろん端折るけど）読んでいく。</p>\n\n</div>\n<div class=\"section\">\n    <h3>svelte/compiler</h3>\n    <p>まずOverviewで、APIとして`export`してるのはこんな感じ。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">export</span> <span class=\"synIdentifier\">{</span> <span class=\"synStatement\">default</span> <span class=\"synStatement\">as</span> compile <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">'./compile/index'</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">export</span> <span class=\"synIdentifier\">{</span> <span class=\"synStatement\">default</span> <span class=\"synStatement\">as</span> parse <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">'./parse/index'</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">export</span> <span class=\"synIdentifier\">{</span> <span class=\"synStatement\">default</span> <span class=\"synStatement\">as</span> preprocess <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">'./preprocess/index'</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">export</span> <span class=\"synIdentifier\">{</span> walk <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">'estree-walker'</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">const</span> VERSION <span class=\"synStatement\">=</span> <span class=\"synConstant\">'__VERSION__'</span><span class=\"synStatement\">;</span>\n</pre><p>さすが、コンパイラっぽいですね。</p><p>ちなみにここまではドキュメントにも記載があって、TL;DRならこれで十分だったりもする・・！</p>\n\n    <blockquote>\n        <p><a href=\"https://svelte.dev/docs#Compile_time\">https://svelte.dev/docs#Compile_time</a></p>\n\n    </blockquote>\n<p>それはさておき、この記事ではこの3つの関数の中身を追っていく。</p>\n\n<ul>\n<li>`compile()`</li>\n<li>`parse()`</li>\n<li>`preprocess()`</li>\n</ul><p>まずは名前から察して`preprocess()`から。</p>\n\n</div>\n<div class=\"section\">\n    <h3>svelte.preprocess()</h3>\n    <p>`preprocess`はその名の通り、事前に何かしらを処理するということ。</p><p>Svelteのコンテキストでいう`markup` / `style` / `script`の3つのパーツを、それぞれ事前に処理するということで、つまりはTypeScriptやPostCSSなどを使いたい場合に必要になる。</p><p>実際にどうやって導入するかみたいな話は、この記事では公式に丸投げする・・・。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/integrations#preprocessors\">GitHub - sveltejs/integrations: Ways to incorporate Svelte into your stack</a></p>\n\n    </blockquote>\n<p>というわけで、いざ`preprocess()`のコードへ。</p>\n\n<div class=\"section\">\n    <h4>compiler/preprocess/index.ts</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/blob/master/src/compiler/preprocess/index.ts\">https://github.com/sveltejs/svelte/blob/master/src/compiler/preprocess/index.ts</a></p>\n\n    </blockquote>\n<p>長さにして70行くらいで、関数のシグネチャーはこんな感じ。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synIdentifier\">function</span> preprocess<span class=\"synStatement\">(</span>\n  source: <span class=\"synType\">string</span><span class=\"synStatement\">,</span>\n  preprocessor: PreprocessorGroup | PreprocessorGroup<span class=\"synIdentifier\">[]</span><span class=\"synStatement\">,</span>\n  options?: <span class=\"synIdentifier\">{</span> filename?: <span class=\"synType\">string</span> <span class=\"synIdentifier\">}</span>\n<span class=\"synStatement\">)</span>: Promise<span class=\"synStatement\">&lt;</span><span class=\"synIdentifier\">{</span>\n  code: <span class=\"synType\">string</span><span class=\"synStatement\">,</span>\n  dependencies: <span class=\"synType\">string</span><span class=\"synIdentifier\">[]</span><span class=\"synStatement\">,</span>\n  toString<span class=\"synStatement\">()</span>: <span class=\"synType\">string</span><span class=\"synStatement\">,</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span> <span class=\"synIdentifier\">{}</span>\n</pre>\n<ul>\n<li>引数の`source`は、`*.svelte`ファイルの中身そのままの文字列</li>\n<li>`preprocessor`は、バンドラーの設定から渡される`markup` / `script` / `style`それぞれの処理\n<ul>\n<li>だいたいはそういうモジュールが渡ってくるはず</li>\n<li>これらは単一である必要はなく、同じターゲットに対して複数の処理をつなげることもできる</li>\n</ul></li>\n<li>`source`の中の3部位に対して、それぞれ渡された`preprocessor`の処理を通す\n<ul>\n<li>それぞれの部位は、正規表現で切り出してる</li>\n<li>やってることはただの文字列変換だが、`replace_async()`という非同期に複数の変換を行う最適化が入ってる</li>\n</ul></li>\n<li>変換後の`source`を、`Promise`で返す</li>\n</ul><p>ということをやってる。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte-preprocess/\">GitHub - sveltejs/svelte-preprocess: A &#x2728; magical &#x2728; Svelte preprocessor with sensible defaults and support for: PostCSS, SCSS, Less, Stylus, Coffeescript, TypeScript, Pug and much more.</a></p>\n\n    </blockquote>\n<p>`svelte-preprocess`に渡されるであろう野生のPreprocessorに必要なものを渡すための層という感じで、それ以上の情報はなさそう。</p><p>というわけで次。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>svelte.parse()</h3>\n    <p>`parse()`は、`*.svelte`ファイルをその名の通りパースして、ASTにして返す処理。</p><p>これは実は次に見ていく予定の`compile()`の中で使われてる関数で、バリデーションなどは行わず、単にASTに置換するだけのことをやるらしい。</p>\n\n<div class=\"section\">\n    <h4>compiler/parse/index.ts</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/blob/master/src/compiler/parse/index.ts\">https://github.com/sveltejs/svelte/blob/master/src/compiler/parse/index.ts</a></p>\n\n    </blockquote>\n<p>またもシグネチャーはこんな感じ。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synIdentifier\">function</span> parse<span class=\"synStatement\">(</span>\n  template: <span class=\"synType\">string</span><span class=\"synStatement\">,</span>\n  options: ParserOptions <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">{}</span>\n<span class=\"synStatement\">)</span>: <span class=\"synIdentifier\">{</span>\n  html: TemplateNode<span class=\"synStatement\">,</span>\n  css: <span class=\"synConstant\">Style</span><span class=\"synStatement\">,</span>\n  instance: Script<span class=\"synStatement\">,</span>\n  <span class=\"synStatement\">module</span>: Script<span class=\"synStatement\">,</span>\n<span class=\"synIdentifier\">}</span> <span class=\"synIdentifier\">{}</span>\n</pre>\n<ul>\n<li>内部的に`Parser`というクラスを使ってて、処理の本体はそっちにある</li>\n<li>バリデーションは行わないって書いてあったけど、`style`部が複数あったりするとエラーにしたりはする</li>\n<li>最終的に返すSvelteのASTは、4つのパーツから成る\n<ul>\n<li>html: `markup`部</li>\n<li>css: `style`部</li>\n<li>instance: `script`部</li>\n<li>module: `script(context=module)`部 = Svelteの概念</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Parserクラス</h4>\n    \n<ul>\n<li>パースした結果は自身のプロパティに溜め込んでいく\n<ul>\n<li>`html`と`css`と`js`というプロパティに積んでいく</li>\n</ul></li>\n<li>まずはHTMLのフラグメントとして読みはじめる\n<ul>\n<li>`script`と`style`に当たったら、それ用の特別な処理</li>\n<li>それ以外はいっしょくたに扱う</li>\n</ul></li>\n<li>Svelte独自の構文も当然ここで解析する\n<ul>\n<li>`svelte:`要素とか</li>\n<li>`{#if}`の独自テンプレート構文とか</li>\n<li>独自のバインディング属性とか</li>\n</ul></li>\n<li>ASTを歩くためのライブラリは以下\n<ul>\n<li>js: `acorn` + `estree-walker`</li>\n<li>css: `css-tree`</li>\n<li>html: 独自の実装</li>\n</ul></li>\n<li>独自のHTMLパーサーでは独自の構文をさばく\n<ul>\n<li><a href=\"https://github.com/sveltejs/svelte/blob/master/src/compiler/parse/state/tag.ts\">https://github.com/sveltejs/svelte/blob/master/src/compiler/parse/state/tag.ts</a></li>\n</ul></li>\n<li>`Parser`のコンストラクタ内でパース処理はすべて終わってる</li>\n</ul><p>そしてこの4つのパートからなるASTを、次の`compile()`が処理するという流れ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>SvelteのASTの様子</h4>\n    <p>元気なASTの様子を見たい場合は、ここで試せるようになってる。</p>\n\n    <blockquote>\n        <p><a href=\"https://astexplorer.net/\">AST explorer</a></p>\n\n    </blockquote>\n<p>プルダウンで`HTML`を選んでから、`svelte`を選ぶ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    \n<ul>\n<li>`svelte/compiler`は主に3つの関数を`export`してる</li>\n<li>1. `preprocess()`\n<ul>\n<li>TypeScriptなど変換が必要なコードを事前に処理する</li>\n<li>処理の実態はプリプロセッサがやるので、そのIN/OUTを調整してる</li>\n</ul></li>\n<li>2. `parse()`\n<ul>\n<li>Svelteコンポーネントのソース文字列を、SvelteのASTに変換する</li>\n</ul></li>\n<li>3. `compile()`\n<ul>\n<li>次回以降に</li>\n</ul></li>\n</ul><p>つまりコンパイラのすべては、ほぼ`compile()`に集約されているということ。</p><p>それでは次回へ続く。</p>\n\n</div>"
}
