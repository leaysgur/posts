{
  "title": "Slackからのリクエストを正しく検証する",
  "html": "<p>たとえばSlash CommandsをAWSで作っていて、そのコマンドからPOSTリクエストが飛んでくるエンドポイントの実装をしているときの話。</p><p>別に誰に叩かれてもいいAPIなら問題ないけど、ちゃんとSlash Commandsから飛んできたリクエストであることを判定したい場合がほとんどのはず。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Deprecated: Verification Tokenを使う</h3>\n    <p>これまで一般的だった、SlackアプリのBasic InformationのページにあるVerification Tokenを使う方法。</p><p>リクエストボディに入ってるトークンと照合するだけのお手軽なやつだった。</p><p>しかしこの方法は、もうすぐ使えなくなるらしい。</p>\n\n    <blockquote>\n        <p>This deprecated Verification Token can still be used to verify that requests come from Slack, but we strongly recommend using the above, more secure, signing secret instead.</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>Signing Secretを使う</h3>\n    <p>こっちが最新のやり方。</p><p>大筋としては、</p>\n\n<ul>\n<li>Basic Informationのページから、シークレットを控えておく\n<ul>\n<li>環境変数とかに入れて使う</li>\n</ul></li>\n<li>リクエストヘッダとボディを見て、自分でもシークレットを生成する\n<ul>\n<li>ヘッダのシグネチャとタイムスタンプと、ボディで</li>\n<li>HMAC/SHA256</li>\n</ul></li>\n<li>本物と比較する</li>\n</ul><p>という感じ。</p><p>コードはGistに上げた。</p><p><script src=\"https://gist.github.com/6bcf41d13673954f2abc6fead298fcff.js\"> </script></p><p>これをLambdaとかで使えばよし。</p>\n\n    <blockquote>\n        <p><a href=\"https://api.slack.com/authentication/verifying-requests-from-slack\">Verifying requests from Slack | Slack</a></p>\n\n    </blockquote>\n\n</div>"
}
