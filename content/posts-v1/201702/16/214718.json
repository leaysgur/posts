{
  "title": "mp3などの音源をxhrしてきて再生するには",
  "html": "<p>過去に何回も書いてるはずやのに、どういうわけか毎度ハマる。<br />\n今度こそメモっておく。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>音源を取得する</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> xhr = <span class=\"synStatement\">new</span> XMLHttpRequest();\n\nxhr.open(<span class=\"synConstant\">'GET'</span>, <span class=\"synConstant\">'/path/to/audio'</span>, <span class=\"synConstant\">true</span>);\nxhr.responseType = <span class=\"synConstant\">'arraybuffer'</span>;\n\nxhr.onload = () =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ここで処理</span>\n  <span class=\"synComment\">// xhr.response;</span>\n<span class=\"synIdentifier\">}</span>;\nxhr.send();\n</pre><p>バイナリを取得するのでそれ用の`responseType`が重要。<br />\n`blob`か`arraybuffer`かどっちかになるはずで、あとの処理でどういうことするかによる。</p><p>2017年やけど、jQueryの`ajax()`は、このへんの設定が上手くできないっぽいので注意。</p><p>ここで取得できない場合は、音源が見つけられてない。<br />\nパスにスペースがある時はちゃんとエスケープしないとダメとか。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 要エスケープ！</span>\n<span class=\"synStatement\">const</span> params = <span class=\"synIdentifier\">{</span> path: <span class=\"synConstant\">'risette/risette/risette</span><span class=\"synSpecial\">\\ </span><span class=\"synConstant\">-</span><span class=\"synSpecial\">\\ </span><span class=\"synConstant\">baby</span><span class=\"synSpecial\">\\ </span><span class=\"synConstant\">pink.mp3'</span> <span class=\"synIdentifier\">}</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h3>HTMLAudioで再生する</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// xhr.onload</span>\n<span class=\"synStatement\">const</span> blob = <span class=\"synStatement\">new</span> Blob(<span class=\"synIdentifier\">[</span>xhr.response<span class=\"synIdentifier\">]</span>, <span class=\"synIdentifier\">{</span> type: <span class=\"synConstant\">'audio/mpeg'</span> <span class=\"synIdentifier\">}</span>);\n<span class=\"synComment\">// xhr.responseType = 'blob'; の場合は、そのまま使える</span>\n<span class=\"synComment\">// const blob = xhr.response;</span>\n<span class=\"synStatement\">const</span> objectUrl = URL.createObjectURL(blob);\n\n<span class=\"synStatement\">const</span> audio = <span class=\"synStatement\">new</span> Audio();\naudio.autoplay = <span class=\"synConstant\">true</span>;\naudio.onload = () =&gt; <span class=\"synIdentifier\">{</span>\n  URL.revokeObjectURL(objectUrl);\n<span class=\"synIdentifier\">}</span>;\n\naudio.src = objectUrl;\n</pre><p>わかりやすい。<br />\nちなみにこのBlobなURLで`window.open()`とかすると、そのままダウンロードできるはず。</p>\n\n</div>\n<div class=\"section\">\n    <h3>WebAudioで再生する</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// xhr.onload</span>\n<span class=\"synStatement\">const</span> ctx = <span class=\"synStatement\">new</span> AudioContext();\n<span class=\"synStatement\">const</span> source = ctx.createBufferSource();\nctx.decodeAudioData(xhr.response).then(buffer =&gt; <span class=\"synIdentifier\">{</span>\n  source.buffer = buffer;\n\n  source.connect(ctx.destination);\n  source.start(ctx.currentTime);\n<span class=\"synIdentifier\">}</span>);\n</pre><p>後は煮るなり焼くなり。</p>\n\n</div>"
}
