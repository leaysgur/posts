{
  "title": "Next Generation State Mangement by @mweststrate in #ReactEurope の日本語メモ",
  "html": "<p>ReactEurope 2017のDay2より。</p><p>動画とスライドのリンクはこちらから。</p>\n\n    <blockquote>\n        <p><a href=\"https://youtu.be/nhNiKel6U9Y?t=1h8m33s\">ReactEurope 2017 Day 2 AM - YouTube</a> / <a href=\"http://tree.surge.sh/#1\">slides</a></p>\n\n    </blockquote>\n<p>MobXのサブプロジェクトみたいな存在である`mobx-state-tree`についての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF\">トーク</a>です。</p>\n\n<div class=\"section\">\n    <h3>`mobx-state-tree`とは</h3>\n    <p>本編はもちろんMobXについては知ってる前提 + `mobx-state-tree`のREADMEくらいは眺めてふんふんって感じじゃないと辛いかも・・って感じなので、さくっと紹介。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/mobxjs/mobx-state-tree\">GitHub - mobxjs/mobx-state-tree: Opinionated, transactional, MobX powered state container</a></p>\n\n    </blockquote>\n<p>MobXを使う場合、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>は特に指定がない。<br />\nその分だけ柔軟で、ボイラープレート的なコードも不要で書き味が良い！っていうメリットがある反面、やっぱりスケールさせるならルールが必要でしょ！考えればいいっちゃ良いけど、なんかお手本的なコードとか仕組みとかあった方が嬉しいよねーっていうのもあり。</p><p>そこで作者のMichelが目下やってるプロジェクトがコレです。</p>\n\n</div>\n<div class=\"section\">\n    <h3>本編メモ</h3>\n    \n<div class=\"section\">\n    <h4>MobX vs Redux</h4>\n    \n<ul>\n<li>この観点も悪くないが、いいとこどりできればより良い</li>\n<li>それぞれ表すなら\n<ul>\n<li>Mutable Model Graph -> MobX</li>\n<li>Immutable Tree -> Redux</li>\n<li>どちらもメリットとデメリットがある</li>\n</ul></li>\n<li>そこでいいとこどりの`mobx-state-tree`！</li>\n<li>以下、メインの機能の紹介</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Snapshots</h4>\n    \n<ul>\n<li>良いよねー</li>\n<li>Reduxだと、Stateのツリーがそのまま使える</li>\n<li>MobXだと、`computed`でそれ用の関数をModelに生やせばいい\n<ul>\n<li>ただそれだとボイラープレートなコードがどうしても必要になる・・</li>\n</ul></li>\n<li>`mobx-state-tree`だと、`getSnapshot()` / `onSnapshot()` / `applySnapShot()`ってのが用意されてる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>TypeChecks</h4>\n    \n<ul>\n<li>ランタイムの型チェックができるようになってる\n<ul>\n<li>どのモデルがどういう型か</li>\n<li>エラーになったなら何をどうしようとしたかがわかる</li>\n</ul></li>\n</ul><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A4%BD%A4%E2%A4%BD%A4%E2\">そもそも</a>、Modelの定義をこれでやる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> types <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;mobx-state-tree&quot;</span>\n\n<span class=\"synStatement\">const</span> Todo = types.model(<span class=\"synConstant\">&quot;Todo&quot;</span>, <span class=\"synIdentifier\">{</span>\n    title: types.string,\n    done: <span class=\"synConstant\">false</span>\n<span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">{</span>\n    toggle() <span class=\"synIdentifier\">{</span>\n        <span class=\"synIdentifier\">this</span>.done = !<span class=\"synIdentifier\">this</span>.done\n    <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>)\n\n<span class=\"synStatement\">const</span> Store = types.model(<span class=\"synConstant\">&quot;Store&quot;</span>, <span class=\"synIdentifier\">{</span>\n    todos: types.array(Todo)\n<span class=\"synIdentifier\">}</span>)\n</pre><p>みたいな。</p>\n\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSON\">JSON</a> patch</h4>\n    \n<ul>\n<li><a href=\"http://jsonpatch.com/\">http://jsonpatch.com/</a></li>\n<li>どういう処理がツリーに対して行われたか残る\n<ul>\n<li>`add` / `replace` / 'remove'</li>\n</ul></li>\n<li>サーバーサイドから他の人の変更差分をもらって反映・・とか</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Actions</h4>\n    \n<ul>\n<li>ダイレクトな値の更新を禁止する</li>\n<li>ツリーのどの部分に対してどういう変更をしたか残る</li>\n<li>更新できるのは自身とそのサブツリーのみ</li>\n<li>Actionも記録されるのでリプレイもできる\n<ul>\n<li>`clone()`したデータに対しても同じく</li>\n</ul></li>\n<li>`middleware`をかますこともできる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>値の参照の問題</h4>\n    \n<ul>\n<li>Mutableだと次の行で参照先が変わってる可能性がある\n<ul>\n<li>Immutableだとその心配はない</li>\n</ul></li>\n<li>これもSnapshotを使って解決できる</li>\n<li>モデルどうしの参照でも有用な概念</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>所感</h3>\n    \n<ul>\n<li>ImmutableとMutableの狭間でどう生きてくか・・は確かに課題感があったのでおもしろかった</li>\n<li>ただちょっとOpinionated過ぎるかなーという気もする\n<ul>\n<li>MobXを完璧に把握してないと旨味を味わう前に挫折しそう</li>\n<li>てか、こういうのが必要 = Reduxでやれ案件な気もする</li>\n</ul></li>\n<li>MobXやる上でSnapshotのア<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%C7%A5%A2\">イデア</a>はすごくよい\n<ul>\n<li>Model間での参照、連携問題は確かに悩んでた</li>\n<li>個別に`toJS()`するのも面倒やなーと思ってた</li>\n</ul></li>\n<li>ちなみにReduxのインテグレーションあるんやでまじやで\n<ul>\n<li><a href=\"https://github.com/mobxjs/mobx-state-tree/blob/master/src/interop/redux.ts\">mobx-state-tree/redux.ts at master &middot; mobxjs/mobx-state-tree &middot; GitHub</a></li>\n</ul></li>\n</ul>\n</div>"
}
