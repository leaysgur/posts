{
  "title": "0からはじめるJSX Part.6",
  "html": "<p>JSXネタを投稿し出してから、RTされたりはてブがつくようになりまして。<br />\nなんだか嬉しい反面、見られてると思うと、こんなにわかの怪しい独自解釈情報を拡散して良いのかなぁっていう微妙な心境にも・・。</p><p>25年間で得た知識を総動員して理解に励んでおりますが、いかんせん間違いもあると思います。<br />\nばしばしツッコミもお待ちしてますので、なにとぞ、なにとぞ。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>関数とクロージャ</h3>\n    \n    <blockquote>\n        <p>In JSX, functions are first-class objects and they have static types. You can declare a variable of a function type like var f : function(arg : number) : number, a function that takes a number as an argument and returns another number (or, just returns the same value as the argument; but it's not important here). The variable f can be called as f(42) from which you will get a number value.</p>\n\n    </blockquote>\n<p>JSXでのfunctionは第一級オブジェクトとして扱われ、型を持ちます。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> f = <span class=\"synIdentifier\">function</span>(arg: <span class=\"synType\">number</span>): <span class=\"synType\">number</span><span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>このように宣言することができ、f(42)のようにいつでも呼び出すことができます。</p>\n\n    <blockquote>\n        <p>It is possible to define closures (or anonymous functions). They are typically used to implement event listeners, which are popular in GUI programming. Closures are similar to JavaScript except for what this points at: when a closure is defined within a member function, it refers to the receiver of the member function. See the following example.</p>\n\n    </blockquote>\n<p>クロージャや匿名関数を使うことも可能です。<br />\nGUIプログラミングでよく使われるイベントリスナの実装に使われるものです。<br />\nJavaScriptのクロージャとの違いは、thisが指すものくらいです。<br />\nメンバー関数として定義されたクロージャは、そのメンバー関数を持つクラスを指します。<br />\n↑あってる・・かな？</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> _Main <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">var</span> foo = 42;\n\n  <span class=\"synIdentifier\">function</span> constructor() <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">var</span> f = <span class=\"synIdentifier\">function</span>() : void <span class=\"synIdentifier\">{</span>\n      log <span class=\"synIdentifier\">this</span>.foo; <span class=\"synComment\">// thisは_Main</span>\n    <span class=\"synIdentifier\">}</span>;\n\n    f(); <span class=\"synComment\">// says 42</span>\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> main(args : <span class=\"synType\">string</span><span class=\"synIdentifier\">[]</span>) : void <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">var</span> o = <span class=\"synStatement\">new</span> _Main();\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n    <blockquote>\n        <p>クロージャは前に記事も書きました。<br />\n<a href=\"http://lealog.hateblo.jp/entry/2012/04/03/184142\" target=\"_blank\" title=\"JavaScriptのクロージャについて\">JavaScriptのクロージャについて</a><br />\nおそらくJavaScriptとしての記法や仕様は同じようなものだと思うのですが、いかんせんクロージャ自体の使い道や利用シーンが想像できないので、現時点ではなんとも・・。</p>\n\n    </blockquote>\n<p>今回は短いのでもうひとつ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>モジュール機構</h3>\n    \n    <blockquote>\n        <p>JSX has a module system. You can reuse JSX class libraries by the import statement. For example, the following program uses timer.jsx module, which exports the Timer class.</p>\n\n    </blockquote>\n<p>JSXには、外部で記述したクラスを、モジュールとしてインポートする仕組みがあります。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synConstant\">&quot;timer.jsx&quot;</span>;\n\n<span class=\"synStatement\">class</span> _Main <span class=\"synIdentifier\">{</span>\n\n  <span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> main(args : <span class=\"synType\">string</span><span class=\"synIdentifier\">[]</span>) : void <span class=\"synIdentifier\">{</span>\n\n    Timer.setTimeout(<span class=\"synIdentifier\">function</span>() : void <span class=\"synIdentifier\">{</span>\n      log <span class=\"synConstant\">&quot;Hello, world!&quot;</span>;\n    <span class=\"synIdentifier\">}</span>, 1000);\n\n  <span class=\"synIdentifier\">}</span>\n\n<span class=\"synIdentifier\">}</span>\n</pre>\n    <blockquote>\n        <p>A module may export multiple classes, but you can specify what modules you import or name a namespace which the module is imported into.</p>\n\n    </blockquote>\n<p>この例では、timer.jsxをインポートすることで、Timerクラスを利用しています。<br />\nどのモジュールをインポートするかは、intoでネームスペースを指定することで制御できます。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 063.import-by-name/foo.jsxをインポート</span>\n<span class=\"synStatement\">import</span> <span class=\"synConstant\">&quot;063.import-by-name/foo.jsx&quot;</span>;\n<span class=\"synComment\">// 063.import-by-name/foo.jsxから、_Private1, _Private2の2クラスをインポート</span>\n<span class=\"synStatement\">import</span> _Private1, _Private2 from <span class=\"synConstant\">&quot;063.import-by-name/foo.jsx&quot;</span>;\n<span class=\"synComment\">// 063.import-by-name/foo.jsxから、_Private3クラスをfooクラスとしてインポート</span>\n<span class=\"synStatement\">import</span> _Private3 from <span class=\"synConstant\">&quot;063.import-by-name/foo.jsx&quot;</span> into foo;\n\n<span class=\"synStatement\">class</span> Test <span class=\"synIdentifier\">{</span>\n\n  <span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> run() : void <span class=\"synIdentifier\">{</span>\n    _Private1.say();\n    _Private2.say();\n    foo._Private3.say();\n  <span class=\"synIdentifier\">}</span>\n\n<span class=\"synIdentifier\">}</span>\n</pre>\n<ul>\n<li>\"_\"ではじまるクラスは、インポートされない。</li>\n<li>fromとクラス名を指定して、インポートすることもできる。</li>\n<li>into [特定の変数]で、インポートすることもできる。</li>\n</ul><p>もちろんインポートした時にクラス名が被ってたらエラー、自ファイルをインポートするのもエラーなど、きっちりしてます。</p>\n\n    <blockquote>\n        <p>大規模開発っぽい！<br />\nどういう単位でファイルを分けるべきとか、そういうのも勉強しなきゃならんですね。</p>\n\n    </blockquote>\n<p>次回で一応最後です。</p>\n\n</div>\n</div>"
}
