{
  "title": "0からはじめるJSX Part.2",
  "html": "<p>というわけで、ノン<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE\">プログラマ</a>がこつこつJSXを勉強していくコーナーです。<br />\n一応どんなレベルかを書いておくと・・</p>\n\n<ul>\n<li>会社の新入社員研修で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>を2週間やった＋実務で2週間さわった　→　ほとんど覚えてない。</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>に関しては1年くらい勉強中で、Prototypeとかクラス風な使い方とかを最近かじれてきた程度。</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/PHP\">PHP</a>に関しても同じくらい。</li>\n<li>でも全部独学＋作りたいサービスに必要なとこだけとかなので偏りあり。</li>\n<li>Web技術とかそういうのは好きなので、「知識としては」あれこれ知ってる方かと。</li>\n</ul><p>そんな私が、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>らしい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>を覚えるべく、噂のJSXに手を出していきます。</p>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>はじめる前に</h3>\n    <p>おそらく正当なやり方は、gitでcloneしてきてコンパイルしてNodeで実行・・なんでしょうけど、それはやりません。<br />\nなぜならイマイチよくわかってないから。<br />\nVPS借りてるならやれよって話ではあるかと思いますが、オンラインで試せる環境もあることなので、今はそれで良いかと思ってたり。</p><p>そのうちやるかもですが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>なのでコンパイルしちゃえばローカルでも動くし、ねぇ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>チュートリアルに載ってる</h3>\n    \n<div class=\"section\">\n    <h4>hello.jsxを読み解く</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> _Main <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> main(args : <span class=\"synType\">string</span><span class=\"synIdentifier\">[]</span>) : void <span class=\"synIdentifier\">{</span>\n        log <span class=\"synConstant\">&quot;Hello, world!&quot;</span>;\n    <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>説明がついてて、</p>\n\n    <blockquote>\n        <p>Class _Main has a static member function (<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/a.k.a.\">a.k.a.</a> a class method) named main, that takes an array of strings and returns nothing. _Main.main(:string[]):void is the entry point of JSX applications that is called when a user invokes an application from command line. JSX, like <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>, does not allow top-level statements or functions.</p>\n\n    </blockquote>\n<p>_Mainクラスは静的なmainというメンバーを持ち、それは文字列を引数としてうけとり、何も返しません。<br />\n_Main.main(:string[]):voidとは、JSXが動くときに最初に実行されるものです。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>と同じく、JSXではトップレベルでの宣言や関数を許していません。</p><p>実行すると、consoleに即座にHello, world!されるコードっぽい。</p>\n\n</div>\n<div class=\"section\">\n    <h4>型付言語って</h4>\n    <p>関数や変数やらを宣言するタイミングで、</p>\n\n<ul>\n<li>どういう引数をとって</li>\n<li>どういう結果を返すのか</li>\n</ul><p>を一緒に宣言しないといけないっぽい。</p><p>そうするからこそ、「型付」されて、安全やったりわかりやすいコードになる・・はず。<br />\n微かに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>でこんなんやった気がする・・・！</p><p>お決まりなので、ちゃんと書けってことやと理解します。</p>\n\n</div>\n<div class=\"section\">\n    <h4>staticでvoidなfunction</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> main(args : <span class=\"synType\">string</span><span class=\"synIdentifier\">[]</span>) : void <span class=\"synIdentifier\">{</span>\n<span class=\"synComment\">/*</span>\n<span class=\"synComment\">staticは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>作らなくても使えるやつ。</span>\n<span class=\"synComment\">               関数名(引数 ： 引数の詳細)　</span>\n<span class=\"synComment\">               \t\t　　　　　　: 返り値</span>\n<span class=\"synComment\">*/</span>\n</pre><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>にはない考え方やと思うので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>の情報を調べた結果の理解として。</p>\n\n</div>\n<div class=\"section\">\n    <h4>最初に実行？トップレベル？</h4>\n    <p>これも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>にはないような・・。<br />\nそして日本語でそれらしいのがなかったので、理解が怪しいｗ<br />\nお作法として、コードのトップレベルには、勝手に変数とか関数とか作っちゃダメですっていう決まりの模様。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 書いたコード・実行させたいコードにおいて</span>\n\nlog <span class=\"synConstant\">&quot;Nyaaa&quot;</span>;\n<span class=\"synComment\">// いきなり何かするとか</span>\n\n<span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> main(args : <span class=\"synType\">string</span><span class=\"synIdentifier\">[]</span>) : void <span class=\"synIdentifier\">{</span>\n    log <span class=\"synConstant\">&quot;Hello, world!&quot;</span>;\n<span class=\"synIdentifier\">}</span>\n<span class=\"synComment\">// 関数宣言するとかはダメで</span>\n\n<span class=\"synStatement\">class</span> _Main <span class=\"synIdentifier\">{</span>\n\t<span class=\"synComment\">// hoge...</span>\n\n<span class=\"synIdentifier\">}</span>\n<span class=\"synComment\">// トップレベル(=一番インデントされてないやつ)は、クラス！</span>\n</pre><p>そういう感じでしょうか・・・。</p><p>で、中でも \"_Main\"と名のつくクラスの中身が、実行時に最初に読まれる、と。<br />\nというわけでこのクラスの中で、他で準備したやつを呼び出したりする感じとみた。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> Hoge<span class=\"synIdentifier\">{</span>\n\t<span class=\"synIdentifier\">function</span> huga()<span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synComment\">// 書き方はてきとー...</span>\n\t<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">class</span> _Main<span class=\"synIdentifier\">{</span>\n\t<span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> main(args : <span class=\"synType\">string</span><span class=\"synIdentifier\">[]</span>) : void <span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synComment\">// Hoge.huga... みたいな？</span>\n\t<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>たぶんこんな感じやで・・、たぶん。</p><p>とか書いてみて思ったけど、そんな最初に実行されるクラスの名前が決まってるとかありえへんやろーと思う・・ので、今回のサンプルではたまたまこの名前なんやろな。<br />\nお作法として、最終的に実行する部分のクラスはこの名前にしときましょうね、みたいなんがあるんかもしらん。</p>\n\n</div>\n<div class=\"section\">\n    <h4>logはconsole.log</h4>\n    <p>自分用のヘルパー関数を勝手に作ることはあるけど、それと似たようなもんかしら。<br />\nJSX界では、console.logはlogと同義になっている模様。<br />\nおそらくこういうのが他にも沢山あって、コーディングするの楽でしょ！って意味なはず。<br />\nそれにしてもconsole.logみたく、()がないのはなんでやろう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>クラスベースの言語</h4>\n    <p>サンプルとか読んでてやっとわかったことですが、クラスベースの言語ってこういう意味やったんね。<br />\n何を作るにもとりあえずクラスを宣言して、そこに書く。<br />\n実行する主体も、メインのクラスとして宣言しておいて、それが実行されて・・みたいな。</p><p>ブラウザの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>メインやと、どうしてもイベント発火待ちになると思います。<br />\nノン<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE\">プログラマ</a>としては、そこがわかりやすいキッカケやったのにぃ。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>素朴な疑問こーなー</h3>\n    <p>というわけで読み解いてみました。<br />\nそして貯まった疑問たち。</p>\n\n<ul>\n<li>使ってないのであれば、引数もいらんのじゃ・・？</li>\n<li>string[ ]の[ ]ってなんですか・・配列？文字の配列で文字列・・？これもお決まり？</li>\n<li><a href=\"http://jsx.github.com/try/\" target=\"_blank\" title=\"JSX - Statically-typed, object-oritented programming lauguage\">JSX - Try</a>では、勝手なコードを書くとうまく変換してくれない？</li>\n</ul>\n    <blockquote>\n        <p>例えば最初のhello.jsxで、<br />\n\"<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Hello%20world\">Hello world</a>\"じゃなくて、\"Goodnight world\"とかに変えるだけなら問題なく動くのですが、<br />\nTestをTest2とかにすると、コンパイル後の最後のrequireの行の関数名が違っててエラーになっちゃいます。<br />\n↑最終的に呼び出す関数名を修正したら動く。<br />\n↑というか、Run！ってしたときに実行させるためには、それ用の固定のクラスが必要よね、たぶんエラーというかどうしようもない仕様なんやと自己解決。</p>\n\n    </blockquote>\n\n<ul>\n<li>staticの他にも種類があるらしく、それの違いはなんやろなぁ。</li>\n</ul><p>こんな程度で躓くあたりが初心者っぽいなぁと自分でも思いますｗ</p>\n\n</div>\n<div class=\"section\">\n    <h3>自力で実装してみる</h3>\n    <p>JSXだけじゃなくて、ブラウザを開いたら動くやつを。</p>\n\n<div class=\"section\">\n    <h4>Jsx</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> _Main <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> main() : void <span class=\"synIdentifier\">{</span>\n    log <span class=\"synConstant\">&quot;<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hello%20world\">hello world</a>!&quot;</span>;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>うん、やっぱ引数いらんと思うんですけど・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a></h4>\n    <p>コンパイル後です。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// hello.jsとして保存</span>\n<span class=\"synIdentifier\">var</span> JSX = <span class=\"synIdentifier\">{}</span>;\n(<span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n\t\n\t<span class=\"synComment\">/**</span>\n<span class=\"synComment\">\t * copies the implementations from source interface to target</span>\n<span class=\"synComment\">\t */</span>\n\t<span class=\"synIdentifier\">function</span> $__jsx_merge_interface(target, source) <span class=\"synIdentifier\">{</span>\n\t  <span class=\"synStatement\">for</span> (<span class=\"synIdentifier\">var</span> k <span class=\"synStatement\">in</span> source.prototype)\n\t    <span class=\"synStatement\">if</span> (source.prototype.hasOwnProperty(k))\n\t      target.prototype<span class=\"synIdentifier\">[</span>k<span class=\"synIdentifier\">]</span> = source.prototype<span class=\"synIdentifier\">[</span>k<span class=\"synIdentifier\">]</span>;\n\t<span class=\"synIdentifier\">}</span>\n\t\n\t<span class=\"synComment\">/**</span>\n<span class=\"synComment\">\t * defers the initialization of the property</span>\n<span class=\"synComment\">\t */</span>\n\t<span class=\"synIdentifier\">function</span> $__jsx_lazy_init(obj, prop, func) <span class=\"synIdentifier\">{</span>\n\t  <span class=\"synIdentifier\">function</span> reset(obj, prop, value) <span class=\"synIdentifier\">{</span>\n\t    <span class=\"synType\">Object</span>.defineProperty(obj, prop, <span class=\"synIdentifier\">{</span>\n\t      value: value, \n\t      enumerable: <span class=\"synConstant\">true</span>,\n\t      writable: <span class=\"synConstant\">true</span>,\n\t      configurable: <span class=\"synConstant\">true</span>\n\t    <span class=\"synIdentifier\">}</span>);\n\t    <span class=\"synStatement\">return</span> value;\n\t  <span class=\"synIdentifier\">}</span>\n\t\n\t  <span class=\"synType\">Object</span>.defineProperty(obj, prop, <span class=\"synIdentifier\">{</span>\n\t    get: <span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n\t      <span class=\"synStatement\">return</span> reset(obj, prop, func());\n\t    <span class=\"synIdentifier\">}</span>,\n\t    set: <span class=\"synIdentifier\">function</span> (v) <span class=\"synIdentifier\">{</span>\n\t      reset(obj, prop, v);\n\t    <span class=\"synIdentifier\">}</span>,\n\t    enumerable: <span class=\"synConstant\">true</span>,\n\t    configurable: <span class=\"synConstant\">true</span>\n\t  <span class=\"synIdentifier\">}</span>);\n\t<span class=\"synIdentifier\">}</span>\n\t\n\t<span class=\"synComment\">/*</span>\n<span class=\"synComment\">\t * global functions called by JSX as Number.* (renamed so that they do not conflict with local variable names)</span>\n<span class=\"synComment\">\t */</span>\n\t<span class=\"synIdentifier\">var</span> $__jsx_parseInt = parseInt;\n\t<span class=\"synIdentifier\">var</span> $__jsx_parseFloat = parseFloat;\n\t<span class=\"synIdentifier\">var</span> $__jsx_isNaN = isNaN;\n\t<span class=\"synIdentifier\">var</span> $__jsx_isFinite = isFinite;\n\t\n\t<span class=\"synIdentifier\">var</span> $__jsx_ObjectToString = <span class=\"synType\">Object</span>.prototype.toString;\n\t<span class=\"synIdentifier\">var</span> $__jsx_ObjectHasOwnProperty = <span class=\"synType\">Object</span>.prototype.hasOwnProperty;\n\t\n\t<span class=\"synComment\">/*</span>\n<span class=\"synComment\">\t * public interface to JSX code</span>\n<span class=\"synComment\">\t */</span>\n\tJSX.require = <span class=\"synIdentifier\">function</span> (path) <span class=\"synIdentifier\">{</span>\n\t  <span class=\"synIdentifier\">var</span> m = $__jsx_classMap<span class=\"synIdentifier\">[</span>path<span class=\"synIdentifier\">]</span>;\n\t  <span class=\"synStatement\">return</span> m !== <span class=\"synStatement\">undefined</span> ? m : <span class=\"synStatement\">null</span>;\n\t<span class=\"synIdentifier\">}</span>\n\t<span class=\"synComment\">/**</span>\n<span class=\"synComment\">\t * class _Main extends Object</span>\n<span class=\"synComment\">\t * @constructor</span>\n<span class=\"synComment\">\t */</span>\n\t<span class=\"synIdentifier\">function</span> _Main() <span class=\"synIdentifier\">{</span>\n\t<span class=\"synIdentifier\">}</span>\n\t\n\t_Main.prototype = <span class=\"synStatement\">new</span> <span class=\"synType\">Object</span>;\n\t<span class=\"synComment\">/**</span>\n<span class=\"synComment\">\t * @constructor</span>\n<span class=\"synComment\">\t */</span>\n\t<span class=\"synIdentifier\">function</span> _Main$() <span class=\"synIdentifier\">{</span>\n\t<span class=\"synIdentifier\">}</span>;\n\t\n\t_Main$.prototype = <span class=\"synStatement\">new</span> _Main;\n\t\n\t<span class=\"synComment\">/**</span>\n<span class=\"synComment\">\t */</span>\n\t_Main.main$ = <span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n\t  console.log(<span class=\"synConstant\">&quot;<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/hello%20world\">hello world</a>!&quot;</span>);\n\t<span class=\"synIdentifier\">}</span>;\n\t\n\t_Main$main$ = _Main.main$;\n\t\n\t<span class=\"synIdentifier\">var</span> $__jsx_classMap = <span class=\"synIdentifier\">{</span>\n\t  <span class=\"synConstant\">&quot;hello.jsx&quot;</span>: <span class=\"synIdentifier\">{</span>\n\t    _Main: _Main,\n\t    _Main$: _Main$\n\t  <span class=\"synIdentifier\">}</span>\n\t<span class=\"synIdentifier\">}</span>;\n<span class=\"synIdentifier\">}</span>());\n</pre>\n</div>\n<div class=\"section\">\n    <h4>html</h4>\n    <pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synComment\">&lt;!DOCTYPE HTML&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\"> </span><span class=\"synType\">lang</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;ja-JP&quot;</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">\t</span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">meta</span><span class=\"synIdentifier\"> </span><span class=\"synType\">charset</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/UTF-8\">UTF-8</a>&quot;</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synPreProc\">\t</span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">title</span><span class=\"synIdentifier\">&gt;</span>Testing JSX!<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">title</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">head</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\"> </span><span class=\"synType\">src</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;hello.js&quot;</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synStatement\">window</span><span class=\"synSpecial\">.addEventListener</span>(<span class=\"synConstant\">&quot;load&quot;</span><span class=\"synSpecial\">, </span><span class=\"synIdentifier\">function</span>(<span class=\"synSpecial\">e</span>)<span class=\"synSpecial\"> </span><span class=\"synIdentifier\">{</span>\n<span class=\"synSpecial\">  JSX.require</span>(<span class=\"synConstant\">'hello.jsx'</span>)<span class=\"synSpecial\">._Main.main$</span>()<span class=\"synSpecial\">;</span>\n<span class=\"synIdentifier\">}</span>)<span class=\"synSpecial\">;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">script</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;&lt;/</span><span class=\"synStatement\">body</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">html</span><span class=\"synIdentifier\">&gt;</span>\n</pre><p>なんとなーくわかってきた気がします。<br />\nしばらくは<a href=\"http://jsx.github.com/tutorial.html\" target=\"_blank\" title=\"JSX Tutorial\">JSX Tutorial</a>攻めで。</p><p>あ、優しく(時に厳しく)ご指導いただける方も探してますので！</p>\n\n</div>\n</div>\n</div>"
}
