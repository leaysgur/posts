{
  "title": "0からはじめるJSX Part.5-2",
  "html": "<p>今回は前回の記事で書いたクラスとインターフェースのところについて、自分用のまとめです。</p><p>オブジェクト指向とは何ぞやっていうところのおさらいと、JSXではこう書くっていうのをまとめておきます。</p>\n\n    <blockquote>\n        <p>いい加減くどいですが、この記事を書いた人間はオブジェクト指向初挑戦のぺーぺーです。<br />\n清々しいほど明らかに勘違いしている部分もあるやもしれませんが、その場合はお手数ですがご指摘いただければなぁと。</p>\n\n    </blockquote>\n\n<div class=\"seemore\">\n    \n<div class=\"section\">\n    <h3>前回のサンプルソース</h3>\n    <p><a href=\"http://jsx.github.com/try/#\" target=\"_blank\" title=\"JSX - Statically-typed, object-oritented programming lauguage\">JSX - Try</a>にて、以下を貼り付けることでそのまま動きます。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">interface</span> Flyable <span class=\"synIdentifier\">{</span>\n     <span class=\"synStatement\">abstract</span> <span class=\"synIdentifier\">function</span> fly() : void;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">abstract</span> <span class=\"synStatement\">class</span> Animal <span class=\"synIdentifier\">{</span>\n     <span class=\"synIdentifier\">function</span> eat() : void <span class=\"synIdentifier\">{</span>\n          log <span class=\"synConstant\">&quot;An animal is eating!&quot;</span>;\n     <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">class</span> Bat <span class=\"synStatement\">extends</span> Animal <span class=\"synStatement\">implements</span> Flyable <span class=\"synIdentifier\">{</span>\n     override <span class=\"synIdentifier\">function</span> fly() : void <span class=\"synIdentifier\">{</span>\n          log <span class=\"synConstant\">&quot;A bat is flying!&quot;</span>;\n     <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">abstract</span> <span class=\"synStatement\">class</span> Insect <span class=\"synIdentifier\">{</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">class</span> Bee <span class=\"synStatement\">extends</span> Insect <span class=\"synStatement\">implements</span> Flyable <span class=\"synIdentifier\">{</span>\n     override <span class=\"synIdentifier\">function</span> fly() : void <span class=\"synIdentifier\">{</span>\n          log <span class=\"synConstant\">&quot;A bee is flying!&quot;</span>;\n     <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">class</span> Test <span class=\"synIdentifier\">{</span>\n\n     <span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> run() : void <span class=\"synIdentifier\">{</span>\n          <span class=\"synComment\">// fo bar</span>\n          <span class=\"synIdentifier\">var</span> bat = <span class=\"synStatement\">new</span> Bat();\n         \n          <span class=\"synIdentifier\">var</span> animal : Animal = bat; <span class=\"synComment\">// OK. A bat is an animal.</span>\n          animal.eat();\n         \n          <span class=\"synIdentifier\">var</span> flyable : Flyable = bat; <span class=\"synComment\">// OK. A bat can fly</span>\n          flyable.fly();\n         \n          <span class=\"synComment\">// for Bee</span>\n          <span class=\"synIdentifier\">var</span> bee = <span class=\"synStatement\">new</span> Bee();\n         \n          flyable = bee; <span class=\"synComment\">// A bee is also flyable</span>\n          flyable.fly();\n     <span class=\"synIdentifier\">}</span>\n\n<span class=\"synIdentifier\">}</span>\n</pre><p>さて、クラスって何やねん！からスタートした初学者にとっては、イヤな感じしかしないですね。</p>\n\n<ul>\n<li>extendsとimplementsって何が違うんかな！</li>\n<li>overrideってのもあるやん！なにこれ！</li>\n<li>interfaceってなんですか、型はきっちり決めないといけないんじゃなかったんですか。</li>\n<li>それにちゃっかり書いてるけど、abstractってなんやねんな。</li>\n<li>finalとかnativeとか何に何をつけたらええの？</li>\n</ul><p>とまぁ、あの頃は色んな疑問が爆発したわけですよ。<br />\n一つずつ潰していきます。</p>\n\n</div>\n<div class=\"section\">\n    <h3>クラスのおさらい</h3>\n    <p>Javaの入門書とか見てもさっぱり。<br />\n研修の講師があれこれ言っててもさっぱり。<br />\nそんな私が、最近やっとクラスベースの考え方っていうのを理解できてきた感じがあるので、それを文章に。</p>\n\n    <blockquote>\n        <p>プログラミングする以上、何か目的があるからそうするわけで、何かメリットがあるからその書き方を選ぶわけで。<br />\nその目的を最初からズバッと教えてくれれば、つべこべ言わずあれこれ考えず、言われるがままに覚えたのに。<br />\n<s>それを最初から言わないからあれこれ考えてドツボにはまり、つべこべ言って講師が逆ギレするんやで。</s></p>\n\n    </blockquote>\n<p>さて、クラスベースとか、オブジェクト指向とか、そういった概念を理解するには、ゲームを開発するシーンを想像するのが一番わかりやすいなぁと、最近思います。</p>\n\n<div class=\"section\">\n    <h4>最大の目的は効率化：部品化</h4>\n    <p>なんでこんなまどろっこしい書き方するんやろなぁーって疑問に思ったあの頃。<br />\nでもそうした方がスマートやし、後から直すのも楽。<br />\n変数を使うこと自体は抵抗なく覚えたのに、なんでクラスはあかんかったんかは永遠の謎。</p><p>とあるRPGゲームを作るとして、フィールドに配置するキャラクターを色々用意する必要があるとします。</p>\n\n<ul>\n<li>キャラクターはフィールドに配置されます。</li>\n<li>キャラクターにはプレーヤー、モンスター、NPCの種類があります。</li>\n<li>プレーヤーは操作することで動き、モンスターは勝手に動きますが、NPCは動きません。</li>\n<li>プレーヤーとNPCだけが会話することができます。</li>\n</ul><p>みたいな設定の時に、オブジェクト指向がその真価を発揮します。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// JSX風ではあるものの、便宜上の書き方をしてます・・。</span>\n\n<span class=\"synComment\">// 会話できる属性</span>\n<span class=\"synStatement\">interface</span> Conversation<span class=\"synIdentifier\">{</span>\n     <span class=\"synStatement\">abstract</span> <span class=\"synIdentifier\">function</span> saySomething() : void;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// 動ける属性</span>\n<span class=\"synStatement\">interface</span> Moving<span class=\"synIdentifier\">{</span>\n     <span class=\"synStatement\">abstract</span> <span class=\"synIdentifier\">function</span> moveAnywhere() : void;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// 全ての基本となるクラス</span>\n<span class=\"synStatement\">abstract</span> <span class=\"synStatement\">class</span> Character<span class=\"synIdentifier\">{</span>\n     <span class=\"synIdentifier\">function</span> showOnField(): void <span class=\"synIdentifier\">{</span>\n      <span class=\"synComment\">// フィールドに配置される・・</span>\n     <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// モンスターは動ける属性だけ</span>\n<span class=\"synStatement\">final</span> <span class=\"synStatement\">class</span> Monster <span class=\"synStatement\">extends</span> Character <span class=\"synStatement\">implements</span> Moving<span class=\"synIdentifier\">{</span>\n     override <span class=\"synIdentifier\">function</span> moveAnywhere(): void<span class=\"synIdentifier\">{</span>\n          <span class=\"synComment\">// Monsterは2倍速く動く！とか。</span>\n     <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// プレーヤーは動けるし話せる</span>\n<span class=\"synStatement\">final</span> <span class=\"synStatement\">class</span> Player <span class=\"synStatement\">extends</span> Character <span class=\"synStatement\">implements</span> Moving, Conversation<span class=\"synIdentifier\">{</span>\n     override <span class=\"synIdentifier\">function</span> saySomething(): void<span class=\"synIdentifier\">{</span>\n          log <span class=\"synConstant\">'プレーヤーです！'</span>;\n     <span class=\"synIdentifier\">}</span>\n\n     override <span class=\"synIdentifier\">function</span> moveAnywhere(): void<span class=\"synIdentifier\">{</span>\n          <span class=\"synComment\">// Playerはアイテム使ったときだけ早く動くけど普段は普通とか。</span>\n     <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// NPCは話せるだけ</span>\n<span class=\"synStatement\">final</span> <span class=\"synStatement\">class</span> Npc <span class=\"synStatement\">extends</span> Character <span class=\"synStatement\">implements</span> Conversation<span class=\"synIdentifier\">{</span>\n     override <span class=\"synIdentifier\">function</span> saySomething(): void<span class=\"synIdentifier\">{</span>\n          log <span class=\"synConstant\">'NPCです！'</span>;\n     <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>みたいな。</p>\n\n</div>\n<div class=\"section\">\n    <h4>こうしておけば</h4>\n    <p>プレーヤー、モンスター、NPCの3つをそれぞれプログラムするよりも良いですよね。</p>\n\n<ul>\n<li>すっきり書けるし。</li>\n<li>シャイなゲームにしたければ、最初のConversationの1箇所だけ塞げば良いし。</li>\n<li>喋れるボスキャラをプログラムする時も、似たようなやり方で実装できちゃう。</li>\n</ul><p>という感じに便利なのがクラスベースの考え方というところで自己完結して、本題。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>修飾子いっぱい</h3>\n    <p>サンプルソースを漁ると、あれやこれや出てきます。<br />\nドキュメントないので何が本当か探すのも大変です。</p>\n<pre class=\"code lang-\" data-lang=\"\" data-unlink>expected keyword: class interface mixin abstract final native __fake__\nexpected keyword: function var static abstract override final const native __readonly__</pre><p>クラスや変数を宣言しようとした時に、変な宣言すると出るエラーです。<br />\nというわけで、察するに何かを宣言する時に使えるパターンは、これらの組み合わせってことがわかります。</p><p>それぞれが何かを見ていくと・・。</p>\n\n<div class=\"section\">\n    <h4>interface</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">interface</span> Flyable <span class=\"synIdentifier\">{</span>\n     <span class=\"synStatement\">abstract</span> <span class=\"synIdentifier\">function</span> fly() : void;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">class</span> Bee <span class=\"synStatement\">implements</span> Flyable <span class=\"synIdentifier\">{</span>\n     override <span class=\"synIdentifier\">function</span> fly() : void <span class=\"synIdentifier\">{</span>\n          log <span class=\"synConstant\">&quot;A bee is flying!&quot;</span>;\n     <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>このクラスベースの言語では、基礎となるクラスを用意して、それに＋αで必要な機能を拡張したりしていきます。<br />\nで、そこで注意しないといけないのが、無闇矢鱈と拡張できるわけではないということ。</p><p>上の例でいうInsectクラスを元にBeeクラスを作ることを、いわゆる継承って言いますが、JSXでは一つのクラスしか継承できません。<br />\nあっちのクラスもこっちのクラスも継承して、新しいの作りたい！って思ってもできません。<br />\n多重継承を認めないこと自体は、他の言語でもあるみたいです。</p><p>そこで登場するのがこのinterfaceだそうな。<br />\nこれは、</p>\n\n<ul>\n<li>abstractな関数のみを有します。(abstractについては後述)</li>\n<li>普通にvarとかはできる。</li>\n<li>implements interfaceName のように、extendsではなくimplementsされるのがinterfaceです。</li>\n<li>interfaceがinterfaceを実装することもできる。</li>\n<li>interfaceを実装したクラスでは、必ずinterfaceが持つabstractなメンバを実装する必要がある。</li>\n<li>implementsの場合は、他のinterfaceと一緒にいくつでも実装できます。</li>\n</ul>\n    <blockquote>\n        <p>extendsすることを継承、implemetnsすることを実装って言うらしい。</p>\n\n    </blockquote>\n<p>「〜属性」みたいな機能をつけたい場合は、interfaceでやりましょうってイメージでしょうか。<br />\nそのくせサンプルのソースにほっとんど出てこないのはなんで？いらない子？</p><p>これはもうちょっと調べる必要があるかなぁ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>mixin</h4>\n    <p>これだけはJavaのリファレンスにも載ってなかったんですよね。<br />\nそんで調べてもよーわからんし。<br />\nソースを読みあさった上での今の結論は、</p>\n\n<ul>\n<li>interfaceとclassの間みたいな性質。</li>\n<li>interfaceと違って、abstractじゃない関数も有することができる。</li>\n<li>interfaceと同じでimplementsする。</li>\n<li>interfaceと同じで何度でもimplementsできる。</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>abstract</h4>\n    <p>いわゆる抽象〜シリーズ。<br />\nクラス宣言時に使っても良いし、関数や変数に使っても良い。</p>\n\n<div class=\"section\">\n    <h5>抽象メソッド</h5>\n    <p>関数の中身は実装せず、宣言だけ。<br />\ninterfaceの中によく登場しますね。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">interface</span> Flyable <span class=\"synIdentifier\">{</span>\n     <span class=\"synStatement\">abstract</span> <span class=\"synIdentifier\">function</span> fly() : void; <span class=\"synComment\">// コレのこと</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n</div>\n<div class=\"section\">\n    <h5>抽象クラス</h5>\n    <p>継承されるまでインスタンス化できません。<br />\nということで、継承されることを前提としているクラスには、abstractがつく模様。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">abstract</span> <span class=\"synStatement\">class</span> Animal <span class=\"synIdentifier\">{</span> <span class=\"synComment\">// コレのこと</span>\n     <span class=\"synIdentifier\">function</span> eat() : void <span class=\"synIdentifier\">{</span>\n          log <span class=\"synConstant\">&quot;An animal is eating!&quot;</span>;\n     <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>抽象＝後でちゃんと実装するから！＝不完全なやつみたいなイメージで良いんかな。</p><p>というか、staticかnewしないと基本的にクラスは何もできないって感じ？</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>override</h4>\n    <p>オーバーライド！<br />\nいわゆる継承したクラスのメソッドを、改めて実装するやつですね。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">abstract</span> <span class=\"synStatement\">class</span> Animal <span class=\"synIdentifier\">{</span>\n     <span class=\"synIdentifier\">function</span> eat() : void <span class=\"synIdentifier\">{</span>\n          log <span class=\"synConstant\">&quot;An animal is eating!&quot;</span>;\n     <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">final</span> <span class=\"synStatement\">class</span> Human <span class=\"synStatement\">extends</span> Animal<span class=\"synIdentifier\">{</span>\n    override <span class=\"synIdentifier\">function</span> eat(): void<span class=\"synIdentifier\">{</span> <span class=\"synComment\">// コレ！</span>\n      log <span class=\"synConstant\">&quot;Human also like eating!&quot;</span>;\n    <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n<span class=\"synStatement\">class</span> Test <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> run() : void <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">var</span> h = <span class=\"synStatement\">new</span> Human();\n    h.eat(); <span class=\"synComment\">// Human also like eating!</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>オーバーライドする時は、必ずoverrideってつけないといけないそうです。</p>\n\n</div>\n<div class=\"section\">\n    <h4>final</h4>\n    <p>抽象とは対照的に、これで完結！みたいな。<br />\n最終的な成果物？あっちこっち継承して実装して出来上がり！っていうものにつけられる模様。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">interface</span> Phonable<span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n<span class=\"synStatement\">abstract</span> <span class=\"synStatement\">class</span> iPodTouch<span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">final</span> <span class=\"synStatement\">class</span> iPhone <span class=\"synStatement\">extends</span> iPodTouch <span class=\"synStatement\">implements</span> Phonable<span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// ...</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>final functionとかだと、後でoverrideできないとか、変数でも代入できないとか。</p>\n\n</div>\n<div class=\"section\">\n    <h4>static</h4>\n    <p>基本的にはnewして使うクラスベースの言語において、newしなくても使えるようにするための修飾子。<br />\n内部的に使う変数とかじゃなくて、何度も参照されるような設定値系のクラスに使われてるのをよく見かけたので、そういう使い方なんでしょうね。<br />\n後は実行する本体のクラスとか。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> Config <span class=\"synIdentifier\">{</span>\n\t<span class=\"synStatement\">static</span> <span class=\"synIdentifier\">var</span> quantity = 360;\n\t<span class=\"synStatement\">static</span> <span class=\"synStatement\">const</span> size     = 2.0;\n\t<span class=\"synStatement\">static</span> <span class=\"synStatement\">const</span> decay    = 0.98;\n\t<span class=\"synStatement\">static</span> <span class=\"synStatement\">const</span> gravity  = 2.0;\n\t<span class=\"synStatement\">static</span> <span class=\"synStatement\">const</span> speed    = 6.0;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">final</span> <span class=\"synStatement\">class</span> _Main <span class=\"synIdentifier\">{</span>\n\t<span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> main() : void <span class=\"synIdentifier\">{</span>\n             <span class=\"synComment\">// Config.quantity...</span>\n\t<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>static class..で始まるやつは見かけないので、そういう使い方はしないんでしょう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>const</h4>\n    <p>finalとの違いがわかりませんが、おそらく変数にはこれを使うっぽい。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> Config <span class=\"synIdentifier\">{</span>\n\t<span class=\"synStatement\">static</span> <span class=\"synIdentifier\">var</span> quantity = 360;\n\t<span class=\"synStatement\">static</span> <span class=\"synStatement\">const</span> size     = 2.0;\n\t<span class=\"synStatement\">static</span> <span class=\"synStatement\">const</span> decay    = 0.98;\n\t<span class=\"synStatement\">static</span> <span class=\"synStatement\">const</span> gravity  = 2.0;\n\t<span class=\"synStatement\">static</span> <span class=\"synStatement\">const</span> speed    = 6.0;\n<span class=\"synIdentifier\">}</span>\n</pre><p>static const hogehogeって使い方が基本らしい。</p>\n\n</div>\n<div class=\"section\">\n    <h4>nativeと__fake__と__readonly__</h4>\n    <p>一応載せたけど本当に使えるのかどうかもわからず・・。<br />\n調べてみたけど正体もわからず・・。</p><p>サンプルで見かけたのがあったので載せておきます。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">native</span> __fake__ <span class=\"synStatement\">class</span> Foo <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">var</span> name : <span class=\"synType\">string</span>;\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">class</span> Test <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">static</span> <span class=\"synIdentifier\">function</span> run() : void <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">var</span> f : Foo = <span class=\"synIdentifier\">{</span> name: <span class=\"synConstant\">&quot;hello&quot;</span> <span class=\"synIdentifier\">}</span> as __noconvert__ Foo;\n    log f.name;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n<ul>\n<li>まったく意味がわかりません。</li>\n<li>__readonly__にいたっては影も形もない！</li>\n<li>__noconvert__ってなんですか・・。</li>\n</ul><p>どなたか解説を・・。</p><p>nativeに至っては他の言語で実装する時に・・・とか書いてありまして、もう意味不明です。<br />\n後で紹介しますが、ブラウザAPIを使えるようにインポートするモジュールの中にいっぱい書いてあったです。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>まとめてみたものの、たぶんベストプラクティス的にパターン化されてるものがあって、それを覚えてそれを使うのが一番良いんやろなぁ・・。<br />\nドキュメント読むなんてプログラム勉強する第一歩にすらなってない感があるやね！<br />\nそして用語に翻弄されてるっていう。</p><p>どういう区分でabstractにするとかinterfaceにするとか、設計面での想像がつかないのがなぁ。</p><p>やっぱコードリーディングが大事ということで。<br />\nチュートリアル終わったらサンプルソースを見ていこう。</p>\n\n</div>\n</div>"
}
