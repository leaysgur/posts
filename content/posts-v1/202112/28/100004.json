{
  "title": "2021年の振り返り",
  "html": "<p>子育てしてたら一日が終わってて、それを続けてたら一年が終わってた、そんな一年。<br />\nおかげさまで、👼🏻は1歳半の元気ざかりで何よりではある・・が、思ってたより大変すぎる！いやほんとまじで（<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>やってたこと</h3>\n    \n<div class=\"section\">\n    <h4>脱SPA、からのMPA、からの・・・</h4>\n    \n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2021/08/12/103111\">&#x306A;&#x3093;&#x3067;&#x3082;SPA&#x306B;&#x3059;&#x308B;&#x3093;&#x3058;&#x3083;&#x306D;&#x3047;&#xFF01;&#x3068;&#x3044;&#x3046;&#x4E3B;&#x5F35;&#x306E;&#x305D;&#x306E;&#x5148; - console.lealog();</a></p>\n\n    </blockquote>\n<p>「とりあえずReactでNext.jsでSPAでよろしく！」みたいにやってくる案件を、「ほんとにSPAにする必要あんのけ？😒」って切り捨てる係をやってた。</p><p>もちろん、ほとんどのケースにおいてSPAである必要はなかった。</p><p>ただし巨SPAではなくても、</p>\n\n<ul>\n<li>いくつかのページは、SPAでやるべき多機能さ</li>\n<li>いくつかのページは、SPAでなくていいけど、ちょっとだけJSほしい</li>\n<li>いくつかのページは、完全に静的でいい</li>\n</ul><p>みたいな複合ケースがほとんど。で、それをいい感じにまとめてやるためのソリューションって、意外にないのだなあ〜ってなってたのが今年のハイライト。</p>\n\n<ul>\n<li>Next.js</li>\n<li>SvelteKit</li>\n<li>ViteのMPAモード</li>\n<li>WMR</li>\n<li>etc...</li>\n</ul><p>などなど試したけど、どれも一長一短って感じで、すべてのニーズを満たすものではなかった。</p><p>SPAでもMPAでもないとなると、いわゆる`#transitionalapps`か？！ってなるかもしれんけど、そういう系は受託の会社でやすやすと手を出せるものではない。</p>\n\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2021/11/12/110129\">Transitional Apps by Rich Harris &#x306E;&#x8981;&#x70B9;&#x307E;&#x3068;&#x3081; - console.lealog();</a></p>\n\n    </blockquote>\n<p>手離れよく納品するためにはSSR成分を採用するわけにはいかず、そうなるとSSG側に軸足を置くしかなくて、トレンド的に発掘されてないがゆえに手札が足りない状態って感じ。</p><p>なのでとりあえずはNext.jsを採用しつつ（どうせとりあえずReactでよろしくって言われるし😇）、あらゆる機能を使わず、ただのwebpackラッパーとして使うパターンがずっと鉄板になってた。</p><p>`next build && next export`に対する不満としては、</p>\n\n<ul>\n<li>Reactってところ\n<ul>\n<li>詳しくは後述</li>\n</ul></li>\n<li>バンドルサイズのデカさ\n<ul>\n<li>Preactにすればいいっちゃいいけど</li>\n</ul></li>\n<li>webpackの遅さ\n<ul>\n<li>Viteに慣れてしまうと・・</li>\n</ul></li>\n<li>そもそも欲しいものではないことによるギャップ</li>\n</ul><p>かな〜。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Cloudflare Workers</h4>\n    <p>話題のエッジワーカーでAPIをいろいろ作ったり、弊社のメディアで連載を書いたりもした。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.codegrid.net/series/2021-cloudflare-workers\">&#x30B5;&#x30FC;&#x30D0;&#x30FC;&#x30EC;&#x30B9;&#x5B9F;&#x884C;&#x74B0;&#x5883;Cloudflare Workers | CodeGrid</a></p>\n\n    </blockquote>\n<p>このブログでもCloudflareの回し者か？ってくらい記事を書いた気がする。</p><p>ことEdge Workerに対する評価は、</p>\n\n<ul>\n<li>Node.jsではないがゆえにあらゆる資産が使えない</li>\n<li>プロトコルもHTTPしか通らない</li>\n</ul><p>という縛りさえ受け入れられれば、</p>\n\n<ul>\n<li>ユーザーとのレイテンシも大きく減らせるうえ</li>\n<li>軽くて速くてあらゆる用途に使える</li>\n</ul><p>丁度いい選択肢なのかなと。</p><p>ただその他にも細かい制約はあるので、例えばLambdaがオワコンかと問われると、まだまだ全然そんなことはない。</p><p>ツール回りとしては、Worker環境をNode.jsでエミュレートする`miniflare`がとにかく便利。2021年に読んだOSSのコードの中でいちばん感動した。ほんとすごい👏</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/cloudflare/miniflare\">GitHub - cloudflare/miniflare: &#x1F525; Fully-local simulator for Cloudflare Workers</a></p>\n\n    </blockquote>\n<p>ただまぁ日本国内向け用途限定で考えると、CDNもたった2拠点しかないし、単なるFaaS代替としてしか見ないなら、そんなにコスパは良くないのでは？って思います。<br />\nプロトコルがHTTPしか使えないので、全体の構成を設計しなおさないと厳しい！って話もありそうで、エッジでリクエスト受けて高速化や！って言っても、裏でDBのデータを引くために海を渡ってきますしばし待ってて・・みたいなケースもありそう。</p><p>というか結局DBのデータがすべてであり、もとよりそれをキャッシュしていたならば、エッジのWorkerで処理したいことってなんぞ？ってなると思うし、今までのアーキテクチャに当てはめてユースケースを探っても、大してハマらない気がしてる。</p><p>ではDBまでエッジに持ってく未来はあるか？って考えると、まあなくはないのかもしれんけど、結果整合性とうまく付き合ってグローバルにやりくりするのは大変すぎるはず。そのあたりの点については、Durable Objectsが一石を投じるのかなーと思いつつ、これからどうなることやら・・ってフェーズ。</p><p>このへん、SvelteKitやらRemixやらCDNエッジで動かせます系フレームワークが一般化してくれば、もう少し開拓が進むのかなーと。みんな大好きNext.jsもそのへんは見据えてると思うので。</p><p>それ以外の0ベースでアーキテクチャを模索する動きは、すぐには日の目を見なそう。`Content-Type: multipart/mixed`でストリーミング再評価な流れないかなー？RSCがそうですって？</p><p>あとはエッジWorker各社の互換性も問題になってくるのもこれからやと思うし、その名の通りエッジな技術であるなあって感じ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>第二外国語としてのRust</h4>\n    <p>仕事で使う機会はまったくないけど、RustでLeetCodeをやったり、年末恒例のAdventOfCodeをやったりしてた。</p><p>ただ何か作りたいものがあって勉強してるっていうよりか、ただ何もしないまま時間が過ぎていくのが嫌なだけ。</p><p>とりあえず何か未来の投資になればと思い、1日1問LeetCodeをやり続けるBotと化してる今日この頃。ただしアルゴリズムとか競プロにはあまり興味が持ててないので、あくまでエンジニア一般教養として継続することを目的に。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>よく考えてたこと</h3>\n    <p>つぎにポエミーな方面の振り返り。</p>\n\n<div class=\"section\">\n    <h4>Write less code</h4>\n    <p>これは、要点を抑えた簡潔で必要十分なコードを、いかに少ない行数で表現できるかに、心血を注ぐということ。</p><p>メタプログラミングしろってことではないし、オーバーエンジニアリングなんか以ての外。エンジニアたるもの、ちょうどいいエンジニアリングがしたいなーと。</p><p>コード量は、増えれば増えるほどバグを生む可能性が高くなり保守性も下がっていくし、後からキャッチアップするのも大変になる。なので不用意な抽象化は避けて、トリッキーな外部ライブラリも使わず、単機能なものを愚直に組み合わせてコードを書くことを心がけてた。</p><p>書いてる当時はキマってたオレオレルールも、時間経ってからみるとなんで？って絶対なるから。いやほんとに、1年も持たずにそうなるから。愚直に書かれてて、そこにあるものを読めばわかります状態になってるほうが圧倒的にマシ。</p><p>日々のメンテが継続的に繰り返される生きたコードベースや、重厚な事業ドメインが必要な案件に腰を据えるならば、もう少し中間レイヤーを厚くしたりとか、それこそDDD的なエッセンスを拝借するとかもいいと思う。</p><p>けど、運用が存在しない受託ワールドにおいては、おそらくこれが正解なんじゃないかなーと思ってる。</p>\n\n</div>\n<div class=\"section\">\n    <h4>速いは正義</h4>\n    <p>端的にいうと、パフォーマンスを意識したコードの書き方をするということ。パフォーマンスを意識した技術選定をするということ。</p><p>ここで言ってるパフォーマンスは、クライアントにおける表示速度やJSの実行速度はもちろん、APIのレスポンスもテストの実行速度や開発時の快適さまで、ありとあらゆるもの。</p><p>アルゴリズムとかあんま興味ないって書いたけど、こういうとこには何か通ずるものがあるかも？</p>\n\n</div>\n<div class=\"section\">\n    <h4>一貫性を追求する</h4>\n    <p>コードベースにおいて、</p>\n\n<ul>\n<li>変数名</li>\n<li>エラーハンドリング</li>\n<li>関数の大きさ</li>\n<li>処理の流れ・債務</li>\n<li>引数の順番・構成</li>\n<li>コメントの書き方</li>\n<li>ディレクトリ名やファイル名</li>\n<li>etc...</li>\n</ul><p>といったあらゆるものの一貫性を、徹底的に保つということ。中途半端なコードを残さないということ。読んでて「？」ってなる瞬間をひたすらに潰すということ。</p><p>普通のことに見えるけど、実際は簡単ではないと思ってる。他の人のコードを読んでると己のムジュンに気付いてないな？っていうのもよくあるので。そういう意味では、整理整頓が得意な人は誰でもそこそこのWebエンジニアになれると思います。いやほんと。</p><p>普通の運用案件にも当てはまるとは思うけど、これも手離れよく納品するためにはシリーズかも？</p><p>なんかツールの使い方やら新しい技術の〜って感じじゃなく、こういうとこにばっか目が向くようになったの、老いを感じるな・・🙄</p>\n\n</div>\n<div class=\"section\">\n    <h4>Reactってなんであんな難しいの</h4>\n    <p>それなりの年数でReact案件をこなしてきて、チョットデキル状態になった今、改めて思ってること。</p><p>UIをコンポーネントで定義するとか、単方向なデータフローとか、なんでもリアクティブな構造にするだとか、もちろん物事を正規化して単純化する方向に動かした功績はあるとしても、Hooks以降のAPIってなんであんな難しいんやろうって。</p><p>UIライブラリとしても、扱う必要のあるAPIがテクニカルすぎるというか、知っておくべき必要のあることが多すぎるというか、なんというかそういう感じ。</p><p>別にディスるつもりはないし、仕事では結局「とりあえずReactで〜」が実情であり、現世で日銭を稼ぐために必要なので使うけども、なんかこう心の底から迎合できないというか。</p>\n\n    <blockquote>\n        <p>I find it truly disturbing how professionals can make their and everyone’s lives so difficult, how deeply disconnected React is from the actual practice of programming, which is all about understanding how your code executes. My mind is boggled by 5 by 5 zoom calls of well-paid “staff engineers” chatting about React and writing tutorial upon tutorial like any of this normal. And these are the loud ones. I pray for the entry-level programmers, the contractors, the voiceless, who aren’t beefing on Twitter, who do not have a sense of how strange this kind of development is and don’t have the courage to speak up.<br />\n<a href=\"https://news.ycombinator.com/item?id=29422397\">https://news.ycombinator.com/item?id=29422397</a></p>\n\n    </blockquote>\n<p>これ。</p><p>とにかくReactの使い方や考え方ばっかを覚える必要があって、本来考えるべきところにリソースが余らないというか・・。（その上でちゃんとThinking in Reactできてる人ってそうそうおらんと思ってるし、自分も怪しいところある）</p><p>そういうわけで、このままついて行ってええのか？って思ってるときに、React Forgetとか言われて更にその思いを強めた年の瀬。</p><p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"en\" dir=\"ltr\">React Forget is cool... but what if other frameworks already do that by default?<br><br>I re-created the TodoList demo in <a href=\"https://twitter.com/Huxpro?ref_src=twsrc%5Etfw\">@Huxpro</a>&#39;s talk using idiomatic Vue 3: <a href=\"https://t.co/eg6M3h2sqA\">https://t.co/eg6M3h2sqA</a></p>&mdash; Evan You (@youyuxi) <a href=\"https://twitter.com/youyuxi/status/1469141349685334020?ref_src=twsrc%5Etfw\">2021年12月10日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p><p>かといってSvelteなら難しくないのか？って聞かれると、それはそれで即答できんけど、まぁReactよりはマシでは？とか。htmxまで回帰するのは流石に抵抗があるけど・・。</p><p>UIライブラリの域を越えつつある最近の機能とか、Nextとのがっちり感とか、この先さらにその傾向が強くなる予感がして落ち着かないのです。</p><p>「できれば内製できるようになりたいので、とりあえずReactでお願いします」っていう案件も耳タコくらい聞いてきたけど、そんなマインドで扱えるシロモノではない！ってことだけ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>子持ちエンジニア 勉強会 無理</h4>\n    <p>子が生まれてから、登壇はおろか勉強会への参加が本当に厳しくなったと思う。</p><p>まず18時〜な時間帯は、晩ごはんとお風呂と寝かしつけというゴールデンパスなので無理。<br />\n21時〜とかだとするとワンチャンあるけど、それでも大きな音を出せないし、貴重な夫婦の時間でもあるし、気が気でない。</p><p>土日なんかもちろん無理で、奥さんにワンオペを強いてまで出たい勉強会なんかあるか？みたいになる。</p><p>子がもう少し育ってくれたら、変わってくるもんなんかなー。みんな平日の日中にやってくれたらいいのに。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>2022年は</h3>\n    <p>2021年は、頭を使ったり調べ物をする仕事が圧倒的に多くて、腰を据えてコードを書く仕事があんまりなかった。</p><p>納品前提だと選べるアーキテクチャにも限界があるし、視野の偏りも否めないなと思っていて、これからもエンジニアとして生きていくためには、もっと野生に帰りリアルワールドに触れる機会を増やすべきなのか？とか。そういう意味で、受託の会社で扱える案件の性質には限界があって、そこに期待してはいけないのかもなーと。</p><p>となるとやっぱ副業かしら？ってところで、どうするかなーって思ってる年の瀬であり、冬休みの宿題って感じ。うーん、キャリアに悩んでる☃️</p><p>個人的には、引き続きエッジWorkerまわりの活用とか、よりパフォーマンスに根ざしたアーキテクチャまわりを探っていきたいなという所存でございます。</p>\n\n</div>"
}
