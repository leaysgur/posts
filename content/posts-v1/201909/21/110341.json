{
  "title": "W3C TPAC 2019 に行ってきたメモ Part.2",
  "html": "<p>最終日！</p>\n\n    <blockquote>\n        <p><a href=\"https://www.w3.org/2019/09/TPAC/schedule.html#Friday\">TPAC 2019: Detailed schedule</a></p>\n\n    </blockquote>\n<p>このPart.2は金曜の記事で、この日はずっと「Media WG」のオブザーバーしてました。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h4>Links</h4>\n    \n<ul>\n<li>アジェンダ\n<ul>\n<li><a href=\"https://www.w3.org/wiki/Media_WG/TPAC/2019\">https://www.w3.org/wiki/Media_WG/TPAC/2019</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>MSE, DataCue and TextTrackCue</h4>\n    \n<ul>\n<li>Timed Text WGとのJoint meeting</li>\n<li>スライド\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1Oir_gRhleMSpR850KZlxnz20xnvYnJoNk-ZlsMVrbIY/edit#slide=id.p\">https://docs.google.com/presentation/d/1Oir_gRhleMSpR850KZlxnz20xnvYnJoNk-ZlsMVrbIY/edit#slide=id.p</a></li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5>DataCue / TextTrackCue</h5>\n    \n<ul>\n<li><a href=\"https://github.com/WICG/datacue/blob/master/explainer.md\">https://github.com/WICG/datacue/blob/master/explainer.md</a></li>\n<li>HLS/DASHなどの再生にあわせて動的にコンテンツを挿入したりしたい\n<ul>\n<li>広告とか、字幕とか、etc</li>\n</ul></li>\n<li>メディアのコンテナに含まれるメタデータを、JS側にイベントで知らせたい\n<ul>\n<li>メディア -> JSへのin-bandでデータを流すのがDataCueの目的</li>\n<li>TextTrackCueはその逆方向</li>\n</ul></li>\n<li>論点はデータの処理をどこでやるか\n<ul>\n<li>ブラウザ側で余計な処理はすべきではない</li>\n<li>メインスレッドとの行き来はコスト</li>\n<li>メディア側でやるとしても、気付かずにJS側で2重でパースしちゃうこともあるかも</li>\n<li>mp3のid3とかよくある</li>\n</ul></li>\n<li>WICGのリポジトリでデザインを固めるのでよさそう\n<ul>\n<li>今の提案は少しスコープが大きいので、より細かいシンプルなケースが必要かも</li>\n<li>コンポーネントも細分化できるはず</li>\n</ul></li>\n<li>やり取りするデータは何がいいか\n<ul>\n<li>暗号化の問題はどうなる</li>\n<li>JSON？</li>\n<li>どうせDOMに表示するなら、DOM fragmentsとかでもよいのでは</li>\n<li>時間がかかる処理でもある</li>\n</ul></li>\n<li>APIを同期にするか非同期にするか\n<ul>\n<li>非同期のほうがよさそうではある</li>\n</ul></li>\n<li>MSEとあわせて考える必要はある？\n<ul>\n<li>デザインによってはMSEのパーサーを使わずにやれるかもしれない</li>\n<li>概観を示して分離できるものは分離したい</li>\n</ul></li>\n<li>メタデータについて</li>\n<li>Sourcing In-band Media Resource Tracks from Media Containers into HTML\n<ul>\n<li><a href=\"https://dev.w3.org/html5/html-sourcing-inband-tracks/\">https://dev.w3.org/html5/html-sourcing-inband-tracks/</a></li>\n</ul></li>\n<li>Media Fragments URI 1.0 (basic)\n<ul>\n<li><a href=\"https://www.w3.org/TR/media-frags/\">https://www.w3.org/TR/media-frags/</a></li>\n<li><a href=\"https://www.w3.org/TR/2011/WD-media-frags-recipes-20111201/\">https://www.w3.org/TR/2011/WD-media-frags-recipes-20111201/</a></li>\n</ul></li>\n<li>メディアのin-bandにメタデータをそもそも含めるべきか\n<ul>\n<li>ブロードキャストのユースケースでは、in-bandが望ましい</li>\n<li>DASHでは選択可能</li>\n</ul></li>\n<li>（どのWGで主導すべきかみたいな話）</li>\n<li>結論: DataCueの検討は進めていく</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4>MSE: vNext</h4>\n    \n<ul>\n<li>Media Source Extensionsのnextを考えてる</li>\n<li>Editorを探している\n<ul>\n<li>Netflix, Micorsoft...</li>\n</ul></li>\n<li>（どうやって仕様を検討しアップデートしていくかみたいな話）\n<ul>\n<li>別の仕様に分けたくないとか</li>\n<li>仕様にバージョンをつけるとテストしにくいとか</li>\n</ul></li>\n<li>MSEでメディアのコンテナを生成するオーバーヘッドを削減したい</li>\n<li><a href=\"https://discourse.wicg.io/t/proposal-allow-media-source-extensions-to-support-demuxed-and-raw-frames/3730\">https://discourse.wicg.io/t/proposal-allow-media-source-extensions-to-support-demuxed-and-raw-frames/3730</a></li>\n</ul>\n<div class=\"section\">\n    <h5>MSE in Worker</h5>\n    \n<ul>\n<li>MSEをWorkerコンテキストで使いたい\n<ul>\n<li>FOMSでDEMOを作った</li>\n<li>仕様より実装で問題をみつけた</li>\n<li>`URL`オブジェクトをつかってWorkerとやり取りしてる</li>\n</ul></li>\n<li>ServiceWorkerでも使えるとよい？\n<ul>\n<li>ユースケースがなさそう</li>\n<li>あれはNetwork系のことをやる場所では</li>\n<li>SourceBufferとGCの問題もある</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>Eviction Policiesについて</h5>\n    \n<ul>\n<li>\n<ul>\n<li><a href=\"https://github.com/wicg/media-source/blob/mse-eviction-policies/mse-eviction-policies-explainer.md\">https://github.com/wicg/media-source/blob/mse-eviction-policies/mse-eviction-policies-explainer.md</a></li>\n</ul></li>\n<li>低レイテンシの配信なのでは、GOPを無限にして遅延を最小化したい\n<ul>\n<li>MSEは全てをバッファリングするので、それができない</li>\n<li>GOP = キーフレームと依存フレームの1かたまりでバッファリングとGCに使われる</li>\n</ul></li>\n<li>これはそれをなんとかするための提案</li>\n<li>次のFOMSでプロトタイプの実装をしてみる</li>\n<li>最新から遅れている場合には先頭にシークしたい\n<ul>\n<li>GOPが無限だとシークできないのでは</li>\n<li>実装を調べてみる</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4>MSE: issues</h4>\n    \n<div class=\"section\">\n    <h5>Restore auto-revoking behavior of createObjectURL(MediaSource) to revert breaking change introducing memory leaks</h5>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/media-source/issues/156\">https://github.com/w3c/media-source/issues/156</a></li>\n<li>当時の`createObjectURL()`で作成したURLは自動でrevokeされてた</li>\n<li>その後、自動でrevokeするための`createFor()`が追加された</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>Support playback through unbuffered ranges, and allow app to provide buffered gap tolerance</h5>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/media-source/issues/160\">https://github.com/w3c/media-source/issues/160</a></li>\n<li>vNextでは、欠落したデータ（ギャップ）の処理と低遅延のためのEvictionPolicyが求められてる</li>\n<li>ギャップについて\n<ul>\n<li>アプリケーションで把握できるギャップと、不明なギャップがある</li>\n<li>スキップできるギャップもあるはず</li>\n<li>videoはないけどaudioだけはある場合に、videoを待ちたくないかも</li>\n<li>既存のMSEプレーヤーはだいたいトラックごとにSourceBufferを持ってる</li>\n<li>HTMLの`bufferedRanges`の仕様が変わったので、MSEでも追従したい</li>\n<li><a href=\"https://html.spec.whatwg.org/#dom-media-buffered\">https://html.spec.whatwg.org/#dom-media-buffered</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>EvictionPolicyについて</h5>\n    \n<ul>\n<li>ビデオ再生の終わっても、バッファを持ち続けるのはよくない\n<ul>\n<li>Appleはメモリ使用量にも懸念があると言ってる</li>\n</ul></li>\n<li>ポリシーの追加は、すでに同様の実装があるappには嬉しくないかも</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>MSE in Worker</h5>\n    \n<ul>\n<li>ServiceWorkerのEditorいわく、APIはできる限りSWに公開できるとよい\n<ul>\n<li>`createObjectURL()`のように許可されないものもあるけど</li>\n</ul></li>\n<li>Workerから返すデータはobject URL?transferable object?</li>\n<li>SWでMediaSourceを作ってそれをどうmedia要素で描画するのか</li>\n<li>SWで使えるようにすべきかどうかは、SWのグループとも議論が必要\n<ul>\n<li>将来的にユースケースが生まれるかもしれない vs ユースケースが思い当たらないなら不要</li>\n<li><a href=\"https://github.com/w3c/media-source/issues/236\">https://github.com/w3c/media-source/issues/236</a></li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>JSON/RAW MediaSource Byte Streams</h5>\n    \n<ul>\n<li><a href=\"https://discourse.wicg.io/t/proposal-allow-media-source-extensions-to-support-demuxed-and-raw-frames/3730/3\">https://discourse.wicg.io/t/proposal-allow-media-source-extensions-to-support-demuxed-and-raw-frames/3730/3</a></li>\n<li>暗号化のプロセスはどうなる？\n<ul>\n<li>テレビみたいなアプリの場合は、寿命が長くなるはず</li>\n</ul></li>\n<li>RAWデータを再生する方法が必要\n<ul>\n<li>MSEに渡すために、JS側でremuxする・・・？</li>\n</ul></li>\n<li>コンテナーは、タイムスタンプや初期化データのためにまだ必要だと思う\n<ul>\n<li>MSE自身はコーデックに依存しないようにしたいね</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4>Media Playback Quality</h4>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/media-playback-quality\">https://github.com/w3c/media-playback-quality</a>\n<ul>\n<li>Chromeにまだない</li>\n</ul></li>\n<li>Should MediaPlaybackQuality keep VideoPlaybackQuality backward compatibility\n<ul>\n<li><a href=\"https://github.com/w3c/media-playback-quality/issues/7\">https://github.com/w3c/media-playback-quality/issues/7</a></li>\n</ul></li>\n<li>Don't return a read-only object\n<ul>\n<li><a href=\"https://github.com/w3c/media-playback-quality/issues/3\">https://github.com/w3c/media-playback-quality/issues/3</a></li>\n<li>すでにshipされてるブラウザの挙動にあわせるべき</li>\n<li>pollingよりも代わりにイベントを発火するほうがよいかもしれない</li>\n<li>差分ではなく同じシェイプのディクショナリを通知するほうがわかりやすい</li>\n<li>結論: 後方互換性を保ちながらイベントでディクショナリで`VideoPlaybackQuality`を通知する</li>\n<li>バックグラウンド時にはどうなる？</li>\n<li>Chromeは賢くて、何もしないようになってる</li>\n<li>他にフレームがドロップする可能性は？\n<ul>\n<li>再生開始時</li>\n<li>PinPにしたとき？</li>\n</ul></li>\n<li>結論: `corruptedVideoFrames`は消す</li>\n</ul></li>\n<li>（フレームレートについてのあれこれ）</li>\n<li>4Kビデオを再生するとき\n<ul>\n<li>Firefoxはフレームを落としても再生する</li>\n<li>Chromeは一時停止するのでフレームはドロップしない</li>\n<li>どっちがよい？</li>\n<li>あるべきをissueで議論して、実装を修正するのがよい</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Media Session</h4>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/mediasession\">https://github.com/w3c/mediasession</a>\n<ul>\n<li>プラットフォームに親和性のある形でのメディアの制御方法</li>\n<li>OSの通知+制御ボタンっぽいUIで使えるやつ</li>\n<li>Chromeは実装してる</li>\n<li>Firefoxも</li>\n<li>Safariも前向き</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5>Add \"seek to start\" and \"seek to live\" actions</h5>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/mediasession/issues/233\">https://github.com/w3c/mediasession/issues/233</a></li>\n<li>複数のライブストリームが連なってる場合に、特定のストリームの先頭、最新に飛びたい</li>\n<li>現状のMediaSessionは、長さ固定のメディア用</li>\n<li>ハードウェアにあるボタンとのインテグレーションも考慮が必要</li>\n<li>OSで使うことができるアイコンにも制限がある</li>\n<li>結論: スキップボタンと同じで、将来的にラベルで指定できるようにする</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>TAG Feedback: of all the potential metadata...?</h5>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/mediasession/issues/191\">https://github.com/w3c/mediasession/issues/191</a></li>\n<li>`artist`, `title`などのメタデータを選ぶ理由について</li>\n<li>Chromeの実装時は、音楽にフォーカスしていたのでそれを選んだ</li>\n<li>`schema.org`に沿うほうがよさそうな気がする</li>\n<li>TAGがこれをよしとするかはわからない</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>MediaSessionActionHandler doesn't work for seek operations</h5>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/mediasession/issues/234\">https://github.com/w3c/mediasession/issues/234</a></li>\n<li>Permissions APIでも同じ問題があったと思う</li>\n<li>同じ解決方法にすべきだと思う</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4>Picture in Picture</h4>\n    \n<ul>\n<li><a href=\"https://w3c.github.io/picture-in-picture/\">https://w3c.github.io/picture-in-picture/</a></li>\n<li>実装状況\n<ul>\n<li>Chromeでは実装済</li>\n<li>Safariは異なるAPIではあるが実装</li>\n<li>Firefoxはまだ（69betaでWindowsのみ使えるらしい</li>\n<li>ChromeはMediaSessionとのインテグレーションも検討中</li>\n<li>Videojsでも最近サポートした</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5>Provide a clear definition of when a UA should display controls in a PiP window</h5>\n    \n<ul>\n<li>\n<ul>\n<li><a href=\"https://github.com/w3c/picture-in-picture/issues/119\">https://github.com/w3c/picture-in-picture/issues/119</a></li>\n<li>結論: UAに任せる</li>\n<li>MediaSessionを通して、UIの制御ができるようにしたい</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>Style restrictions in picture-in-picture mode excludes mirrored video use cases</h5>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/picture-in-picture/issues/167\">https://github.com/w3c/picture-in-picture/issues/167</a></li>\n<li>鏡面反射の表示をPinPしたい</li>\n<li>自分でそれ用のストリームをcanvasに書いてからPinPすればできるよね\n<ul>\n<li>でもパフォーマンスよくないし、サポートされてるべきでは</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>Add option or method to set Picture-in-PictureWindow to maximum size programmatically</h5>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/picture-in-picture/issues/163\">https://github.com/w3c/picture-in-picture/issues/163</a></li>\n<li>PinPのサイズは、videoのサイズに追従する</li>\n<li>セキュリティの懸念として、そのようなAPIはよくないと思う</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>Add a option to go fullscreen from picture in picture window</h5>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/picture-in-picture/issues/166\">https://github.com/w3c/picture-in-picture/issues/166</a></li>\n<li>結論: PinPとFullscrennとの兼ね合いについて提案を追記する</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>Integration with HTML</h5>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/picture-in-picture/issues/156\">https://github.com/w3c/picture-in-picture/issues/156</a></li>\n<li>HTML側のSpecとの統合</li>\n<li>筋は通っていると思うが、HTMLの仕様は膨大</li>\n<li>すべてを統合できるわけではない\n<ul>\n<li>JS的なAPI都合もある</li>\n</ul></li>\n<li>逆にHTMLMediaElementを別の仕様にできない・・？\n<ul>\n<li>過去に試みたが実現しなかったらしい</li>\n<li>でもやってやれないことはないと思ってる</li>\n</ul></li>\n<li>結論: 改めてmediaをHTMLと分けることを議論してみる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>PinP v2について</h5>\n    \n<ul>\n<li>videoを表示する以上のことができるようにしたい\n<ul>\n<li>ミュートボタンを置きたいなど、ウィンドウへのカスタマイズが望まれてる</li>\n</ul></li>\n<li>カスタムcontrolsを最初は考えたが、独自のアイコンを使用できない欠点があった\n<ul>\n<li>なのでなんでも自由に配置できるAPIにした</li>\n<li>ただのポップアップではなく、あくまでPinPとして</li>\n</ul></li>\n<li>DOMの一部をPinPできる？Fullscreenみたいに\n<ul>\n<li>検討したけどやめた</li>\n<li>サイズ・位置変更の問題があった</li>\n</ul></li>\n<li>新たなwindowとすることを検討した\n<ul>\n<li>window間は`postMessage()`でないとコミュニケーションできない</li>\n<li>これは使いにくいと思った</li>\n</ul></li>\n<li>Presentation APIとも連携が必要かも\n<ul>\n<li>単にこれを使うのすら難易度が高いけど</li>\n</ul></li>\n<li>もはや`iframe`を活用するほうがよいかも？\n<ul>\n<li>でもあれは問題も多いし・・</li>\n</ul></li>\n<li>どちらにせよこの仕様として大きな変化である\n<ul>\n<li>膨大な作業も必要</li>\n<li>仕様検討もそうだが、APIを利用する開発者のコスパに見合う機能であるべき</li>\n</ul></li>\n<li>PinPにcanvasをオーバーレイするところからはじめる？\n<ul>\n<li>インタラクションはなしで</li>\n</ul></li>\n<li>（ここで結論出すの無理じゃね的な話）</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4>Autoplay</h4>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/autoplay\">https://github.com/w3c/autoplay</a></li>\n<li>昨今のWebでは、音ありでは`autoplay`できないことがしばしば</li>\n<li>再生が許可されていない場合、`play()`はrejectされる</li>\n<li>自動再生できる状態かどうかを知るための方法がない\n<ul>\n<li>実際に`video.src`を用意して`play()`しないといけない</li>\n<li>自動再生できないなら、字幕付きで音声なしの動画を再生するなどしたい</li>\n</ul></li>\n<li>ドキュメント単位か、要素単位でやらせるか</li>\n<li>`document.xxx`にenumを返すプロパティを足す案\n<ul>\n<li>`allowed`, `allowed-muted`, `disallowed`, `unknown`</li>\n</ul></li>\n<li>FirefoxもSafariも、音声の有無に関わらず、自動再生を禁止できる\n<ul>\n<li>今はuser gestureが必要</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h5>Document Level API issue</h5>\n    \n<ul>\n<li><a href=\"https://github.com/w3c/autoplay/issues/7\">https://github.com/w3c/autoplay/issues/7</a></li>\n<li>案1: `document`にプロパティを追加\n<ul>\n<li>明確でシンプル</li>\n<li>だがポリシーと実装が複雑になる</li>\n</ul></li>\n<li>案2: 非同期のAPIを追加\n<ul>\n<li>事前に何もしなくてよい</li>\n<li>より複雑になる</li>\n<li>イベントループのすき間でユーザーアクションがあったら？</li>\n</ul></li>\n<li>Permissions APIにはイベントがある</li>\n<li>今日のChromeは、自動再生ポリシーのために多くの手順を踏んでいる\n<ul>\n<li>設定、アクティビティ、設定値・・</li>\n<li>自動再生の許可に関係なく、このデータは取得してる</li>\n<li>それでページの表示速度に影響はない</li>\n</ul></li>\n<li>なんであれDBにアクセスするなら非同期なのでは？\n<ul>\n<li>非同期だと複数回読み取り（無駄）が発生する可能性もあるよね</li>\n</ul></li>\n<li>（ここで議論が発散した + 時間切れ）</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h4>2日目の感想</h4>\n    <p>まじめなやつ。</p>\n\n<ul>\n<li>WebRTC WGとは打って変わって、Media WGは当日の議論がメインだった\n<ul>\n<li>そのせいで聞き取るのめっちゃ大変やった</li>\n</ul></li>\n<li>初耳なSpecも多くて、全体的に自信がない</li>\n<li>スコープが広いトピックが多くて、これほんとに決まんの？みたいな印象</li>\n<li>めっちゃ議論が盛り上がってるのに1730になった瞬間みんな部屋から消えていった\n<ul>\n<li>見習いたいこのノリ</li>\n</ul></li>\n</ul><p>そのほか。</p>\n\n<ul>\n<li>W3C湯呑もらってくるの忘れた・・・</li>\n<li>博多グルメは水炊きが優勝</li>\n</ul>\n</div>"
}
