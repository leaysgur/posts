{
  "title": "2019年の振り返り",
  "html": "<p>そして転職して1年経っての振り返り。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>最近の仕事について</h3>\n    <p>SkyWayという主にWebRTCを扱うプラットフォームの開発（と運用を少々）をやってます。</p>\n\n<ul>\n<li>既存コード（JS/Node.js）のメンテ</li>\n<li>プラットフォームとしての新機能の開発</li>\n<li>未来のプロトコルの味見</li>\n<li>RFC/ドラフト読み</li>\n<li>OSS活動</li>\n<li>etc...</li>\n</ul><p>ことあるごとに「これが大企業・・（白目」ってなってますが、引き続きリモートワーク主体でまぁのんびりやってます。</p><p>そういう職場なので、この1年やってたのは基本的にはWebRTCに関連することでした。</p>\n\n<div class=\"section\">\n    <h4>SkyWay（WebRTCプラットフォーム）のメンテ</h4>\n    <p>最近こそ勧告したい気持ちがあふれてるWebRTCですが、年初はまだ割と大きな変化の中にあって、API的な変更が多かった気がする。<br />\nなのでそれをJS-SDKとシグナリングサーバーに反映することをやってました。</p>\n\n<ul>\n<li>SDPのunified-plan移行\n<ul>\n<li>それでもなおPlan-Bがまだ現役な世の中らしいですが</li>\n</ul></li>\n<li>StreamベースからTrackベースへの移行（Transceiver）\n<ul>\n<li>それでも（ｒｙ</li>\n</ul></li>\n<li>SafariでVP8が使えるようになったり</li>\n<li>`end-of-candidates`の問題（による`connectionState`）の対応</li>\n<li>mDNSによるhost候補の隠蔽による余波の対応</li>\n<li>`getDisplayMedia()`のサポート</li>\n<li>昔からある単純なバグ修正</li>\n</ul><p>ちょっと思い出してもこんな対応をしてました。</p><p>ちなみに他人が書いたコードを読むのには耐性があるほうだと思ってましたが、やっぱりキツいものはキツい。<br />\nなんとかしたいよな〜とは思ってはいる・・けど・・けど・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>OSS活動</h4>\n    <p>仕事でWebRTCのSDKをメンテする傍ら、自作のライブラリを書いたりもしてました。</p>\n\n<ul>\n<li><a href=\"https://github.com/leader22/simple-p2p\">https://github.com/leader22/simple-p2p</a></li>\n<li><a href=\"https://github.com/leader22/enhanced-datachannel\">https://github.com/leader22/enhanced-datachannel</a></li>\n</ul><p>自分で書いておいてあれですが、こっちはなかなか良いデキです。</p><p>あとはカッティングエッジなWebRTC SFUである`mediasoup`へのコントリビュートを少ししたり。</p><p>今になって思えば、仕事でやってるSkyWayもOSSなので、仕事でOSS活動してると言えなくもないのでは・・・？</p>\n\n</div>\n<div class=\"section\">\n    <h4>SkyWay Conference</h4>\n    \n    <blockquote>\n        <p><a href=\"https://conf.webrtc.ecl.ntt.com/\">SkyWay Conference</a></p>\n\n    </blockquote>\n<p>これも作りましたシリーズで、SkyWayのSDKを使った会議Webアプリです。</p>\n\n<ul>\n<li>TypeScript</li>\n<li>React(w/ hooks)</li>\n<li>MobX</li>\n</ul><p>という手慣れた組み合わせで、いわゆるWebRTCで会議アプリを作りたいならこんな感じっしょ？っていうやつ。</p><p>PCだけでなくモバイルでも動くようになってて、弊チームでも毎日使ってるし、それなりに使えるものを作ったなあと我ながら思っておる。<br />\nもちろんデモアプリなので、動作保証はしませんが・・。</p><p>フロントエンドっぽいこともやってる！！</p>\n\n</div>\n<div class=\"section\">\n    <h4>WebRTCの仕様を読んで実装する</h4>\n    <p>総合格闘技って言われるWebRTCですが、その真髄を味わうには自分で実装してみるのが一番！ってことで。<br />\nRFCやドラフトを読みながら実装してみるチャレンジもやってました。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/webrtc-rfcs\">GitHub - leader22/webrtc-rfcs: WebRTC related RFCs that I have read through.</a></p>\n\n    </blockquote>\n<p>このリポジトリは、WebRTCに関連するドラフトをマークダウンにしていつでもどこでも読めるようにしつつ、サマリを日本語でまとめたもの。</p><p>割とたくさん読んだ・・と思ったけど、WebRTCスタックをすべて実装するにはまだまだ足りて無い。<br />\nこのリポジトリでいうと上モノのRTPとかコーデックまわりが足りないです。</p><p>ただ実際に実装をしないのであれば（SDKをメンテするだけとか、ブラウザのAPIを叩くだけなのであれば）、こんな読み方はしなくていいかなと思います。</p><p>で、スタックの下層から仕様読んで実装してをやってたけど、</p>\n\n<ul>\n<li>STUN</li>\n<li>ICE-Lite</li>\n</ul><p>と、いわゆるこれから！って段階で実装は頓挫した。</p><p>Node.jsでDTLSを使うのが面倒で面倒で・・・。<br />\n標準APIに`dtls`はないので、実装するかFFI的な方法でOpenSSLなりを使う必要があって、どうしようかと悶々としてる間に他の仕事タスクが忙しくなってやめてしまった。</p><p>ただ経験値としては確かに得るものがあって、パケットやらバイト列を扱う低レイヤーな処理の大変さを知った。<br />\n`nodertc`とか、`mediasoup`のC++コードを読んだりしてるうちに、いろいろ満足してしまったのもある。</p>\n\n</div>\n<div class=\"section\">\n    <h4>続・仕様を読む</h4>\n    <p>きたるWebTransportについても同じくドラフトを読んだ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/webtransport-rfcs\">GitHub - leader22/webtransport-rfcs</a></p>\n\n    </blockquote>\n<p>おなじようにリポジトリにしてみたけど、WebTransportの実態はQUICなので、この先どうしたものか・・ってなってる。</p><p>WebTransportを知るにはQUICとHTTP/3が必要で、それを知るにはTLS1.3が必要で、という感じなので重いな〜という。</p>\n\n</div>\n<div class=\"section\">\n    <h4>WebAudio/WebAssembly</h4>\n    <p>WebRTCがかゆいところに手が届くものではないので、真にやりたい放題やるためにはもっとローなAPIが必要になる。</p><p>今そういうことをやるには？きたるべきWebTrasnport時代のためには？ということで、最近あれこれ調べてるのがWebAudioとWebAssembly。</p><p>WebAudioは過去に何回も触ってるので、軽く記憶を呼び起こしつつ、おざなりになってた音声信号処理の基礎を固めたりしてました。</p><p>WebAssemblyはまったく素人なので、先人の偉業を読んだり、Rustから入ってどうにか使えないかあれこれ試したりしたりしてます。<br />\nただ深みにハマればハマるほど、結局「C/C++とかそのへんをやったことがない」不利が響いてきてて最近つらいです。</p><p>まあ少しずつ鍛えるしかないので、日々の筋トレを欠かさないようにしてる今日このごろ。</p><p>いまのところの成果としては、OPUSをWorker + WebAudioで送るなんちゃってWebRTCを実装してみたくらい。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>転職しての振り返り</h3>\n    <p>転職して1年、最大の転職理由であった要因たちについてどうか。</p>\n\n<ul>\n<li>好奇心を満たせているのか</li>\n<li>この会社でしかできないことをやっているか</li>\n</ul><p>この2つ。</p>\n\n<div class=\"section\">\n    <h4>好奇心は満たせているのか</h4>\n    <p>WebRTCをよく知らない頃は、とにかくインプットが必要で、それこそ知らないことばかりで充実してたと思う。</p><p>ただこの1年でRFCやら実装やらを読みまくった結果、だいたいわかるようになった。</p><p>ブラウザに生えてるAPIはすべて把握してるし、モバイルなどブラウザ差異を踏まえてフロントエンドのコードをどう書けばいいか、SDK作るならこういうAPI・設計がベターみたいなところも自信もっていえるレベルになったと思う。</p><p>ただWebRTC自身の仕様策定・実装も進んで、ユースケースも洗練されてきたのと、フロントエンドでやれることを踏まえると、WebRTCそれ自体についての好奇心は、正直なところ下げトレンドである・・。</p><p>仕事でそこまでその知識を必要とされるかといわれると微妙（コレは少し不本意ではあるが）なのも一因。</p><p>もうひとつの要因としては、界隈の狭さ。<br />\nWebRTC界隈は、Theフロントエンドに比べると、本っっっ当に狭いので、自分の狭い観測範囲になると余計に仲間がいない。</p><p>仲間がいないってことは、コードの良し悪しやAPIデザインについてあーだこーだ言える人がいないということ。</p>\n\n<ul>\n<li>SDPでネゴったらその時点で負けですよね〜とか</li>\n<li>Firefoxに`setConfiguration()`が実装されるのいつなん？ないとつらくない？とか</li>\n<li>`end-of-candidates`の扱いどうしてます？</li>\n<li>`getStats()`ェ・・・</li>\n</ul><p>みたいなトークがしたいのに、できない。張り合いがない・・。</p><p>同じチーム内でもそういうことはあまりできてなくて（不本意）、モチベーションを保つのが難しい。</p><p>なので、また少しピボットして、次の興味をまた探すところから、2020をはじめようかなと思っているところ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>この会社でしかできないこと</h4>\n    <p>特にやれてなくて、少し思惑が外れたなーと思っているところ。<br />\nまぁ環境に期待するのではなく、自分がその環境を利用するという観点からは、まだまだやれることはあるはず。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>2020年は</h3>\n    \n<ul>\n<li>WebRTCはそこそこに\n<ul>\n<li>特に大きな変更はもうないと思うし</li>\n</ul></li>\n<li>WebTransport/QUIC系は追う\n<ul>\n<li>実装レベルはさておき、ユーザーランドは確実に追う</li>\n</ul></li>\n<li>Rust/WASMは興味があるので何かしらやっていきたい\n<ul>\n<li>ただ何ができそうかはまだ手探り</li>\n</ul></li>\n<li>OSS活動はしたい</li>\n<li>ネタがあれば登壇もしたい</li>\n</ul><p>おもしろそうな話があったら教えてください。</p>\n\n</div>"
}
