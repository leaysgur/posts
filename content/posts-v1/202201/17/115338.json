{
  "title": "Svelte 3.46.0で追加された新機能",
  "html": "\n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3460\">https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3460</a></p>\n\n    </blockquote>\n<p>機能追加と言えるものは割と久しぶりな気がしたので、こうして筆を執ってみた次第。</p><p>この2つの機能が追加された。</p>\n\n<ul>\n<li>`@const`タグ</li>\n<li>`style`ディレクティブ</li>\n</ul>\n<div class=\"section\">\n    <h3>Constants in markup</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/rfcs/blob/master/text/0007-markup-constants.md\">rfcs/0007-markup-constants.md at master &middot; sveltejs/rfcs &middot; GitHub</a></p>\n\n    </blockquote>\n<p>Svelteには、テンプレの部分で使えるタグっていう特別な構文がある。</p><p>既存のタグとして、`{@html}`と`{@debug}`があって（詳細はDocsをみてね）、そこに今回`{@const}`というのが追加された。</p><p>コレは何かというと、主に`{#each}`みたいなループのコンテキスト直下でのみ使える、ローカルな変数入れ。</p><p>ほかにも`{:then}`や`Component`や`svelte:fragment`の直下でも使えるらしいけど、基本的なモチベーションとしてはやはり`{#each}`ブロックかと。</p><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RFC\">RFC</a>からコードを持ってくると、こんな時に嬉しい。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink>{#each boxes as box}\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span>\n<span class=\"synIdentifier\">    </span><span class=\"synType\">class</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;box&quot;</span>\n<span class=\"synIdentifier\">    </span><span class=\"synType\">class</span><span class=\"synIdentifier\">:large=</span><span class=\"synConstant\">{box.width</span><span class=\"synIdentifier\"> * box.</span><span class=\"synType\">height</span><span class=\"synIdentifier\"> &gt;</span>= 10000}\n    <span class=\"synType\">style=&quot;width</span><span class=\"synSpecial\">: {box.</span><span class=\"synType\">width</span><span class=\"synSpecial\">}px; </span><span class=\"synType\">height</span><span class=\"synSpecial\">: {box.</span><span class=\"synType\">height</span><span class=\"synSpecial\">}px</span><span class=\"synConstant\">&quot;</span>\n  <span class=\"synError\">&gt;</span>\n    {box.width} * {box.height} = {box.width * box.height}\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n{/each}\n</pre><p>このように、ループ内で同じ計算を何度もしたくないな〜みたいな時。</p><p>もちろん関数にすればええやんって話でもあるけど、ループごとに1度で済ませたいはず。構造化されたアプリならStore側で整形しろって話もあるかもしれんけど、ちょっとしたものを書きたいケースもあるはず。</p><p>そこで、`{@const}`が使える！</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink>{#each boxes as box}\n  {@const area = box.width * box.height}\n\n  <span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span>\n<span class=\"synIdentifier\">    </span><span class=\"synType\">class</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;box&quot;</span>\n<span class=\"synIdentifier\">    </span><span class=\"synType\">class</span><span class=\"synIdentifier\">:large=</span><span class=\"synConstant\">{area</span><span class=\"synIdentifier\"> &gt;</span>= 10000}\n    <span class=\"synType\">style=&quot;width</span><span class=\"synSpecial\">: {box.</span><span class=\"synType\">width</span><span class=\"synSpecial\">}px; </span><span class=\"synType\">height</span><span class=\"synSpecial\">: {box.</span><span class=\"synType\">height</span><span class=\"synSpecial\">}px</span><span class=\"synConstant\">&quot;</span>\n  <span class=\"synError\">&gt;</span>\n    {box.width} * {box.height} = {area}\n  <span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>\n{/each}\n</pre><p>というように書けて便利ねっていう。</p><p>SvelteのテンプレはJSXではないので、こういうところが不便って感じる人もいてたかもしれない。</p><p>個人的には、テンプレ部にロジックを書かせるスキを与えてる感じがしてそこまでポジティブに見てなかった。JSXの`map`のループ内でずらずら変数定義されてるのすごいよく見るし。</p><p>けどまぁSvelteらしい機能といえばそうなので、別にいいかって感じ。あったら使うと思うし。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Style Directive</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/sveltejs/rfcs/blob/master/text/0008-style-directives.md\">rfcs/0008-style-directives.md at master &middot; sveltejs/rfcs &middot; GitHub</a></p>\n\n    </blockquote>\n<p>ディレクティブは、要素につけて使う属性のこと。`class:`とか、`use:`とかコロンをつけるアレ。</p><p>今回追加されたのは、インラインでスタイルを定義するときに便利なディレクティブ。</p><p>またも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RFC\">RFC</a>からコードを持ってくると。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span>\n<span class=\"synIdentifier\">  </span><span class=\"synType\">style</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">&quot;</span>\n<span class=\"synConstant\">    position: {position};</span>\n<span class=\"synConstant\">    {position === 'absolute' ? 'top: 20px;' : ''}</span>\n<span class=\"synConstant\">    {pointerEvents === false ? 'pointer-events:none;' : ''}</span>\n<span class=\"synConstant\">  &quot;</span>\n<span class=\"synIdentifier\">/&gt;</span>\n</pre><p>みたく、インラインでスタイルを書いてたとする。（SvelteはJSXじゃないので、雑に文字列を展開できるんよね）</p><p>まぁわからんでもないけど、それなりに冗長だった。それがこう書けるようになる。</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">div</span>\n<span class=\"synIdentifier\">  </span><span class=\"synType\">style</span><span class=\"synIdentifier\">:position</span>\n<span class=\"synIdentifier\">  </span><span class=\"synType\">style</span><span class=\"synIdentifier\">:</span><span class=\"synType\">top</span><span class=\"synIdentifier\">=</span><span class=\"synConstant\">{position</span><span class=\"synIdentifier\"> =</span><span class=\"synConstant\">==</span><span class=\"synIdentifier\"> </span><span class=\"synConstant\">&quot;absolute&quot;</span><span class=\"synIdentifier\"> ? </span><span class=\"synConstant\">&quot;20px&quot;</span><span class=\"synIdentifier\"> : null}</span>\n<span class=\"synIdentifier\">  </span><span class=\"synType\">style</span><span class=\"synIdentifier\">:pointer-events=</span><span class=\"synConstant\">{pointerEvents</span><span class=\"synIdentifier\"> ? null : </span><span class=\"synConstant\">&quot;none&quot;</span><span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">/&gt;</span>\n</pre><p>`class:`ディレクティブで`boolean`を渡してた代わりに、`style:`ディレクティブには`string`を渡すみたいな。</p><p>ちなみに、`style=`属性と衝突する場合は、ディレクティブが優先される。</p><p>もうひとつちなむと、`style:marginLeft`みたいにキャメルケースでも書ける。</p><p>さらにもうひとつちなむと、Reactの`style`オブジェクトのアレとは違って、勝手に`px`を付けてくれたりはしない。<br />\n<br />\n</p>\n\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>Svelteらしい機能追加で良かったです👏</p>\n\n</div>"
}
