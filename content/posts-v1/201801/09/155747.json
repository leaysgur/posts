{
  "title": "React x MobXな趣味プロダクトをTypeScriptでリライトしようとした",
  "html": "<p>React x MobXでできてる自分専用の音楽ストリーミングサービスがありまして。</p><p>冬休みなのでTypeScriptで書き直したりしてみようかなと思ってちまちまやってた。<br />\nただ結局は自分一人しかコード書かないので、コスパに見合わないと判断して採用は見送った。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/leader22/mmss-client/tree/topic/ts\">https://github.com/leader22/mmss-client/tree/topic/ts</a></p>\n\n    </blockquote>\n<p>まあその過程で色々学びはあったので、忘れないようにメモっとく。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>環境構築編</h3>\n    \n<div class=\"section\">\n    <h4>Webpackでコンパイル</h4>\n    <p>なにはともあれ開発環境を。<br />\n元がBabel x Webpackだったので、そこをまず変える。</p>\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>npm install <span class=\"synSpecial\">-D</span> typescript awesome-typescript-loader\n</pre><p>そして`babel-loader`と差し替えるだけ。<br />\nTSはReactのJSXにも対応してるので、特に困る点はない。</p><p>ただWebpackのTypeScriptのLoaderで調べると2つ出てくるのだけ悩んだ。</p>\n\n<ul>\n<li><a href=\"https://github.com/s-panferov/awesome-typescript-loader\">https://github.com/s-panferov/awesome-typescript-loader</a></li>\n<li><a href=\"https://github.com/TypeStrong/ts-loader\">https://github.com/TypeStrong/ts-loader</a></li>\n</ul><p>Awesomeの方がチューニングしてあって速いぜ！って書いてあるけど、この程度のプロジェクトじゃたぶん大した差はでない気がする。</p><p>`tsconfig.json`は適当に見繕って用意すれば良い。<br />\n`tsc --init`で生成されるファイルがValid JSONじゃなくてちょっとアレだった。</p><p>今回は割と堅めな設定にしてみたので、気になる方は冒頭のリポジトリへのリンクからどうぞ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>TypeScriptのLint</h4>\n    <p>お次はLint。<br />\nまたこれも調べると選択肢が2つ出てくる・・。</p>\n\n<ul>\n<li><a href=\"https://github.com/palantir/tslint\">https://github.com/palantir/tslint</a></li>\n<li><a href=\"https://github.com/eslint/typescript-eslint-parser\">https://github.com/eslint/typescript-eslint-parser</a></li>\n</ul><p>TSLintを使うか、ESLint w/ TSサポートにするか。</p><p>ESLintを使う場合のメリットとしては、普段使いの`eslintrc`がそのまま使えて設定ファイルを適当にできるかと思ったから。<br />\nけど実際は、`no-undef`みたいなルールがTSのクラスの型定義でコケたりと、微妙に惜しい。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">class</span> Foo <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// これがESLintにunused！っていわれる</span>\n  bar: <span class=\"synType\">string</span><span class=\"synStatement\">;</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>なので、設定ファイルをまた育てることにはなるけども、TSLintのほうが良いかなと。<br />\nこんなところに時間を割くべきではない。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>TypeScriptでハマったところ</h3>\n    \n<div class=\"section\">\n    <h4>型推論してくれない</h4>\n    <pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">const</span> opts <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">{</span>\n  method: <span class=\"synConstant\">'POST'</span><span class=\"synStatement\">,</span>\n  credentials: <span class=\"synConstant\">'same-origin'</span><span class=\"synStatement\">,</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n\nfetch<span class=\"synStatement\">(</span><span class=\"synConstant\">'/api'</span><span class=\"synStatement\">,</span> opts<span class=\"synStatement\">);</span> <span class=\"synComment\">// optsが型エラー</span>\n</pre><p>コレにハマった。<br />\n`fetch(2)`の第二引数は`RequestInit`なので、プロパティだけ見るとこの`opts`は正しいんやけども、実際の型としては`Object`なのでエラーになる。</p><p>なので型を明示する。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">const</span> opts: RequestInit <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">{</span>\n  method: <span class=\"synConstant\">'POST'</span><span class=\"synStatement\">,</span>\n  credentials: <span class=\"synConstant\">'same-origin'</span><span class=\"synStatement\">,</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n\nfetch<span class=\"synStatement\">(</span><span class=\"synConstant\">'/api'</span><span class=\"synStatement\">,</span> opts<span class=\"synStatement\">);</span>\n</pre><p>プリミティブでない変数には、すべからく型を明示しておこう・・という学び。<br />\nあと関数の引数と返り値についても型は明示しておいて損ない感じ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>型のインポート</h4>\n    <p>Flowでいう`import type`なんてものはなくて、すべて`import`で読み込む。<br />\nコード内で使ってない場合、コンパイル時にいい感じにしてくれるらしい。</p><p>あとnpmから`@types/xxx`でインストールしてきたものは、自動的に型が読み込まれてエクスポートされてる状態になる。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>React x MobXでハマったところ</h3>\n    \n<div class=\"section\">\n    <h4>`.tsx`</h4>\n    <p>JSXを返すファイルを`.tsx`にするのではなく、コード内にJSXを書いたらそれは`.tsx`にする必要がある。</p>\n\n</div>\n<div class=\"section\">\n    <h4>SFCのPropsの型</h4>\n    <pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> * <span class=\"synStatement\">as</span> React <span class=\"synStatement\">from</span> <span class=\"synConstant\">'react'</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">interface</span> FooProps <span class=\"synIdentifier\">{</span>\n  count: <span class=\"synType\">number</span><span class=\"synStatement\">;</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">const</span> FooSFC: React.SFC<span class=\"synStatement\">&lt;</span>FooProps<span class=\"synStatement\">&gt;</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span> count <span class=\"synIdentifier\">}</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synStatement\">(</span>\n  <span class=\"synStatement\">&lt;</span>div<span class=\"synStatement\">&gt;</span>Foo: <span class=\"synIdentifier\">{</span>count<span class=\"synIdentifier\">}</span><span class=\"synStatement\">&lt;</span>/div<span class=\"synStatement\">&gt;</span>\n<span class=\"synStatement\">);</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> FooSFC<span class=\"synStatement\">;</span>\n</pre><p>てな感じで指定する。</p>\n\n</div>\n<div class=\"section\">\n    <h4>`inject()`したPropsが見えない</h4>\n    <pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink>ReactDOM.render<span class=\"synStatement\">(</span>\n  <span class=\"synStatement\">&lt;</span>Provider <span class=\"synConstant\">event</span><span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span><span class=\"synConstant\">event</span><span class=\"synIdentifier\">}</span><span class=\"synStatement\">&gt;</span>\n    <span class=\"synStatement\">&lt;</span>EntryApp store<span class=\"synStatement\">=</span><span class=\"synIdentifier\">{</span>store<span class=\"synIdentifier\">}</span> /<span class=\"synStatement\">&gt;</span>\n  <span class=\"synStatement\">&lt;</span>/Provider<span class=\"synStatement\">&gt;,</span>\n  <span class=\"synConstant\">document</span>.<span class=\"synIdentifier\">getElementById</span><span class=\"synStatement\">(</span><span class=\"synConstant\">'root'</span><span class=\"synStatement\">)</span>\n<span class=\"synStatement\">);</span>\n</pre><p>このように`EntryApp`に直接渡してるのは`store`だけで、`event`はContext経由になる場合。<br />\nIssueでも似たようなのがあって、どうやって型付けたらいいねんコレ！っていう。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/mobxjs/mobx-react/issues/256\">[Question] How to get typesafe injection &middot; Issue #256 &middot; mobxjs/mobx-react &middot; GitHub</a></p>\n\n    </blockquote>\n<p>結論としては、PropsではOptionalにしておいて、使うときに`!`を付ける。</p>\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">interface</span> EntryAppProps <span class=\"synIdentifier\">{</span>\n  store: EntryStore<span class=\"synStatement\">;</span>\n  <span class=\"synConstant\">event</span>?: EntryEvent<span class=\"synStatement\">;</span> <span class=\"synComment\">// コレと</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synStatement\">const</span> EntryApp: React.SFC<span class=\"synStatement\">&lt;</span>EntryAppProps<span class=\"synStatement\">&gt;</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span> store<span class=\"synStatement\">,</span> <span class=\"synConstant\">event</span> <span class=\"synIdentifier\">}</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> search<span class=\"synStatement\">,</span> ui<span class=\"synStatement\">,</span> tabNames <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">=</span> store<span class=\"synStatement\">;</span>\n  <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> onClickTab<span class=\"synStatement\">,</span> onLoginSubmit<span class=\"synStatement\">,</span> onChangeKeyword <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">event</span>!<span class=\"synStatement\">;</span> <span class=\"synComment\">// コレがポイント</span>\n\n  <span class=\"synStatement\">return</span> <span class=\"synStatement\">(</span>\n    <span class=\"synStatement\">&lt;</span>div className<span class=\"synStatement\">=</span><span class=\"synConstant\">&quot;EntryApp&quot;</span><span class=\"synStatement\">&gt;</span>\n      <span class=\"synIdentifier\">{</span><span class=\"synComment\">/* ... */</span><span class=\"synIdentifier\">}</span>\n    <span class=\"synStatement\">&lt;</span>/div<span class=\"synStatement\">&gt;</span>\n  <span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> inject<span class=\"synStatement\">(</span><span class=\"synConstant\">'event'</span><span class=\"synStatement\">)(</span>observer<span class=\"synStatement\">(</span>EntryApp<span class=\"synStatement\">));</span>\n</pre><p>こうしないと、`event`もちゃんと渡せ！って怒られる。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>Flowを捨てた身としては、JavaScriptに型を付けるにはTypeScript一択になってしまったので、少しでも触っておきたかったという話。</p><p>ただ規模がそれなりであろうと、個人でやってる分には手間暇かけてまで型を付けたいとは思わんなぁーという。</p>\n\n</div>"
}
