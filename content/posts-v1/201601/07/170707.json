{
  "title": "petehunt/react-howto の日本語訳",
  "html": "\n    <blockquote>\n        <p><a href=\"https://github.com/petehunt/react-howto\">petehunt/react-howto &middot; GitHub</a></p>\n\n    </blockquote>\n<p>これの、2016/01/07時点での日本語訳です。<br />\n更新は追わないと思うので、流し読みにどうぞ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>react-howto</h3>\n    <p>もしあなたがReactをはじめたばかりで(もしかしたらフロントエンド自体もはじめてで)、React周辺のエコシステムに困惑してるとしたら、そこにはこういう理由がある。</p>\n\n<ul>\n<li>そもそもReactは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%EA%A1%BC%A5%A2%A5%C0%A5%D7%A5%BF%A1%BC\">アーリーアダプター</a>やエキスパート向けに作られた経緯がある</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>が唯一実際に使われてる例であり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>より小規模なプロジェクト向けの使い方にフォーカスしてない</li>\n<li>Reactのガイドを装った間違った情報も多い</li>\n</ul><p>このドキュメントは、HTML・<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>・<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>でWebページを作ったことがある人を想定読者にしてる。</p>\n\n<div class=\"section\">\n    <h4>これを書いたワケ</h4>\n    <p>Reactに関する情報が山ほど交錯してるから。</p><p>自分はReactを作った<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>のチームのオリジナルメンバーだった。<br />\n今は小さなスタートアップにいるので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>の中の人ではないっていう視点もあわせて書く。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Reactのエコシステムをどう知っていくか</h4>\n    <p>ソフトウェアにはテクノロジースタックがあって、それが何で作られてるかを知らないことにはアプリは作れない。<br />\nReactやるのに必要なものが大それて見えるのは、順序立ててそれらが説明されてないから。</p><p>Reactやるなら以下の順に調べると良い。<br />\n絶対に飛ばしたり二股かけたりしないように。</p>\n\n<ul>\n<li>React自体</li>\n<li>npm</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a> “bundlers”</li>\n<li>ES6</li>\n<li>Routing</li>\n<li>Flux</li>\n<li>Immutable.js</li>\n<li>Relay, Falcor, etc</li>\n</ul>\n    <blockquote>\n        <p>もちろん全部を知らないとReactを使えないわけではなくて、困ってることが解消されたら次へ進んで良いよ。</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>React自体</h4>\n    <p>そもそもReactをさわるのにあれこれ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB\">ツール</a>を用意するところで時間をかけるのが間違い。<br />\n公式サイトにいけば、コピペできるのがあるし、それを`.html`に保存すれば即さわれる。</p><p>この時点では何の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB\">ツール</a>もいらんので、React自体に慣れるまでは他のものをさわらなくていい。<br />\nReactを学ぶのには、やっぱ公式の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB\">チュートリアル</a>がおすすめ。</p>\n\n    <blockquote>\n        <p><a href=\"https://facebook.github.io/react/docs/getting-started.html#quick-start-without-npm\">Getting Started | React</a><br />\n<a href=\"https://facebook.github.io/react/docs/tutorial.html\">Tutorial | React</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>npm</h4>\n    <p>`npm`はNode.jsのパッケージマネージャで、フロントエンド界隈でコードを共有するにあたって一番人気のやつ。<br />\nCommonJS(知らない人は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>で調べて)方式って言われるモジュールシステムで、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3\">コマンドライン</a>から色々インストールできるやつ。</p><p>再利用できる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>とかライブラリなどなどCommonJS方式で利用できるものがnpmにはいっぱいある。</p>\n\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>バンドラー</h4>\n    <p>幾つかあるCommonJSの良いところのひとつは、そのままではブラウザで読み込んで使えないところ。<br />\n何かしらバンドラーを用意してモジュールたちを`.js`ファイルにバンドルして、scriptタグで読み込めるようにしないといけない。</p><p>バンドラーにはたとえば`webpack`や`browserify`があって、どっちも良いけど個人的には`webpack`をオススメする。<br />\n大きなアプリを作るにあたって便利な機能がいっぱいあるから。</p><p>Webpackのドキュメントが取っつきにくいなら、以下のドキュメントを書いたので読んでみて欲しい。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/petehunt/react-webpack-template\">petehunt/react-webpack-template &middot; GitHub</a><br />\n<a href=\"https://github.com/petehunt/webpack-howto\">petehunt/webpack-howto &middot; GitHub</a></p>\n\n    </blockquote>\n<p>ひとつ注意があって、`CommonJS`は`require()`って関数を使うんだけど、これを見て`require.js`のことと勘違いする人が結構いる。<br />\n`require.js`はいろいろ理由があるけど使わない方がいいと思ってて、もちろんReact界隈ではあまり使われてない。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ES6</h4>\n    <p>ReactでJSXのことを知ったと思うけど、それ以外の部分のコードで見慣れない記法を目にしたかもしれない。<br />\nそれはES6で、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の最新の記法なのでまだ馴染みがないかもしれない。</p><p>なのでブラウザでもそのまま書けない方が多いんだけど、バンドラーがそれを使えるよう変換してくれる。</p><p>ただReactを使いたいだけなら、ES6のことは飛ばしてもいい。</p>\n\n</div>\n<div class=\"section\">\n    <h4>ルーティング</h4>\n    <p>Single Page Appって流行ってるよね。<br />\nあれは、ページが一度読み込まれてユーザーがリンクやボタンを押した時に、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>がページの中身やアドレスバーを更新してくれて、ページ自体は更新されないようになってる。<br />\nこのアドレスバーのURLの管理やらをやってくれるのが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC\">ルーター</a>。</p><p>Reactやるならreact-routerが良いかな。<br />\nSingle Page Appを作るなら、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC\">ルーター</a>を使わない理由はないと思う。</p><p>逆にSingle Page Appを作らないなら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC\">ルーター</a>は必要なくて、どんな巨大プロジェクトも最初は小さく作っていくべき。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/rackt/react-router\">rackt/react-router &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>Flux</h4>\n    <p>Fluxについてはたぶん聞いたことくらいはあるはず。<br />\nこれも誤った情報が山ほどある。</p><p>多くの人は、アプリを作りはじめて「さて必要なデータを用意するかー」っていう初段階で、Fluxが必要かどうかを考え始めてしまう。<br />\nけどこれは間違った入り方で、既にたくさんの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>があって、後からFluxを適応するか考えるもの。</p><p>Reactの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>は階層構造になってるので、だいたいのケースでデータも同じ形になってるはず。<br />\nその場合にはFluxはあまり役に立たない。</p><p>でもデータが階層構造になってなくて、本質じゃないpropsが増えてきたなーとか、複雑に組み合わさる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>が既にあって・・みたいな場合には、Fluxを検討する価値があると思う。</p>\n\n    <blockquote>\n        <p>Fluxが必要になったら知ればよくて、必要かどうかわからないなら、必要ないってこと。</p>\n\n    </blockquote>\n<p>Fluxを使うことにしたなら、Reduxがライブラリとしてはオススメ。<br />\n他にもライブラリが山ほどあるしもちろんそれらを試してもいいけど、アドバイスするとすれば「一番人気のやつを使え」ってとこかな。</p>\n\n    <blockquote>\n        <p><a href=\"http://redux.js.org/\">Read Me | Redux</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>Immutable.js</h4>\n    <p>Immutable.jsで作るデータ構造は、Reactで直面しがちなパフォーマンスに関する問題を解決してくれる。<br />\nすごく有益なライブラリではあるものの、パフォーマンスに困ってないならほぼ必要ないとも言える。</p>\n\n    <blockquote>\n        <p><a href=\"https://facebook.github.io/immutable-js/\">Immutable.js</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>Relay, Falcor etc</h4>\n    <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ajax\">Ajax</a>でデータをたくさん取ってくる処理を書いてるなら、これらについても知っておくべき。<br />\nただこれもまだ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%C3%A5%C6%A5%A3%A5%F3%A5%B0%A1%A6%A5%A8%A5%C3%A5%B8\">カッティング・エッジ</a>な技術たちなので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ajax\">Ajax</a>リクエストが多すぎて困ってないなら、必要ない。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>なんか間違ってたら教えてください！</p>\n\n</div>"
}
