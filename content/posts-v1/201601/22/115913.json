{
  "title": "#スーパーイカメーカー を支える技術",
  "html": "<p>どうも、中のイカです。<br />\n昨日の15時頃に晴れてリリースしたコレですが、正直想定してなかったレベルで反響があって驚いてます。</p><p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fleader22.github.io%2Fika-maker%2F\" title=\"スーパーイカメーカー\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://leader22.github.io/ika-maker/\">leader22.github.io</a></cite></p><p>さてさて、というわけで恒例の裏側紹介記事です。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>近況</h3>\n    <p>今のところの瞬間最大風速です。<blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">とりあえずこんなん <a href=\"https://t.co/65cIbl2N1e\">pic.twitter.com/65cIbl2N1e</a></p>&mdash; りぃ (@leader22) <a href=\"https://twitter.com/leader22/status/690141033116602369?ref_src=twsrc%5Etfw\">2016年1月21日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p><p>初めて見たわこんな数字ｗ</p><p>ホッテントリ入りもしたしredditでもスレ立ったり。</p><p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">トレンド入りしてるΣ(ﾟДﾟ；≡；ﾟдﾟ) <a href=\"https://t.co/yDBVSf2ciE\">pic.twitter.com/yDBVSf2ciE</a></p>&mdash; そめ・そるめ (@jenga_ink) <a href=\"https://twitter.com/jenga_ink/status/690111696459931649?ref_src=twsrc%5Etfw\">2016年1月21日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p><br />\n<p>まさかのポストすしざんまい！すごいなーイカ・・。</p>\n\n    <blockquote>\n        <p>ほんと、サーバー落ちないかどうかだけが心配でした。<br />\nそもそもどの程度で落ちるかの想定もできないくらいの素人ですけど！</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>フロントエンドについて</h3>\n    <p>さてフロントエンドエンジニアな私なので、もちろんぜんぶフロントでやってます。<br />\nコードはいつもどおりGitHubに全部あるしこれが全てなので、よければ覗いてみてください。</p><p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fleader22%2Fika-maker%2F\" title=\"leader22/ika-maker\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/leader22/ika-maker/\">github.com</a></cite><br />\n</p>\n\n<div class=\"section\">\n    <h4>そもそもの構造</h4>\n    \n<ul>\n<li>使用できるパーツ画像からjsonを用意</li>\n<li>それを元にパーツセレクターを描画</li>\n<li>セッティング状態を表すオブジェクトをポチポチ変更</li>\n<li>ポチポチする度にcanvas.drawImage -> canvas.toDataURLして表示</li>\n</ul><p>たったこれだけです。<br />\nHTML Canvasをよく知らない人は、サーバーレスでなんでこんなことが・・・！って感じかもですね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>React x flumpt</h4>\n    <p>完全にやってみたかったドリブン技術選定です。<br />\n前にReactだけを使って後は適当に書くスタイルでアプリを書いたことがあって、結局ReactはPubSub機構なしには(= そしてFlux的に上からステートを流す)うまく使えないなーという結論だったので、今回ははじめからそれに準ずるものを使おうと思ってました。</p><p>こないだの翻訳記事でFluxするならReduxがオススメ！だって使ってる人多いから！ってのを書いた直後ですが、採用したのはReduxではなくflumptというものです。</p>\n\n    <blockquote>\n        <p><a href=\"http://qiita.com/mizchi/items/79673c4d406cc85b44aa\">redux &#x3078;&#x306E; &#x4E0D;&#x6E80;&#x3092;&#x89E3;&#x6D88;&#x3059;&#x308B;&#x70BA;&#x306B;, flumpt&#x3068;&#x3044;&#x3046;Flux&#x5B9F;&#x88C5;&#x3092;&#x4F5C;&#x3063;&#x305F; - Qiita</a></p>\n\n    </blockquote>\n<p>↑の記事やサンプルコードを見てもわかる通り、ほんとに薄い実装でわかりやすーいライブラリです。<br />\n同じくEventEmitterだけあれば十分やろーって思ってましたが、他にも色々できてさすがの一品でございました。<br />\nおかげで迷うことなく(そもそも大した規模じゃないけど)使えて助かりました。</p>\n\n    <blockquote>\n        <p>READMEの変数名にtypoがあったりイベント名が変わってたりするのはそのうちなおるでしょう( ˘ω˘)ｽﾔｧ</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h5>Reactのいいところ</h5>\n    <p>この程度の規模でReact語ってんじゃねーよって言われそうですが、まぁ一応。</p><p>個人的には、コードの書き方が一定になるので後から読みやすいのが一番かなーと思います。</p><p>中の細かいstateとかlifecycleEventとかのお作法はあれど、Reactはコンポーネントしか返さないのでrenderだけに集中して、<br />\nあとのロジックをReactのいないところで全部やる！それだけ！</p><p>っていうのがコードレベルで統一できるのは大変よろしいと思います。</p>\n\n</div>\n<div class=\"section\">\n    <h5>Reactのわるいところ</h5>\n    <p>JSXのあと一歩足りない感。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>&lt;ul className=<span class=\"synConstant\">&quot;tab-header&quot;</span>&gt;\n  <span class=\"synComment\">// こういうループのためのmapとか</span>\n  <span class=\"synIdentifier\">{</span>tabItems.map((item, idx) =&gt; <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">let</span> isSelected = idx === selectedTabIdx;\n    <span class=\"synStatement\">return</span> (\n      &lt;li\n        className=<span class=\"synIdentifier\">{</span>`\n          tab-header__item\n          tab-header__item--type-$<span class=\"synIdentifier\">{</span>item.group<span class=\"synIdentifier\">}</span>\n          <span class=\"synComment\">// こういうクラス名のアレとか</span>\n          $<span class=\"synIdentifier\">{</span>isSelected ? <span class=\"synConstant\">'is-selected'</span> : <span class=\"synConstant\">''</span><span class=\"synIdentifier\">}</span>\n        `<span class=\"synIdentifier\">}</span>\n        onTouchTap=<span class=\"synIdentifier\">{</span>() =&gt; <span class=\"synIdentifier\">{</span> <span class=\"synIdentifier\">this</span>.onClickTab(idx); <span class=\"synIdentifier\">}}</span>\n        key=<span class=\"synIdentifier\">{</span>item.order<span class=\"synIdentifier\">}</span>\n      &gt;\n        &lt;h2&gt;<span class=\"synIdentifier\">{</span>item.name<span class=\"synIdentifier\">}</span>&lt;/h2&gt;\n      &lt;/li&gt;\n    );\n  <span class=\"synIdentifier\">}</span>)<span class=\"synIdentifier\">}</span>\n&lt;/ul&gt;\n</pre><p>もうちょっと綺麗にならんもんかなー。<br />\nclassNamesみたいなモジュール使ってもいいけど、なんだかなー。</p><p>スタイル当てる系のライブラリも、いつまでたってもbefore/afterの擬似クラスは使えるようにならんしー。<br />\nその点まだVue.jsとかVueifyは良かったなー。</p>\n\n</div>\n<div class=\"section\">\n    <h5>react-tap-event-plugin</h5>\n    <p>v1.xからはデフォルトでReactに入るんかな？<br />\nとりあえずtouchTapって書くだけでモバイルでもPCでも動くのには感動しました。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>postcss</h4>\n    <p>続・完全にやってみたかったドリブン技術選定です。<br />\n最近流行ってるだとかSassは死んだ！とかいろいろ聞く中、実際はどんなもんなんだろなーと。</p><p>結論としては、この程度の規模だとどっちでもいいです。<br />\n今回使ったのはこんな感じ。</p>\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink><span class=\"synSpecial\">{</span>\n  &quot;<span class=\"synStatement\">use</span>&quot;: <span class=\"synSpecial\">[</span>\n    &quot;<span class=\"synConstant\">postcss-import</span>&quot;,\n    &quot;<span class=\"synConstant\">postcss-nested</span>&quot;,\n    &quot;<span class=\"synConstant\">autoprefixer</span>&quot;,\n    &quot;<span class=\"synConstant\">cssnano</span>&quot;\n  <span class=\"synSpecial\">]</span>,\n  &quot;<span class=\"synStatement\">input</span>&quot;: &quot;<span class=\"synConstant\">./src/style/style.css</span>&quot;,\n  &quot;<span class=\"synStatement\">output</span>&quot;: &quot;<span class=\"synConstant\">./dist/style.css</span>&quot;,\n  &quot;<span class=\"synStatement\">autoprefixer</span>&quot;: <span class=\"synSpecial\">{</span>\n    &quot;<span class=\"synStatement\">browsers</span>&quot;: &quot;<span class=\"synConstant\">last 2 versions</span>&quot;\n  <span class=\"synSpecial\">}</span>\n<span class=\"synSpecial\">}</span>\n</pre><p>postcss-cliはwatchの機能もついてるので、特に不満はないです。<br />\nただSassならオールインワンな内容が、postcssだと自分でプラグインを探してこないといけなくて、そこだけ毎回ハマる感じ。<br />\nプラグインを探すのは手間ですが、だいたい見つかるし、カスタマイズできるって分だけnode-sass単体より便利かなーと。</p><p>身の丈にあった技術選定をしたいのでcss-nextなことはやってません。</p>\n\n</div>\n<div class=\"section\">\n    <h4>UIUX</h4>\n    <p>絵を描いてくださった(そしてそもそもの言い出しっぺ)のは<a target=\"_blank\" href=\"https://twitter.com/jenga_ink\">@jenga_ink</a>さんですが、デザインは私です。<br />\nなので至らない点は多々あるのであんまり参考にならんですが一応気にかけた点。</p>\n\n<ul>\n<li>PCでもモバイルでもWebViewでも使える</li>\n<li>絶対にかわいい絵が主役</li>\n<li>パーツのUIはネオンなイメージ</li>\n</ul><p>前もって全パーツ画像をフェッチする作りになってるので、確実に200リクエスト分くらい待つことになります。<br />\nここの構造は最後まで迷ったんですけど、随時読み込みして遊んでる最中に待たされるのは嫌だったので、最初に間を持たせることにしました。</p><p>そこでみんな大好きジャッジくんさんです！これが意外に好反応で、やったった感があってちょっとニヤニヤしましたｗ</p><p>あとは最近のモバイルなら余裕だろうということで、overflow: scrollとかふんだんに。</p>\n\n    <blockquote>\n        <p>WindowsとAndroidで確認してないのでそこだけ心残りが・・。<br />\nまぁ特に何も聞こえてこないので、なんとかなってると信じることにします！</p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>やっぱりWebViewが嫌い</h4>\n    <p>WebView内では、画像を長押ししても画像保存できません！＼(^o^)／</p><p>なのでこのサービスのTwitterへシェアするまわりの導線は正直微妙です。<br />\nまぁそれでもシェアするボタンがあれば最近の人はすぐシェアしてくれるってのは前回学んだので、いちおう設置。</p><p>あとはTwitterのWebIntentも嫌いです。<br />\nなんで画像の添付UI無いねん！</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>バックエンドについて</h3>\n    <p>常時3000人がうちのサーバーに滞在するみたいなのが数時間あって、ほんとにひやひやでした。<br />\n何を隠そうサーバーサイドはなんとなーくでやってるので、今の構成でどれくらいまで耐えられるかとか、サーバー落ちたらどうするかとかノープランでした。<br />\nというか、今もノープランです。</p><p>サーバーはさくらVPSの3コア、メモリ2GBのスペックで、そこでNginxが一人でがんばってくれてます。キャッシュサーバーとかないです。</p>\n\n<ul>\n<li>worker_processesはコア数と同じ3</li>\n<li>worker_connectionsは安定の1024</li>\n<li>gzip(html/css/jsのみ)</li>\n</ul><p>っても画像のレスポンスが一番多くてしんどいので、そこをなんとかしたいんですがノーアイデアで困ってます。<br />\nとりあえずTwitterのトレンドからは降りたのでもう大丈夫やろーと思ってますが、このあたり詳しい方・・リプでいいのでぜひにアドバイスください・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>正直このサービスがこれほどの反響を得たのは、<a target=\"_blank\" href=\"https://twitter.com/jenga_ink\">@jenga_ink</a>さんの絵ありきなので、改めて大きな拍手をお送りくださいって感じです。</p><p>ボーイ版がぜひ欲しいとか、あのギアがないとか、そのへんはきっと追々対応してくれると信じましょう、うん。</p><p>Twitter for Androidの仕様かバグかなんか知りませんが、in_reply_toな兼ね合いか無限にメンションがきて、皆様のマイイカがこれでもかと送られてくるのだけ少し煩わしいですが、まぁ良しとしましょ。</p>\n\n    <blockquote>\n        <p>これでちょっとでもウデマエSとかS+くらいでタッグしてくれる人が増えたらいいな！</p>\n\n    </blockquote>\n\n</div>"
}
