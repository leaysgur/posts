{
  "title": "`new Response(null, { status: 101 })`は、実行環境によってエラーになる",
  "html": "<p>ことの経緯としては、</p>\n\n<ul>\n<li>とあるHTTP関連のOSSにPRを出そうとしていた</li>\n<li>コード書いてテストを実行すると、どうやらPRを出す前からコケてるケースがあった</li>\n<li>原因は、`new Response(null, { status: 101 })`が`RangeError`で落ちてたから</li>\n</ul><p>さて、これはなんでエラーになるんや？WebSocketとかで使うんではなかったか？（うろ覚え）</p><p>というところから、なんとなく気になったのであれこれ調べてみたメモです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3 id=\"エラーと環境\">エラーと環境</h3>\n    \n    <blockquote>\n        <p>RangeError: init[\"status\"] must be in the range of 200 to 599, inclusive.</p>\n\n    </blockquote>\n<p>というエラーが`throw`されてた。</p><p>確認できた環境としては、</p>\n\n<ul>\n<li>Node.js（v18以降）\n<ul>\n<li>というより`undici`といったほうが正しそう</li>\n</ul></li>\n<li>Chrome</li>\n<li>Firefox</li>\n<li>Safari</li>\n</ul><p>どれも同様なエラーになって、おそらくバージョンは関係なさそう。</p><p>ちなみに、このOSSのテストでは`isomorphic-fetch`が使用されていて、`isomorphic-fetch`（が内部的に依存している`node-fetch`）の実装では、`new Response(null, { status: 101 })`はエラーにならない。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/node-fetch/node-fetch/blob/7b86e946b02dfdd28f4f8fca3d73a022cbb5ca1e/src/response.js#L27\">https://github.com/node-fetch/node-fetch/blob/7b86e946b02dfdd28f4f8fca3d73a022cbb5ca1e/src/response.js#L27</a></p>\n\n    </blockquote>\n<p>ただ、このポリフィルは`global.fetch`が存在する場合には何もしないので、バージョン18以降のNode.jsを使っていると、本体の`undici`にある`Response`で処理されて、そこでエラーになってた模様。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/nodejs/undici/blob/472c40e4f6fb3c7a9e489605057debd81b75acdb/lib/fetch/response.js#L440-L446\">https://github.com/nodejs/undici/blob/472c40e4f6fb3c7a9e489605057debd81b75acdb/lib/fetch/response.js#L440-L446</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"そもそもSpecでは\">そもそもSpecでは</h3>\n    <p>`Response`オブジェクトといえば`fetch`の同期ということで、Fetch Standardを見てみた。</p><p>すると、どうやら仕様としては「エラーになって然るべし」らしいことがわかった。</p>\n\n    <blockquote>\n        <p>To initialize a response, given a Response object response, ResponseInit init, and an optional body with type body, run these steps:<br />\n    1. If init[\"status\"] is not in the range 200 to 599, inclusive, then throw a RangeError.<br />\n<a href=\"https://fetch.spec.whatwg.org/#initialize-a-response\">https://fetch.spec.whatwg.org/#initialize-a-response</a></p>\n\n    </blockquote>\n<p>`throw`するってめっちゃ書いてある！</p><p>そういうわけで、モダンブラウザと`undici`は仕様に準拠した実装になってると言えそう。</p><p>`isomorphic-fetch`でも、仕様に合わせようっていうIssue/PRが立ってるようだった。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/node-fetch/node-fetch/issues/1685\">When initializing a response it should throw if status is not in the range 200 to 599 &middot; Issue #1685 &middot; node-fetch/node-fetch &middot; GitHub</a></p>\n\n    </blockquote>\n<p>というわけで、エラーになるのが仕様通りで、仕様からするとテストコードにバグがあるという話だった。</p><p>〜終〜</p><p>と言いたいとこやけど・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"エラーにならない環境もある\">エラーにならない環境もある</h3>\n    <p>これが違和感の正体で、ここまで調べようと思った動機であり。</p><p>この`new Response(null, { status: 101 })`、Cloudflare Workersでは動くんですよね・・・。<br />\nなんならDocsにものってるし。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.cloudflare.com/workers/learning/using-websockets/\">Using WebSockets &middot; Cloudflare Workers docs</a></p>\n\n    </blockquote>\n<p>ということはもしや？って思って、エッジWorkerたちの実装を調べてみると、軒並みエラーにならなかった・・・！</p>\n\n<ul>\n<li>workerd\n<ul>\n<li><a href=\"https://github.com/cloudflare/workerd/blob/main/src/workerd/api/http.c%2B%2B#L1086-L1092https://github.com/cloudflare/workerd/blob/59e428e43a019f05dd9eb12b280b86c14eaeffd6/src/workerd/api/http.c%2B%2B#L1086-L1092\">https://github.com/cloudflare/workerd/blob/main/src/workerd/api/http.c%2B%2B#L1086-L1092https://github.com/cloudflare/workerd/blob/59e428e43a019f05dd9eb12b280b86c14eaeffd6/src/workerd/api/http.c%2B%2B#L1086-L1092</a></li>\n</ul></li>\n<li>bun\n<ul>\n<li><a href=\"https://github.com/oven-sh/bun/blob/5712fbd5b9f6c69830f666348e85a173f9ed7f2e/src/bun.js/webcore/body.zig#L176-L185\">https://github.com/oven-sh/bun/blob/5712fbd5b9f6c69830f666348e85a173f9ed7f2e/src/bun.js/webcore/body.zig#L176-L185</a></li>\n</ul></li>\n<li>deno\n<ul>\n<li><a href=\"https://github.com/denoland/deno/blob/530963c34c5cc5260b07029fff6c4ae85f52d830/ext/fetch/23_response.js#L165-L177\">https://github.com/denoland/deno/blob/530963c34c5cc5260b07029fff6c4ae85f52d830/ext/fetch/23_response.js#L165-L177</a></li>\n</ul></li>\n</ul><p>どれも`101`だけは例外的に許可するって実装になってた。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"WinterCGのSpecでは\">WinterCGのSpecでは</h3>\n    <p>どうやらサーバーサイドJSをやっていくために、このWGではFetch Standardをforkしてるらしく。</p><p>もしかそこでは許可されるように変更された？って思ったけど、今の時点では別にそうなってなかった。</p>\n\n    <blockquote>\n        <p><a href=\"https://fetch.spec.wintercg.org/#initialize-a-response\">https://fetch.spec.wintercg.org/#initialize-a-response</a></p>\n\n    </blockquote>\n<p>これからなるかもしれないし、ならないかもしれない。</p>\n\n</div>\n<div class=\"section\">\n    <h3 id=\"まとめ\">まとめ</h3>\n    <p>というわけで、`new Response(null, { status: 101 })`は、</p>\n\n<ul>\n<li>環境によって、エラーになったりならなかったりする\n<ul>\n<li>仕様が実装に必ずしも反映されるとは限らない</li>\n<li>まぁWebの常って感じではあるけど</li>\n</ul></li>\n<li>`101`なレスポンスを返したいサーバーサイドの実装としては、困るかもしれない\n<ul>\n<li>ただ、Node.jsでWebSocketサーバーを`fetch.Response`を使って実装したい人なんかいない気がする</li>\n<li>既存の枯れた実装はいっぱいあるし、`node:net`なり使えばいいし</li>\n</ul></li>\n<li>エッジ系ランタイムでは、仕様に明記されてないものの、動作する</li>\n</ul><p>そもそもFetch StandardはHTTPクライアントの出自であり、サーバー用途で使われる日がくるとは！って感じかも？知らんけど。</p>\n\n</div>"
}
