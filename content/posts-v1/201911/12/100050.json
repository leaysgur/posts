{
  "title": "A QUIC bit of fun with Node.js - James Snell の要点まとめ",
  "html": "\n    <blockquote>\n        <p><a href=\"https://www.youtube.com/watch?v=GkYOwH6tr2o\">YouTube</a></p>\n\n    </blockquote>\n<p>NodeConf EU 2019でのトークの要点まとめです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>はじめに</h3>\n    \n<ul>\n<li>NearForm社でリサーチやってます</li>\n<li>主にOSS活動</li>\n<li>最近はNodeにQUICを実装してる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>HTTP/2 in Node.js</h3>\n    \n<ul>\n<li>その前にHTTP/2について</li>\n<li>Nodeにも実装はあって、2017年にコアにはいった\n<ul>\n<li>けど、残念ながら使い勝手はあまりよくない...</li>\n</ul></li>\n<li>だいたいのNodeは前段にNginxなどを置くせい</li>\n<li>HTTP/2はステートフルなプロトコル\n<ul>\n<li>ヘッダ圧縮のために、コネクションは状態を持つ必要がある</li>\n<li>それを経由するミドルボックスで協調してメンテするのが無理</li>\n</ul></li>\n<li>Node <-> Nodeとか、ブラウザ直でつなげるなら有用ともいえる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>HTTP/2</h3>\n    \n<ul>\n<li>HTTP/1.xは、1リクエスト:1TCPコネクション</li>\n<li>なのでHOLBが問題になる\n<ul>\n<li>1つパケットが落ちると、後続のパケットはその再送を待つ</li>\n</ul></li>\n<li>HTTP/2では、リクエストを多重化した\n<ul>\n<li>Nリクエスト:1TCPコネクション</li>\n</ul></li>\n<li>しかし結局TCPなので、HOLBからは逃れられない...</li>\n<li>物理的に距離が遠かったり、モバイルなど低品質のNWの場合にそれが顕著</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>QUIC</h3>\n    \n<ul>\n<li>そこでQUIC, HTTP/3</li>\n<li>QUICはUDPベース\n<ul>\n<li>unreliableなプロトコル</li>\n<li>それぞれのパケットは独立してる</li>\n</ul></li>\n<li>なのでTCPでやってたことを、全部実装しなおしてる\n<ul>\n<li>到達確認(=reliable)</li>\n<li>シーケンス（=ordering）</li>\n<li>輻輳制御</li>\n<li>暗号化 w/ TLS1.3</li>\n<li>etc...</li>\n</ul></li>\n<li>HTTP/3は、そんなQUICセッションを束ねてる</li>\n<li>TCPはIPに紐付いたコネクションなので、NWを変えると切れる\n<ul>\n<li>そういうのも大丈夫</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>QUIC in Node.js</h3>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> createSocket <span class=\"synIdentifier\">}</span> = require(<span class=\"synConstant\">&quot;quic&quot;</span>);\n<span class=\"synStatement\">const</span> socket = createSocket();\n\nsocket.listen(<span class=\"synIdentifier\">{</span> port: 443, key, cert, ca <span class=\"synIdentifier\">}</span>);\n\nsocket.on(<span class=\"synConstant\">&quot;session&quot;</span>, session =&gt; <span class=\"synIdentifier\">{</span>\n  session.on(<span class=\"synConstant\">&quot;stream&quot;</span>, stream =&gt; <span class=\"synIdentifier\">{</span>\n    stream.end(<span class=\"synConstant\">&quot;Hello world!&quot;</span>);\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre>\n<ul>\n<li>ただいま絶賛実装中</li>\n<li>という具合に、見慣れたNodeのコードで書ける\n<ul>\n<li>`stream`は単なる`Duplex`な`Stream`</li>\n</ul></li>\n<li>そしてQUICは単なるトランスポートプロトコル</li>\n</ul><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> createSocket <span class=\"synIdentifier\">}</span> = require(<span class=\"synConstant\">&quot;quic&quot;</span>);\n<span class=\"synStatement\">const</span> socket = createSocket();\n\n<span class=\"synStatement\">const</span> req = socket.connect(<span class=\"synIdentifier\">{</span> address, port: 443, key, cert, ca <span class=\"synIdentifier\">}</span>);\n\nreq.on(<span class=\"synConstant\">&quot;secure&quot;</span>, () =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> stream = req.openStream();  \n  stream.end(<span class=\"synConstant\">&quot;Hello world!&quot;</span>);\n  stream.on(<span class=\"synConstant\">&quot;data&quot;</span>, data =&gt; <span class=\"synIdentifier\">{}</span>);\n<span class=\"synIdentifier\">}</span>);\n</pre>\n<ul>\n<li>という感じでHTTP/3を実装する\n<ul>\n<li>QUIC上のアプリケーションプロトコルとして</li>\n</ul></li>\n<li>なのでQUICの上に独自のプロトコルを実装することもできる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>進捗</h3>\n    \n<ul>\n<li>`ngtcp2`の`tatsuhiro-t`さんありがとう</li>\n<li>実装はここで進行中\n<ul>\n<li><a href=\"https://github.com/nodejs/quic\">https://github.com/nodejs/quic</a></li>\n</ul></li>\n<li>おそらく2019年の11月末にExperimentalなPRをコアに出せそう\n<ul>\n<li>ただし来年いっぱいくらいはAPIを洗練したり検討したりすると思う</li>\n<li>まだ実装しないといけないこともいっぱいあるし</li>\n</ul></li>\n<li>（クラサバでパケットを送り合うデモ）\n<ul>\n<li>流れたByte数とかストリームの数などが、JSのAPIから取れる！</li>\n</ul></li>\n<li>Wiresharkとかでデバッグできるようキーロギングサポートも</li>\n</ul>\n</div>"
}
