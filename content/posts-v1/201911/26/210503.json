{
  "title": "Mercari x Merpay Frontend Tech Talk vol.3 に行ってきたメモ",
  "html": "\n    <blockquote>\n        <p><a href=\"https://mercari.connpass.com/event/153687/\">Mercari x Merpay Frontend Tech Talk vol.3 - connpass</a></p>\n\n    </blockquote>\n<p>六本木のメルカリ社にて。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Creating Serverless CMS from Scratch by @sottar_</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/sottar/create-own-cms-from-scratch-27522e7d-717d-48fb-a83b-585bbf0ba794\">create own CMS from scratch - Speaker Deck</a></p>\n\n    </blockquote>\n\n<ul>\n<li>海外のカンファレンスで発表したやつの再演だそうな</li>\n<li>CMSをつくったはなし\n<ul>\n<li>期限つきキャンペーンページを作ることがおおい</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>今までの業務フロー</h4>\n    \n<ul>\n<li>デザインをPMが考える</li>\n<li>デザイナーがHTML/CSSなど</li>\n<li>JSが必要ならフロントエンドエンジニアに頼んだりも\n<ul>\n<li>レビューもする</li>\n</ul></li>\n<li>問題だったところ\n<ul>\n<li>デザイナーがコードを書く必要がある（HTMLはまだしもpugとか</li>\n<li>エンジニアのレビューのコスト</li>\n<li>ちょっとした修正でも同じフローをたどるので時間がかかる</li>\n</ul></li>\n<li>キャンペーンページの複雑さに比べて、コスパが悪い</li>\n<li>なのでCMSをつくった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>なぜ自作したか</h4>\n    \n<ul>\n<li>共通のコンポーネントで対応できるデザインだった\n<ul>\n<li>コンポーネントをGUIで組み合わせることでページが生成できるように</li>\n<li>既存コンポーネントがない場合は新規作成が必要だが、それも将来的には使える</li>\n</ul></li>\n<li>既存のCMSもためした\n<ul>\n<li>NetlifyCMSとか</li>\n<li>ただコンポーネントをGUIで組み合わせたい要件に見合わなかった</li>\n</ul></li>\n<li>必要な機能はたくさんあったが、まずMVPを作ってアップデートしていくことに</li>\n<li>以下の機能だけつくった\n<ul>\n<li>リストページと編集ページ</li>\n<li>既存ページをカバーした数のコンポーネント</li>\n<li>stage/prodへのリリース機能</li>\n<li>unpublishする機能</li>\n<li>社内NWからのみアクセス</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>アーキテクチャ</h4>\n    \n<ul>\n<li>AWSとGCS</li>\n<li>ホスティングはS3</li>\n<li>データはGCSで、CloudFunctionで取得</li>\n<li>フロントはReact\n<ul>\n<li>JSONに従ってコンポーネントをDynamicImportして表示</li>\n</ul></li>\n<li>publishするとそれがS3に</li>\n<li>Q. GCSとAWSを使ってるのはなぜ？\n<ul>\n<li>A. 既に社内からのみアクセスできるS3の仕組みがあったので</li>\n</ul></li>\n<li>Q. CloudFunctionいる？\n<ul>\n<li>A. 直接GCSを叩いてもいいけど、後で機能追加しやすいと思ったから</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>使ってもらったあと</h4>\n    \n<ul>\n<li>おおむね好評\n<ul>\n<li>業務フローも改善された</li>\n</ul></li>\n<li>機能追加していこうと思ってる\n<ul>\n<li>権限管理</li>\n<li>SSR</li>\n</ul></li>\n<li>もっと先には\n<ul>\n<li>機械学習などを使って、ユーザーごとに最適化したバナーや表示をしたい</li>\n</ul></li>\n</ul><p>必要なものを自分たちで作れるのってやっぱいいよね〜。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Vue.jsでのCSS設計 by @tacamy</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/tacamy/css-architecture-on-vue-dot-js\">CSS Architecture on Vue.js - Speaker Deck</a></p>\n\n    </blockquote>\n\n<ul>\n<li>HTML/CSS歴10年！</li>\n<li>Vue.jsはここ2年くらい</li>\n<li>`.vue`でのScopedCSSにおけるベストプラクティスを話します</li>\n</ul>\n<div class=\"section\">\n    <h4>コンポーネントとは</h4>\n    \n<ul>\n<li>自己完結する</li>\n<li>再利用可能</li>\n<li>VueのSFC(SingleFileComponent)</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>念願のScoped！ただし</h4>\n    \n<ul>\n<li>ShadowDOMではない\n<ul>\n<li>data属性でなされてる</li>\n</ul></li>\n<li>要素セレクタへのスタイル指定はダメ\n<ul>\n<li>遅い</li>\n<li>クラス名を使おう</li>\n</ul></li>\n<li>ルート要素は親スコープの影響を受けるので非推奨\n<ul>\n<li>親から子のレイアウトをいじれるメリットもある</li>\n<li>クラス名が被らなければよい</li>\n</ul></li>\n<li>deepも避けたい\n<ul>\n<li>ネストによって優先度が変わるかもしれない</li>\n<li>Scopedでもない</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>BEMにならう</h4>\n    \n<ul>\n<li>block = コンポーネントと捉える\n<ul>\n<li>他はBEMと同じ</li>\n</ul></li>\n<li>CSSは1階層にとどめる</li>\n<li>modifier\n<ul>\n<li>BEM式にすると冗長すぎる</li>\n<li>`_modifier`の形式でつければ、詳細度も上がって便利</li>\n<li>アンダーバーならJSから触りやすくてよいと思った</li>\n</ul></li>\n<li>BEMという共通認識\n<ul>\n<li>DevToolsで見てもすぐわかる</li>\n</ul></li>\n<li>BEMだとタイピングめんどうでは？\n<ul>\n<li>クラス名を変数に入れてアクセスする</li>\n<li>SCSSにして`&`を使う</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>BEMのガイドライン</h3>\n    \n<ul>\n<li>名前付けは2語がおすすめ\n<ul>\n<li>HTMLの要素は1語なので</li>\n</ul></li>\n<li>ファイル名とディレクトリ構想\n<ul>\n<li>浅くする</li>\n<li>ディレクトリに入れて省略しない</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>コンポーネントの分類について思う</h4>\n    \n<ul>\n<li>AtomicDesignは複雑すぎる説\n<ul>\n<li>あれはどれでしたっけ問題</li>\n<li>細かすぎる</li>\n</ul></li>\n<li>粒度によって分ける案\n<ul>\n<li>Part / Module</li>\n</ul></li>\n<li>役割別にする案\n<ul>\n<li>Container / Presentation</li>\n</ul></li>\n<li>プロジェクトに応じて最適な粒度を見つけるべき\n<ul>\n<li>分類に時間がかかる = too much</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>理想と現実</h4>\n    \n<ul>\n<li>すべてのCSSをScopedにできれば\n<ul>\n<li>構造も一貫しており保守もしやすい</li>\n</ul></li>\n<li>初期にすべてのユースケースを見通すことはできない</li>\n<li>スピード重視だと、雑に書き捨てたいシーンも多い</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>どうやっていくか</h4>\n    \n<ul>\n<li>Step1: まずは外部CSSからはじめる\n<ul>\n<li>o: HTMLにクラスつけるだけでOK</li>\n<li>x: ただしどこで使われてるかわからない</li>\n<li>x: エンジニアがCSSを状態によって付け替えたりしてると、それを把握しないといけない</li>\n</ul></li>\n<li>Step2: 外部CSS + Scopedのハイブリッド\n<ul>\n<li>o: Scopedなので自由にCSSかける</li>\n<li>x: 同じようなものが点在する</li>\n<li>x: 一部だけ外部CSSに依存したコンポーネントがいたりする</li>\n</ul></li>\n<li>Step3: ぜんぶScoped！\n<ul>\n<li>o: どこでも同じデザインが使える</li>\n<li>x: コンポーネントのメンテを続けていく必要がある</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>まとめ</h4>\n    \n<ul>\n<li>正解はないです</li>\n<li>プロジェクトに応じたものを</li>\n<li>CSS設計のノウハウは、コンポーネント設計にも活かせる！</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>質問</h4>\n    \n<ul>\n<li>Q. Scopedのみからはじめなかったのは？\n<ul>\n<li>エンジニアのみの環境だと、Scopedのみからはじめたほうが嬉しそう</li>\n</ul></li>\n<li>A. ユースケースを想定したコンポーネントを初期に用意するのが難しい\n<ul>\n<li>Vueのコンポーネントに慣れた人ばかりではなかった</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>The Challenge of Web re-architecture using GraphQL and Apollo by @lightnet328</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/lightnet328/the-challenge-of-web-re-architecture-using-graphql-and-apollo\">The challenge of Web re-architecture using GraphQL and Apollo - Speaker Deck</a></p>\n\n    </blockquote>\n\n<ul>\n<li>新卒では働いてます</li>\n<li>メルカリWebのリアーキテクトをしてる</li>\n</ul>\n<div class=\"section\">\n    <h4>リアーキテクト</h4>\n    \n<ul>\n<li>新しい技術スタックで作り直す\n<ul>\n<li>機能はそのまま</li>\n</ul></li>\n<li>ページごとに開放していってる\n<ul>\n<li>いまはトップページだけ</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>GraphQL</h4>\n    \n<ul>\n<li>APIのためのクエリ言語</li>\n<li>クエリでデータを引いてくる\n<ul>\n<li>型がつく</li>\n<li>gRPCのprotobufみたいな</li>\n</ul></li>\n<li>クエリとレスポンスのデータ構造が一致する</li>\n<li>周辺ツールも充実してる\n<ul>\n<li>Apollo, Prisma, graphql-code-generator</li>\n</ul></li>\n<li>スキーマ定義\n<ul>\n<li>実装がそのままドキュメントになるイメージ</li>\n<li>可読性も高い</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Apollo Client</h4>\n    \n<ul>\n<li>GraphQLクライアントの1つ</li>\n<li>データを正規化する仕組みがある</li>\n<li>キャッシュ機構もある</li>\n<li>リクエストの前後に処理をはさむLinkという機能がある</li>\n<li>Apollo Clientで取得しないもの\n<ul>\n<li>グローバルで使うけど、ローカルでしか使わないデータ（Contextで）</li>\n<li>局所的なデータ（State）</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Apollo Server</h4>\n    \n<ul>\n<li>GraphQLサーバーの1つ</li>\n<li>拡張できる\n<ul>\n<li>各サーバー実装のミドルウェアとして使える</li>\n<li>コア機能はプラグインで関与できる</li>\n</ul></li>\n<li>BFFとしての役割\n<ul>\n<li>うしろにバックエンドサーバーが控えてる</li>\n<li>フロントエンドのためにAPIを整理</li>\n<li>ロギング、認証もできる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>開発フロー</h4>\n    \n<ul>\n<li>APIクライアントをかく\n<ul>\n<li>ここがいちばん大変</li>\n<li>ドキュメントとの齟齬があったりする</li>\n</ul></li>\n<li>スキーマ定義して型にする\n<ul>\n<li>フロントエンドで使いやすい形に</li>\n<li>graphql-codegen</li>\n</ul></li>\n<li>リゾルバーを書く</li>\n<li>クエリを書く</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ハマるところ</h4>\n    \n<ul>\n<li>リゾルバーの共通処理をまとめたい\n<ul>\n<li>ミドルウェアを作った</li>\n<li>いわゆる高階関数でチェーンして使う</li>\n<li>それ用の部品は用意されてる（プラグインやディレクティブなど）</li>\n</ul></li>\n<li>enumが増えすぎると対応が漏れてフォーマットエラーに\n<ul>\n<li>単にstring/numberにした</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>まとめ</h4>\n    \n<ul>\n<li>エコシステムが出来上がってきている</li>\n<li>Apolloだけでなく、他のツールも使って補っていく</li>\n<li>型安全に開発スピードをあげられてよい</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>質問</h4>\n    \n<ul>\n<li>Q. クエリが増えてきたときに、数や深さの制限はしてる？\n<ul>\n<li>A. 数はしてたと思う</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>Practical tips for making a global EC site by @yayoc</h3>\n    \n    <blockquote>\n        <p>資料はみつけたら</p>\n\n    </blockquote>\n\n<ul>\n<li>ユニクロのECサイトについて</li>\n<li>グローバルなサイト構築への取り組み</li>\n</ul>\n<div class=\"section\">\n    <h4>ユニクロのEC</h4>\n    \n<ul>\n<li>22ヶ国</li>\n<li>O2Oもサポート\n<ul>\n<li>店でバーコード出すとか</li>\n</ul></li>\n<li>国によって機能が異なる\n<ul>\n<li>開発も国ごとになるのでメンテがつらい</li>\n</ul></li>\n<li>クライアントに実装が偏る</li>\n<li>CDNの設定もすごい\n<ul>\n<li>10万行の設定ファイル</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>それを改善する</h4>\n    \n<ul>\n<li>やりたかったこと\n<ul>\n<li>コードベースの統一</li>\n<li>パフォーマンス改善</li>\n<li>アクセシビリティ</li>\n<li>オペコストの削減</li>\n</ul></li>\n<li>2017~2019年でやってた</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>アーキテクチャ</h4>\n    \n<ul>\n<li>国別リダイレクトはNginxで</li>\n<li>URL\n<ul>\n<li>`/:country/:language`</li>\n<li>位置情報</li>\n<li>Accept-Languageヘッダと、デフォルト言語で</li>\n</ul></li>\n<li>部分SSRな理由\n<ul>\n<li>GoogleBot以外のBotも多い（Yandexとか）</li>\n<li>ステータスコードはちゃんと返したい</li>\n</ul></li>\n<li>CMSで管理されてる\n<ul>\n<li>柔軟性は高い</li>\n<li>CMS側で定義したスキーマをいじるだけ</li>\n<li>それがReactのpropsになって表示される</li>\n</ul></li>\n<li>パフォーマンスへの取り組み\n<ul>\n<li>デイリーで国別にWPT/LighthouseしてCSVに</li>\n<li>結果をウィークリーでメールして意識させる</li>\n<li>webpack-bundle-analyserもよく見てる</li>\n</ul></li>\n<li>i18n\n<ul>\n<li>言語別にエントリポイントが違う</li>\n<li>一部はランタイムで翻訳してる（単数形・複数形など</li>\n</ul></li>\n<li>Webpack Define-plugin\n<ul>\n<li>決済フローが異なるのでそれを分けたり</li>\n<li>Minifyするので不要な分岐は消える</li>\n</ul></li>\n<li>a11y\n<ul>\n<li>2018年のUSで2000件以上起訴されてるので重視</li>\n<li>Lighthouseのスコア以外にも</li>\n<li><a href=\"https://www.matuzo.at/blog/beyond-automatic-accessibility-testing-6-things-i-check-on-every-website-i-build/\">Beyond automatic accessibility testing: 6 things I check on every website I build - Manuel Matuzovi&#x107;</a></li>\n</ul></li>\n<li>画像の最適化\n<ul>\n<li>解像度は購買意欲につながる</li>\n<li>最適化ももちろん</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>BFF</h4>\n    \n<ul>\n<li>クライアントヘビーを回避</li>\n<li>バックエンドサーバーへの負荷軽減</li>\n<li>キャッシュ\n<ul>\n<li>max-ageをみて</li>\n</ul></li>\n<li>ロギング\n<ul>\n<li>セキュアな情報はマスクする</li>\n<li>HMAC認証</li>\n</ul></li>\n<li>リクエストヘッダはパススルーしたり</li>\n<li>大変なこともある\n<ul>\n<li>後ろのマイクロサービス間のAPIインターフェースが統一されてない</li>\n<li>キャッシュのパージ</li>\n<li>実装待ち</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>まとめ</h4>\n    \n<ul>\n<li>URLは初期段階できっちり決めるべし</li>\n<li>リダイレクトもどのレイヤーでやるか早めに</li>\n<li>SEOはGoogleだけ見るならSPAでもいいのでは</li>\n<li>ビルド時の出し分けはWebpackのプラグインが便利</li>\n<li>USではa11y不備は起訴につながる</li>\n<li>画像も忘れず最適化しようね</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>質問</h4>\n    \n<ul>\n<li>Q. BFFでロギングしてるときマスクするセキュアな情報とは？\n<ul>\n<li>送り先も自社のマイクロサービスでは</li>\n<li>A. 個人情報など、ロギングの趣旨に不要なもの</li>\n</ul></li>\n<li>Q. 翻訳サービスなど使ってる？\n<ul>\n<li>A. Excelで国ごとに管理してる</li>\n<li>移行したいとは思う</li>\n</ul></li>\n<li>Q. WebPとか使ってるけどブラウザ差異はどこまで対応？\n<ul>\n<li>A. Babelのpreset-envで見てる</li>\n<li>`picture`タグはフォールバックを用意したり</li>\n</ul></li>\n<li>Q. ABテストしてますか？\n<ul>\n<li>A. まだやってない</li>\n<li>CMSのレイヤーでやるか、フラグでコンポーネントを出し分けるとか検討中</li>\n</ul></li>\n<li>Q. 各国の法律などをフロントエンドエンジニアとして意識したことはありますか？\n<ul>\n<li>A. カナダなどシビアな国は特に注意して実装してる</li>\n</ul></li>\n</ul><p>すごい知見の塊だった・・！</p>\n\n</div>\n</div>"
}
