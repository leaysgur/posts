{
  "title": "Mercari x Merpay Frontend Tech Talk vol.3 に行ってきたメモ",
  "html": "\n    <blockquote>\n        <p><a href=\"https://mercari.connpass.com/event/153687/\">Mercari x Merpay Frontend Tech Talk vol.3 - connpass</a></p>\n\n    </blockquote>\n<p>六本木のメルカリ社にて。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Creating Serverless <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a> from Scratch by @sottar_</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/sottar/create-own-cms-from-scratch-27522e7d-717d-48fb-a83b-585bbf0ba794\">create own CMS from scratch - Speaker Deck</a></p>\n\n    </blockquote>\n\n<ul>\n<li>海外のカンファレンスで発表したやつの再演だそうな</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>をつくったはなし\n<ul>\n<li>期限つきキャンペーンページを作ることがおおい</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4>今までの業務フロー</h4>\n    \n<ul>\n<li>デザインをPMが考える</li>\n<li>デザイナーがHTML/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>など</li>\n<li>JSが必要ならフロントエンドエンジニアに頼んだりも\n<ul>\n<li>レビューもする</li>\n</ul></li>\n<li>問題だったところ\n<ul>\n<li>デザイナーがコードを書く必要がある（HTMLはまだしもpugとか</li>\n<li>エンジニアのレビューのコスト</li>\n<li>ちょっとした修正でも同じフローをたどるので時間がかかる</li>\n</ul></li>\n<li>キャンペーンページの複雑さに比べて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1\">コスパ</a>が悪い</li>\n<li>なので<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>をつくった</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>なぜ自作したか</h4>\n    \n<ul>\n<li>共通の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>で対応できるデザインだった\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GUI\">GUI</a>で組み合わせることでページが生成できるように</li>\n<li>既存<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>がない場合は新規作成が必要だが、それも将来的には使える</li>\n</ul></li>\n<li>既存の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>もためした\n<ul>\n<li>NetlifyCMSとか</li>\n<li>ただ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GUI\">GUI</a>で組み合わせたい要件に見合わなかった</li>\n</ul></li>\n<li>必要な機能はたくさんあったが、まずMVPを作ってアップデートしていくことに</li>\n<li>以下の機能だけつくった\n<ul>\n<li>リストページと編集ページ</li>\n<li>既存ページをカバーした数の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a></li>\n<li>stage/prodへのリリース機能</li>\n<li>unpublishする機能</li>\n<li>社内NWからのみアクセス</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a></h4>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AWS\">AWS</a>とGCS</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%B9%A5%C6%A5%A3%A5%F3%A5%B0\">ホスティング</a>はS3</li>\n<li>データはGCSで、CloudFunctionで取得</li>\n<li>フロントはReact\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSON\">JSON</a>に従って<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>をDynamicImportして表示</li>\n</ul></li>\n<li>publishするとそれがS3に</li>\n<li>Q. GCSと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AWS\">AWS</a>を使ってるのはなぜ？\n<ul>\n<li>A. 既に社内からのみアクセスできるS3の仕組みがあったので</li>\n</ul></li>\n<li>Q. CloudFunctionいる？\n<ul>\n<li>A. 直接GCSを叩いてもいいけど、後で機能追加しやすいと思ったから</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>使ってもらったあと</h4>\n    \n<ul>\n<li>おおむね好評\n<ul>\n<li>業務フローも改善された</li>\n</ul></li>\n<li>機能追加していこうと思ってる\n<ul>\n<li>権限管理</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a></li>\n</ul></li>\n<li>もっと先には\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC\">機械学習</a>などを使って、ユーザーごとに最適化したバナーや表示をしたい</li>\n</ul></li>\n</ul><p>必要なものを自分たちで作れるのってやっぱいいよね〜。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Vue.jsでの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>設計 by @tacamy</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/tacamy/css-architecture-on-vue-dot-js\">CSS Architecture on Vue.js - Speaker Deck</a></p>\n\n    </blockquote>\n\n<ul>\n<li>HTML/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>歴10年！</li>\n<li>Vue.jsはここ2年くらい</li>\n<li>`.vue`でのScopedCSSにおけるベストプ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ティスを話します</li>\n</ul>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>とは</h4>\n    \n<ul>\n<li>自己完結する</li>\n<li>再利用可能</li>\n<li>Vueの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SFC\">SFC</a>(SingleFileComponent)</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>念願のScoped！ただし</h4>\n    \n<ul>\n<li>ShadowDOMではない\n<ul>\n<li>data属性でなされてる</li>\n</ul></li>\n<li>要素<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF\">セレクタ</a>へのスタイル指定はダメ\n<ul>\n<li>遅い</li>\n<li>クラス名を使おう</li>\n</ul></li>\n<li>ルート要素は親スコープの影響を受けるので非推奨\n<ul>\n<li>親から子のレイアウトをいじれるメリットもある</li>\n<li>クラス名が被らなければよい</li>\n</ul></li>\n<li>deepも避けたい\n<ul>\n<li>ネストによって優先度が変わるかもしれない</li>\n<li>Scopedでもない</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>BEMにならう</h4>\n    \n<ul>\n<li>block = <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>と捉える\n<ul>\n<li>他はBEMと同じ</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>は1階層にとどめる</li>\n<li>modifier\n<ul>\n<li>BEM式にすると冗長すぎる</li>\n<li>`_modifier`の形式でつければ、詳細度も上がって便利</li>\n<li>アンダーバーならJSから触りやすくてよいと思った</li>\n</ul></li>\n<li>BEMという共通認識\n<ul>\n<li>DevToolsで見てもすぐわかる</li>\n</ul></li>\n<li>BEMだとタイピングめんどうでは？\n<ul>\n<li>クラス名を変数に入れてアクセスする</li>\n<li>SCSSにして`&`を使う</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>BEMの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AC%A5%A4%A5%C9%A5%E9%A5%A4%A5%F3\">ガイドライン</a></h3>\n    \n<ul>\n<li>名前付けは2語がおすすめ\n<ul>\n<li>HTMLの要素は1語なので</li>\n</ul></li>\n<li>ファイル名と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リ構想\n<ul>\n<li>浅くする</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リに入れて省略しない</li>\n</ul></li>\n</ul>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の分類について思う</h4>\n    \n<ul>\n<li>AtomicDesignは複雑すぎる説\n<ul>\n<li>あれはどれでしたっけ問題</li>\n<li>細かすぎる</li>\n</ul></li>\n<li>粒度によって分ける案\n<ul>\n<li>Part / Module</li>\n</ul></li>\n<li>役割別にする案\n<ul>\n<li>Container / Presentation</li>\n</ul></li>\n<li>プロジェクトに応じて最適な粒度を見つけるべき\n<ul>\n<li>分類に時間がかかる = too much</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>理想と現実</h4>\n    \n<ul>\n<li>すべての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>をScopedにできれば\n<ul>\n<li>構造も一貫しており保守もしやすい</li>\n</ul></li>\n<li>初期にすべての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>を見通すことはできない</li>\n<li>スピード重視だと、雑に書き捨てたいシーンも多い</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>どうやっていくか</h4>\n    \n<ul>\n<li>Step1: まずは外部<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>からはじめる\n<ul>\n<li>o: HTMLにクラスつけるだけでOK</li>\n<li>x: ただしどこで使われてるかわからない</li>\n<li>x: エンジニアが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>を状態によって付け替えたりしてると、それを把握しないといけない</li>\n</ul></li>\n<li>Step2: 外部<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a> + Scopedのハイブリッド\n<ul>\n<li>o: Scopedなので自由に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>かける</li>\n<li>x: 同じようなものが点在する</li>\n<li>x: 一部だけ外部<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>に依存した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>がいたりする</li>\n</ul></li>\n<li>Step3: ぜんぶScoped！\n<ul>\n<li>o: どこでも同じデザインが使える</li>\n<li>x: <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>のメンテを続けていく必要がある</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>まとめ</h4>\n    \n<ul>\n<li>正解はないです</li>\n<li>プロジェクトに応じたものを</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>設計のノウハウは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>設計にも活かせる！</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>質問</h4>\n    \n<ul>\n<li>Q. Scopedのみからはじめなかったのは？\n<ul>\n<li>エンジニアのみの環境だと、Scopedのみからはじめたほうが嬉しそう</li>\n</ul></li>\n<li>A. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9\">ユースケース</a>を想定した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を初期に用意するのが難しい\n<ul>\n<li>Vueの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>に慣れた人ばかりではなかった</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>The Challenge of Web re-architecture using GraphQL and <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Apollo\">Apollo</a> by @lightnet328</h3>\n    \n    <blockquote>\n        <p><a href=\"https://speakerdeck.com/lightnet328/the-challenge-of-web-re-architecture-using-graphql-and-apollo\">The challenge of Web re-architecture using GraphQL and Apollo - Speaker Deck</a></p>\n\n    </blockquote>\n\n<ul>\n<li>新卒では働いてます</li>\n<li>メルカリWebのリアーキテクトをしてる</li>\n</ul>\n<div class=\"section\">\n    <h4>リアーキテクト</h4>\n    \n<ul>\n<li>新しい技術スタックで作り直す\n<ul>\n<li>機能はそのまま</li>\n</ul></li>\n<li>ページごとに開放していってる\n<ul>\n<li>いまはトップページだけ</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>GraphQL</h4>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>のためのクエリ言語</li>\n<li>クエリでデータを引いてくる\n<ul>\n<li>型がつく</li>\n<li>gRPCのprotobufみたいな</li>\n</ul></li>\n<li>クエリとレスポンスのデータ構造が一致する</li>\n<li>周辺ツールも充実してる\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Apollo\">Apollo</a>, <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Prisma\">Prisma</a>, graphql-code-generator</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A1%BC%A5%DE\">スキーマ</a>定義\n<ul>\n<li>実装がそのままドキュメントになるイメージ</li>\n<li>可読性も高い</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Apollo\">Apollo</a> Client</h4>\n    \n<ul>\n<li>GraphQLクライアントの1つ</li>\n<li>データを正規化する仕組みがある</li>\n<li>キャッシュ機構もある</li>\n<li>リク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トの前後に処理をはさむLinkという機能がある</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Apollo\">Apollo</a> Clientで取得しないもの\n<ul>\n<li>グローバルで使うけど、ローカルでしか使わないデータ（Contextで）</li>\n<li>局所的なデータ（State）</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Apollo\">Apollo</a> Server</h4>\n    \n<ul>\n<li>GraphQLサーバーの1つ</li>\n<li>拡張できる\n<ul>\n<li>各サーバー実装の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2\">ミドルウェア</a>として使える</li>\n<li>コア機能は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>で関与できる</li>\n</ul></li>\n<li>BFFとしての役割\n<ul>\n<li>うしろにバックエンドサーバーが控えてる</li>\n<li>フロントエンドのために<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を整理</li>\n<li>ロギング、認証もできる</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>開発フロー</h4>\n    \n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>クライアントをかく\n<ul>\n<li>ここがいちばん大変</li>\n<li>ドキュメントとの齟齬があったりする</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A1%BC%A5%DE\">スキーマ</a>定義して型にする\n<ul>\n<li>フロントエンドで使いやすい形に</li>\n<li>graphql-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/codegen\">codegen</a></li>\n</ul></li>\n<li>リ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BE%A5%EB\">ゾル</a>バーを書く</li>\n<li>クエリを書く</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>ハマるところ</h4>\n    \n<ul>\n<li>リ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BE%A5%EB\">ゾル</a>バーの共通処理をまとめたい\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2\">ミドルウェア</a>を作った</li>\n<li>いわゆる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%E2%B3%AC%B4%D8%BF%F4\">高階関数</a>でチェーンして使う</li>\n<li>それ用の部品は用意されてる（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>やディレクティブなど）</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/enum\">enum</a>が増えすぎると対応が漏れてフォーマットエラーに\n<ul>\n<li>単にstring/numberにした</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>まとめ</h4>\n    \n<ul>\n<li>エコシステムが出来上がってきている</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Apollo\">Apollo</a>だけでなく、他のツールも使って補っていく</li>\n<li>型安全に開発スピードをあげられてよい</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>質問</h4>\n    \n<ul>\n<li>Q. クエリが増えてきたときに、数や深さの制限はしてる？\n<ul>\n<li>A. 数はしてたと思う</li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>Practical tips for making a global EC site by @yayoc</h3>\n    \n    <blockquote>\n        <p>資料はみつけたら</p>\n\n    </blockquote>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A5%CB%A5%AF%A5%ED\">ユニクロ</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/EC%A5%B5%A5%A4%A5%C8\">ECサイト</a>について</li>\n<li>グローバルなサイト構築への取り組み</li>\n</ul>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E6%A5%CB%A5%AF%A5%ED\">ユニクロ</a>のEC</h4>\n    \n<ul>\n<li>22ヶ国</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/O2O\">O2O</a>もサポート\n<ul>\n<li>店でバーコード出すとか</li>\n</ul></li>\n<li>国によって機能が異なる\n<ul>\n<li>開発も国ごとになるのでメンテがつらい</li>\n</ul></li>\n<li>クライアントに実装が偏る</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CDN\">CDN</a>の設定もすごい\n<ul>\n<li>10万行の設定ファイル</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>それを改善する</h4>\n    \n<ul>\n<li>やりたかったこと\n<ul>\n<li>コードベースの統一</li>\n<li>パフォーマンス改善</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BB%A5%B7%A5%D3%A5%EA%A5%C6%A5%A3\">アクセシビリティ</a></li>\n<li>オペコストの削減</li>\n</ul></li>\n<li>2017~2019年でやってた</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a></h4>\n    \n<ul>\n<li>国別リダイレクトはNginxで</li>\n<li>URL\n<ul>\n<li>`/:country/:language`</li>\n<li>位置情報</li>\n<li>Accept-Languageヘッダと、デフォルト言語で</li>\n</ul></li>\n<li>部分<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSR\">SSR</a>な理由\n<ul>\n<li>GoogleBot以外の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Bot\">Bot</a>も多い（Yandexとか）</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9\">ステータスコード</a>はちゃんと返したい</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>で管理されてる\n<ul>\n<li>柔軟性は高い</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>側で定義した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A1%BC%A5%DE\">スキーマ</a>をいじるだけ</li>\n<li>それがReactのpropsになって表示される</li>\n</ul></li>\n<li>パフォーマンスへの取り組み\n<ul>\n<li>デイリーで国別にWPT/Lighthouseして<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSV\">CSV</a>に</li>\n<li>結果をウィークリーでメールして意識させる</li>\n<li>webpack-bundle-analyserもよく見てる</li>\n</ul></li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/i18n\">i18n</a>\n<ul>\n<li>言語別にエントリポイントが違う</li>\n<li>一部はランタイムで翻訳してる（単数形・複数形など</li>\n</ul></li>\n<li>Webpack Define-plugin\n<ul>\n<li>決済フローが異なるのでそれを分けたり</li>\n<li>Minifyするので不要な分岐は消える</li>\n</ul></li>\n<li>a11y\n<ul>\n<li>2018年のUSで2000件以上起訴されてるので重視</li>\n<li>Lighthouseのスコア以外にも</li>\n<li><a href=\"https://www.matuzo.at/blog/beyond-automatic-accessibility-testing-6-things-i-check-on-every-website-i-build/\">Beyond automatic accessibility testing: 6 things I check on every website I build - Manuel Matuzovi&#x107;</a></li>\n</ul></li>\n<li>画像の最適化\n<ul>\n<li>解像度は購買意欲につながる</li>\n<li>最適化ももちろん</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>BFF</h4>\n    \n<ul>\n<li>クライアントヘビーを回避</li>\n<li>バックエンドサーバーへの負荷軽減</li>\n<li>キャッシュ\n<ul>\n<li>max-ageをみて</li>\n</ul></li>\n<li>ロギング\n<ul>\n<li>セキュアな情報はマスクする</li>\n<li>HMAC認証</li>\n</ul></li>\n<li>リク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>トヘッダはパススルーしたり</li>\n<li>大変なこともある\n<ul>\n<li>後ろのマイクロサービス間の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>インターフェースが統一されてない</li>\n<li>キャッシュのパージ</li>\n<li>実装待ち</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>まとめ</h4>\n    \n<ul>\n<li>URLは初期段階できっちり決めるべし</li>\n<li>リダイレクトもどのレイヤーでやるか早めに</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SEO\">SEO</a>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a>だけ見るならSPAでもいいのでは</li>\n<li>ビルド時の出し分けはWebpackの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>が便利</li>\n<li>USではa11y不備は起訴につながる</li>\n<li>画像も忘れず最適化しようね</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>質問</h4>\n    \n<ul>\n<li>Q. BFFでロギングしてるときマスクするセキュアな情報とは？\n<ul>\n<li>送り先も自社のマイクロサービスでは</li>\n<li>A. 個人情報など、ロギングの趣旨に不要なもの</li>\n</ul></li>\n<li>Q. 翻訳サービスなど使ってる？\n<ul>\n<li>A. <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Excel\">Excel</a>で国ごとに管理してる</li>\n<li>移行したいとは思う</li>\n</ul></li>\n<li>Q. WebPとか使ってるけどブラウザ差異はどこまで対応？\n<ul>\n<li>A. Babelのpreset-envで見てる</li>\n<li>`picture`タグはフォールバックを用意したり</li>\n</ul></li>\n<li>Q. ABテストしてますか？\n<ul>\n<li>A. まだやってない</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CMS\">CMS</a>のレイヤーでやるか、フラグで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を出し分けるとか検討中</li>\n</ul></li>\n<li>Q. 各国の法律などをフロントエンドエンジニアとして意識したことはありますか？\n<ul>\n<li>A. カナダなどシビアな国は特に注意して実装してる</li>\n</ul></li>\n</ul><p>すごい知見の塊だった・・！</p>\n\n</div>\n</div>"
}
