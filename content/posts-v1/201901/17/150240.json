{
  "title": "AudioWorkletについて調べたメモ",
  "html": "\n    <blockquote>\n        <p><a href=\"https://www.g200kg.com/archives/2019/01/webaudio-api-au.html\">[WebAudio API] AudioWorklet &#x306E;&#x4F7F;&#x3044;&#x65B9; | g200kg Music &amp; Software</a></p>\n\n    </blockquote>\n<p>この大先生の記事を読んで、自分の知ってるWebAudio知識のアップデートをしときたいなーと思って調べたことのメモです。</p><p>なので重複する部分もあるけど、+ αな部分もあります。</p>\n\n    <blockquote>\n        <p>20191129: あらためて読み直したけど、特に更新すべき部分はない</p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>そもそもAudioWorklet</h3>\n    \n    <blockquote>\n        <p><a href=\"https://developers.google.com/web/updates/2017/12/audio-worklet\">Enter Audio Worklet &nbsp;|&nbsp; Web &nbsp;|&nbsp; Google Developers</a></p>\n\n    </blockquote>\n\n<ul>\n<li>`ScriptProcessorNode`の後継</li>\n<li>重い音声処理をメインスレッドでやりたくないよね\n<ul>\n<li>いちおうAudioスレッドでやってたけど、完全ではなかった</li>\n</ul></li>\n<li>今度こそAudioスレッドだけでできるよ</li>\n</ul><p>2017年12月の記事なんかこれ・・時代を感じる・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>コード</h3>\n    <p>まずは使う側。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// app.js</span>\n<span class=\"synComment\">// いつものGlobalScope</span>\n(async <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// お決まり</span>\n  <span class=\"synStatement\">const</span> ctx = <span class=\"synStatement\">new</span> AudioContext();\n\n  <span class=\"synComment\">// Workerみたく読み込んで使う</span>\n<span class=\"synComment\">// このパスはESModules的なパスではなく、ドキュメントルートからのルート</span>\n  await ctx.audioWorklet.addModule(<span class=\"synConstant\">'./my-worklet.js'</span>)\n\n  <span class=\"synComment\">// 使うのに必要なのはノード名だけ</span>\n  <span class=\"synStatement\">const</span> workletNode = <span class=\"synStatement\">new</span> AudioWorkletNode(ctx, <span class=\"synConstant\">'my-worklet'</span>);\n\n  <span class=\"synComment\">// あとは今まで通りのAudioNodeとして使えば良し</span>\n  workletNode.connect(ctx.destination);\n\n  <span class=\"synComment\">// どんなAudioParamsにするかも自分で決める</span>\n  workletNode.dummy.value = 1;\n\n  <span class=\"synComment\">// MessagePortが生えてるので、直接なんかすることもできる</span>\n  workletNode.port.onmessage = ev =&gt; <span class=\"synIdentifier\">{}</span>;\n  workletNode.port.start();\n  workletNode.port.postMessage(<span class=\"synConstant\">'xxx'</span>);\n<span class=\"synIdentifier\">}</span>());\n</pre><p>メインのWorklet側。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// my-worklet.js</span>\n<span class=\"synComment\">// AudioWorkletGlobalScopeになってる</span>\n<span class=\"synStatement\">class</span> MyWorkletProcessor <span class=\"synStatement\">extends</span> AudioWorkletProcessor <span class=\"synIdentifier\">{</span>\n  <span class=\"synComment\">// AudioParamsの指定</span>\n  <span class=\"synStatement\">static</span> get parameterDescriptors () <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">[{</span>\n          name: <span class=\"synConstant\">'dummy'</span>,\n          defaultValue: 0.5,\n          minValue: 0,\n          maxValue: 1,\n          automationRate: <span class=\"synConstant\">&quot;k-rate&quot;</span>\n      <span class=\"synIdentifier\">}]</span>;\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synComment\">// これが本丸</span>\n  process(inputs, outputs, parameters) <span class=\"synIdentifier\">{</span>\n    <span class=\"synComment\">// outputsを、inputsとparameters.dummyでいじる</span>\n\n    <span class=\"synComment\">// 生えてるのでよしなに使えばよい</span>\n    <span class=\"synIdentifier\">this</span>.port.postMessage(<span class=\"synConstant\">'x'</span>);\n    \n    <span class=\"synStatement\">return</span> <span class=\"synConstant\">true</span>;\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">// WebComponentsみたいに登録する</span>\nregisterProcessor(<span class=\"synConstant\">'my-worklet'</span>, MyWorkletProcessor);\n</pre><p>このへんのAPIの詳しく・サンプルは、冒頭の記事 or 仕様を見るべし。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.w3.org/TR/webaudio/#audioworklet\">Web Audio API</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>WASM</h3>\n    <p>`AudioWorklet`ではWASMが使えるぜ的な触れ込みだったと思うので、そこも調べた。</p><p>デフォルトでなんかそういう機能があるのではなく、組み合わせて使えるというだけの話。</p><p>どうやら2パターンの使い方がある。</p>\n\n<ul>\n<li>メインスレッドでWASMを`fetch()`してで読み込んで、`port`経由で渡す\n<ul>\n<li>WASMをインスタンスにするのは`AudioWorkletProcessor`側でもできる</li>\n</ul></li>\n<li>`AudioWorkletProcessor`側で、JSにしたWASMを直接`import`する</li>\n</ul><p>どっちを選ぶかは要件次第。<br />\nでもほとんど後者なのでは・・？</p><p>ということが書いてある記事がこれ。</p>\n\n    <blockquote>\n        <p><a href=\"https://developers.google.com/web/updates/2018/06/audio-worklet-design-pattern\">Audio Worklet Design Pattern &nbsp;|&nbsp; Web &nbsp;|&nbsp; Google Developers</a></p>\n\n    </blockquote>\n<p><br />\n記事内デモのサンプルコードのリポジトリ。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/GoogleChromeLabs/web-audio-samples/tree/master/audio-worklet/design-pattern\">web-audio-samples/audio-worklet/design-pattern at master &middot; GoogleChromeLabs/web-audio-samples &middot; GitHub</a></p>\n\n    </blockquote>\n<p><br />\n2018年6月・・。</p>\n\n</div>\n<div class=\"section\">\n    <h3>その他</h3>\n    \n<div class=\"section\">\n    <h4>TypeScript</h4>\n    \n<ul>\n<li>型はまだない\n<ul>\n<li>`AudioWorkletGlobalScope`側がないっぽい</li>\n</ul></li>\n<li>中の人の返事待ちだが果たして・・\n<ul>\n<li><a href=\"https://github.com/Microsoft/TypeScript/issues/28308\">AudioWorkletProcessor type definition is missing &middot; Issue #28308 &middot; microsoft/TypeScript &middot; GitHub</a></li>\n</ul></li>\n</ul><p>放置されてる感あるのでPRをいきなり送るのもナァって感じ。</p>\n\n</div>\n<div class=\"section\">\n    <h4>対応ブラウザ</h4>\n    <p>Chromeでしか動きません！</p><p>Firefoxも`AudioWorklet`はまだで、Safariなんか未だに`webkitAudioContext`しか生えてないしお通夜です。</p>\n\n</div>\n</div>"
}
