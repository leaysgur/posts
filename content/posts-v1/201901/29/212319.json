{
  "title": "HTTP3Study に行ってきたメモ #http3study",
  "html": "\n    <blockquote>\n        <p><a href=\"https://http2study.connpass.com/event/116857/\">HTTP3Study (new) - connpass</a></p>\n\n    </blockquote>\n<p>まったく詳しくない分野で脳内補完が効かないのと英語なのとで、まったく自信のないメモに仕上がりました。</p><p>間違ってたらむしろ教えてほしいです！<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>HTTP/3 (英語セッション) from Mark Nottingham</h3>\n    \n<div class=\"section\">\n    <h4>はじめに</h4>\n    \n<ul>\n<li>ここは最初にWGのMtgをした部屋なので不思議な感じ</li>\n<li>仕様の解説というより、経緯とか周辺について話すよ</li>\n<li>仕様について議論してるけど、全ての実装・ユースケースを把握してるわけではない</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>いままで</h4>\n    \n<ul>\n<li>HTTP/0.9\n<ul>\n<li>今でも使われてるかも</li>\n<li>`GET /`だけみたいにシンプル</li>\n</ul></li>\n<li>HTTP/1.0\n<ul>\n<li>いくつかヘッダがついたりした</li>\n<li>まだシンプルだったあの頃</li>\n</ul></li>\n<li>1993年とかそのへんからユースケースが混んできた\n<ul>\n<li>なのでみんな拡張をはじめた</li>\n<li>UAとかHostとか</li>\n</ul></li>\n<li>HTTP/1.1\n<ul>\n<li>Transfer-Encoding: chunk</li>\n<li>gzip, deflate</li>\n<li>うまいことやるのが難しくなってきた</li>\n<li>Pipelineも思ったとおりに動かなかったり</li>\n</ul></li>\n<li>どうすればよいプロトコルが作れるか\n<ul>\n<li>HTTP-NGとか揶揄されたり</li>\n<li>実装者たちは互いにコミュケーションしない</li>\n<li>WGを作ってみた</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>SPDY -> HTTP/2</h4>\n    \n<ul>\n<li>Googleがつくりはじめた</li>\n<li>Binary Framing\n<ul>\n<li>すばらしい</li>\n</ul></li>\n<li>Multiplexing\n<ul>\n<li>多重化</li>\n</ul></li>\n<li>Header Compression\n<ul>\n<li>RTT節約にも</li>\n</ul></li>\n<li>Prirorisation</li>\n<li>Server Push\n<ul>\n<li>あのときのPipelineと同じ</li>\n<li>まだうまく利用できてない</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>学んだこと</h4>\n    \n<ul>\n<li>少しずつ拡張する作戦はよさそう</li>\n<li>ぶっ飛んだ発想はうまくいかない</li>\n<li>オーバーエンジニアリングだめ絶対</li>\n<li>アイデアはもっと膨らませたいが実装リソースは有限</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Transport HoL Blocking</h4>\n    \n<ul>\n<li>HTTP/2はTCPの上でマルチストリームのレイヤーを作った</li>\n<li>HTTP/3はQUICの上でやる</li>\n<li>HTTP/2で解決できないトランスポートレイヤーの問題を解決したいHTTP/3</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>HTTP/3</h4>\n    \n<ul>\n<li>ストリーム間のOrderは保証されない</li>\n<li>Setting\n<ul>\n<li>1度送られると変えられない</li>\n<li>なので届く順序が問題</li>\n<li>QUICの設定で代用される</li>\n</ul></li>\n<li>Prioritisation\n<ul>\n<li>HTTP/2ではそれぞれが依存ツリーを持ってた</li>\n<li>HTTP/3ではそれ用のControlストリーム上でやるようになった</li>\n</ul></li>\n<li>Header Compression\n<ul>\n<li>HPACK</li>\n<li><a href=\"https://tools.ietf.org/html/draft-ietf-quic-qpack-06\">https://tools.ietf.org/html/draft-ietf-quic-qpack-06</a></li>\n</ul></li>\n<li>HTTP/3はまだWIPの状態\n<ul>\n<li>かれこれ2年くらい取り組んでるけど</li>\n</ul></li>\n<li>これからのキーワード\n<ul>\n<li>Connection Coalescing</li>\n<li>Structured Headers</li>\n<li>Semantic Evolution</li>\n<li>CDN Standardization</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>HTTP/4？</h4>\n    \n<ul>\n<li>新しいプロトコルを作るにはそれを試さないといけない</li>\n<li>それができるようにツールができてる（ALPNとか</li>\n<li>ただ新しいのを作るにしても、今までできてたことができないといけない</li>\n<li>HTTPは変わらない</li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>QUIC Security (英語セッション) from Martin Thomson</h3>\n    \n<div class=\"section\">\n    <h4>QUIC</h4>\n    \n<ul>\n<li>UDPの上のレイヤーで、一部TLSを・・みたいな図見たことあるよね\n<ul>\n<li>わかりやすいけど嘘やでアレ</li>\n<li>嘘というかもっと複雑な</li>\n</ul></li>\n<li>TCPとTLSがやってるコネクションの設定をQUICがやる</li>\n<li>TLSを使ってTLSのやってることをやる</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Handshake</h4>\n    \n<ul>\n<li>TLS 1.3\n<ul>\n<li>optimistic handshake</li>\n<li>だいたい3way</li>\n</ul></li>\n<li>QUIC\n<ul>\n<li>TLSのkeyのtypeに応じたパケットのtypeを送る</li>\n<li>Initial, Handshake, それぞれACKする</li>\n</ul></li>\n<li>TCP handshake\n<ul>\n<li>3way(SYN, SYN+ACK, ACK)</li>\n<li>TLS/TCPだと1RT増える</li>\n<li>CryptoにCPUを使う前に確認したいから</li>\n<li>QUICはそうせずただリトライする</li>\n</ul></li>\n<li>DoS対策\n<ul>\n<li>ClientからのHandshakeパケットを見れば、サーバーから送ったものかがわかる</li>\n<li>Retryパケットは暗号化してないそのまま返す</li>\n</ul></li>\n<li>RTTが増えるパターン\n<ul>\n<li>QUIC versionが違うとき</li>\n<li>クライアントを検証したいとき</li>\n<li>Clientの暗号鍵が違うとき</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Pakcet Protection</h4>\n    \n<ul>\n<li>基本的に全てだが、以下を除く\n<ul>\n<li>Version Negotiation</li>\n<li>Retry</li>\n<li>Initial</li>\n<li>0-RTT</li>\n<li>Handshake（not fully</li>\n</ul></li>\n<li>AEAD\n<ul>\n<li>Packet番号を使ってNonceをユニークにする</li>\n</ul></li>\n<li>Header\n<ul>\n<li>linkableなフィールドがある</li>\n<li>connID, key phrase, packet number</li>\n<li>異なるNWからなる1つのコネクションでも、それぞれをマッチできる</li>\n</ul></li>\n<li>Block Cipher\n<ul>\n<li>payloadの一部を使って保護する</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>Unprotectedな部分</h4>\n    \n<ul>\n<li>first 2 bits</li>\n<li>version, type, length</li>\n<li>Source/Destination Conn ID, length</li>\n<li>Spin bit</li>\n<li>Token, length(Initialパケット)</li>\n<li>Retry, Negotiationパケット</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>コネクションの終了</h4>\n    \n<ul>\n<li>サーバー再起動とか</li>\n<li>TCPはRSTパケットがあった\n<ul>\n<li>ただしどこからでも送れてしまう</li>\n</ul></li>\n<li>QUICではより安全でステートレスなやり方がある\n<ul>\n<li>connIDごとにそれようのトークンがある</li>\n<li>なので送れる場所が限られるし、途中の経路からは他のパケットと一緒に見える</li>\n<li>同一クラスタ内の全サーバーが同じsecretを共有する</li>\n<li>resetトークンはKDFで</li>\n<li>connIDは重複・再利用しないように</li>\n<li>再起動したサーバーはconnIDでもってトークンを再計算するだけ</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>おまけ</h4>\n    \n<ul>\n<li>HTTPのレスポンスバージョンの利用率\n<ul>\n<li><a href=\"https://telemetry.mozilla.org/new-pipeline/dist.html#!cumulative=0&end_date=2019-01-28&include_spill=0&keys=__none__!__none__!__none__&max_channel_version=nightly%252F66&measure=HTTP_RESPONSE_VERSION&min_channel_version=null&processType=*&product=Firefox&sanitize=1&sort_by_value=0&sort_keys=submissions&start_date=2018-12-10&table=0&trim=1&use_submission_date=0\">Measurement Dashboard</a></li>\n</ul></li>\n</ul>\n</div>\n</div>\n<div class=\"section\">\n    <h3>QUICのここが気になる from Kaname Nishizuka</h3>\n    \n<div class=\"section\">\n    <h4>はじめに</h4>\n    \n<ul>\n<li>Googleのトラフィックの42%がQUICで、インターネット全体の2.6-9.1%</li>\n<li>Chromeのv29からQUICは動いてて、現在ではデフォルトで有効</li>\n<li>通信事業者による付加価値（MiddleBox）\n<ul>\n<li><a href=\"https://tools.ietf.org/html/draft-dolson-transport-middlebox-05\">draft-dolson-transport-middlebox-05 - An Inventory of Transport-Centric Functions Provided by Middleboxes: An Operator Perspective</a></li>\n<li>NAT/FWなどニーズがある</li>\n<li>ただしMiddleBoxがあるとプロトコルの進化の妨げにも・・？</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>CGN</h4>\n    \n<ul>\n<li>Career Grade NAT</li>\n<li>IPv4枯渇の対策のために</li>\n<li><a href=\"https://tools.ietf.org/html/rfc6888\">RFC 6888 - Common Requirements for Carrier-Grade NATs (CGNs)</a></li>\n<li>内部アドレスと外部ポートのマッピングテーブルが性能を決める\n<ul>\n<li>なので定期的にいらないのを消す</li>\n<li>UDPなら3-5min</li>\n<li>QUICはUDPとTCPの両方のセッションが発生</li>\n<li>GoogleCloudMessagingは特別に10分待つ</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>FW</h4>\n    \n<ul>\n<li>95%で問題なく使える</li>\n<li>UDP:443がブロックされていることも\n<ul>\n<li>社員の通信を可視化したい企業もあるらしい</li>\n</ul></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>LB</h4>\n    \n<ul>\n<li>connIDで管理</li>\n<li>QICKを解釈できるLBが必要かも</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>既存プロトコルとの共存</h4>\n    \n<ul>\n<li><a href=\"https://qiita.com/__kaname__/items/7c1360108459bc469d9a\">kubernetes&#x3067;QUIC&#x306E;Load Generator&#x3092;&#x4F5C;&#x3063;&#x305F;&#x8A71; - Qiita</a>\n<ul>\n<li>YouTubeのトラフィックを使って実験した話</li>\n<li>ユーザー数が増えると、動画品質が下がるようになってる</li>\n<li>QUIC / QUIC+HTTP/2 / HTTP2などセグメントを分けて一斉に視聴してみた</li>\n<li>QUICのほうが良い画質で視聴できる傾向がでた</li>\n<li>HTTP/2のユーザーが待たされる結果に</li>\n</ul></li>\n<li>悲しい？処置をしたISPもある\n<ul>\n<li><a href=\"https://www.ocn.ne.jp/info/announce/2018/06/22_1.html\">&#x3010;&#x91CD;&#x8981;&#x3011;&#x901A;&#x4FE1;&#x54C1;&#x8CEA;&#x5411;&#x4E0A;&#x306B;&#x3080;&#x3051;&#x305F;&#x53D6;&#x308A;&#x7D44;&#x307F;&#x306B;&#x3064;&#x3044;&#x3066;&#x306E;&#x304A;&#x77E5;&#x3089;&#x305B; &#xFF5C; OCN</a></li>\n</ul></li>\n<li>TMS（Traffic Management Solution）を行う製品もあったりする</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h4>識者への質問</h4>\n    \n<ul>\n<li>通信事業者によるトラフィックの管理は必要悪？</li>\n<li>QUICが既存プロトコルを脅かさないように共存するためにはどうすれば？\n<ul>\n<li>CUBICやBBRが出てきたように、状況は今とそんなに変わらないのでは</li>\n</ul></li>\n<li>HappyEyeballsはQUICでどうなる？もっと複雑になる？\n<ul>\n<li>なんらかの仕組みは必要になりそう</li>\n</ul></li>\n<li>TCP MSS clampingのようにMTUを知る方法がなさそう？\n<ul>\n<li>うまくいかなそう</li>\n</ul></li>\n<li>QUICライクなDDosパケットの判別方法はある？\n<ul>\n<li>ないかも</li>\n</ul></li>\n</ul>\n</div>\n</div>"
}
