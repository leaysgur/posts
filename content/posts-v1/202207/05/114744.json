{
  "title": "Solidの特徴と、その裏側",
  "html": "\n    <blockquote>\n        <p><a href=\"https://www.solidjs.com\">https://www.solidjs.com</a></p>\n\n    </blockquote>\n<p>ずっと調べたいものリストにはあったやつで、Astro熱がちょっと収まったのでこのタイミング。</p><p>めちゃめちゃ雑にまとめると、React + MobX feat. Svelteって感じのUIフレームワークです。（つまり好みは分かれるであろう）<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>Solidとは</h3>\n    \n<ul>\n<li>基本はReactライクな書き味\n<ul>\n<li>JSXでコンポーネントを書く、Propsでデータを単方向に流す</li>\n<li>もちろん細かい挙動に差異はあるし、互換性はない</li>\n<li>`Suspense`とか`Portal`とか`ErrorBoundary`とかもある</li>\n</ul></li>\n<li>MobXライクなリアクティブの仕組みがビルトインされてる\n<ul>\n<li>Propsが自動でProxyされてるイメージ</li>\n<li>依存配列なしに、状態を読み取ったコンポーネント・関数だけが更新できたり</li>\n<li>ストア（ちょっと大きめの状態用）関連のコードもある</li>\n</ul></li>\n<li>Svelteと同様に、コンパイルして最適化されたコードがランタイムで動く\n<ul>\n<li>つまりVDOMではなく、カリカリのVanillaJSくらい速い</li>\n<li>最小サイズのコードベースだと、Svelteのほうが小さいらしいけど</li>\n</ul></li>\n<li>JSXな分、SvelteよりもTS対応もアツめ</li>\n<li>Svelteみたいに、テンプレで使える便利記法もある\n<ul>\n<li>`classList`で`string: boolean`なオブジェクト渡せる</li>\n<li>`use:xxx`でその要素に対するディレクティブ作れる</li>\n</ul></li>\n</ul><p>というのが概要のまとめで、後発なだけあっていろんなやつのいいとこ取りをしてるな〜って感じ。</p><p>コード例とかそういうのは、DocsにいっぱいあるしTutorialもあるし、割愛。気になった人はぜひぜひ公式Docsへ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>実際にコードを書いてみて</h3>\n    <p>社内案件の小さいアプリをPreactからSolidにリライトしてみて思ったこと。</p>\n\n<ul>\n<li>Reactのメンタルモデルに毒されてると、微妙な差にいちいち戸惑う\n<ul>\n<li>コンポーネントはConstructor！</li>\n</ul></li>\n<li>思ったよりも多機能で、SimpleっていうよりEasyなAPIセット\n<ul>\n<li>そういう意味で対抗馬はやっぱSvelteなのかも</li>\n</ul></li>\n<li>Props（というか`Signal.Accessor`）がプレーンなJSではないというクセ\n<ul>\n<li>やっててよかったMobX</li>\n</ul></li>\n<li>雑に書いても再描画の範囲が抑えられるのはよい\n<ul>\n<li>`For`みたいなコンポーネントも相まって</li>\n</ul></li>\n</ul><p>個人的には割と好感触ではある。が、案件という意味での使い所はどうかな〜って感じ。</p><p>PreactとSvelteを足して2で割ったみたいな、立ち位置が中途半端なところなのもあって、もう少し使ってみないとなんとも。</p><p>ただエコシステムまわりはまだまだ比ではないので、未だPreactすら選べないリアルワールドでは中々に厳しいかもしれない。それでも、そのうちReact枠の代わりになったらいいなーって期待してる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>solidjs/solid リポジトリの概観</h3>\n    <p>というわけで、ここから先はリポジトリ構成とかそういうコード的な裏側を見ていく。ちなみに、今の最新バージョンは`v1.4.6`だった。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/solidjs/solid\">https://github.com/solidjs/solid</a></p>\n\n    </blockquote>\n<p>これがメインのリポジトリでモノレポ、置いてあるパッケージは次の通り。</p>\n\n<ul>\n<li>solid</li>\n<li>babel-preset-solid</li>\n<li>solid-ssr</li>\n<li>solid-element</li>\n</ul><p>`solid-element`はWebComponents用のサポート層なので、一旦無視する。</p><p>`solid-ssr`はSSRって名前はついてるけど実体は`renderStatic()`っていうSSG用のAPIしか公開してなくて、いわゆるSSR用のAPIたちは、`solid`本体のほうにある。よってこれも無視。</p>\n\n</div>\n<div class=\"section\">\n    <h3>babel-preset-solid</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/solidjs/solid/tree/main/packages/babel-preset-solid\">https://github.com/solidjs/solid/tree/main/packages/babel-preset-solid</a></p>\n\n    </blockquote>\n<p>概要でも書いたとおり、SolidではテンプレにJSXを使うので、そのコンパイルをやる。処理自体はBabelを使うようになってて、そのプラグインがコレってわけ。</p><p>ちなみに、Viteのプラグインもあるけどそっちでも同じようにBabelを呼んでる。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/solidjs/vite-plugin-solid\">https://github.com/solidjs/vite-plugin-solid</a></p>\n\n    </blockquote>\n<p>このプラグインを通すと、JSXで書かれたマークアップやコンポーネントが、生DOMのAPIである`createElement()`とか`cloneNode()`とかを駆使したコードに置き換えられる。</p><p>実際にそれをやってるのは`dom-expressions`っていう別のライブラリで、これもSolidの作者であるRyan氏の謹製。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/ryansolid/dom-expressions\">https://github.com/ryansolid/dom-expressions</a></p>\n\n    </blockquote>\n<p>READMEからコード例を借りてくるとこういう具合。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// これが</span>\n<span class=\"synStatement\">const</span> view = (<span class=\"synIdentifier\">{</span> item <span class=\"synIdentifier\">}</span>) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> itemId = item.id;\n  <span class=\"synStatement\">return</span> &lt;tr <span class=\"synStatement\">class</span>=<span class=\"synIdentifier\">{</span>itemId === selected() ? <span class=\"synConstant\">&quot;danger&quot;</span> : <span class=\"synConstant\">&quot;&quot;</span><span class=\"synIdentifier\">}</span>&gt;\n    &lt;td <span class=\"synStatement\">class</span>=<span class=\"synConstant\">&quot;col-md-1&quot;</span>&gt;<span class=\"synIdentifier\">{</span>itemId<span class=\"synIdentifier\">}</span>&lt;/td&gt;\n    &lt;td <span class=\"synStatement\">class</span>=<span class=\"synConstant\">&quot;col-md-4&quot;</span>&gt;\n      &lt;a onclick=<span class=\"synIdentifier\">{</span>e =&gt; select(item, e)<span class=\"synIdentifier\">}</span>&gt;<span class=\"synIdentifier\">{</span>item.label<span class=\"synIdentifier\">}</span>&lt;/a&gt;\n    &lt;/td&gt;\n    &lt;td <span class=\"synStatement\">class</span>=<span class=\"synConstant\">&quot;col-md-1&quot;</span>&gt;\n      &lt;a onclick=<span class=\"synIdentifier\">{</span>e =&gt; del(item, e)<span class=\"synIdentifier\">}</span>&gt;\n        &lt;span <span class=\"synStatement\">class</span>=<span class=\"synConstant\">&quot;glyphicon glyphicon-remove&quot;</span> aria-hidden=<span class=\"synConstant\">&quot;true&quot;</span>&gt;&lt;/span&gt;\n      &lt;/a&gt;\n    &lt;/td&gt;\n    &lt;td <span class=\"synStatement\">class</span>=<span class=\"synConstant\">&quot;col-md-6&quot;</span>&gt;&lt;/td&gt;\n  &lt;/tr&gt;;\n<span class=\"synIdentifier\">}</span>;\n\n\n<span class=\"synComment\">// こうなる</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> insert as _$insert <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;dom&quot;</span>;\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> wrap as _$wrap <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;dom&quot;</span>;\n\n<span class=\"synStatement\">const</span> _tmpl$ = <span class=\"synStatement\">document</span>.createElement(<span class=\"synConstant\">&quot;template&quot;</span>);\n_tmpl$.innerHTML = `&lt;tr&gt;&lt;td <span class=\"synStatement\">class</span>=<span class=\"synConstant\">&quot;col-md-1&quot;</span>&gt;&lt;/td&gt;&lt;td <span class=\"synStatement\">class</span>=<span class=\"synConstant\">&quot;col-md-4&quot;</span>&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt;&lt;td <span class=\"synStatement\">class</span>=<span class=\"synConstant\">&quot;col-md-1&quot;</span>&gt;&lt;a&gt;&lt;span <span class=\"synStatement\">class</span>=<span class=\"synConstant\">&quot;glyphicon glyphicon-remove&quot;</span> aria-hidden=<span class=\"synConstant\">&quot;true&quot;</span>&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;td <span class=\"synStatement\">class</span>=<span class=\"synConstant\">&quot;col-md-6&quot;</span>&gt;&lt;/td&gt;&lt;/tr&gt;`;\n\n<span class=\"synStatement\">const</span> view = (<span class=\"synIdentifier\">{</span> item <span class=\"synIdentifier\">}</span>) =&gt; <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> itemId = item.id;\n  <span class=\"synStatement\">return</span> (<span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> _el$ = _tmpl$.content.firstChild.cloneNode(<span class=\"synConstant\">true</span>),\n      _el$2 = _el$.firstChild,\n      _el$3 = _el$2.nextSibling,\n      _el$4 = _el$3.firstChild,\n      _el$5 = _el$3.nextSibling,\n      _el$6 = _el$5.firstChild;\n    _$wrap(() =&gt; (_el$.className = itemId === selected() ? <span class=\"synConstant\">&quot;danger&quot;</span> : <span class=\"synConstant\">&quot;&quot;</span>));\n    _$insert(_el$2, itemId);\n    _el$4.onclick = e =&gt; select(item, e);\n    _$insert(_el$4, () =&gt; item.label);\n    _el$6.onclick = e =&gt; del(item, e);\n    <span class=\"synStatement\">return</span> _el$;\n  <span class=\"synIdentifier\">}</span>)();\n<span class=\"synIdentifier\">}</span>;\n</pre><p>このライブラリ自体は汎用的な用途を目指していて、ここでいう`dom`っていう参照先を自分たちのレンダラに向けて使ってねって書いてあった。（`babel-plugin-transform-rename-import`で`import`先をすげ替えるとのこと）</p><p>最初のプラグインでは、それ以外の`For`とか`Show`とかのSolidでだけ使える条件分岐用のコンポーネントや、`Suspense`みたいな独自コンポーネントのホワイトリストも列挙されてて、まとめてトランスパイルされる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// これが</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> render <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;solid-js/web&quot;</span>;\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> createSignal, Show <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;solid-js&quot;</span>;\n\n<span class=\"synIdentifier\">function</span> Counter() <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>count, setCount<span class=\"synIdentifier\">]</span> = createSignal(0);\n  <span class=\"synStatement\">const</span> increment = () =&gt; setCount(count() + 1);\n\n  <span class=\"synStatement\">return</span> (\n    &lt;div&gt;\n      &lt;button type=<span class=\"synConstant\">&quot;button&quot;</span> onClick=<span class=\"synIdentifier\">{</span>increment<span class=\"synIdentifier\">}</span>&gt;\n        <span class=\"synIdentifier\">{</span>count()<span class=\"synIdentifier\">}</span>\n      &lt;/button&gt;\n      &lt;Show when=<span class=\"synIdentifier\">{</span>count() % 2 === 0<span class=\"synIdentifier\">}</span> fallback=<span class=\"synConstant\">&quot;ODD!&quot;</span>&gt;EVEN!&lt;/Show&gt;\n    &lt;/div&gt;\n  );\n<span class=\"synIdentifier\">}</span>\n\nrender(() =&gt; &lt;Counter /&gt;, <span class=\"synStatement\">document</span>.getElementById(<span class=\"synConstant\">&quot;app&quot;</span>)!);\n\n\n<span class=\"synComment\">// こうなる</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> render, createComponent, delegateEvents, insert, template <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'solid-js/web'</span>;\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> createSignal, Show <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">'solid-js'</span>;\n\n<span class=\"synStatement\">const</span> _tmpl$ = <span class=\"synComment\">/*#__PURE__*/</span>template(`&lt;div&gt;&lt;button type=<span class=\"synConstant\">&quot;button&quot;</span>&gt;&lt;/button&gt;&lt;/div&gt;`, 4);\n\n<span class=\"synIdentifier\">function</span> Counter() <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>count, setCount<span class=\"synIdentifier\">]</span> = createSignal(0);\n\n  <span class=\"synStatement\">const</span> increment = () =&gt; setCount(count() + 1);\n\n  <span class=\"synStatement\">return</span> (() =&gt; <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> _el$ = _tmpl$.cloneNode(<span class=\"synConstant\">true</span>),\n          _el$2 = _el$.firstChild;\n\n    _el$2.$$click = increment;\n\n    insert(_el$2, count);\n\n    insert(_el$, createComponent(Show, <span class=\"synIdentifier\">{</span>\n      get when() <span class=\"synIdentifier\">{</span>\n        <span class=\"synStatement\">return</span> count() % 2 === 0;\n      <span class=\"synIdentifier\">}</span>,\n\n      fallback: <span class=\"synConstant\">&quot;ODD!&quot;</span>,\n      children: <span class=\"synConstant\">&quot;EVEN!&quot;</span>\n    <span class=\"synIdentifier\">}</span>), <span class=\"synStatement\">null</span>);\n\n    <span class=\"synStatement\">return</span> _el$;\n  <span class=\"synIdentifier\">}</span>)();\n<span class=\"synIdentifier\">}</span>\n\nrender(() =&gt; createComponent(Counter, <span class=\"synIdentifier\">{}</span>), <span class=\"synStatement\">document</span>.getElementById(<span class=\"synConstant\">&quot;app&quot;</span>));\n\ndelegateEvents(<span class=\"synIdentifier\">[</span><span class=\"synConstant\">&quot;click&quot;</span><span class=\"synIdentifier\">]</span>);\n</pre><p>というような様子は、Playgroundで見られるので要チェック。</p>\n\n    <blockquote>\n        <p><a href=\"https://playground.solidjs.com/\">Solid Playground</a></p>\n\n    </blockquote>\n<p>というように、JSXの変換処理から自作したりしてるがゆえに、Solidではこれほどのパフォーマンスが出るとのこと。</p>\n\n</div>\n<div class=\"section\">\n    <h3>solid-js/*</h3>\n    <p>続いて、本体から公開されてるAPIたち。exportされてるネームスペースとしては、次の通り。</p>\n\n<ul>\n<li>`solid-js`</li>\n<li>`solid-js/store`</li>\n<li>`solid-js/web`</li>\n<li>`solid-js/h`</li>\n<li>`solid-js/html`</li>\n<li>`solid-js/universal`</li>\n</ul><p>簡単そうなやつから見ていく。</p>\n\n<div class=\"section\">\n    <h4>solid-js/universal</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/solidjs/solid/tree/main/packages/solid/universal\">https://github.com/solidjs/solid/tree/main/packages/solid/universal</a></p>\n\n    </blockquote>\n<p>いわゆるカスタムレンダラを利用するための層。`dom-expressions`がカバーするプリミティブなDOMのAPIに対応するコードを書けば、レンダラを自作できるよっていう。</p><p>もうこんなとこまで用意してるのすごいなって思ったけど、なんか利用例はあるんかな？</p>\n\n</div>\n<div class=\"section\">\n    <h4>solid-js/html, solid-js/h</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/solidjs/solid/tree/main/packages/solid/html\">https://github.com/solidjs/solid/tree/main/packages/solid/html</a><br />\n<a href=\"https://github.com/solidjs/solid/tree/main/packages/solid/h\">https://github.com/solidjs/solid/tree/main/packages/solid/h</a></p>\n\n    </blockquote>\n<p>宗教上の利用でJSXが使えない人のための、Tagged Template LiteralとHyperScriptでもテンプレが書けるよっていうやつ。</p><p>JSXではないので、シンタックスに多少の制約はあるものの、ビルドなしで動かせるのは使いどころがあるかもしれない。</p><p>ま〜書くの大変やけども。</p>\n\n</div>\n<div class=\"section\">\n    <h4>solid-js</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/solidjs/solid/tree/main/packages/solid/src\">https://github.com/solidjs/solid/tree/main/packages/solid/src</a></p>\n\n    </blockquote>\n<p>`createSignal()`とか`onMount()`とか、`Show`コンポーネントとか、つまりはメインのAPIたち。コアな中身を読むのはまたの機会に譲るとして、気になったやつだけピックアップ。</p><p>APIの一覧という意味では、やっぱりDocsがわかりやすくて眺めるのおすすめ。</p>\n\n    <blockquote>\n        <p><a href=\"https://www.solidjs.com/docs/latest/api\">https://www.solidjs.com/docs/latest/api</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h5>createResource()</h5>\n    <p>一言でいうなら、ReactでSWRを使ったコードみたいなのが書けるヘルパー。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> createResource <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;solid-js&quot;</span>;\n\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>data, <span class=\"synIdentifier\">{</span> mutate, refetch <span class=\"synIdentifier\">}]</span> = createResource(fetcher);\n\n<span class=\"synComment\">// read value</span>\ndata();\n\n<span class=\"synComment\">// check if loading</span>\ndata.loading;\n<span class=\"synComment\">// check if errored</span>\ndata.error;\n\n<span class=\"synComment\">// directly set value without creating promise</span>\nmutate(optimisticValue);\n<span class=\"synComment\">// refetch the last request explicitly</span>\nrefetch();\n</pre><p>というだけでもう便利ではあるが、さらには`Suspense`コンポーネントを作用させるきっかけにもできる。`Suspense`には`lazy()`かコレかって感じ。</p>\n\n</div>\n<div class=\"section\">\n    <h5>untrack() / batch()</h5>\n    <p>どっちもMobXで見たやつやん！！（懐かしくてつい）</p><p>どっちもリアクティブなコンテキストで使うもので、`untrack()`はその引数に与えたコールバック内での値へのアクセスを無視させるやつで、`batch()`は状態の更新をまとめてコミットするようにできる。</p><p>普段使いするものではない。</p>\n\n</div>\n<div class=\"section\">\n    <h5>mergeProps()</h5>\n    <p>これもMobX的なコンテキストで思い出すと、コンポーネントのPropsをDestructuringしてはいけない都合上、Propsの初期値を与えるのが不便・・・っていうときに使えるやつ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">export</span> <span class=\"synStatement\">default</span> <span class=\"synIdentifier\">function</span> Greeting(props) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> merged = mergeProps(<span class=\"synIdentifier\">{</span> greeting: <span class=\"synConstant\">&quot;Hi&quot;</span>, name: <span class=\"synConstant\">&quot;John&quot;</span> <span class=\"synIdentifier\">}</span>, props);\n  <span class=\"synStatement\">return</span> &lt;h3&gt;<span class=\"synIdentifier\">{</span>merged.greeting<span class=\"synIdentifier\">}</span> <span class=\"synIdentifier\">{</span>merged.name<span class=\"synIdentifier\">}</span>&lt;/h3&gt;\n<span class=\"synIdentifier\">}</span>\n</pre><p>どうしてもDestructuringしたい場合、いちおうライブラリでごまかせるらしい。</p>\n\n<ul>\n<li><a href=\"https://github.com/orenelbaum/babel-plugin-solid-undestructure\">https://github.com/orenelbaum/babel-plugin-solid-undestructure</a></li>\n<li><a href=\"https://github.com/LXSMNSYC/solid-labels\">https://github.com/LXSMNSYC/solid-labels</a></li>\n</ul>\n</div>\n<div class=\"section\">\n    <h5>Switch / Match</h5>\n    <p>見たらわかる、便利なやつやん！</p>\n<pre class=\"code lang-html\" data-lang=\"html\" data-unlink><span class=\"synIdentifier\">&lt;</span>Switch<span class=\"synIdentifier\"> fallback=</span><span class=\"synConstant\">{&lt;div</span><span class=\"synIdentifier\">&gt;</span>Not Found<span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">div</span><span class=\"synIdentifier\">&gt;</span>}<span class=\"synError\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span>Match<span class=\"synIdentifier\"> when=</span><span class=\"synConstant\">{state.route</span><span class=\"synIdentifier\"> =</span><span class=\"synConstant\">==</span><span class=\"synIdentifier\"> </span><span class=\"synConstant\">&quot;home&quot;</span><span class=\"synIdentifier\">}&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span>Home<span class=\"synIdentifier\"> /&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span>Match<span class=\"synIdentifier\">&gt;</span>\n  <span class=\"synIdentifier\">&lt;</span>Match<span class=\"synIdentifier\"> when=</span><span class=\"synConstant\">{state.route</span><span class=\"synIdentifier\"> =</span><span class=\"synConstant\">==</span><span class=\"synIdentifier\"> </span><span class=\"synConstant\">&quot;settings&quot;</span><span class=\"synIdentifier\">}&gt;</span>\n    <span class=\"synIdentifier\">&lt;</span>Settings<span class=\"synIdentifier\"> /&gt;</span>\n  <span class=\"synIdentifier\">&lt;/</span>Match<span class=\"synIdentifier\">&gt;</span>\n<span class=\"synIdentifier\">&lt;/</span>Switch<span class=\"synIdentifier\">&gt;</span>\n</pre><p>Solidでは、JSXあるあるの`Array#map()`や三項演算子の代わりに、それ用のコンポーネントがちゃんと用意されてて、そっちを使うほうがパフォーマンスも良くなる。役割的にはMobXでいう`Observer`コンポーネントみたいな再描画領域を区切るイメージかも。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h4>solid-js/web</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/solidjs/solid/tree/main/packages/solid/web\">https://github.com/solidjs/solid/tree/main/packages/solid/web</a></p>\n\n    </blockquote>\n<p>クライアント・サーバーあわせてWebで使う専用のAPIたち。</p><p>具体的には、`Portal`と`Dynamic`のコンポーネントおよび、`render()`や`hydrate()`といったエントリーのコード。</p><p>`renderToString()`みたいなSSR用のコードがexportされてるのもココではあるけど、その実体は某`dom-expressions`にある。（SSR用のコードどこ？ってめっちゃ探してしまった）</p>\n\n</div>\n<div class=\"section\">\n    <h4>solid-js/store</h4>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/solidjs/solid/tree/main/packages/solid/store\">https://github.com/solidjs/solid/tree/main/packages/solid/store</a></p>\n\n    </blockquote>\n<p>いわゆるStoreのためのコード群。個人的に興味深いと思ったのは、状態を更新するときのコード。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> createStore <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;solid-js/store&quot;</span>;\n\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>state, setState<span class=\"synIdentifier\">]</span> = createStore(<span class=\"synIdentifier\">{</span>\n  firstName: <span class=\"synConstant\">&quot;John&quot;</span>,\n  lastName: <span class=\"synConstant\">&quot;Miller&quot;</span>,\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// 存在しないキーは上書き</span>\nsetState(<span class=\"synIdentifier\">{</span> firstName: <span class=\"synConstant\">&quot;Johnny&quot;</span>, middleName: <span class=\"synConstant\">&quot;Lee&quot;</span> <span class=\"synIdentifier\">}</span>);\n<span class=\"synComment\">// ({ firstName: 'Johnny', middleName: 'Lee', lastName: 'Miller' })</span>\n\n<span class=\"synComment\">// 更新されないものは消えない</span>\nsetState((state) =&gt; (<span class=\"synIdentifier\">{</span> preferredName: state.firstName, lastName: <span class=\"synConstant\">&quot;Milner&quot;</span> <span class=\"synIdentifier\">}</span>));\n<span class=\"synComment\">// ({ firstName: 'Johnny', preferredName: 'Johnny', middleName: 'Lee', lastName: 'Milner' })</span>\n\n\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>state, setState<span class=\"synIdentifier\">]</span> = createStore(<span class=\"synIdentifier\">{</span>\n  counter: 2,\n  list: <span class=\"synIdentifier\">[</span>\n    <span class=\"synIdentifier\">{</span> id: 23, title: <span class=\"synConstant\">'Birds'</span> <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">{</span> id: 27, title: <span class=\"synConstant\">'Fish'</span> <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">]</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// キー指定で更新</span>\nsetState(<span class=\"synConstant\">'counter'</span>, c =&gt; c + 1);\nsetState(<span class=\"synConstant\">'list'</span>, l =&gt; <span class=\"synIdentifier\">[</span>...l, <span class=\"synIdentifier\">{</span>id: 43, title: <span class=\"synConstant\">'Marsupials'</span><span class=\"synIdentifier\">}]</span>);\n<span class=\"synComment\">// list[2].read = true ってこと</span>\nsetState(<span class=\"synConstant\">'list'</span>, 2, <span class=\"synConstant\">'read'</span>, <span class=\"synConstant\">true</span>);\n<span class=\"synComment\">// {</span>\n<span class=\"synComment\">//   counter: 3,</span>\n<span class=\"synComment\">//   list: [</span>\n<span class=\"synComment\">//     { id: 23, title: 'Birds' }</span>\n<span class=\"synComment\">//     { id: 27, title: 'Fish' }</span>\n<span class=\"synComment\">//     { id: 43, title: 'Marsupials', read: true }</span>\n<span class=\"synComment\">//   ]</span>\n<span class=\"synComment\">// }</span>\n\n\n<span class=\"synStatement\">const</span> <span class=\"synIdentifier\">[</span>state, setState<span class=\"synIdentifier\">]</span> = createStore(<span class=\"synIdentifier\">{</span>\n  todos: <span class=\"synIdentifier\">[</span>\n    <span class=\"synIdentifier\">{</span> task: <span class=\"synConstant\">'Finish work'</span>, completed: <span class=\"synConstant\">false</span> <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">{</span> task: <span class=\"synConstant\">'Go grocery shopping'</span>, completed: <span class=\"synConstant\">false</span> <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">{</span> task: <span class=\"synConstant\">'Make dinner'</span>, completed: <span class=\"synConstant\">false</span> <span class=\"synIdentifier\">}</span>\n  <span class=\"synIdentifier\">]</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synComment\">// 対象を選べる</span>\nsetState(<span class=\"synConstant\">'todos'</span>, <span class=\"synIdentifier\">[</span>0, 2<span class=\"synIdentifier\">]</span>, <span class=\"synConstant\">'completed'</span>, <span class=\"synConstant\">true</span>);\n<span class=\"synComment\">// {</span>\n<span class=\"synComment\">//   todos: [</span>\n<span class=\"synComment\">//     { task: 'Finish work', completed: true }</span>\n<span class=\"synComment\">//     { task: 'Go grocery shopping', completed: false }</span>\n<span class=\"synComment\">//     { task: 'Make dinner', completed: true }</span>\n<span class=\"synComment\">//   ]</span>\n<span class=\"synComment\">// }</span>\n\n<span class=\"synComment\">// レンジ指定もできる</span>\nsetState(<span class=\"synConstant\">'todos'</span>, <span class=\"synIdentifier\">{</span> from: 0, to: 1 <span class=\"synIdentifier\">}</span>, <span class=\"synConstant\">'completed'</span>, c =&gt; !c);\n<span class=\"synComment\">// {</span>\n<span class=\"synComment\">//   todos: [</span>\n<span class=\"synComment\">//     { task: 'Finish work', completed: false }</span>\n<span class=\"synComment\">//     { task: 'Go grocery shopping', completed: true }</span>\n<span class=\"synComment\">//     { task: 'Make dinner', completed: true }</span>\n<span class=\"synComment\">//   ]</span>\n<span class=\"synComment\">// }</span>\n\n<span class=\"synComment\">// フィルターにもなる</span>\nsetState(<span class=\"synConstant\">'todos'</span>, todo =&gt; todo.completed, <span class=\"synConstant\">'task'</span>, t =&gt; t + <span class=\"synConstant\">'!'</span>)\n<span class=\"synComment\">// {</span>\n<span class=\"synComment\">//   todos: [</span>\n<span class=\"synComment\">//     { task: 'Finish work', completed: false }</span>\n<span class=\"synComment\">//     { task: 'Go grocery shopping!', completed: true }</span>\n<span class=\"synComment\">//     { task: 'Make dinner!', completed: true }</span>\n<span class=\"synComment\">//   ]</span>\n<span class=\"synComment\">// }</span>\n\nsetState(<span class=\"synConstant\">'todos'</span>, <span class=\"synIdentifier\">{}</span>, todo =&gt; (<span class=\"synIdentifier\">{</span> marked: <span class=\"synConstant\">true</span>, completed: !todo.completed <span class=\"synIdentifier\">}</span>))\n<span class=\"synComment\">// {</span>\n<span class=\"synComment\">//   todos: [</span>\n<span class=\"synComment\">//     { task: 'Finish work', completed: true, marked: true }</span>\n<span class=\"synComment\">//     { task: 'Go grocery shopping!', completed: false, marked: true }</span>\n<span class=\"synComment\">//     { task: 'Make dinner!', completed: false, marked: true }</span>\n<span class=\"synComment\">//   ]</span>\n<span class=\"synComment\">// }</span>\n</pre><p>なにこれおしゃれ・・・！って感じやったけど、さらには`immer`ライクなアップデート方法まで用意されてる。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> produce <span class=\"synIdentifier\">}</span> from <span class=\"synConstant\">&quot;solid-js/store&quot;</span>;\n\nsetState(\n  produce((draft) =&gt; <span class=\"synIdentifier\">{</span>\n    draft.user.name = <span class=\"synConstant\">&quot;Frank&quot;</span>;\n    draft.list.push(<span class=\"synConstant\">&quot;Pencil Crayon&quot;</span>);\n  <span class=\"synIdentifier\">}</span>)\n);\n</pre><p>これだけでいいのでは説ある。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>まとめ</h3>\n    <p>いやー趣味があいますね！っていうのが主な感想。Preact+MobX推しのツボが。</p><p>さすがに、コードの少なさやオールインワンの手軽さを求めるならSvelteでいいけど、それ以外の場面ではもう少し使っていこうかなって。</p><p>いわゆるNext.jsやSvelteKit枠については、`solid-start`っていうのが一応あるけど、まだまだ比較対象にはならなそう。ドキュメントもないし。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/solidjs/solid-start\">https://github.com/solidjs/solid-start</a></p>\n\n    </blockquote>\n<p>ただRyan氏はeBay在籍時にMarkoにも関わってたりと、SSR方面にも確固たる信念を持ってるタイプの稀有な人材なので、そのあたりも何か隠し玉があるのかもしれない。</p><p>最近やっと世間的にも名前を聞くようになってきたかな？って感じもあるし、これからに期待。</p>\n\n</div>"
}
