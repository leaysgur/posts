{
  "title": "chrome://webrtc-internals のしくみ",
  "html": "<p>なんとなくアテはついてたけど、中身が気になるという話を聞いたので調べてみた。</p><p>WebRTCやってるみなさんならお馴染みのあのページです。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>chrome://webrtc-internals</h3>\n    <p>WebRTCのデバッグといえばこのページ。</p><p>特に何も仕込んでないのに、見てるページで`getUserMedia()`したり`RTCPeerConnection`が作られればその様子が見えるし、実際に流れてるメディアやデータのことまでわかる。</p><p>あれってどういうしくみ？っていうのを調べていきます。</p>\n\n</div>\n<div class=\"section\">\n    <h3>ただのWebページ</h3>\n    <p>URLが`chrome://`になってるけど、れっきとしたWebページです。</p><p>なのでDevToolsでNetworkタブ見ればだいたいわかる！というわけで。</p><p>構成要素はこんな感じ。</p>\n\n<ul>\n<li>webrtc-internals.html\n<ul>\n<li>ただのHTML/CSS</li>\n<li>以下の2つのJSを読み込んでる</li>\n</ul></li>\n<li>util.js\n<ul>\n<li>このページだけでなく、他のページでも使われる系util</li>\n<li>ただし`chrome://`でのみ使える模様</li>\n</ul></li>\n<li>webrtc_internals.js\n<ul>\n<li>本体</li>\n<li>この記事の主旨</li>\n</ul></li>\n</ul><p>ちなみにDevToolsでわざわざ解析しなくても、Chromeのソースを漁れば実は出てくる・・！</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/chromium/chromium/tree/master/content/browser/webrtc/resources\">chromium/content/browser/webrtc/resources at master &middot; chromium/chromium &middot; GitHub</a></p>\n\n    </blockquote>\n<p>ただしこのソースを見るとわかるように謎の`include`要素があって、一括で読むには結局DevToolsから落とすしかなかった・・。</p>\n\n    <blockquote>\n        <p><a href=\"https://gist.github.com/leader22/a7e8db88a5fb304be4e45b73424a1ff5\">Dump of chrome://webrtc-internals by Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36&quot; &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h3>util.js</h3>\n    <p>まずは軽いほうから。</p>\n\n<ul>\n<li>`assert(condition, opt_message)`</li>\n<li>`$()`\n<ul>\n<li>`document.getElementById()`のエイリアス</li>\n</ul></li>\n<li>`appendParam(url, key, value)`</li>\n<li>`createElementWithClassName(type, className)`</li>\n<li>etc...</li>\n</ul><p>などなど、ConsoleパネルのCommand Line APIとも違った、便利APIたち。</p><p>`chrome://`配下のページでだけ読み込まれる関数群であり、今回はどうでもいいやつらです。</p><p>次。</p>\n\n</div>\n<div class=\"section\">\n    <h3>webrtc_internals.js</h3>\n    <p>本丸は圧巻の3000行！</p>\n\n<div class=\"section\">\n    <h4>Overview</h4>\n    \n<ul>\n<li>ひたすら関数やクラス定義が続いててエントリーが見つけにくい\n<ul>\n<li>2700行目くらいにある`initialize()`ってやつがそう</li>\n</ul></li>\n<li>コード自体はES5時代っぽく、`class`ではなく`prototype`を作ってる懐かしい感じ</li>\n<li>タブ表示やグラフ表示などUI的なことを管理するクラスもあるし\n<ul>\n<li>グラフは`canvas`なのでそのあたりも</li>\n</ul></li>\n<li>時系列で溜まっていくstatsデータを管理するクラスもある\n<ul>\n<li>`getStats()`のデータを抽象化してるやつとか</li>\n</ul></li>\n<li>Dumpをダウンロードする機能とかもここ</li>\n</ul><p>順に読んでいく。</p>\n\n</div>\n<div class=\"section\">\n    <h4>initialize()</h4>\n    <pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">function</span> initialize() <span class=\"synIdentifier\">{</span>\n  dumpCreator = <span class=\"synStatement\">new</span> DumpCreator($(<span class=\"synConstant\">&quot;content-root&quot;</span>));\n  $(<span class=\"synConstant\">&quot;content-root&quot;</span>).appendChild(createStatsSelectionOptionElements());\n\n  tabView = <span class=\"synStatement\">new</span> TabView($(<span class=\"synConstant\">&quot;content-root&quot;</span>));\n  ssrcInfoManager = <span class=\"synStatement\">new</span> SsrcInfoManager();\n  peerConnectionUpdateTable = <span class=\"synStatement\">new</span> PeerConnectionUpdateTable();\n  statsTable = <span class=\"synStatement\">new</span> StatsTable(ssrcInfoManager);\n\n  chrome.send(<span class=\"synConstant\">&quot;finishedDOMLoad&quot;</span>);\n\n  <span class=\"synComment\">// Requests stats from all peer connections every second.</span>\n  <span class=\"synStatement\">window</span>.setInterval(requestStats, 1000);\n<span class=\"synIdentifier\">}</span>\n<span class=\"synStatement\">document</span>.addEventListener(<span class=\"synConstant\">&quot;DOMContentLoaded&quot;</span>, initialize);\n</pre><p>ここからはじまる。<br />\nさっそくさっきみた`util.js`の`$()`が使われてる！</p><p>やってることとしては、</p>\n\n<ul>\n<li>Create Dumpの機能</li>\n<li>各種タブのUI初期化</li>\n<li>PeerConnectionとStatsのViewのセットアップ</li>\n<li>1秒ごとにStatsデータを要求</li>\n</ul><p>って感じ。</p><p>リアルタイムに・・とかではなく、愚直に1秒ごとのタイマーが頑張ってたんですね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>データはどこからくるのか</h4>\n    <p>`getUserMedia()`したこととか、`RTCPeerConnection`が作られたこととか、そういう情報の出どころはどこか？</p><p>`initialize()`で呼んでる1秒ごとの`requestStats()`が何してるかを追えばわかるはず・・・。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">function</span> requestStats() <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">if</span> (currentGetStatsMethod == OPTION_GETSTATS_STANDARD) <span class=\"synIdentifier\">{</span>\n    requestStandardStats();\n  <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> (currentGetStatsMethod == OPTION_GETSTATS_LEGACY) <span class=\"synIdentifier\">{</span>\n    requestLegacyStats();\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n\n<span class=\"synComment\">/**</span>\n<span class=\"synComment\"> * Sends a request to the browser to get peer connection statistics from the</span>\n<span class=\"synComment\"> * standard getStats() API (promise-based).</span>\n<span class=\"synComment\"> */</span>\n<span class=\"synIdentifier\">function</span> requestStandardStats() <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">if</span> (<span class=\"synType\">Object</span>.keys(peerConnectionDataStore).length &gt; 0) <span class=\"synIdentifier\">{</span>\n    chrome.send(<span class=\"synConstant\">&quot;getStandardStats&quot;</span>);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>はい。</p><p>`getStats()`は`Promise`ベースかそうでないかで返り値が変わる仕様変更があった。<br />\nなのでそれをオプションで選べるようになってて、どちらにせよ「`getStats()`のデータをください」っていってる。</p><p>`chrome.send(\"getStandardStats\")`すると、きっとどこかで待ち受けてる関数にそのデータが放り込まれてくるっぽい。</p><p>次はその受け口を探す。</p>\n\n</div>\n<div class=\"section\">\n    <h4>横道: これが使えるなら</h4>\n    <p>`chrome.send(\"getStandardStats\")`が自由に使えるなら、どんなページでも`getStats()`し放題なのでは？！捗るのでは？！</p><p>って思ったけど、まぁできませんでした。</p><p>Chromeの場合、`chrome`オブジェクトが`window`にだいたい生えてるんですが、通常のWebページをブラウジングしてるときは肝心の`chrome.send()`がありません。</p><p>どうやら`chrome://`配下のページでだけ使えるものらしい。</p>\n\n    <blockquote>\n        <p><a href=\"https://stackoverflow.com/questions/44936584/accessing-chrome-send-method-in-chrome-web-browser-out-of-chromes-internal\">Accessing `chrome.send()` method in chrome web browser out of chrome&#39;s internal pages - Stack Overflow</a></p>\n\n    </blockquote>\n<p>残念。</p>\n\n</div>\n<div class=\"section\">\n    <h4>続・データはどこからくるのか</h4>\n    <p>`chrome.send()`に対応したイベントハンドラみたいなやつが見当たらないので、きっとグローバルに見えてる関数のどれかがおもむろに叩かれるはず。（これは勘）</p><p>怪しい関数ないかなーと見てたら見つけたこの2つのグローバル変数。</p>\n\n<ul>\n<li>`userMediaRequests = []`</li>\n<li>`peerConnectionDataStore = {}`</li>\n</ul><p>実際データがある状態でコンソールから見てもそれらしい値が入ってたので、ここがすべてだと見てよさそう。</p><p>ちなみに、`userMediaRequests`に入ってるのはこんなオブジェクト。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> userMediaRequests = <span class=\"synIdentifier\">[</span>\n  <span class=\"synIdentifier\">{</span>\n    origin: <span class=\"synConstant\">&quot;https://conf.webrtc.ecl.ntt.com&quot;</span>,\n    pid: 41455,\n    rid: 659,\n    timestamp: 1576114434316.34,\n    video: <span class=\"synConstant\">&quot;{deviceId: {exact: [&quot;</span>02c4f48cf9bfd27aa15f8d7b1483cb3aefdbed87f8b4a189e9814774316f8723<span class=\"synConstant\">&quot;]}}&quot;</span>\n  <span class=\"synIdentifier\">}</span>,\n<span class=\"synIdentifier\">]</span>\n</pre><p>実際にinternalsで見れるのとほぼ一緒でおもしろみはない。</p><p>`pid`ごとに背景の色を変えるとかしてほしいなといつも思ってる。<br />\n`rid`はリクエストIDかね？</p><p>`addGetUserMedia()`というグローバル関数がこの配列に値を入れてるので、ブレークポイント貼ってコールスタックたどればわかると思ったら、まさかのてっぺんだった・・。</p><p>ということは。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>webrtc-internalsのしくみ</h3>\n    <p>JavaScriptのコールスタックのてっぺんで既にデータがあるってことは、ブラウザ側 = C++から値が渡されてるはず。</p><p>そう思ってC++のコード見たらビンゴだった。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/chromium/chromium/blob/master/content/browser/webrtc/webrtc_internals.cc\">chromium/webrtc_internals.cc at master &middot; chromium/chromium &middot; GitHub</a></p>\n\n    </blockquote>\n\n<ul>\n<li>JavaScriptからは`chrome.send()`でシグナルする</li>\n<li>するとC++がグローバルな関数に引数でデータを渡して叩く</li>\n</ul><p>というしくみ。</p><p>C++のコードでいう`SendUpdate(key, data)`の`key`が、このJSのグローバル関数になってる。</p>\n\n<ul>\n<li>addPeerConnection</li>\n<li>removePeerConnection</li>\n<li>updatePeerConnection</li>\n<li>addStandardStats</li>\n<li>addLegacyStats</li>\n<li>addGetUserMedia</li>\n<li>eventLogRecordingsFileSelectionCancelled</li>\n<li>audioDebugRecordingsFileSelectionCancelled</li>\n<li>removeGetUserMediaForRenderer</li>\n</ul><p>現状で定義されてる`key`はこれら。</p><p>というわけで、あとは受け取ったデータを貯めて、整形して、表示してるだけ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>使えそうなコードはあるか</h3>\n    <p>internalsで見れる情報は便利ではあるものの、Chromeでしかもちろん使えないし、見せ方も少し工夫したい（取捨選択したい）ことがある。</p><p>なのでここのコードを拝借すれば、オレオレinternals的UIをライブラリ化することができて、FirefoxやSafariでも同じように使えるのでは？という。</p><p>そのために使えそうなコード片がないか見ておく。</p>\n\n<div class=\"section\">\n    <h4>StatsRatesCalculator</h4>\n    <p>`getStats()`のデータはだいたい前のデータと最新のデータを比較することが多いけど、正にそういうことをやってるやつがいた。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">class</span> StatsRatesCalculator <span class=\"synIdentifier\">{</span>\n  constructor() <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>.previousReport = <span class=\"synStatement\">null</span>;\n    <span class=\"synIdentifier\">this</span>.currentReport = <span class=\"synStatement\">null</span>;\n  <span class=\"synIdentifier\">}</span>\n\n  addStatsReport(report) <span class=\"synIdentifier\">{</span>\n    <span class=\"synIdentifier\">this</span>.previousReport = <span class=\"synIdentifier\">this</span>.currentReport;\n    <span class=\"synIdentifier\">this</span>.currentReport = report;\n    <span class=\"synIdentifier\">this</span>.updateCalculatedMetrics_();\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synComment\">// Updates all &quot;calculated metrics&quot;, which are metrics derived from standard</span>\n  <span class=\"synComment\">// values, such as converting total counters (e.g. bytesSent) to rates (e.g.</span>\n  <span class=\"synComment\">// bytesSent/s).</span>\n  updateCalculatedMetrics_() <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">const</span> statsCalculators = <span class=\"synIdentifier\">[</span>\n      <span class=\"synIdentifier\">{</span>\n        type: <span class=\"synConstant\">&quot;data-channel&quot;</span>,\n        metricCalculators: <span class=\"synIdentifier\">{</span>\n          messagesSent: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;messagesSent&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          messagesReceived: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;messagesReceived&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          bytesSent: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;bytesSent&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          bytesReceived: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;bytesReceived&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>)\n        <span class=\"synIdentifier\">}</span>\n      <span class=\"synIdentifier\">}</span>,\n      <span class=\"synIdentifier\">{</span>\n        type: <span class=\"synConstant\">&quot;media-source&quot;</span>,\n        metricCalculators: <span class=\"synIdentifier\">{</span>\n          totalAudioEnergy: <span class=\"synStatement\">new</span> AudioLevelRmsCalculator()\n        <span class=\"synIdentifier\">}</span>\n      <span class=\"synIdentifier\">}</span>,\n      <span class=\"synIdentifier\">{</span>\n        type: <span class=\"synConstant\">&quot;track&quot;</span>,\n        metricCalculators: <span class=\"synIdentifier\">{</span>\n          framesSent: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;framesSent&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          framesReceived: <span class=\"synIdentifier\">[</span>\n            <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;framesReceived&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n            <span class=\"synStatement\">new</span> DifferenceCalculator(<span class=\"synConstant\">&quot;framesReceived&quot;</span>, <span class=\"synConstant\">&quot;framesDecoded&quot;</span>)\n          <span class=\"synIdentifier\">]</span>,\n          totalAudioEnergy: <span class=\"synStatement\">new</span> AudioLevelRmsCalculator(),\n          jitterBufferDelay: <span class=\"synStatement\">new</span> RateCalculator(\n            <span class=\"synConstant\">&quot;jitterBufferDelay&quot;</span>,\n            <span class=\"synConstant\">&quot;jitterBufferEmittedCount&quot;</span>,\n            CalculatorModifier.kMillisecondsFromSeconds\n          )\n        <span class=\"synIdentifier\">}</span>\n      <span class=\"synIdentifier\">}</span>,\n      <span class=\"synIdentifier\">{</span>\n        type: <span class=\"synConstant\">&quot;outbound-rtp&quot;</span>,\n        metricCalculators: <span class=\"synIdentifier\">{</span>\n          bytesSent: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;bytesSent&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          packetsSent: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;packetsSent&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          totalPacketSendDelay: <span class=\"synStatement\">new</span> RateCalculator(\n            <span class=\"synConstant\">&quot;totalPacketSendDelay&quot;</span>,\n            <span class=\"synConstant\">&quot;packetsSent&quot;</span>,\n            CalculatorModifier.kMillisecondsFromSeconds\n          ),\n          framesEncoded: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;framesEncoded&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          totalEncodedBytesTarget: <span class=\"synStatement\">new</span> RateCalculator(\n            <span class=\"synConstant\">&quot;totalEncodedBytesTarget&quot;</span>,\n            <span class=\"synConstant\">&quot;timestamp&quot;</span>\n          ),\n          totalEncodeTime: <span class=\"synStatement\">new</span> RateCalculator(\n            <span class=\"synConstant\">&quot;totalEncodeTime&quot;</span>,\n            <span class=\"synConstant\">&quot;framesEncoded&quot;</span>,\n            CalculatorModifier.kMillisecondsFromSeconds\n          ),\n          qpSum: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;qpSum&quot;</span>, <span class=\"synConstant\">&quot;framesEncoded&quot;</span>),\n          codecId: <span class=\"synStatement\">new</span> CodecCalculator()\n        <span class=\"synIdentifier\">}</span>\n      <span class=\"synIdentifier\">}</span>,\n      <span class=\"synIdentifier\">{</span>\n        type: <span class=\"synConstant\">&quot;inbound-rtp&quot;</span>,\n        metricCalculators: <span class=\"synIdentifier\">{</span>\n          bytesReceived: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;bytesReceived&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          packetsReceived: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;packetsReceived&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          framesDecoded: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;framesDecoded&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          totalDecodeTime: <span class=\"synStatement\">new</span> RateCalculator(\n            <span class=\"synConstant\">&quot;totalDecodeTime&quot;</span>,\n            <span class=\"synConstant\">&quot;framesDecoded&quot;</span>,\n            CalculatorModifier.kMillisecondsFromSeconds\n          ),\n          qpSum: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;qpSum&quot;</span>, <span class=\"synConstant\">&quot;framesDecoded&quot;</span>),\n          codecId: <span class=\"synStatement\">new</span> CodecCalculator()\n        <span class=\"synIdentifier\">}</span>\n      <span class=\"synIdentifier\">}</span>,\n      <span class=\"synIdentifier\">{</span>\n        type: <span class=\"synConstant\">&quot;transport&quot;</span>,\n        metricCalculators: <span class=\"synIdentifier\">{</span>\n          bytesSent: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;bytesSent&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          bytesReceived: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;bytesReceived&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>)\n          <span class=\"synComment\">// </span><span class=\"synTodo\">TODO</span><span class=\"synComment\">(https://crbug.com/webrtc/10568): Add packetsSent and</span>\n          <span class=\"synComment\">// packetsReceived once implemented.</span>\n        <span class=\"synIdentifier\">}</span>\n      <span class=\"synIdentifier\">}</span>,\n      <span class=\"synIdentifier\">{</span>\n        type: <span class=\"synConstant\">&quot;candidate-pair&quot;</span>,\n        metricCalculators: <span class=\"synIdentifier\">{</span>\n          bytesSent: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;bytesSent&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          bytesReceived: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;bytesReceived&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          <span class=\"synComment\">// </span><span class=\"synTodo\">TODO</span><span class=\"synComment\">(https://crbug.com/webrtc/10569): Add packetsSent and</span>\n          <span class=\"synComment\">// packetsReceived once implemented.</span>\n          requestsSent: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;requestsSent&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          requestsReceived: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;requestsReceived&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          responsesSent: <span class=\"synStatement\">new</span> RateCalculator(<span class=\"synConstant\">&quot;responsesSent&quot;</span>, <span class=\"synConstant\">&quot;timestamp&quot;</span>),\n          responsesReceived: <span class=\"synStatement\">new</span> RateCalculator(\n            <span class=\"synConstant\">&quot;responsesReceived&quot;</span>,\n            <span class=\"synConstant\">&quot;timestamp&quot;</span>\n          ),\n          consentRequestsSent: <span class=\"synStatement\">new</span> RateCalculator(\n            <span class=\"synConstant\">&quot;consentRequestsSent&quot;</span>,\n            <span class=\"synConstant\">&quot;timestamp&quot;</span>\n          ),\n          consentRequestsReceived: <span class=\"synStatement\">new</span> RateCalculator(\n            <span class=\"synConstant\">&quot;consentRequestsReceived&quot;</span>,\n            <span class=\"synConstant\">&quot;timestamp&quot;</span>\n          ),\n          totalRoundTripTime: <span class=\"synStatement\">new</span> RateCalculator(\n            <span class=\"synConstant\">&quot;totalRoundTripTime&quot;</span>,\n            <span class=\"synConstant\">&quot;responsesReceived&quot;</span>,\n            CalculatorModifier.kMillisecondsFromSeconds\n          )\n        <span class=\"synIdentifier\">}</span>\n      <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">]</span>;\n\n    statsCalculators.forEach(statsCalculator =&gt; <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">this</span>.currentReport.getByType(statsCalculator.type).forEach(stats =&gt; <span class=\"synIdentifier\">{</span>\n        <span class=\"synType\">Object</span>.keys(statsCalculator.metricCalculators).forEach(\n          originalMetric =&gt; <span class=\"synIdentifier\">{</span>\n            <span class=\"synIdentifier\">let</span> metricCalculators =\n              statsCalculator.metricCalculators<span class=\"synIdentifier\">[</span>originalMetric<span class=\"synIdentifier\">]</span>;\n            <span class=\"synStatement\">if</span> (!<span class=\"synType\">Array</span>.isArray(metricCalculators)) <span class=\"synIdentifier\">{</span>\n              metricCalculators = <span class=\"synIdentifier\">[</span>metricCalculators<span class=\"synIdentifier\">]</span>;\n            <span class=\"synIdentifier\">}</span>\n            metricCalculators.forEach(metricCalculator =&gt; <span class=\"synIdentifier\">{</span>\n              <span class=\"synIdentifier\">this</span>.currentReport.addCalculatedMetric(\n                stats.id,\n                originalMetric,\n                metricCalculator.getCalculatedMetricName(),\n                metricCalculator.calculate(\n                  stats.id,\n                  <span class=\"synIdentifier\">this</span>.previousReport,\n                  <span class=\"synIdentifier\">this</span>.currentReport\n                )\n              );\n            <span class=\"synIdentifier\">}</span>);\n          <span class=\"synIdentifier\">}</span>\n        );\n      <span class=\"synIdentifier\">}</span>);\n    <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n<ul>\n<li>`RTCStartsReport`の`type`ごとに</li>\n<li>どういうメトリクスを取りたいかを定義して</li>\n<li>その計算をした情報をアップデートする</li>\n</ul><p>ここに載せてる以外に依存してる`XxxCalculator`のコードもあわせれば、誰でもwebrtc-internalsで見れる情報をシュッと表示するrtcstats-wrapperが作れる！</p><p>まあかなり玄人向けの情報ではあるので、いい感じに訳すならだいたい自作するかなーって感じではあるけど、とても参考になるコードなはず。</p>\n\n</div>\n<div class=\"section\">\n    <h4>TimelineGraphView</h4>\n    <p>あのグラフを描画してるクラス。</p><p>実装もそのまんまで、`canvas`に対していい感じにデータを時系列でプロットするだけ。</p><p>縦軸の目盛りの単位をデータに応じてアップデートする処理とか参考になりますね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>DumpCreator.onDownloadData_</h4>\n    <p>ダンプファイルのダウンロードのロジック。</p><p>ただやってることはなんてことなくて、貯めてたオブジェクトを`JSON.stringify()`して`Blob`にして`a`要素でダウンロードさせてるだけ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink>onDownloadData_: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n  <span class=\"synIdentifier\">var</span> dump_object = <span class=\"synIdentifier\">{</span>\n    getUserMedia: userMediaRequests,\n    PeerConnections: peerConnectionDataStore,\n    UserAgent: navigator.userAgent\n  <span class=\"synIdentifier\">}</span>;\n  <span class=\"synIdentifier\">var</span> textBlob = <span class=\"synStatement\">new</span> Blob(<span class=\"synIdentifier\">[</span>JSON.stringify(dump_object, <span class=\"synStatement\">null</span>, <span class=\"synConstant\">&quot; &quot;</span>)<span class=\"synIdentifier\">]</span>, <span class=\"synIdentifier\">{</span>\n    type: <span class=\"synConstant\">&quot;octet/stream&quot;</span>\n  <span class=\"synIdentifier\">}</span>);\n  <span class=\"synIdentifier\">var</span> URL = <span class=\"synStatement\">window</span>.URL.createObjectURL(textBlob);\n\n  <span class=\"synIdentifier\">var</span> anchor = <span class=\"synIdentifier\">this</span>.root_.getElementsByTagName(<span class=\"synConstant\">&quot;a&quot;</span>)<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>;\n  anchor.href = URL;\n  anchor.download = <span class=\"synConstant\">&quot;webrtc_internals_dump.txt&quot;</span>;\n  <span class=\"synComment\">// The default action of the anchor will download the URL.</span>\n<span class=\"synIdentifier\">}</span>,\n</pre><p>これと同じ形式でダンプファイルを作れば、自分たちのSDKからダンプファイルが出力できる。</p><p>オーディオとパケットのダンプ機能は、`chrome.send()`してるだけだったので、どうやらブラウザ側でやってる模様。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>やってみた</h3>\n    <p><blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Tweaked chrome://webrtc-internals on Firefox 😂 <a href=\"https://t.co/XwNaZ3nl0e\">pic.twitter.com/XwNaZ3nl0e</a></p>&mdash; りぃ (@leader22) <a href=\"https://twitter.com/leader22/status/1214452891555004416?ref_src=twsrc%5Etfw\">January 7, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><p>適当に`addPeerConnection()`して、`addStandardStats()`に`pc.getStats()`をちょっと整形したデータを投げ込めば、いい感じに表示された。</p><p>プラットフォームは選ばず、`getStats()`したデータさえあれば、いつでもどこでも`chrome://webrtc-internals`っぽいUIで解析できる・・！</p>\n\n</div>"
}
