{
  "title": "Node.jsのchild_process.execの標準出力のオプション",
  "html": "<p>なんてわかりにくいタイトル！でも忘れないようにメモ。</p><p>child_process.execで、OSのコマンドを実行し、その結果をNodeで処理したいとする。<br />\nその実行結果を「標準出力で受け取る」ときに、オプションが設定できるんですね。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback\" target=\"_blank\" title=\"Child Process Node.js v0.10.2 Manual &amp; Documentation\">Child Process Node.js v0.10.2 Manual &amp; Documentation</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>child_process.exec</h3>\n    <p>子プロセスを起動して、そこでOSのコマンドを実行するやつ。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> exec = require(<span class=\"synConstant\">'child_process'</span>).exec;\n\nexec(<span class=\"synConstant\">'tree ~/git/myApp/ -L 3'</span>, <span class=\"synIdentifier\">function</span> (error, stdout, stderr) <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">if</span>(stdout)<span class=\"synIdentifier\">{</span>\n        console.log(<span class=\"synConstant\">'stdout: '</span> + stdout);\n    <span class=\"synIdentifier\">}</span>\n    <span class=\"synStatement\">if</span>(stderr)<span class=\"synIdentifier\">{</span>\n        console.log(<span class=\"synConstant\">'stderr: '</span> + stderr);\n    <span class=\"synIdentifier\">}</span>\n    <span class=\"synStatement\">if</span> (error !== <span class=\"synStatement\">null</span>) <span class=\"synIdentifier\">{</span>\n      console.log(<span class=\"synConstant\">'Exec error: '</span> + error);\n    <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>たとえばこの例だと、コンソールに、</p>\n<pre class=\"code lang-\" data-lang=\"\" data-unlink>tree ~/git/myApp/ -L 3</pre><p>の実行結果が標準出力として表示されるはずです。</p><p>ただtreeコマンドみたく、やたらと出力するものがある処理の場合、以下のエラーが出るときがあります・・。</p>\n<pre class=\"code lang-\" data-lang=\"\" data-unlink>Error: maxBuffer exceeded.</pre><p>標準出力のバッファのリミットを超えると、プロセスがkillされる＋標準出力が途中で切れます。<br />\n実はドキュメントにも書いてますね。</p>\n\n    <blockquote>\n        <p>maxBuffer specifies the largest amount of data allowed on stdout or stderr - if this value is exceeded then the child process is killed.</p>\n\n    </blockquote>\n<p>というわけで、大量の標準出力を扱いたい、そんなときには！</p>\n\n</div>\n<div class=\"section\">\n    <h3>第二引数にオプションを</h3>\n    <p>以下がオプションとして設定できます。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// Defaults.</span>\n<span class=\"synIdentifier\">{</span>\n  encoding: <span class=\"synConstant\">'utf8'</span>,\n  timeout: 0,\n  maxBuffer: 200*1024,\n  killSignal: <span class=\"synConstant\">'SIGTERM'</span>,\n  cwd: <span class=\"synStatement\">null</span>,<span class=\"synComment\">// = CurrentWorkingDirectory</span>\n  env: <span class=\"synStatement\">null</span><span class=\"synComment\">// = EnvironmentVariables</span>\n<span class=\"synIdentifier\">}</span>\n</pre><p>何も設定しない場合は、以下の内容がデフォルトで適用されてます。</p><p>最初の例にオプションを指定すると、</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> exec = require(<span class=\"synConstant\">'child_process'</span>).exec;\n\nexec(<span class=\"synConstant\">'tree ~/git/myApp/ -L 3'</span>, <span class=\"synIdentifier\">{</span>maxBuffer: 400*1024<span class=\"synIdentifier\">}</span>, <span class=\"synIdentifier\">function</span> (error, stdout, stderr) <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">if</span>(stdout !== <span class=\"synStatement\">null</span>)<span class=\"synIdentifier\">{</span>\n        console.log(<span class=\"synConstant\">'stdout: '</span> + stdout);\n    <span class=\"synIdentifier\">}</span>\n    <span class=\"synStatement\">if</span>(stderr !== <span class=\"synStatement\">null</span>)<span class=\"synIdentifier\">{</span>\n        console.log(<span class=\"synConstant\">'stderr: '</span> + stderr);\n    <span class=\"synIdentifier\">}</span>\n    <span class=\"synStatement\">if</span> (error !== <span class=\"synStatement\">null</span>) <span class=\"synIdentifier\">{</span>\n      console.log(<span class=\"synConstant\">'Exec error: '</span> + error);\n    <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>これで安心というわけ。</p>\n\n</div>"
}
