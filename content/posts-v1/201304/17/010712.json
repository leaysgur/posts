{
  "title": "Backbone.js Todosを読み解く",
  "html": "<p>というわけで色々Backbone.jsについて見てはいるものの、いざ自分で作ってみると上手くいかない・・。<br />\nようはどの単位でViewとModelを紐付ければ良いかわからないんですよねー。</p><p>というわけで、Todoリストのサンプルからそのヒントを得ようという試み。</p>\n\n    <blockquote>\n        <p>参考：<a href=\"http://backbonejs.org/examples/todos/index.html\" target=\"_blank\" title=\"Backbone.js Todos\">Backbone.js Todos</a></p>\n\n    </blockquote>\n\n<div class=\"section\">\n    <h3>Backbone.js Todosについて</h3>\n    <p>見ての通りBackbone.jsで作られたサンプルアプリ。<br />\nTodoリストのデータの保管にはLocalStorageを使ってて、別のライブラリを読み込んでます。</p>\n\n</div>\n<div class=\"section\">\n    <h3>ソース全部</h3>\n    <p>せっかくなので、ソースについてるコメントを和訳しときます。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// An example Backbone application contributed by</span>\n<span class=\"synComment\">// [Jérôme Gravel-Niquet](http://jgn.me/). This demo uses a simple</span>\n<span class=\"synComment\">// [LocalStorage adapter](backbone-localstorage.html)</span>\n<span class=\"synComment\">// to persist Backbone models within your browser.</span>\n\n<span class=\"synComment\">// [Jérôme Gravel-Niquet](http://jgn.me/)氏によるBackboneアプリのサンプル。</span>\n<span class=\"synComment\">// データ保持のために、[LocalStorage adapter](backbone-localstorage.html)を使用。</span>\n\n<span class=\"synComment\">// Load the application once the DOM is ready, using `jQuery.ready`:</span>\n<span class=\"synComment\">// jQuery.readyでアプリをDOMロード時に起動</span>\n$(<span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n\n  <span class=\"synComment\">// Todo Model</span>\n  <span class=\"synComment\">// ----------</span>\n\n  <span class=\"synComment\">// Our basic **Todo** model has `title`, `order`, and `done` attributes.</span>\n  <span class=\"synComment\">// Todoのタスク自身のモデル。`title`、`order`、`done`から構成される。</span>\n  <span class=\"synIdentifier\">var</span> Todo = Backbone.Model.extend(<span class=\"synIdentifier\">{</span>\n\n    <span class=\"synComment\">// Default attributes for the todo item.</span>\n    <span class=\"synComment\">// 初期値の設定</span>\n    defaults: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">{</span>\n        title: <span class=\"synConstant\">&quot;empty todo...&quot;</span>,\n        order: Todos.nextOrder(),\n        done: <span class=\"synConstant\">false</span>\n      <span class=\"synIdentifier\">}</span>;\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Toggle the `done` state of this todo item.</span>\n    <span class=\"synComment\">// ステータスのトグルのための関数</span>\n    toggle: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">this</span>.save(<span class=\"synIdentifier\">{</span>done: !<span class=\"synIdentifier\">this</span>.get(<span class=\"synConstant\">&quot;done&quot;</span>)<span class=\"synIdentifier\">}</span>);\n    <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synIdentifier\">}</span>);\n\n  <span class=\"synComment\">// Todo Collection</span>\n  <span class=\"synComment\">// ---------------</span>\n\n  <span class=\"synComment\">// The collection of todos is backed by *localStorage* instead of a remote</span>\n  <span class=\"synComment\">// server.</span>\n  <span class=\"synComment\">// Todoタスク達を集めたCollection。(サーバーの代わりにlocalStorageを使用)</span>\n  <span class=\"synIdentifier\">var</span> TodoList = Backbone.Collection.extend(<span class=\"synIdentifier\">{</span>\n\n    <span class=\"synComment\">// Reference to this collection's model.</span>\n    <span class=\"synComment\">// Collectionの生成時にはどのModelを並べるか指定します。</span>\n    model: Todo,\n\n    <span class=\"synComment\">// Save all of the todo items under the `&quot;todos-backbone&quot;` namespace.</span>\n    <span class=\"synComment\">// todos-backboneという名前空間で、localStorageを使用。</span>\n    localStorage: <span class=\"synStatement\">new</span> Backbone.LocalStorage(<span class=\"synConstant\">&quot;todos-backbone&quot;</span>),\n\n    <span class=\"synComment\">// Filter down the list of all todo items that are finished.</span>\n    <span class=\"synComment\">// doneステータスになってるものを返す関数</span>\n    done: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>.where(<span class=\"synIdentifier\">{</span>done: <span class=\"synConstant\">true</span><span class=\"synIdentifier\">}</span>);\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Filter down the list to only todo items that are still not finished.</span>\n    <span class=\"synComment\">// 逆に、doneステータスになってないものを返す関数</span>\n    remaining: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>.without.apply(<span class=\"synIdentifier\">this</span>, <span class=\"synIdentifier\">this</span>.done());\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// We keep the Todos in sequential order, despite being saved by unordered</span>\n    <span class=\"synComment\">// GUID in the database. This generates the next order number for new items.</span>\n    <span class=\"synComment\">// DBにおけるGUIDのように連番で管理したいので、その連番を採取する関数</span>\n    nextOrder: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">if</span> (!<span class=\"synIdentifier\">this</span>.length) <span class=\"synStatement\">return</span> 1;\n      <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>.last().get(<span class=\"synConstant\">'order'</span>) + 1;\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Todos are sorted by their original insertion order.</span>\n    <span class=\"synComment\">// comparatorを設定すると、それ順でCollectionが並ぶ</span>\n    comparator: <span class=\"synConstant\">'order'</span>\n\n  <span class=\"synIdentifier\">}</span>);\n\n  <span class=\"synComment\">// Create our global collection of **Todos**.</span>\n  <span class=\"synComment\">// Collectionのインスタンス化</span>\n  <span class=\"synIdentifier\">var</span> Todos = <span class=\"synStatement\">new</span> TodoList;\n\n  <span class=\"synComment\">// Todo Item View</span>\n  <span class=\"synComment\">// --------------</span>\n\n  <span class=\"synComment\">// The DOM element for a todo item...</span>\n  <span class=\"synComment\">// 各Todoタスク用のView</span>\n  <span class=\"synIdentifier\">var</span> TodoView = Backbone.View.extend(<span class=\"synIdentifier\">{</span>\n\n    <span class=\"synComment\">//... is a list tag.</span>\n    <span class=\"synComment\">// 実態はliタグ</span>\n    tagName:  <span class=\"synConstant\">&quot;li&quot;</span>,\n\n    <span class=\"synComment\">// Cache the template function for a single item.</span>\n    <span class=\"synComment\">// Underscore.jsのテンプレ機能を使うので、ここにキャッシュしておく</span>\n    template: _.template($(<span class=\"synConstant\">'#item-template'</span>).html()),\n\n    <span class=\"synComment\">// The DOM events specific to an item.</span>\n    <span class=\"synComment\">// このViewで管理したいDOMイベントと、関数の結びつけ</span>\n    events: <span class=\"synIdentifier\">{</span>\n      <span class=\"synConstant\">&quot;click .toggle&quot;</span>   : <span class=\"synConstant\">&quot;toggleDone&quot;</span>,\n      <span class=\"synConstant\">&quot;dblclick .view&quot;</span>  : <span class=\"synConstant\">&quot;edit&quot;</span>,\n      <span class=\"synConstant\">&quot;click a.destroy&quot;</span> : <span class=\"synConstant\">&quot;clear&quot;</span>,\n      <span class=\"synConstant\">&quot;keypress .edit&quot;</span>  : <span class=\"synConstant\">&quot;updateOnEnter&quot;</span>,\n      <span class=\"synConstant\">&quot;blur .edit&quot;</span>      : <span class=\"synConstant\">&quot;close&quot;</span>\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// The TodoView listens for changes to its model, re-rendering. Since there's</span>\n    <span class=\"synComment\">// a one-to-one correspondence between a **Todo** and a **TodoView** in this</span>\n    <span class=\"synComment\">// app, we set a direct reference on the model for convenience.</span>\n    <span class=\"synComment\">// Modelの更新を検知してViewを更新するために、ModelをlistenToしておく</span>\n    <span class=\"synComment\">// よって、ModelのTodoとViewのTodoViewは1:1で紐づくことになる</span>\n    initialize: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">this</span>.listenTo(<span class=\"synIdentifier\">this</span>.model, <span class=\"synConstant\">'change'</span>, <span class=\"synIdentifier\">this</span>.render);\n      <span class=\"synIdentifier\">this</span>.listenTo(<span class=\"synIdentifier\">this</span>.model, <span class=\"synConstant\">'destroy'</span>, <span class=\"synIdentifier\">this</span>.remove);\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Re-render the titles of the todo item.</span>\n    <span class=\"synComment\">// Modelの内容をHTMLに落としこむ関数</span>\n    render: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">this</span>.$el.html(<span class=\"synIdentifier\">this</span>.template(<span class=\"synIdentifier\">this</span>.model.toJSON()));\n      <span class=\"synIdentifier\">this</span>.$el.toggleClass(<span class=\"synConstant\">'done'</span>, <span class=\"synIdentifier\">this</span>.model.get(<span class=\"synConstant\">'done'</span>));\n      <span class=\"synIdentifier\">this</span>.input = <span class=\"synIdentifier\">this</span>.$(<span class=\"synConstant\">'.edit'</span>);\n      <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>;\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Toggle the `&quot;done&quot;` state of the model.</span>\n    <span class=\"synComment\">// Modelのdoneステータスをトグルする関数</span>\n    toggleDone: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">this</span>.model.toggle();\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Switch this view into `&quot;editing&quot;` mode, displaying the input field.</span>\n    <span class=\"synComment\">// 編集モードに移行する関数</span>\n    edit: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">this</span>.$el.addClass(<span class=\"synConstant\">&quot;editing&quot;</span>);\n      <span class=\"synIdentifier\">this</span>.input.focus();\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Close the `&quot;editing&quot;` mode, saving changes to the todo.</span>\n    <span class=\"synComment\">// 編集モードを終了する関数</span>\n    close: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">var</span> value = <span class=\"synIdentifier\">this</span>.input.val();\n      <span class=\"synStatement\">if</span> (!value) <span class=\"synIdentifier\">{</span>\n        <span class=\"synIdentifier\">this</span>.clear();\n      <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">else</span> <span class=\"synIdentifier\">{</span>\n        <span class=\"synIdentifier\">this</span>.model.save(<span class=\"synIdentifier\">{</span>title: value<span class=\"synIdentifier\">}</span>);\n        <span class=\"synIdentifier\">this</span>.$el.removeClass(<span class=\"synConstant\">&quot;editing&quot;</span>);\n      <span class=\"synIdentifier\">}</span>\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// If you hit `enter`, we're through editing the item.</span>\n    <span class=\"synComment\">// エンターキーで上記のclose()を実行する関数</span>\n    updateOnEnter: <span class=\"synIdentifier\">function</span>(e) <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">if</span> (e.keyCode == 13) <span class=\"synIdentifier\">this</span>.close();\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Remove the item, destroy the model.</span>\n    <span class=\"synComment\">// Modelの削除時に使う関数</span>\n    clear: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">this</span>.model.destroy();\n    <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synIdentifier\">}</span>);\n\n  <span class=\"synComment\">// The Application</span>\n  <span class=\"synComment\">// ---------------</span>\n\n  <span class=\"synComment\">// Our overall **AppView** is the top-level piece of UI.</span>\n  <span class=\"synComment\">// トップレベルのViewとして、AppViewを定義</span>\n  <span class=\"synIdentifier\">var</span> AppView = Backbone.View.extend(<span class=\"synIdentifier\">{</span>\n\n    <span class=\"synComment\">// Instead of generating a new element, bind to the existing skeleton of</span>\n    <span class=\"synComment\">// the App already present in the HTML.</span>\n    <span class=\"synComment\">// 既に定義済のHTML要素にAppViewは適応することにする</span>\n    el: $(<span class=\"synConstant\">&quot;#todoapp&quot;</span>),\n\n    <span class=\"synComment\">// Our template for the line of statistics at the bottom of the app.</span>\n    <span class=\"synComment\">// 下の方で残り○タスクって表示するところのためのテンプレ</span>\n    statsTemplate: _.template($(<span class=\"synConstant\">'#stats-template'</span>).html()),\n\n    <span class=\"synComment\">// Delegated events for creating new items, and clearing completed ones.</span>\n    <span class=\"synComment\">// 新タスクの作成のイベントなど、AppViewで監視するイベントなどなど</span>\n    events: <span class=\"synIdentifier\">{</span>\n      <span class=\"synConstant\">&quot;keypress #new-todo&quot;</span>:  <span class=\"synConstant\">&quot;createOnEnter&quot;</span>,\n      <span class=\"synConstant\">&quot;click #clear-completed&quot;</span>: <span class=\"synConstant\">&quot;clearCompleted&quot;</span>,\n      <span class=\"synConstant\">&quot;click #toggle-all&quot;</span>: <span class=\"synConstant\">&quot;toggleAllComplete&quot;</span>\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// At initialization we bind to the relevant events on the `Todos`</span>\n    <span class=\"synComment\">// collection, when items are added or changed. Kick things off by</span>\n    <span class=\"synComment\">// loading any preexisting todos that might be saved in *localStorage*.</span>\n    <span class=\"synComment\">// CollectionのイベントをlistenToすることで、Viewをrenderする算段</span>\n    <span class=\"synComment\">// 最後のfetchが実行されると、Collectionのresetイベントが発火してaddAll関数実行！</span>\n    initialize: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n\n      <span class=\"synIdentifier\">this</span>.input = <span class=\"synIdentifier\">this</span>.$(<span class=\"synConstant\">&quot;#new-todo&quot;</span>);\n      <span class=\"synIdentifier\">this</span>.allCheckbox = <span class=\"synIdentifier\">this</span>.$(<span class=\"synConstant\">&quot;#toggle-all&quot;</span>)<span class=\"synIdentifier\">[</span>0<span class=\"synIdentifier\">]</span>;\n\n      <span class=\"synIdentifier\">this</span>.listenTo(Todos, <span class=\"synConstant\">'add'</span>, <span class=\"synIdentifier\">this</span>.addOne);\n      <span class=\"synIdentifier\">this</span>.listenTo(Todos, <span class=\"synConstant\">'reset'</span>, <span class=\"synIdentifier\">this</span>.addAll);\n      <span class=\"synIdentifier\">this</span>.listenTo(Todos, <span class=\"synConstant\">'all'</span>, <span class=\"synIdentifier\">this</span>.render);\n\n      <span class=\"synIdentifier\">this</span>.footer = <span class=\"synIdentifier\">this</span>.$(<span class=\"synConstant\">'footer'</span>);\n      <span class=\"synIdentifier\">this</span>.main = $(<span class=\"synConstant\">'#main'</span>);\n\n      Todos.fetch();\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Re-rendering the App just means refreshing the statistics -- the rest</span>\n    <span class=\"synComment\">// of the app doesn't change.</span>\n    <span class=\"synComment\">// ここでは残りタスク数の整理だけを行う</span>\n    render: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">var</span> done = Todos.done().length;\n      <span class=\"synIdentifier\">var</span> remaining = Todos.remaining().length;\n\n      <span class=\"synStatement\">if</span> (Todos.length) <span class=\"synIdentifier\">{</span>\n        <span class=\"synIdentifier\">this</span>.main.show();\n        <span class=\"synIdentifier\">this</span>.footer.show();\n        <span class=\"synIdentifier\">this</span>.footer.html(<span class=\"synIdentifier\">this</span>.statsTemplate(<span class=\"synIdentifier\">{</span>done: done, remaining: remaining<span class=\"synIdentifier\">}</span>));\n      <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">else</span> <span class=\"synIdentifier\">{</span>\n        <span class=\"synIdentifier\">this</span>.main.hide();\n        <span class=\"synIdentifier\">this</span>.footer.hide();\n      <span class=\"synIdentifier\">}</span>\n\n      <span class=\"synIdentifier\">this</span>.allCheckbox.checked = !remaining;\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Add a single todo item to the list by creating a view for it, and</span>\n    <span class=\"synComment\">// appending its element to the `&lt;ul&gt;`.</span>\n    <span class=\"synComment\">// 新しいタスクViewを作って、親ulにliとして突っ込む(ここでやっとModelがDOMに落ちる</span>\n    addOne: <span class=\"synIdentifier\">function</span>(todo) <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">var</span> view = <span class=\"synStatement\">new</span> TodoView(<span class=\"synIdentifier\">{</span>model: todo<span class=\"synIdentifier\">}</span>);\n      <span class=\"synIdentifier\">this</span>.$(<span class=\"synConstant\">&quot;#todo-list&quot;</span>).append(view.render().el);\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Add all items in the **Todos** collection at once.</span>\n    <span class=\"synComment\">// Collectionの中のModelの分だけaddOne関数</span>\n    addAll: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      Todos.each(<span class=\"synIdentifier\">this</span>.addOne, <span class=\"synIdentifier\">this</span>);\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// If you hit return in the main input field, create new **Todo** model,</span>\n    <span class=\"synComment\">// persisting it to *localStorage*.</span>\n    <span class=\"synComment\">// AppViewでエンターキーすると、新しいModel、新しいタスクViewができる</span>\n    createOnEnter: <span class=\"synIdentifier\">function</span>(e) <span class=\"synIdentifier\">{</span>\n      <span class=\"synStatement\">if</span> (e.keyCode != 13) <span class=\"synStatement\">return</span>;\n      <span class=\"synStatement\">if</span> (!<span class=\"synIdentifier\">this</span>.input.val()) <span class=\"synStatement\">return</span>;\n\n      Todos.create(<span class=\"synIdentifier\">{</span>title: <span class=\"synIdentifier\">this</span>.input.val()<span class=\"synIdentifier\">}</span>);\n      <span class=\"synIdentifier\">this</span>.input.val(<span class=\"synConstant\">''</span>);\n    <span class=\"synIdentifier\">}</span>,\n\n    <span class=\"synComment\">// Clear all done todo items, destroying their models.</span>\n    <span class=\"synComment\">// doneステータスになってるModelを削除する</span>\n    clearCompleted: <span class=\"synIdentifier\">function</span>() <span class=\"synIdentifier\">{</span>\n      _.invoke(Todos.done(), <span class=\"synConstant\">'destroy'</span>);\n      <span class=\"synStatement\">return</span> <span class=\"synConstant\">false</span>;\n    <span class=\"synIdentifier\">}</span>,\n\n    toggleAllComplete: <span class=\"synIdentifier\">function</span> () <span class=\"synIdentifier\">{</span>\n      <span class=\"synIdentifier\">var</span> done = <span class=\"synIdentifier\">this</span>.allCheckbox.checked;\n      Todos.each(<span class=\"synIdentifier\">function</span> (todo) <span class=\"synIdentifier\">{</span> todo.save(<span class=\"synIdentifier\">{</span><span class=\"synConstant\">'done'</span>: done<span class=\"synIdentifier\">}</span>); <span class=\"synIdentifier\">}</span>);\n    <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synIdentifier\">}</span>);\n\n  <span class=\"synComment\">// Finally, we kick things off by creating the **App**.</span>\n  <span class=\"synComment\">// 最後にAppViewをインスタンス化</span>\n  <span class=\"synIdentifier\">var</span> App = <span class=\"synStatement\">new</span> AppView;\n\n<span class=\"synIdentifier\">}</span>);\n</pre>\n</div>\n<div class=\"section\">\n    <h3>気付いたこと</h3>\n    \n<div class=\"section\">\n    <h4>アプリView</h4>\n    <p>やっぱりそうか、って感じですが・・。<br />\nBackbone.js自体がシングルページのアプリ向き・・みたいな話をよく聞きますね。<br />\nそのアプリ全体を司るViewがいて、各子Viewが構成要素になってるんですね。</p>\n\n</div>\n<div class=\"section\">\n    <h4>fetch()でresetイベント</h4>\n    <p>このアプリの仕組みでのなるほどポイント。<br />\nAppViewのinitializeでfetchすることで、resetイベント→addAllでデータ復帰・・と。</p>\n\n</div>\n<div class=\"section\">\n    <h4>シンプル！</h4>\n    <p>取っ付くまではなんだコレでしたが、意味がわかるようになってからは本当にシンプルに書けるんやなーと感動してます。<br />\nそしてコレは良いサンプルだわ・・。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Modelの最小単位が表すものがViewの最小単位</h4>\n    <p>何を言ってるんだ的な感じですが、個人的に一番のハラオチポイントがコレ。<br />\n最初に自分で作ったときに、TodoListViewみたいな感じでCollectionと結びつけてViewを組んでしまったんですよね。<br />\nそしたらそれぞれのタスクをDoneしたことを、どうやって当該Modelに知らせるかがわからなくって。</p><p>そもそもCollectionをまとめてrenderするんじゃなくて、Modelをeachでrenderしないといけないんやなーと。</p><p>ここの見極めが一番むずかしいけど、コレさえできればなんとかなりそうね。</p>\n\n</div>\n</div>"
}
