{
  "title": "0からはじめるBackbone.js Part.4",
  "html": "<p>一応、公式読み漁りはコレでラスト。<br />\nてか書き溜めてたのすっかり忘れてた。</p><p>最後はViewです。</p><p></p>\n\n<div class=\"section\">\n    <h3>Backbone.jsのView</h3>\n    <p>導入時のフレーズにもあった、Modelの更新を即座にキャッチしてViewを最新化できるからBackboneはすごいのよっていう部分。<br />\nどうやってDOMのソレとModelの更新を結びつけるかがキモっぽい。</p>\n\n<ul>\n<li>extend</li>\n<li>constructor / initialize</li>\n<li>el</li>\n<li>$el</li>\n<li>setElement</li>\n<li>attributes</li>\n<li>$ (jQuery or Zepto)</li>\n<li>render</li>\n<li>remove</li>\n<li>delegateEvents</li>\n<li>undelegateEvents</li>\n</ul>\n</div>\n<div class=\"section\">\n    <h3>Viewの生成</h3>\n    \n<ul>\n<li>extend</li>\n<li>constructor / initialize</li>\n<li>el</li>\n<li>$el</li>\n</ul><pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> PlayList = Backbone.View.extend(<span class=\"synIdentifier\">{</span>\n\tinitialize: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synComment\">// View!</span>\n\t<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synIdentifier\">var</span> playlist = <span class=\"synStatement\">new</span> PlayList(<span class=\"synIdentifier\">{</span>\n\tmodel: Song,\n\ttagName: <span class=\"synConstant\">'li'</span>\n<span class=\"synIdentifier\">}</span>);\n</pre><p>コンストラクタをnewするときに、以下のオプションは直接指定可能。</p>\n\n<ul>\n<li>model</li>\n<li>collection</li>\n<li>el</li>\n<li>id</li>\n<li>className</li>\n<li>tagName</li>\n<li>attributes</li>\n</ul><p>基本的にViewはelという要素をもってて、それにModelのデータをあわせてDOMを生成する。<br />\n何も指定してない場合はdivになるらしい。<br />\nそして、jQueryかZeptoを使ってればそれらでラップされたオブジェクトへも、$elでアクセスできるようになる。</p>\n\n</div>\n<div class=\"section\">\n    <h3>Viewの要素へのアクセス</h3>\n    \n<ul>\n<li>setElement</li>\n<li>attributes</li>\n<li>$ (jQuery or Zepto)</li>\n<li>remove</li>\n</ul>\n<div class=\"section\">\n    <h4>setElement</h4>\n    <p>いったん生成したViewのターゲットを変えたい時に使う。</p>\n\n</div>\n<div class=\"section\">\n    <h4>attributes</h4>\n    <p>生成したViewに指定したelの情報を取得したいときに。</p>\n\n</div>\n<div class=\"section\">\n    <h4>$</h4>\n    <p>基本的にViewのel以下のDOMツリーに大しては、$を使ってアクセスする。<br />\nそれだけで$(hoge, el)とか$(el).find(hoge)のようにスコープを絞った状態で扱える。</p>\n\n</div>\n<div class=\"section\">\n    <h4>remove</h4>\n    <p>DOMからViewを削除。<br />\n貼ってたイベント系も一緒に削除してくれるそうな。</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>Viewの描画</h3>\n    \n<ul>\n<li>render</li>\n</ul><p>DOMへの落とし込みに使う関数。<br />\nUnderscoreのテンプレートやったりHandlebarsやったり、何かと自分の状況に応じて拡張することになる関数。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> PlayList = Backbone.View.extend(<span class=\"synIdentifier\">{</span>\n\tel: $(<span class=\"synConstant\">'ul'</span>),\n\tinitialize: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synIdentifier\">this</span>.render();\n\t<span class=\"synIdentifier\">}</span>,\n\trender: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synIdentifier\">this</span>.$el.html();\n\t\t<span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>;\n\t<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synStatement\">new</span> Playlist();\n</pre><p>Viewって概念はすごくあやふやですね・・。<br />\nDOMそのものでもなければ、イベントをBindするだけでもなく・・・、うーむ。<br />\nロジック以外の見せ方に関するもの全て、みたいな。</p>\n\n</div>\n<div class=\"section\">\n    <h3>イベントまわり</h3>\n    \n<ul>\n<li>delegateEvents</li>\n<li>undelegateEvents</li>\n</ul><p>View内の要素におけるイベントの付与とか。</p>\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">var</span> PlayList = Backbone.View.extend(<span class=\"synIdentifier\">{</span>\n\tevents: <span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synConstant\">'click .btn.play'</span>: <span class=\"synConstant\">'play'</span>,\n\t\t<span class=\"synConstant\">'click .btn.stop'</span>: <span class=\"synConstant\">'stop'</span>,\n\t\t<span class=\"synConstant\">'mouseover .info'</span>: <span class=\"synConstant\">'showInfo'</span>\n\t<span class=\"synIdentifier\">}</span>,\n\tplay: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{}</span>,\n\tstop: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{}</span>,\n\tshowInfo: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{}</span>,\n\n\tel: $(<span class=\"synConstant\">'ul'</span>),\n\tinitialize: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synIdentifier\">this</span>.render();\n\t<span class=\"synIdentifier\">}</span>,\n\trender: <span class=\"synIdentifier\">function</span>()<span class=\"synIdentifier\">{</span>\n\t\t<span class=\"synIdentifier\">this</span>.$el.html();\n\t\t<span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>;\n\t<span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>);\n\n<span class=\"synStatement\">new</span> Playlist();\n</pre><p>実態はjQueryのon/offみたい。<br />\neventsで定義するのと、initializeで指定するのも多分一緒。<br />\nあくまでユーザーの操作によって発火させたいイベントのことで、Modelが更新されたとかそういうのとは別。<br />\nただ逆に、Modelの更新を知らせる処理とかは、ココに書くしか無い。</p><p></p>\n\n</div>\n<div class=\"section\">\n    <h3>所感</h3>\n    <p>MVCというのかMVPというのか、巷では色々あるみたいですが、意味を見いだせるレベルに達していない身としては、だいたいこんな感じってのがわかっただけでもよしとします。</p><p>さっさとサンプル作ろう、そうしよう。</p>\n\n</div>"
}
