{
  "title": "続・続・WebRTCなコードをE2Eテストする",
  "html": "\n    <blockquote>\n        <p><a href=\"https://lealog.hateblo.jp/entry/2018/04/06/142137\">&#x7D9A;&#x30FB;WebRTC&#x306A;&#x30B3;&#x30FC;&#x30C9;&#x3092;E2E&#x30C6;&#x30B9;&#x30C8;&#x3059;&#x308B; - console.lealog();</a><br />\n<a href=\"https://lealog.hateblo.jp/entry/2018/03/23/101954\">WebRTC&#x306A;&#x30B3;&#x30FC;&#x30C9;&#x3092;E2E&#x30C6;&#x30B9;&#x30C8;&#x3059;&#x308B; - console.lealog();</a></p>\n\n    </blockquote>\n<p>新しいネタを仕入れたので、このシリーズがまだ続きます！<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>microsoft/playwright</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/microsoft/playwright\">GitHub - microsoft/playwright: Node library to automate Chromium, Firefox and WebKit with a single API</a></p>\n\n    </blockquote>\n<p>今回はこれを使っていく。</p><p>雑にいうと`puppeteer`の上位互換。</p><p>操作できる対象がChromeではなく、Chromium/Firefox/Webkitというブラウザエンジン単位になってる。</p><p>もちろんすべてヘッドレスで動かすことができて、本筋としてはGUIのリグレッションテストやら作業の自動化かもしれないが、使えるものは使っていく。</p>\n\n</div>\n<div class=\"section\">\n    <h3>構想</h3>\n    \n<ul>\n<li>ブラウザAのコンテキストをつくる</li>\n<li>WebRTCのP2Pをはじめるべく、オファーを作る</li>\n<li>ブラウザBのコンテキストをつくる</li>\n<li>そこに先のオファーを渡してP2Pさせて、アンサーを得る</li>\n<li>ブラウザAのコンテキストにアンサーを渡す</li>\n</ul><p>とまぁ同時に複数のブラウザを操作して、host <-> hostでWebRTCを通してしまうという狙い。</p>\n\n</div>\n<div class=\"section\">\n    <h3>できた</h3>\n    <p>書き捨てるつもりだったので今回はGistになってます。</p>\n\n    <blockquote>\n        <p><a href=\"https://gist.github.com/leader22/eeed1860042ebbcbf7b030181cbeffdc\">Use playwright for WebRTC P2P DataChannel testing &middot; GitHub</a></p>\n\n    </blockquote>\n<p>作成したブラウザコンテキスト（正確にはそのページ）に対して任意のコードを実行できる関数である`evaluate()`を使うだけ。<br />\n第2引数にNode側から任意のものを渡せるのがポイント。</p><p>往復するのが地味に面倒なので、VanillaICEでつなげる。<br />\nこの例ではDataChannelしか試してないけど、ブラウザの起動時引数でフェイクメディアを使うなどすれば、Mediaも通せるはず。</p><p>この時点で</p>\n\n<table>\n    <tr>\n    <td> ↓offer/answer→ </td>\n    <td> ch  </td>\n    <td> ff  </td>\n    <td> wk  </td>\n    </tr>\n    <tr>\n    <td>       ch       </td>\n    <td>  o  </td>\n    <td>  o  </td>\n    <td>  o  </td>\n    </tr>\n    <tr>\n    <td>       ff       </td>\n    <td>  o  </td>\n    <td>  o  </td>\n    <td>  o  </td>\n    </tr>\n    <tr>\n    <td>       wk       </td>\n    <td>  o  </td>\n    <td>  o  </td>\n    <td>  x  </td>\n    </tr>\n</table><p>という組み合わせでちゃんと動いてるのを確認した。</p>\n\n</div>\n<div class=\"section\">\n    <h3>playwrightのTips</h3>\n    \n<div class=\"section\">\n    <h4>`window.xxx`で状態を保存</h4>\n    <p>保存というか、参照を残し続けるだけ。<br />\nモジュール以前の時代ではみんなそうしてたように。</p><p>これで`evaluate()`をまたいでも、同じ参照にアクセスできる。</p>\n\n</div>\n<div class=\"section\">\n    <h4>`evaluate()`の第2引数は`Serializable`</h4>\n    <p>SDPを返そうと思って、`RTCSessionDescription`をそのまま渡したところ、`{}`になって困ってた。<br />\n`toJSON()`してから渡せばよし。</p>\n\n</div>\n<div class=\"section\">\n    <h4>`webkit`はhostのcandidateを発行しない</h4>\n    <p>WebRTCのAPIを使ったIPアドレス抜き取り対応で、ある頃からそうなったんだった。<br />\nたぶんそれ用の起動オプションがあると思うけど、そのままではwebkit x webkitはつなげられなかった。（STUNとか使えばいけると思うけど）</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>実用的か</h3>\n    <p>ブラウザバージョンなどを決め打ちで使えないところはやや残念。<br />\nただブラウザにがんばってパッチ当てて動かしてるらしいのでいたしかたない。</p><p>ただ最新ブラウザでの動作保証ができる点だけでお釣りがくると思うので、がんがん使っていくとよいと思います。</p><p>とかいってたら`puppeteer`でもFirefoxが使えるようになってた・・・！</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/puppeteer/puppeteer/pull/5137\">feat(launcher): Provide option to run puppeteer with different browsers by mjzffr &middot; Pull Request #5137 &middot; puppeteer/puppeteer &middot; GitHub</a></p>\n\n    </blockquote>\n\n</div>"
}
