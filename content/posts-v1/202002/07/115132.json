{
  "title": "Rust x WASMのyewでTodoAppを作ってみた",
  "html": "<p>話題になってたのは去年くらいな気もするし今さら感はあるけど、今だからこそすごい化けてたりしないかなーという期待も込めて。</p><p>個人的には、WASMでWebアプリを作る時代になるとはあまり思えてないけど、まぁ試しておく価値はあるかなと思いその学びをメモ。<br />\n<br />\n</p>\n\n<div class=\"section\">\n    <h3>yewstack/yew</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/yewstack/yew\">GitHub - yewstack/yew: Rust / Wasm framework for building client web apps</a></p>\n\n    </blockquote>\n<p>RustでReactっぽいコードが書けて、それがWASMで動くので、型ありでちょっぱやなWebアプリが作れるぜ！っていうやつ。</p><p>今のバージョンは`0.11.0`で、最小のコードはこんな感じ。</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">use</span> <span class=\"synPreProc\">yew</span><span class=\"synSpecial\">::</span>{html, Callback, ClickEvent, Component, ComponentLink, Html, ShouldRender};\n\n<span class=\"synStatement\">struct</span> <span class=\"synIdentifier\">App</span> {\n    clicked: <span class=\"synType\">bool</span>,\n    onclick: Callback<span class=\"synStatement\">&lt;</span>ClickEvent<span class=\"synStatement\">&gt;</span>,\n}\n\n<span class=\"synStatement\">enum</span> <span class=\"synIdentifier\">Msg</span> {\n    Click,\n}\n\n<span class=\"synStatement\">impl</span> Component <span class=\"synStatement\">for</span> App {\n    <span class=\"synStatement\">type</span> <span class=\"synIdentifier\">Message</span> <span class=\"synStatement\">=</span> Msg;\n    <span class=\"synStatement\">type</span> <span class=\"synIdentifier\">Properties</span> <span class=\"synStatement\">=</span> ();\n\n    <span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">create</span>(_: <span class=\"synType\">Self</span><span class=\"synSpecial\">::</span>Properties, link: ComponentLink<span class=\"synStatement\">&lt;</span><span class=\"synType\">Self</span><span class=\"synStatement\">&gt;</span>) <span class=\"synStatement\">-&gt;</span> <span class=\"synType\">Self</span> {\n        App {\n            clicked: <span class=\"synConstant\">false</span>,\n            onclick: link.<span class=\"synIdentifier\">callback</span>(<span class=\"synStatement\">|</span>_<span class=\"synStatement\">|</span> <span class=\"synPreProc\">Msg</span><span class=\"synSpecial\">::</span>Click),\n        }\n    }\n\n    <span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">update</span>(<span class=\"synType\">&amp;mut</span> <span class=\"synConstant\">self</span>, msg: <span class=\"synType\">Self</span><span class=\"synSpecial\">::</span>Message) <span class=\"synStatement\">-&gt;</span> ShouldRender {\n        <span class=\"synStatement\">match</span> msg {\n            <span class=\"synPreProc\">Msg</span><span class=\"synSpecial\">::</span>Click <span class=\"synStatement\">=&gt;</span> {\n                <span class=\"synConstant\">self</span>.clicked <span class=\"synStatement\">=</span> <span class=\"synConstant\">true</span>;\n                <span class=\"synConstant\">true</span> <span class=\"synComment\">// Indicate that the Component should re-render</span>\n            }\n        }\n    }\n\n    <span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">view</span>(<span class=\"synType\">&amp;</span><span class=\"synConstant\">self</span>) <span class=\"synStatement\">-&gt;</span> Html {\n        <span class=\"synStatement\">let</span> button_text <span class=\"synStatement\">=</span> <span class=\"synStatement\">if</span> <span class=\"synConstant\">self</span>.clicked { <span class=\"synConstant\">&quot;Clicked!&quot;</span> } <span class=\"synStatement\">else</span> { <span class=\"synConstant\">&quot;Click me!&quot;</span> };\n\n        <span class=\"synPreProc\">html!</span> {\n            <span class=\"synStatement\">&lt;</span>button onclick<span class=\"synStatement\">=</span><span class=\"synType\">&amp;</span><span class=\"synConstant\">self</span>.onclick<span class=\"synStatement\">&gt;</span>{ button_text }<span class=\"synStatement\">&lt;/</span>button<span class=\"synStatement\">&gt;</span>\n        }\n    }\n}\n\n<span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">main</span>() {\n    <span class=\"synPreProc\">yew</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">start_app</span><span class=\"synSpecial\">::</span><span class=\"synStatement\">&lt;</span>App<span class=\"synStatement\">&gt;</span>();\n}\n</pre><p>なるほど。</p>\n\n<ul>\n<li>コンポーネント志向で使える</li>\n<li>`html!`マクロでJSX的な記述ができる</li>\n<li>`link.callback()`で`Message`を返すことで、Flux的に状態管理もできる</li>\n<li>Rustなので基本的にカチカチの型がつく</li>\n</ul><p>React x TypeScriptの現環境と比べると、おそらく同等の使用感とは言えないと思うけど、たしかに可能性は感じるかもしれない・・ｗ</p><p>コンパイルするとWASMをロードするグルーコードを含んだJSファイルができて、それをロードするだけ。</p>\n\n</div>\n<div class=\"section\">\n    <h3>やってみた</h3>\n    \n    <blockquote>\n        <p><a href=\"https://github.com/leader22/yew-todo\">GitHub - leader22/yew-todo</a></p>\n\n    </blockquote>\n<p>公式にもTodoMVCのサンプルがあるけど、1ファイルで完結してたりとreal-worldではないよな・・と思ったので、そこを重点的にカバーしつつ、最低限の機能だけ実装した。</p><p>そして得られた学びが以下。</p>\n\n<div class=\"section\">\n    <h4>ファイルを分割する</h4>\n    <p>これはRust本体の話で、別の記事にした。</p><p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Flealog.hateblo.jp%2Fentry%2F2020%2F01%2F28%2F150317\" title=\"Rustのモジュールとディレクトリの関係のおさらい - console.lealog();\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://lealog.hateblo.jp/entry/2020/01/28/150317\">lealog.hateblo.jp</a></cite></p><p></p>\n\n</div>\n<div class=\"section\">\n    <h4>Statefullコンポーネント</h4>\n    <pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">pub</span> <span class=\"synStatement\">struct</span> <span class=\"synIdentifier\">App</span> {}\n\n<span class=\"synStatement\">impl</span> Component <span class=\"synStatement\">for</span> App {\n    <span class=\"synStatement\">type</span> <span class=\"synIdentifier\">Message</span> <span class=\"synStatement\">=</span> ();\n    <span class=\"synStatement\">type</span> <span class=\"synIdentifier\">Properties</span> <span class=\"synStatement\">=</span> ();\n\n    <span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">create</span>(props: <span class=\"synType\">Self</span><span class=\"synSpecial\">::</span>Properties, link: ComponentLink<span class=\"synStatement\">&lt;</span><span class=\"synType\">Self</span><span class=\"synStatement\">&gt;</span>) <span class=\"synStatement\">-&gt;</span> <span class=\"synType\">Self</span> {}\n\n    <span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">update</span>(<span class=\"synType\">&amp;mut</span> <span class=\"synConstant\">self</span>, msg: <span class=\"synType\">Self</span><span class=\"synSpecial\">::</span>Message) <span class=\"synStatement\">-&gt;</span> ShouldRender {}\n\n    <span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">view</span>(<span class=\"synType\">&amp;</span><span class=\"synConstant\">self</span>) <span class=\"synStatement\">-&gt;</span> Html {}\n}\n</pre><p>（今や一線を退いたはずの）Reactのclassコンポーネントみたいなもので、`Component`たるためにはこれだけ定義が必要。</p><p>Hooksとかはないので、状態を持つコンポーネントの場合は、このスタイルでやるしかない。</p><p>このスタイルで定義したコンポーネントは、`view()`の中で`&lt;App />`形式で書ける。</p>\n\n</div>\n<div class=\"section\">\n    <h4>Statelessコンポーネント</h4>\n    <p>状態を持たない場合は、コンポーネントというか、ただの`Html`を返す関数にしてしまえばいい。</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">render_counter</span>(done_len: <span class=\"synType\">&amp;usize</span>, total_len: <span class=\"synType\">&amp;usize</span>) <span class=\"synStatement\">-&gt;</span> Html {\n    <span class=\"synPreProc\">html!</span> {\n        <span class=\"synStatement\">&lt;</span>p<span class=\"synStatement\">&gt;</span>{<span class=\"synPreProc\">format!</span>(<span class=\"synConstant\">&quot;{}/{} todo(s) are done!&quot;</span>, done_len, total_len)}<span class=\"synStatement\">&lt;/</span>p<span class=\"synStatement\">&gt;</span>\n    }\n}\n</pre><p>こっちのスタイルの場合は、`&lt;App />`的な感じでは書けず、`{render_counter(3, 5)}`みたくただの関数になっちゃう。</p>\n\n</div>\n<div class=\"section\">\n    <h4>関数をpropsで渡す</h4>\n    <p>配列をリストにして、各アイテムにイベントハンドラを設定したい場合など。</p><p>即時関数はRustでいうクロージャで、それを引数に取るためにはちょっと遠回りな型をつける必要がある・・。</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">pub</span> <span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">render_list</span><span class=\"synStatement\">&lt;</span>F<span class=\"synStatement\">&gt;</span>(todos: <span class=\"synType\">&amp;Vec</span><span class=\"synStatement\">&lt;</span>Todo<span class=\"synStatement\">&gt;</span>, on_click_done: F) <span class=\"synStatement\">-&gt;</span> Html\n<span class=\"synStatement\">where</span>\n    F: <span class=\"synType\">Fn</span>(<span class=\"synType\">usize</span>) <span class=\"synStatement\">-&gt;</span> Callback<span class=\"synStatement\">&lt;</span>ClickEvent<span class=\"synStatement\">&gt;</span>,\n{\n  <span class=\"synPreProc\">html!</span> {\n    <span class=\"synComment\">// ...</span>\n  }\n}\n</pre><p>そもそもRustに慣れてないと、何をどうすればいいんや・・ってなる。（なった）</p>\n\n</div>\n<div class=\"section\">\n    <h4>PropertiesはPropsではない</h4>\n    <p>ReactのPropsと同じ感覚では使えない。</p><p>イメージとしては、いったん自身で参照を確保して、それを使うって感じ・・？</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synPreProc\">#[derive(</span><span class=\"synType\">Clone</span><span class=\"synPreProc\">, </span><span class=\"synType\">PartialEq</span><span class=\"synPreProc\">, Properties)]</span>\n<span class=\"synStatement\">pub</span> <span class=\"synStatement\">struct</span> <span class=\"synIdentifier\">Props</span> {\n    <span class=\"synStatement\">pub</span> title: <span class=\"synType\">String</span>,\n    <span class=\"synPreProc\">#[props(required)]</span>\n    <span class=\"synStatement\">pub</span> onsignal: Callback<span class=\"synStatement\">&lt;</span>()<span class=\"synStatement\">&gt;</span>,\n}\n\n<span class=\"synStatement\">pub</span> <span class=\"synStatement\">struct</span> <span class=\"synIdentifier\">Button</span> {\n    link: ComponentLink<span class=\"synStatement\">&lt;</span><span class=\"synType\">Self</span><span class=\"synStatement\">&gt;</span>,\n    <span class=\"synComment\">// なので重複っぽくなる</span>\n    title: <span class=\"synType\">String</span>,\n    onsignal: Callback<span class=\"synStatement\">&lt;</span>()<span class=\"synStatement\">&gt;</span>,\n}\n\n<span class=\"synStatement\">impl</span> Component <span class=\"synStatement\">for</span> Button {\n    <span class=\"synStatement\">type</span> <span class=\"synIdentifier\">Message</span> <span class=\"synStatement\">=</span> Msg;\n    <span class=\"synStatement\">type</span> <span class=\"synIdentifier\">Properties</span> <span class=\"synStatement\">=</span> Props;\n\n    <span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">create</span>(props: <span class=\"synType\">Self</span><span class=\"synSpecial\">::</span>Properties, link: ComponentLink<span class=\"synStatement\">&lt;</span><span class=\"synType\">Self</span><span class=\"synStatement\">&gt;</span>) <span class=\"synStatement\">-&gt;</span> <span class=\"synType\">Self</span> {\n        <span class=\"synComment\">// いったん自身で保持する</span>\n        Button {\n            link,\n            title: props.title,\n            onsignal: props.onsignal,\n        }\n    }\n}\n</pre><p>ドキュメントにもそのオーバーヘッドについては記述があった。</p>\n\n    <blockquote>\n        <p><a href=\"https://yew.rs/docs/concepts/components/properties#memory-speed-overhead-of-properties\">Properties - Docs</a></p>\n\n    </blockquote>\n\n</div>\n<div class=\"section\">\n    <h4>`callback.emit()`</h4>\n    <p>親のコンポーネントから受け取ったハンドラを、子コンポーネント側で呼びたいとき。</p><p>`html!`内で展開するHTMLの`onclick`ハンドラなどは、`Callback<T>`になってる必要があって、外側から受け取ったハンドラに自身の状態をあわせて返すの無理では？！ってなった。</p><p>具体的には、Todoの入力欄で追加ボタンを押したときに、その入力内容を親に伝えたかった。</p>\n<pre class=\"code lang-rust\" data-lang=\"rust\" data-unlink><span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">update</span>(<span class=\"synType\">&amp;mut</span> <span class=\"synConstant\">self</span>, msg: <span class=\"synType\">Self</span><span class=\"synSpecial\">::</span>Message) <span class=\"synStatement\">-&gt;</span> ShouldRender {\n    <span class=\"synStatement\">match</span> msg {\n        <span class=\"synPreProc\">Msg</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">Update</span>(val) <span class=\"synStatement\">=&gt;</span> <span class=\"synConstant\">self</span>.value <span class=\"synStatement\">=</span> val,\n        <span class=\"synPreProc\">Msg</span><span class=\"synSpecial\">::</span>Add <span class=\"synStatement\">=&gt;</span> {\n            <span class=\"synComment\">// ここで紐付ける</span>\n            <span class=\"synConstant\">self</span>.on_add.<span class=\"synIdentifier\">emit</span>(<span class=\"synConstant\">self</span>.value.<span class=\"synIdentifier\">clone</span>());\n            <span class=\"synConstant\">self</span>.value.<span class=\"synIdentifier\">clear</span>();\n        }\n    }\n    <span class=\"synConstant\">true</span>\n}\n\n<span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">view</span>(<span class=\"synType\">&amp;</span><span class=\"synConstant\">self</span>) <span class=\"synStatement\">-&gt;</span> Html {\n    <span class=\"synPreProc\">html!</span> {\n        <span class=\"synStatement\">&lt;</span>div<span class=\"synStatement\">&gt;</span>\n            <span class=\"synStatement\">&lt;</span>input\n                <span class=\"synStatement\">type=</span><span class=\"synConstant\">&quot;text&quot;</span>\n                value<span class=\"synStatement\">=</span>{<span class=\"synType\">&amp;</span><span class=\"synConstant\">self</span>.value}\n                oninput<span class=\"synStatement\">=</span><span class=\"synConstant\">self</span>.link.<span class=\"synIdentifier\">callback</span>(<span class=\"synStatement\">|</span>e: InputData<span class=\"synStatement\">|</span> <span class=\"synPreProc\">Msg</span><span class=\"synSpecial\">::</span><span class=\"synIdentifier\">Update</span>(e.value))\n            <span class=\"synStatement\">/&gt;</span>\n            <span class=\"synComment\">// いつもどおりメッセージングだけする</span>\n            <span class=\"synStatement\">&lt;</span>button onclick<span class=\"synStatement\">=</span><span class=\"synConstant\">self</span>.link.<span class=\"synIdentifier\">callback</span>(<span class=\"synStatement\">|</span>_<span class=\"synStatement\">|</span> <span class=\"synPreProc\">Msg</span><span class=\"synSpecial\">::</span>Add)<span class=\"synStatement\">&gt;</span>{<span class=\"synConstant\">&quot;add&quot;</span>}<span class=\"synStatement\">&lt;/</span>button<span class=\"synStatement\">&gt;</span>\n        <span class=\"synStatement\">&lt;/</span>div<span class=\"synStatement\">&gt;</span>\n    }\n}\n</pre><p>子コンポーネントでのイベントハンドラはいつもどおり自身に対するメッセージングにして、そっちで処理する。<br />\nそして`Callback`には`emit()`という関数があるので、それを使えばいけた。</p><p>こうなってくるとやっぱ`EventEmitter`的なのが欲しくなるな・・と思ったけど今回は追わなかった。（そういう機能ありそう）</p>\n\n</div>\n</div>\n<div class=\"section\">\n    <h3>おわりに</h3>\n    <p>React x TypeScriptと比べるとまだまだではあるけど、どっちか選べ！って話ではないので、当初の想定通りだったというだけ。</p><p>今回はまったく振れてないけどCSSどうするんだ問題とかもまだあるし。</p>\n\n    <blockquote>\n        <p><a href=\"https://github.com/yewstack/yew/issues/533\">Styling Brainstorming &middot; Issue #533 &middot; yewstack/yew &middot; GitHub</a></p>\n\n    </blockquote>\n<p>今度は`wasm-bindgen`側のこういうの、あれば試してみたいなーと思ってます。</p>\n\n</div>"
}
